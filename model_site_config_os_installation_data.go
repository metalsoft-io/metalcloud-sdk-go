/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SiteConfigOSInstallationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteConfigOSInstallationData{}

// SiteConfigOSInstallationData struct for SiteConfigOSInstallationData
type SiteConfigOSInstallationData struct {
	// Repository details
	RepoURL string `json:"repoURL"`
	// ID of the DNS zone associated with the site
	DnsZoneId *int32 `json:"dnsZoneId,omitempty"`
	// List of DNS Servers
	DNSServers []string `json:"DNSServers"`
	// List of NTP Servers
	NTPServers []string `json:"NTPServers"`
	AdditionalProperties map[string]interface{}
}

type _SiteConfigOSInstallationData SiteConfigOSInstallationData

// NewSiteConfigOSInstallationData instantiates a new SiteConfigOSInstallationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteConfigOSInstallationData(repoURL string, dNSServers []string, nTPServers []string) *SiteConfigOSInstallationData {
	this := SiteConfigOSInstallationData{}
	this.RepoURL = repoURL
	this.DNSServers = dNSServers
	this.NTPServers = nTPServers
	return &this
}

// NewSiteConfigOSInstallationDataWithDefaults instantiates a new SiteConfigOSInstallationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteConfigOSInstallationDataWithDefaults() *SiteConfigOSInstallationData {
	this := SiteConfigOSInstallationData{}
	return &this
}

// GetRepoURL returns the RepoURL field value
func (o *SiteConfigOSInstallationData) GetRepoURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepoURL
}

// GetRepoURLOk returns a tuple with the RepoURL field value
// and a boolean to check if the value has been set.
func (o *SiteConfigOSInstallationData) GetRepoURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepoURL, true
}

// SetRepoURL sets field value
func (o *SiteConfigOSInstallationData) SetRepoURL(v string) {
	o.RepoURL = v
}

// GetDnsZoneId returns the DnsZoneId field value if set, zero value otherwise.
func (o *SiteConfigOSInstallationData) GetDnsZoneId() int32 {
	if o == nil || IsNil(o.DnsZoneId) {
		var ret int32
		return ret
	}
	return *o.DnsZoneId
}

// GetDnsZoneIdOk returns a tuple with the DnsZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteConfigOSInstallationData) GetDnsZoneIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsZoneId) {
		return nil, false
	}
	return o.DnsZoneId, true
}

// HasDnsZoneId returns a boolean if a field has been set.
func (o *SiteConfigOSInstallationData) HasDnsZoneId() bool {
	if o != nil && !IsNil(o.DnsZoneId) {
		return true
	}

	return false
}

// SetDnsZoneId gets a reference to the given int32 and assigns it to the DnsZoneId field.
func (o *SiteConfigOSInstallationData) SetDnsZoneId(v int32) {
	o.DnsZoneId = &v
}

// GetDNSServers returns the DNSServers field value
func (o *SiteConfigOSInstallationData) GetDNSServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DNSServers
}

// GetDNSServersOk returns a tuple with the DNSServers field value
// and a boolean to check if the value has been set.
func (o *SiteConfigOSInstallationData) GetDNSServersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DNSServers, true
}

// SetDNSServers sets field value
func (o *SiteConfigOSInstallationData) SetDNSServers(v []string) {
	o.DNSServers = v
}

// GetNTPServers returns the NTPServers field value
func (o *SiteConfigOSInstallationData) GetNTPServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NTPServers
}

// GetNTPServersOk returns a tuple with the NTPServers field value
// and a boolean to check if the value has been set.
func (o *SiteConfigOSInstallationData) GetNTPServersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NTPServers, true
}

// SetNTPServers sets field value
func (o *SiteConfigOSInstallationData) SetNTPServers(v []string) {
	o.NTPServers = v
}

func (o SiteConfigOSInstallationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteConfigOSInstallationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["repoURL"] = o.RepoURL
	if !IsNil(o.DnsZoneId) {
		toSerialize["dnsZoneId"] = o.DnsZoneId
	}
	toSerialize["DNSServers"] = o.DNSServers
	toSerialize["NTPServers"] = o.NTPServers

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteConfigOSInstallationData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repoURL",
		"DNSServers",
		"NTPServers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSiteConfigOSInstallationData := _SiteConfigOSInstallationData{}

	err = json.Unmarshal(data, &varSiteConfigOSInstallationData)

	if err != nil {
		return err
	}

	*o = SiteConfigOSInstallationData(varSiteConfigOSInstallationData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "repoURL")
		delete(additionalProperties, "dnsZoneId")
		delete(additionalProperties, "DNSServers")
		delete(additionalProperties, "NTPServers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteConfigOSInstallationData struct {
	value *SiteConfigOSInstallationData
	isSet bool
}

func (v NullableSiteConfigOSInstallationData) Get() *SiteConfigOSInstallationData {
	return v.value
}

func (v *NullableSiteConfigOSInstallationData) Set(val *SiteConfigOSInstallationData) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteConfigOSInstallationData) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteConfigOSInstallationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteConfigOSInstallationData(val *SiteConfigOSInstallationData) *NullableSiteConfigOSInstallationData {
	return &NullableSiteConfigOSInstallationData{value: val, isSet: true}
}

func (v NullableSiteConfigOSInstallationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteConfigOSInstallationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


