/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the EndpointInstanceCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointInstanceCreate{}

// EndpointInstanceCreate struct for EndpointInstanceCreate
type EndpointInstanceCreate struct {
	// The Product Instance label. Will be automatically generated if not provided.
	Label *string `json:"label,omitempty"`
	GroupId *int32 `json:"groupId,omitempty"`
	// Id of endpoint for this Instance.
	EndpointId int32 `json:"endpointId"`
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EndpointInstanceCreate EndpointInstanceCreate

// NewEndpointInstanceCreate instantiates a new EndpointInstanceCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointInstanceCreate(endpointId int32) *EndpointInstanceCreate {
	this := EndpointInstanceCreate{}
	this.EndpointId = endpointId
	return &this
}

// NewEndpointInstanceCreateWithDefaults instantiates a new EndpointInstanceCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointInstanceCreateWithDefaults() *EndpointInstanceCreate {
	this := EndpointInstanceCreate{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *EndpointInstanceCreate) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceCreate) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *EndpointInstanceCreate) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *EndpointInstanceCreate) SetLabel(v string) {
	o.Label = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *EndpointInstanceCreate) GetGroupId() int32 {
	if o == nil || IsNil(o.GroupId) {
		var ret int32
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceCreate) GetGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *EndpointInstanceCreate) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int32 and assigns it to the GroupId field.
func (o *EndpointInstanceCreate) SetGroupId(v int32) {
	o.GroupId = &v
}

// GetEndpointId returns the EndpointId field value
func (o *EndpointInstanceCreate) GetEndpointId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceCreate) GetEndpointIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndpointId, true
}

// SetEndpointId sets field value
func (o *EndpointInstanceCreate) SetEndpointId(v int32) {
	o.EndpointId = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EndpointInstanceCreate) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceCreate) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EndpointInstanceCreate) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *EndpointInstanceCreate) SetTags(v []string) {
	o.Tags = v
}

func (o EndpointInstanceCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointInstanceCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	toSerialize["endpointId"] = o.EndpointId
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EndpointInstanceCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endpointId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointInstanceCreate := _EndpointInstanceCreate{}

	err = json.Unmarshal(data, &varEndpointInstanceCreate)

	if err != nil {
		return err
	}

	*o = EndpointInstanceCreate(varEndpointInstanceCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "groupId")
		delete(additionalProperties, "endpointId")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEndpointInstanceCreate struct {
	value *EndpointInstanceCreate
	isSet bool
}

func (v NullableEndpointInstanceCreate) Get() *EndpointInstanceCreate {
	return v.value
}

func (v *NullableEndpointInstanceCreate) Set(val *EndpointInstanceCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointInstanceCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointInstanceCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointInstanceCreate(val *EndpointInstanceCreate) *NullableEndpointInstanceCreate {
	return &NullableEndpointInstanceCreate{value: val, isSet: true}
}

func (v NullableEndpointInstanceCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointInstanceCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


