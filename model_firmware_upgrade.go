/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the FirmwareUpgrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirmwareUpgrade{}

// FirmwareUpgrade struct for FirmwareUpgrade
type FirmwareUpgrade struct {
	// The desired firmware version. If not specified, the target version will be used.
	ComponentFirmwareNewVersion *string `json:"componentFirmwareNewVersion,omitempty"`
	// The URL where the firmware file is located. If not specified, the firmware will be downloaded from the stored firmware information
	FirmwareBinaryUrl *string `json:"firmwareBinaryUrl,omitempty"`
	// Flag to indicate if the firmware upgrade should be performed at reboot.
	ApplyOnReboot *bool `json:"applyOnReboot,omitempty"`
	// Flag to indicate if the firmware upgrade requires a reboot. Only taken into account if firmwareBinaryUrl is provided.
	RebootRequired *bool `json:"rebootRequired,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FirmwareUpgrade FirmwareUpgrade

// NewFirmwareUpgrade instantiates a new FirmwareUpgrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareUpgrade() *FirmwareUpgrade {
	this := FirmwareUpgrade{}
	var applyOnReboot bool = false
	this.ApplyOnReboot = &applyOnReboot
	var rebootRequired bool = false
	this.RebootRequired = &rebootRequired
	return &this
}

// NewFirmwareUpgradeWithDefaults instantiates a new FirmwareUpgrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareUpgradeWithDefaults() *FirmwareUpgrade {
	this := FirmwareUpgrade{}
	var applyOnReboot bool = false
	this.ApplyOnReboot = &applyOnReboot
	var rebootRequired bool = false
	this.RebootRequired = &rebootRequired
	return &this
}

// GetComponentFirmwareNewVersion returns the ComponentFirmwareNewVersion field value if set, zero value otherwise.
func (o *FirmwareUpgrade) GetComponentFirmwareNewVersion() string {
	if o == nil || IsNil(o.ComponentFirmwareNewVersion) {
		var ret string
		return ret
	}
	return *o.ComponentFirmwareNewVersion
}

// GetComponentFirmwareNewVersionOk returns a tuple with the ComponentFirmwareNewVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgrade) GetComponentFirmwareNewVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentFirmwareNewVersion) {
		return nil, false
	}
	return o.ComponentFirmwareNewVersion, true
}

// HasComponentFirmwareNewVersion returns a boolean if a field has been set.
func (o *FirmwareUpgrade) HasComponentFirmwareNewVersion() bool {
	if o != nil && !IsNil(o.ComponentFirmwareNewVersion) {
		return true
	}

	return false
}

// SetComponentFirmwareNewVersion gets a reference to the given string and assigns it to the ComponentFirmwareNewVersion field.
func (o *FirmwareUpgrade) SetComponentFirmwareNewVersion(v string) {
	o.ComponentFirmwareNewVersion = &v
}

// GetFirmwareBinaryUrl returns the FirmwareBinaryUrl field value if set, zero value otherwise.
func (o *FirmwareUpgrade) GetFirmwareBinaryUrl() string {
	if o == nil || IsNil(o.FirmwareBinaryUrl) {
		var ret string
		return ret
	}
	return *o.FirmwareBinaryUrl
}

// GetFirmwareBinaryUrlOk returns a tuple with the FirmwareBinaryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgrade) GetFirmwareBinaryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareBinaryUrl) {
		return nil, false
	}
	return o.FirmwareBinaryUrl, true
}

// HasFirmwareBinaryUrl returns a boolean if a field has been set.
func (o *FirmwareUpgrade) HasFirmwareBinaryUrl() bool {
	if o != nil && !IsNil(o.FirmwareBinaryUrl) {
		return true
	}

	return false
}

// SetFirmwareBinaryUrl gets a reference to the given string and assigns it to the FirmwareBinaryUrl field.
func (o *FirmwareUpgrade) SetFirmwareBinaryUrl(v string) {
	o.FirmwareBinaryUrl = &v
}

// GetApplyOnReboot returns the ApplyOnReboot field value if set, zero value otherwise.
func (o *FirmwareUpgrade) GetApplyOnReboot() bool {
	if o == nil || IsNil(o.ApplyOnReboot) {
		var ret bool
		return ret
	}
	return *o.ApplyOnReboot
}

// GetApplyOnRebootOk returns a tuple with the ApplyOnReboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgrade) GetApplyOnRebootOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyOnReboot) {
		return nil, false
	}
	return o.ApplyOnReboot, true
}

// HasApplyOnReboot returns a boolean if a field has been set.
func (o *FirmwareUpgrade) HasApplyOnReboot() bool {
	if o != nil && !IsNil(o.ApplyOnReboot) {
		return true
	}

	return false
}

// SetApplyOnReboot gets a reference to the given bool and assigns it to the ApplyOnReboot field.
func (o *FirmwareUpgrade) SetApplyOnReboot(v bool) {
	o.ApplyOnReboot = &v
}

// GetRebootRequired returns the RebootRequired field value if set, zero value otherwise.
func (o *FirmwareUpgrade) GetRebootRequired() bool {
	if o == nil || IsNil(o.RebootRequired) {
		var ret bool
		return ret
	}
	return *o.RebootRequired
}

// GetRebootRequiredOk returns a tuple with the RebootRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareUpgrade) GetRebootRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.RebootRequired) {
		return nil, false
	}
	return o.RebootRequired, true
}

// HasRebootRequired returns a boolean if a field has been set.
func (o *FirmwareUpgrade) HasRebootRequired() bool {
	if o != nil && !IsNil(o.RebootRequired) {
		return true
	}

	return false
}

// SetRebootRequired gets a reference to the given bool and assigns it to the RebootRequired field.
func (o *FirmwareUpgrade) SetRebootRequired(v bool) {
	o.RebootRequired = &v
}

func (o FirmwareUpgrade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirmwareUpgrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComponentFirmwareNewVersion) {
		toSerialize["componentFirmwareNewVersion"] = o.ComponentFirmwareNewVersion
	}
	if !IsNil(o.FirmwareBinaryUrl) {
		toSerialize["firmwareBinaryUrl"] = o.FirmwareBinaryUrl
	}
	if !IsNil(o.ApplyOnReboot) {
		toSerialize["applyOnReboot"] = o.ApplyOnReboot
	}
	if !IsNil(o.RebootRequired) {
		toSerialize["rebootRequired"] = o.RebootRequired
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FirmwareUpgrade) UnmarshalJSON(data []byte) (err error) {
	varFirmwareUpgrade := _FirmwareUpgrade{}

	err = json.Unmarshal(data, &varFirmwareUpgrade)

	if err != nil {
		return err
	}

	*o = FirmwareUpgrade(varFirmwareUpgrade)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "componentFirmwareNewVersion")
		delete(additionalProperties, "firmwareBinaryUrl")
		delete(additionalProperties, "applyOnReboot")
		delete(additionalProperties, "rebootRequired")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirmwareUpgrade struct {
	value *FirmwareUpgrade
	isSet bool
}

func (v NullableFirmwareUpgrade) Get() *FirmwareUpgrade {
	return v.value
}

func (v *NullableFirmwareUpgrade) Set(val *FirmwareUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareUpgrade(val *FirmwareUpgrade) *NullableFirmwareUpgrade {
	return &NullableFirmwareUpgrade{value: val, isSet: true}
}

func (v NullableFirmwareUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


