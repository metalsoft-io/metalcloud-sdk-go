/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomIso type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomIso{}

// CustomIso struct for CustomIso
type CustomIso struct {
	// The ID of the custom ISO
	Id float32 `json:"id"`
	// The ID of the user who owns the custom ISO. If public then null
	UserIdOwner *float32 `json:"userIdOwner,omitempty"`
	// The ID of the user who last edited the custom ISO
	ModifiedBy *float32 `json:"modifiedBy,omitempty"`
	// The name of the custom ISO
	Name string `json:"name"`
	// The display name of the custom ISO
	DisplayName string `json:"displayName"`
	// The type of the custom ISO
	Type string `json:"type"`
	// Flag to indicate if the custom ISO is public
	IsPublic float32 `json:"isPublic"`
	// The access URL of the custom ISO
	AccessUrl string `json:"accessUrl"`
	// The username used to access the custom ISO
	Username *string `json:"username,omitempty"`
	// The password used to access the custom ISO
	PasswordEncrypted *string `json:"passwordEncrypted,omitempty"`
	// The timestamp when the custom ISO was created
	CreatedTimestamp string `json:"createdTimestamp"`
	// The timestamp when the custom ISO was last updated
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// The URL to the image of the custom ISO for mounting on the server
	ImageUrl *string `json:"imageUrl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomIso CustomIso

// NewCustomIso instantiates a new CustomIso object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomIso(id float32, name string, displayName string, type_ string, isPublic float32, accessUrl string, createdTimestamp string, updatedTimestamp string) *CustomIso {
	this := CustomIso{}
	this.Id = id
	this.Name = name
	this.DisplayName = displayName
	this.Type = type_
	this.IsPublic = isPublic
	this.AccessUrl = accessUrl
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	return &this
}

// NewCustomIsoWithDefaults instantiates a new CustomIso object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomIsoWithDefaults() *CustomIso {
	this := CustomIso{}
	return &this
}

// GetId returns the Id field value
func (o *CustomIso) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CustomIso) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CustomIso) SetId(v float32) {
	o.Id = v
}

// GetUserIdOwner returns the UserIdOwner field value if set, zero value otherwise.
func (o *CustomIso) GetUserIdOwner() float32 {
	if o == nil || IsNil(o.UserIdOwner) {
		var ret float32
		return ret
	}
	return *o.UserIdOwner
}

// GetUserIdOwnerOk returns a tuple with the UserIdOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomIso) GetUserIdOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.UserIdOwner) {
		return nil, false
	}
	return o.UserIdOwner, true
}

// HasUserIdOwner returns a boolean if a field has been set.
func (o *CustomIso) HasUserIdOwner() bool {
	if o != nil && !IsNil(o.UserIdOwner) {
		return true
	}

	return false
}

// SetUserIdOwner gets a reference to the given float32 and assigns it to the UserIdOwner field.
func (o *CustomIso) SetUserIdOwner(v float32) {
	o.UserIdOwner = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *CustomIso) GetModifiedBy() float32 {
	if o == nil || IsNil(o.ModifiedBy) {
		var ret float32
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomIso) GetModifiedByOk() (*float32, bool) {
	if o == nil || IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *CustomIso) HasModifiedBy() bool {
	if o != nil && !IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given float32 and assigns it to the ModifiedBy field.
func (o *CustomIso) SetModifiedBy(v float32) {
	o.ModifiedBy = &v
}

// GetName returns the Name field value
func (o *CustomIso) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomIso) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomIso) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value
func (o *CustomIso) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CustomIso) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CustomIso) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetType returns the Type field value
func (o *CustomIso) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CustomIso) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CustomIso) SetType(v string) {
	o.Type = v
}

// GetIsPublic returns the IsPublic field value
func (o *CustomIso) GetIsPublic() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value
// and a boolean to check if the value has been set.
func (o *CustomIso) GetIsPublicOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublic, true
}

// SetIsPublic sets field value
func (o *CustomIso) SetIsPublic(v float32) {
	o.IsPublic = v
}

// GetAccessUrl returns the AccessUrl field value
func (o *CustomIso) GetAccessUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessUrl
}

// GetAccessUrlOk returns a tuple with the AccessUrl field value
// and a boolean to check if the value has been set.
func (o *CustomIso) GetAccessUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessUrl, true
}

// SetAccessUrl sets field value
func (o *CustomIso) SetAccessUrl(v string) {
	o.AccessUrl = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *CustomIso) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomIso) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *CustomIso) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *CustomIso) SetUsername(v string) {
	o.Username = &v
}

// GetPasswordEncrypted returns the PasswordEncrypted field value if set, zero value otherwise.
func (o *CustomIso) GetPasswordEncrypted() string {
	if o == nil || IsNil(o.PasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.PasswordEncrypted
}

// GetPasswordEncryptedOk returns a tuple with the PasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomIso) GetPasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordEncrypted) {
		return nil, false
	}
	return o.PasswordEncrypted, true
}

// HasPasswordEncrypted returns a boolean if a field has been set.
func (o *CustomIso) HasPasswordEncrypted() bool {
	if o != nil && !IsNil(o.PasswordEncrypted) {
		return true
	}

	return false
}

// SetPasswordEncrypted gets a reference to the given string and assigns it to the PasswordEncrypted field.
func (o *CustomIso) SetPasswordEncrypted(v string) {
	o.PasswordEncrypted = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *CustomIso) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *CustomIso) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *CustomIso) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *CustomIso) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *CustomIso) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *CustomIso) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise.
func (o *CustomIso) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl) {
		var ret string
		return ret
	}
	return *o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomIso) GetImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ImageUrl) {
		return nil, false
	}
	return o.ImageUrl, true
}

// HasImageUrl returns a boolean if a field has been set.
func (o *CustomIso) HasImageUrl() bool {
	if o != nil && !IsNil(o.ImageUrl) {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given string and assigns it to the ImageUrl field.
func (o *CustomIso) SetImageUrl(v string) {
	o.ImageUrl = &v
}

func (o CustomIso) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomIso) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.UserIdOwner) {
		toSerialize["userIdOwner"] = o.UserIdOwner
	}
	if !IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	toSerialize["name"] = o.Name
	toSerialize["displayName"] = o.DisplayName
	toSerialize["type"] = o.Type
	toSerialize["isPublic"] = o.IsPublic
	toSerialize["accessUrl"] = o.AccessUrl
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.PasswordEncrypted) {
		toSerialize["passwordEncrypted"] = o.PasswordEncrypted
	}
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.ImageUrl) {
		toSerialize["imageUrl"] = o.ImageUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomIso) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"displayName",
		"type",
		"isPublic",
		"accessUrl",
		"createdTimestamp",
		"updatedTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomIso := _CustomIso{}

	err = json.Unmarshal(data, &varCustomIso)

	if err != nil {
		return err
	}

	*o = CustomIso(varCustomIso)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "userIdOwner")
		delete(additionalProperties, "modifiedBy")
		delete(additionalProperties, "name")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "type")
		delete(additionalProperties, "isPublic")
		delete(additionalProperties, "accessUrl")
		delete(additionalProperties, "username")
		delete(additionalProperties, "passwordEncrypted")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "imageUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomIso struct {
	value *CustomIso
	isSet bool
}

func (v NullableCustomIso) Get() *CustomIso {
	return v.value
}

func (v *NullableCustomIso) Set(val *CustomIso) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomIso) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomIso) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomIso(val *CustomIso) *NullableCustomIso {
	return &NullableCustomIso{value: val, isSet: true}
}

func (v NullableCustomIso) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomIso) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


