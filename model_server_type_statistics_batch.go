/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerTypeStatisticsBatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTypeStatisticsBatch{}

// ServerTypeStatisticsBatch struct for ServerTypeStatisticsBatch
type ServerTypeStatisticsBatch struct {
	// An object having server type id as key and server count as value.
	ServerTypeIdToServerCount map[string]interface{} `json:"serverTypeIdToServerCount"`
	// An object having server type id as key and server information as value.
	ServerTypeIdToServerInformation map[string]interface{} `json:"serverTypeIdToServerInformation"`
	// The utilization report for the server types.
	UtilizationReport ServerTypeUtilizationReport `json:"utilizationReport"`
	AdditionalProperties map[string]interface{}
}

type _ServerTypeStatisticsBatch ServerTypeStatisticsBatch

// NewServerTypeStatisticsBatch instantiates a new ServerTypeStatisticsBatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTypeStatisticsBatch(serverTypeIdToServerCount map[string]interface{}, serverTypeIdToServerInformation map[string]interface{}, utilizationReport ServerTypeUtilizationReport) *ServerTypeStatisticsBatch {
	this := ServerTypeStatisticsBatch{}
	this.ServerTypeIdToServerCount = serverTypeIdToServerCount
	this.ServerTypeIdToServerInformation = serverTypeIdToServerInformation
	this.UtilizationReport = utilizationReport
	return &this
}

// NewServerTypeStatisticsBatchWithDefaults instantiates a new ServerTypeStatisticsBatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeStatisticsBatchWithDefaults() *ServerTypeStatisticsBatch {
	this := ServerTypeStatisticsBatch{}
	return &this
}

// GetServerTypeIdToServerCount returns the ServerTypeIdToServerCount field value
func (o *ServerTypeStatisticsBatch) GetServerTypeIdToServerCount() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ServerTypeIdToServerCount
}

// GetServerTypeIdToServerCountOk returns a tuple with the ServerTypeIdToServerCount field value
// and a boolean to check if the value has been set.
func (o *ServerTypeStatisticsBatch) GetServerTypeIdToServerCountOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ServerTypeIdToServerCount, true
}

// SetServerTypeIdToServerCount sets field value
func (o *ServerTypeStatisticsBatch) SetServerTypeIdToServerCount(v map[string]interface{}) {
	o.ServerTypeIdToServerCount = v
}

// GetServerTypeIdToServerInformation returns the ServerTypeIdToServerInformation field value
func (o *ServerTypeStatisticsBatch) GetServerTypeIdToServerInformation() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ServerTypeIdToServerInformation
}

// GetServerTypeIdToServerInformationOk returns a tuple with the ServerTypeIdToServerInformation field value
// and a boolean to check if the value has been set.
func (o *ServerTypeStatisticsBatch) GetServerTypeIdToServerInformationOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ServerTypeIdToServerInformation, true
}

// SetServerTypeIdToServerInformation sets field value
func (o *ServerTypeStatisticsBatch) SetServerTypeIdToServerInformation(v map[string]interface{}) {
	o.ServerTypeIdToServerInformation = v
}

// GetUtilizationReport returns the UtilizationReport field value
func (o *ServerTypeStatisticsBatch) GetUtilizationReport() ServerTypeUtilizationReport {
	if o == nil {
		var ret ServerTypeUtilizationReport
		return ret
	}

	return o.UtilizationReport
}

// GetUtilizationReportOk returns a tuple with the UtilizationReport field value
// and a boolean to check if the value has been set.
func (o *ServerTypeStatisticsBatch) GetUtilizationReportOk() (*ServerTypeUtilizationReport, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UtilizationReport, true
}

// SetUtilizationReport sets field value
func (o *ServerTypeStatisticsBatch) SetUtilizationReport(v ServerTypeUtilizationReport) {
	o.UtilizationReport = v
}

func (o ServerTypeStatisticsBatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTypeStatisticsBatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverTypeIdToServerCount"] = o.ServerTypeIdToServerCount
	toSerialize["serverTypeIdToServerInformation"] = o.ServerTypeIdToServerInformation
	toSerialize["utilizationReport"] = o.UtilizationReport

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerTypeStatisticsBatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverTypeIdToServerCount",
		"serverTypeIdToServerInformation",
		"utilizationReport",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerTypeStatisticsBatch := _ServerTypeStatisticsBatch{}

	err = json.Unmarshal(data, &varServerTypeStatisticsBatch)

	if err != nil {
		return err
	}

	*o = ServerTypeStatisticsBatch(varServerTypeStatisticsBatch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverTypeIdToServerCount")
		delete(additionalProperties, "serverTypeIdToServerInformation")
		delete(additionalProperties, "utilizationReport")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerTypeStatisticsBatch struct {
	value *ServerTypeStatisticsBatch
	isSet bool
}

func (v NullableServerTypeStatisticsBatch) Get() *ServerTypeStatisticsBatch {
	return v.value
}

func (v *NullableServerTypeStatisticsBatch) Set(val *ServerTypeStatisticsBatch) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTypeStatisticsBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTypeStatisticsBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTypeStatisticsBatch(val *ServerTypeStatisticsBatch) *NullableServerTypeStatisticsBatch {
	return &NullableServerTypeStatisticsBatch{value: val, isSet: true}
}

func (v NullableServerTypeStatisticsBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTypeStatisticsBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


