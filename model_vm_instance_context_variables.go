/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VmInstanceContextVariables type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmInstanceContextVariables{}

// VmInstanceContextVariables struct for VmInstanceContextVariables
type VmInstanceContextVariables struct {
	// The site variables.
	Site SiteVariables `json:"site"`
	// The site config variables.
	SiteConfig SiteConfigVariables `json:"siteConfig"`
	// The server variables.
	Server ServerVariables `json:"server"`
	// The server instance variables.
	ServerInstance ServerInstanceVariables `json:"serverInstance"`
	// The server instance group variables.
	ServerInstanceGroup ServerInstanceGroupVariables `json:"serverInstanceGroup"`
	// The infrastructure variables.
	Infrastructure InfrastructureVariables `json:"infrastructure"`
	// The server instance drives variables.
	Drives []DriveVariables `json:"drives"`
	// The server instance file shares variables.
	FileShares []FileShareVariables `json:"fileShares"`
	// The server instance buckets variables.
	Buckets []BucketVariables `json:"buckets"`
	// The server instance shared drives variables.
	SharedDrives []SharedDriveVariables `json:"sharedDrives"`
	// Additional variables
	Variables map[string]interface{} `json:"variables,omitempty"`
	// Secrets
	Secrets map[string]interface{} `json:"secrets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VmInstanceContextVariables VmInstanceContextVariables

// NewVmInstanceContextVariables instantiates a new VmInstanceContextVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmInstanceContextVariables(site SiteVariables, siteConfig SiteConfigVariables, server ServerVariables, serverInstance ServerInstanceVariables, serverInstanceGroup ServerInstanceGroupVariables, infrastructure InfrastructureVariables, drives []DriveVariables, fileShares []FileShareVariables, buckets []BucketVariables, sharedDrives []SharedDriveVariables) *VmInstanceContextVariables {
	this := VmInstanceContextVariables{}
	this.Site = site
	this.SiteConfig = siteConfig
	this.Server = server
	this.ServerInstance = serverInstance
	this.ServerInstanceGroup = serverInstanceGroup
	this.Infrastructure = infrastructure
	this.Drives = drives
	this.FileShares = fileShares
	this.Buckets = buckets
	this.SharedDrives = sharedDrives
	return &this
}

// NewVmInstanceContextVariablesWithDefaults instantiates a new VmInstanceContextVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmInstanceContextVariablesWithDefaults() *VmInstanceContextVariables {
	this := VmInstanceContextVariables{}
	return &this
}

// GetSite returns the Site field value
func (o *VmInstanceContextVariables) GetSite() SiteVariables {
	if o == nil {
		var ret SiteVariables
		return ret
	}

	return o.Site
}

// GetSiteOk returns a tuple with the Site field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetSiteOk() (*SiteVariables, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Site, true
}

// SetSite sets field value
func (o *VmInstanceContextVariables) SetSite(v SiteVariables) {
	o.Site = v
}

// GetSiteConfig returns the SiteConfig field value
func (o *VmInstanceContextVariables) GetSiteConfig() SiteConfigVariables {
	if o == nil {
		var ret SiteConfigVariables
		return ret
	}

	return o.SiteConfig
}

// GetSiteConfigOk returns a tuple with the SiteConfig field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetSiteConfigOk() (*SiteConfigVariables, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteConfig, true
}

// SetSiteConfig sets field value
func (o *VmInstanceContextVariables) SetSiteConfig(v SiteConfigVariables) {
	o.SiteConfig = v
}

// GetServer returns the Server field value
func (o *VmInstanceContextVariables) GetServer() ServerVariables {
	if o == nil {
		var ret ServerVariables
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetServerOk() (*ServerVariables, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *VmInstanceContextVariables) SetServer(v ServerVariables) {
	o.Server = v
}

// GetServerInstance returns the ServerInstance field value
func (o *VmInstanceContextVariables) GetServerInstance() ServerInstanceVariables {
	if o == nil {
		var ret ServerInstanceVariables
		return ret
	}

	return o.ServerInstance
}

// GetServerInstanceOk returns a tuple with the ServerInstance field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetServerInstanceOk() (*ServerInstanceVariables, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerInstance, true
}

// SetServerInstance sets field value
func (o *VmInstanceContextVariables) SetServerInstance(v ServerInstanceVariables) {
	o.ServerInstance = v
}

// GetServerInstanceGroup returns the ServerInstanceGroup field value
func (o *VmInstanceContextVariables) GetServerInstanceGroup() ServerInstanceGroupVariables {
	if o == nil {
		var ret ServerInstanceGroupVariables
		return ret
	}

	return o.ServerInstanceGroup
}

// GetServerInstanceGroupOk returns a tuple with the ServerInstanceGroup field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetServerInstanceGroupOk() (*ServerInstanceGroupVariables, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerInstanceGroup, true
}

// SetServerInstanceGroup sets field value
func (o *VmInstanceContextVariables) SetServerInstanceGroup(v ServerInstanceGroupVariables) {
	o.ServerInstanceGroup = v
}

// GetInfrastructure returns the Infrastructure field value
func (o *VmInstanceContextVariables) GetInfrastructure() InfrastructureVariables {
	if o == nil {
		var ret InfrastructureVariables
		return ret
	}

	return o.Infrastructure
}

// GetInfrastructureOk returns a tuple with the Infrastructure field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetInfrastructureOk() (*InfrastructureVariables, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Infrastructure, true
}

// SetInfrastructure sets field value
func (o *VmInstanceContextVariables) SetInfrastructure(v InfrastructureVariables) {
	o.Infrastructure = v
}

// GetDrives returns the Drives field value
func (o *VmInstanceContextVariables) GetDrives() []DriveVariables {
	if o == nil {
		var ret []DriveVariables
		return ret
	}

	return o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetDrivesOk() ([]DriveVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.Drives, true
}

// SetDrives sets field value
func (o *VmInstanceContextVariables) SetDrives(v []DriveVariables) {
	o.Drives = v
}

// GetFileShares returns the FileShares field value
func (o *VmInstanceContextVariables) GetFileShares() []FileShareVariables {
	if o == nil {
		var ret []FileShareVariables
		return ret
	}

	return o.FileShares
}

// GetFileSharesOk returns a tuple with the FileShares field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetFileSharesOk() ([]FileShareVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileShares, true
}

// SetFileShares sets field value
func (o *VmInstanceContextVariables) SetFileShares(v []FileShareVariables) {
	o.FileShares = v
}

// GetBuckets returns the Buckets field value
func (o *VmInstanceContextVariables) GetBuckets() []BucketVariables {
	if o == nil {
		var ret []BucketVariables
		return ret
	}

	return o.Buckets
}

// GetBucketsOk returns a tuple with the Buckets field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetBucketsOk() ([]BucketVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.Buckets, true
}

// SetBuckets sets field value
func (o *VmInstanceContextVariables) SetBuckets(v []BucketVariables) {
	o.Buckets = v
}

// GetSharedDrives returns the SharedDrives field value
func (o *VmInstanceContextVariables) GetSharedDrives() []SharedDriveVariables {
	if o == nil {
		var ret []SharedDriveVariables
		return ret
	}

	return o.SharedDrives
}

// GetSharedDrivesOk returns a tuple with the SharedDrives field value
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetSharedDrivesOk() ([]SharedDriveVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.SharedDrives, true
}

// SetSharedDrives sets field value
func (o *VmInstanceContextVariables) SetSharedDrives(v []SharedDriveVariables) {
	o.SharedDrives = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *VmInstanceContextVariables) GetVariables() map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *VmInstanceContextVariables) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]interface{} and assigns it to the Variables field.
func (o *VmInstanceContextVariables) SetVariables(v map[string]interface{}) {
	o.Variables = v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *VmInstanceContextVariables) GetSecrets() map[string]interface{} {
	if o == nil || IsNil(o.Secrets) {
		var ret map[string]interface{}
		return ret
	}
	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmInstanceContextVariables) GetSecretsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Secrets) {
		return map[string]interface{}{}, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *VmInstanceContextVariables) HasSecrets() bool {
	if o != nil && !IsNil(o.Secrets) {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given map[string]interface{} and assigns it to the Secrets field.
func (o *VmInstanceContextVariables) SetSecrets(v map[string]interface{}) {
	o.Secrets = v
}

func (o VmInstanceContextVariables) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmInstanceContextVariables) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["site"] = o.Site
	toSerialize["siteConfig"] = o.SiteConfig
	toSerialize["server"] = o.Server
	toSerialize["serverInstance"] = o.ServerInstance
	toSerialize["serverInstanceGroup"] = o.ServerInstanceGroup
	toSerialize["infrastructure"] = o.Infrastructure
	toSerialize["drives"] = o.Drives
	toSerialize["fileShares"] = o.FileShares
	toSerialize["buckets"] = o.Buckets
	toSerialize["sharedDrives"] = o.SharedDrives
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.Secrets) {
		toSerialize["secrets"] = o.Secrets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VmInstanceContextVariables) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"site",
		"siteConfig",
		"server",
		"serverInstance",
		"serverInstanceGroup",
		"infrastructure",
		"drives",
		"fileShares",
		"buckets",
		"sharedDrives",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmInstanceContextVariables := _VmInstanceContextVariables{}

	err = json.Unmarshal(data, &varVmInstanceContextVariables)

	if err != nil {
		return err
	}

	*o = VmInstanceContextVariables(varVmInstanceContextVariables)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "site")
		delete(additionalProperties, "siteConfig")
		delete(additionalProperties, "server")
		delete(additionalProperties, "serverInstance")
		delete(additionalProperties, "serverInstanceGroup")
		delete(additionalProperties, "infrastructure")
		delete(additionalProperties, "drives")
		delete(additionalProperties, "fileShares")
		delete(additionalProperties, "buckets")
		delete(additionalProperties, "sharedDrives")
		delete(additionalProperties, "variables")
		delete(additionalProperties, "secrets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVmInstanceContextVariables struct {
	value *VmInstanceContextVariables
	isSet bool
}

func (v NullableVmInstanceContextVariables) Get() *VmInstanceContextVariables {
	return v.value
}

func (v *NullableVmInstanceContextVariables) Set(val *VmInstanceContextVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableVmInstanceContextVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableVmInstanceContextVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmInstanceContextVariables(val *VmInstanceContextVariables) *NullableVmInstanceContextVariables {
	return &NullableVmInstanceContextVariables{value: val, isSet: true}
}

func (v NullableVmInstanceContextVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmInstanceContextVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


