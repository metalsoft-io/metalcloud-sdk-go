/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// InfrastructureExtensionActionStage the model 'InfrastructureExtensionActionStage'
type InfrastructureExtensionActionStage string

// List of InfrastructureExtensionActionStage
const (
	INFRASTRUCTUREEXTENSIONACTIONSTAGE_PRE_DEPLOY InfrastructureExtensionActionStage = "preDeploy"
	INFRASTRUCTUREEXTENSIONACTIONSTAGE_POST_DEPLOY InfrastructureExtensionActionStage = "postDeploy"
)

// All allowed values of InfrastructureExtensionActionStage enum
var AllowedInfrastructureExtensionActionStageEnumValues = []InfrastructureExtensionActionStage{
	"preDeploy",
	"postDeploy",
}

func (v *InfrastructureExtensionActionStage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InfrastructureExtensionActionStage(value)
	for _, existing := range AllowedInfrastructureExtensionActionStageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InfrastructureExtensionActionStage", value)
}

// NewInfrastructureExtensionActionStageFromValue returns a pointer to a valid InfrastructureExtensionActionStage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInfrastructureExtensionActionStageFromValue(v string) (*InfrastructureExtensionActionStage, error) {
	ev := InfrastructureExtensionActionStage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InfrastructureExtensionActionStage: valid values are %v", v, AllowedInfrastructureExtensionActionStageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InfrastructureExtensionActionStage) IsValid() bool {
	for _, existing := range AllowedInfrastructureExtensionActionStageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InfrastructureExtensionActionStage value
func (v InfrastructureExtensionActionStage) Ptr() *InfrastructureExtensionActionStage {
	return &v
}

type NullableInfrastructureExtensionActionStage struct {
	value *InfrastructureExtensionActionStage
	isSet bool
}

func (v NullableInfrastructureExtensionActionStage) Get() *InfrastructureExtensionActionStage {
	return v.value
}

func (v *NullableInfrastructureExtensionActionStage) Set(val *InfrastructureExtensionActionStage) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureExtensionActionStage) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureExtensionActionStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureExtensionActionStage(val *InfrastructureExtensionActionStage) *NullableInfrastructureExtensionActionStage {
	return &NullableInfrastructureExtensionActionStage{value: val, isSet: true}
}

func (v NullableInfrastructureExtensionActionStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureExtensionActionStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

