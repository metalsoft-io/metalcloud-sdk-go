/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerTypeUtilizationReportGrouped type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTypeUtilizationReportGrouped{}

// ServerTypeUtilizationReportGrouped struct for ServerTypeUtilizationReportGrouped
type ServerTypeUtilizationReportGrouped struct {
	// Ids of the servers having status registering.
	Registering []string `json:"registering"`
	// Ids of the servers having status available.
	Available []string `json:"available"`
	// Ids of the servers having status cleaning_required.
	CleaningRequired []string `json:"cleaning_required"`
	// Ids of the servers having status cleaning.
	Cleaning []string `json:"cleaning"`
	// Ids of the servers having status used.
	Used []string `json:"used"`
	// Ids of the servers having status used_registering.
	UsedRegistering []string `json:"used_registering"`
	// Ids of the servers having status defective.
	Defective []string `json:"defective"`
	// Ids of the servers having status removed_from_rack.
	RemovedFromRack []string `json:"removed_from_rack"`
	// Ids of the servers having status decommissioned.
	Decommissioned []string `json:"decommissioned"`
	// Ids of the servers having status updating_firmware.
	UpdatingFirmware []string `json:"updating_firmware"`
	// Ids of the servers having status used_diagnostics.
	UsedDiagnostics []string `json:"used_diagnostics"`
	// Ids of the servers having status pending_registration.
	PendingRegistration []string `json:"pending_registration"`
	// Ids of the servers having status unavailable.
	Unavailable []string `json:"unavailable"`
	AdditionalProperties map[string]interface{}
}

type _ServerTypeUtilizationReportGrouped ServerTypeUtilizationReportGrouped

// NewServerTypeUtilizationReportGrouped instantiates a new ServerTypeUtilizationReportGrouped object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTypeUtilizationReportGrouped(registering []string, available []string, cleaningRequired []string, cleaning []string, used []string, usedRegistering []string, defective []string, removedFromRack []string, decommissioned []string, updatingFirmware []string, usedDiagnostics []string, pendingRegistration []string, unavailable []string) *ServerTypeUtilizationReportGrouped {
	this := ServerTypeUtilizationReportGrouped{}
	this.Registering = registering
	this.Available = available
	this.CleaningRequired = cleaningRequired
	this.Cleaning = cleaning
	this.Used = used
	this.UsedRegistering = usedRegistering
	this.Defective = defective
	this.RemovedFromRack = removedFromRack
	this.Decommissioned = decommissioned
	this.UpdatingFirmware = updatingFirmware
	this.UsedDiagnostics = usedDiagnostics
	this.PendingRegistration = pendingRegistration
	this.Unavailable = unavailable
	return &this
}

// NewServerTypeUtilizationReportGroupedWithDefaults instantiates a new ServerTypeUtilizationReportGrouped object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeUtilizationReportGroupedWithDefaults() *ServerTypeUtilizationReportGrouped {
	this := ServerTypeUtilizationReportGrouped{}
	return &this
}

// GetRegistering returns the Registering field value
func (o *ServerTypeUtilizationReportGrouped) GetRegistering() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Registering
}

// GetRegisteringOk returns a tuple with the Registering field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetRegisteringOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Registering, true
}

// SetRegistering sets field value
func (o *ServerTypeUtilizationReportGrouped) SetRegistering(v []string) {
	o.Registering = v
}

// GetAvailable returns the Available field value
func (o *ServerTypeUtilizationReportGrouped) GetAvailable() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetAvailableOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Available, true
}

// SetAvailable sets field value
func (o *ServerTypeUtilizationReportGrouped) SetAvailable(v []string) {
	o.Available = v
}

// GetCleaningRequired returns the CleaningRequired field value
func (o *ServerTypeUtilizationReportGrouped) GetCleaningRequired() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CleaningRequired
}

// GetCleaningRequiredOk returns a tuple with the CleaningRequired field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetCleaningRequiredOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CleaningRequired, true
}

// SetCleaningRequired sets field value
func (o *ServerTypeUtilizationReportGrouped) SetCleaningRequired(v []string) {
	o.CleaningRequired = v
}

// GetCleaning returns the Cleaning field value
func (o *ServerTypeUtilizationReportGrouped) GetCleaning() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Cleaning
}

// GetCleaningOk returns a tuple with the Cleaning field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetCleaningOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cleaning, true
}

// SetCleaning sets field value
func (o *ServerTypeUtilizationReportGrouped) SetCleaning(v []string) {
	o.Cleaning = v
}

// GetUsed returns the Used field value
func (o *ServerTypeUtilizationReportGrouped) GetUsed() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Used
}

// GetUsedOk returns a tuple with the Used field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetUsedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Used, true
}

// SetUsed sets field value
func (o *ServerTypeUtilizationReportGrouped) SetUsed(v []string) {
	o.Used = v
}

// GetUsedRegistering returns the UsedRegistering field value
func (o *ServerTypeUtilizationReportGrouped) GetUsedRegistering() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UsedRegistering
}

// GetUsedRegisteringOk returns a tuple with the UsedRegistering field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetUsedRegisteringOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedRegistering, true
}

// SetUsedRegistering sets field value
func (o *ServerTypeUtilizationReportGrouped) SetUsedRegistering(v []string) {
	o.UsedRegistering = v
}

// GetDefective returns the Defective field value
func (o *ServerTypeUtilizationReportGrouped) GetDefective() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Defective
}

// GetDefectiveOk returns a tuple with the Defective field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetDefectiveOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Defective, true
}

// SetDefective sets field value
func (o *ServerTypeUtilizationReportGrouped) SetDefective(v []string) {
	o.Defective = v
}

// GetRemovedFromRack returns the RemovedFromRack field value
func (o *ServerTypeUtilizationReportGrouped) GetRemovedFromRack() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RemovedFromRack
}

// GetRemovedFromRackOk returns a tuple with the RemovedFromRack field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetRemovedFromRackOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovedFromRack, true
}

// SetRemovedFromRack sets field value
func (o *ServerTypeUtilizationReportGrouped) SetRemovedFromRack(v []string) {
	o.RemovedFromRack = v
}

// GetDecommissioned returns the Decommissioned field value
func (o *ServerTypeUtilizationReportGrouped) GetDecommissioned() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Decommissioned
}

// GetDecommissionedOk returns a tuple with the Decommissioned field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetDecommissionedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Decommissioned, true
}

// SetDecommissioned sets field value
func (o *ServerTypeUtilizationReportGrouped) SetDecommissioned(v []string) {
	o.Decommissioned = v
}

// GetUpdatingFirmware returns the UpdatingFirmware field value
func (o *ServerTypeUtilizationReportGrouped) GetUpdatingFirmware() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UpdatingFirmware
}

// GetUpdatingFirmwareOk returns a tuple with the UpdatingFirmware field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetUpdatingFirmwareOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatingFirmware, true
}

// SetUpdatingFirmware sets field value
func (o *ServerTypeUtilizationReportGrouped) SetUpdatingFirmware(v []string) {
	o.UpdatingFirmware = v
}

// GetUsedDiagnostics returns the UsedDiagnostics field value
func (o *ServerTypeUtilizationReportGrouped) GetUsedDiagnostics() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UsedDiagnostics
}

// GetUsedDiagnosticsOk returns a tuple with the UsedDiagnostics field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetUsedDiagnosticsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedDiagnostics, true
}

// SetUsedDiagnostics sets field value
func (o *ServerTypeUtilizationReportGrouped) SetUsedDiagnostics(v []string) {
	o.UsedDiagnostics = v
}

// GetPendingRegistration returns the PendingRegistration field value
func (o *ServerTypeUtilizationReportGrouped) GetPendingRegistration() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PendingRegistration
}

// GetPendingRegistrationOk returns a tuple with the PendingRegistration field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetPendingRegistrationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PendingRegistration, true
}

// SetPendingRegistration sets field value
func (o *ServerTypeUtilizationReportGrouped) SetPendingRegistration(v []string) {
	o.PendingRegistration = v
}

// GetUnavailable returns the Unavailable field value
func (o *ServerTypeUtilizationReportGrouped) GetUnavailable() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Unavailable
}

// GetUnavailableOk returns a tuple with the Unavailable field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReportGrouped) GetUnavailableOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unavailable, true
}

// SetUnavailable sets field value
func (o *ServerTypeUtilizationReportGrouped) SetUnavailable(v []string) {
	o.Unavailable = v
}

func (o ServerTypeUtilizationReportGrouped) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTypeUtilizationReportGrouped) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registering"] = o.Registering
	toSerialize["available"] = o.Available
	toSerialize["cleaning_required"] = o.CleaningRequired
	toSerialize["cleaning"] = o.Cleaning
	toSerialize["used"] = o.Used
	toSerialize["used_registering"] = o.UsedRegistering
	toSerialize["defective"] = o.Defective
	toSerialize["removed_from_rack"] = o.RemovedFromRack
	toSerialize["decommissioned"] = o.Decommissioned
	toSerialize["updating_firmware"] = o.UpdatingFirmware
	toSerialize["used_diagnostics"] = o.UsedDiagnostics
	toSerialize["pending_registration"] = o.PendingRegistration
	toSerialize["unavailable"] = o.Unavailable

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerTypeUtilizationReportGrouped) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registering",
		"available",
		"cleaning_required",
		"cleaning",
		"used",
		"used_registering",
		"defective",
		"removed_from_rack",
		"decommissioned",
		"updating_firmware",
		"used_diagnostics",
		"pending_registration",
		"unavailable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerTypeUtilizationReportGrouped := _ServerTypeUtilizationReportGrouped{}

	err = json.Unmarshal(data, &varServerTypeUtilizationReportGrouped)

	if err != nil {
		return err
	}

	*o = ServerTypeUtilizationReportGrouped(varServerTypeUtilizationReportGrouped)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "registering")
		delete(additionalProperties, "available")
		delete(additionalProperties, "cleaning_required")
		delete(additionalProperties, "cleaning")
		delete(additionalProperties, "used")
		delete(additionalProperties, "used_registering")
		delete(additionalProperties, "defective")
		delete(additionalProperties, "removed_from_rack")
		delete(additionalProperties, "decommissioned")
		delete(additionalProperties, "updating_firmware")
		delete(additionalProperties, "used_diagnostics")
		delete(additionalProperties, "pending_registration")
		delete(additionalProperties, "unavailable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerTypeUtilizationReportGrouped struct {
	value *ServerTypeUtilizationReportGrouped
	isSet bool
}

func (v NullableServerTypeUtilizationReportGrouped) Get() *ServerTypeUtilizationReportGrouped {
	return v.value
}

func (v *NullableServerTypeUtilizationReportGrouped) Set(val *ServerTypeUtilizationReportGrouped) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTypeUtilizationReportGrouped) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTypeUtilizationReportGrouped) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTypeUtilizationReportGrouped(val *ServerTypeUtilizationReportGrouped) *NullableServerTypeUtilizationReportGrouped {
	return &NullableServerTypeUtilizationReportGrouped{value: val, isSet: true}
}

func (v NullableServerTypeUtilizationReportGrouped) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTypeUtilizationReportGrouped) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


