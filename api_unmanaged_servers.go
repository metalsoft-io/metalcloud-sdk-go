/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// UnmanagedServersAPIService UnmanagedServersAPI service
type UnmanagedServersAPIService service

type UnmanagedServersAPIImportGenericEndpointServerRequest struct {
	ctx context.Context
	ApiService *UnmanagedServersAPIService
	serverGenericEndpointImport *ServerGenericEndpointImport
}

// The server data to import
func (r UnmanagedServersAPIImportGenericEndpointServerRequest) ServerGenericEndpointImport(serverGenericEndpointImport ServerGenericEndpointImport) UnmanagedServersAPIImportGenericEndpointServerRequest {
	r.serverGenericEndpointImport = &serverGenericEndpointImport
	return r
}

func (r UnmanagedServersAPIImportGenericEndpointServerRequest) Execute() (*Server, *http.Response, error) {
	return r.ApiService.ImportGenericEndpointServerExecute(r)
}

/*
ImportGenericEndpointServer Import Generic Endpoint Server

Import a generic endpoint server and returns the server data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UnmanagedServersAPIImportGenericEndpointServerRequest
*/
func (a *UnmanagedServersAPIService) ImportGenericEndpointServer(ctx context.Context) UnmanagedServersAPIImportGenericEndpointServerRequest {
	return UnmanagedServersAPIImportGenericEndpointServerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Server
func (a *UnmanagedServersAPIService) ImportGenericEndpointServerExecute(r UnmanagedServersAPIImportGenericEndpointServerRequest) (*Server, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Server
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnmanagedServersAPIService.ImportGenericEndpointServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/generic-endpoint/import"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serverGenericEndpointImport == nil {
		return localVarReturnValue, nil, reportError("serverGenericEndpointImport is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serverGenericEndpointImport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UnmanagedServersAPIImportUnmanagedServerRequest struct {
	ctx context.Context
	ApiService *UnmanagedServersAPIService
	serverUnmanagedImport *ServerUnmanagedImport
}

// The unmanaged server data to import
func (r UnmanagedServersAPIImportUnmanagedServerRequest) ServerUnmanagedImport(serverUnmanagedImport ServerUnmanagedImport) UnmanagedServersAPIImportUnmanagedServerRequest {
	r.serverUnmanagedImport = &serverUnmanagedImport
	return r
}

func (r UnmanagedServersAPIImportUnmanagedServerRequest) Execute() (*Server, *http.Response, error) {
	return r.ApiService.ImportUnmanagedServerExecute(r)
}

/*
ImportUnmanagedServer Import Unmanaged Server

Import an unmanaged server and returns the server data

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UnmanagedServersAPIImportUnmanagedServerRequest
*/
func (a *UnmanagedServersAPIService) ImportUnmanagedServer(ctx context.Context) UnmanagedServersAPIImportUnmanagedServerRequest {
	return UnmanagedServersAPIImportUnmanagedServerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Server
func (a *UnmanagedServersAPIService) ImportUnmanagedServerExecute(r UnmanagedServersAPIImportUnmanagedServerRequest) (*Server, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Server
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnmanagedServersAPIService.ImportUnmanagedServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/unmanaged/import"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serverUnmanagedImport == nil {
		return localVarReturnValue, nil, reportError("serverUnmanagedImport is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serverUnmanagedImport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
