/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the JobStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobStatistics{}

// JobStatistics struct for JobStatistics
type JobStatistics struct {
	// The number of jobs for each status
	StatusToCount map[string]interface{} `json:"statusToCount"`
	// The total number of jobs in the archive
	ArchivedCount int32 `json:"archivedCount"`
	AdditionalProperties map[string]interface{}
}

type _JobStatistics JobStatistics

// NewJobStatistics instantiates a new JobStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobStatistics(statusToCount map[string]interface{}, archivedCount int32) *JobStatistics {
	this := JobStatistics{}
	this.StatusToCount = statusToCount
	this.ArchivedCount = archivedCount
	return &this
}

// NewJobStatisticsWithDefaults instantiates a new JobStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobStatisticsWithDefaults() *JobStatistics {
	this := JobStatistics{}
	return &this
}

// GetStatusToCount returns the StatusToCount field value
func (o *JobStatistics) GetStatusToCount() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.StatusToCount
}

// GetStatusToCountOk returns a tuple with the StatusToCount field value
// and a boolean to check if the value has been set.
func (o *JobStatistics) GetStatusToCountOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.StatusToCount, true
}

// SetStatusToCount sets field value
func (o *JobStatistics) SetStatusToCount(v map[string]interface{}) {
	o.StatusToCount = v
}

// GetArchivedCount returns the ArchivedCount field value
func (o *JobStatistics) GetArchivedCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ArchivedCount
}

// GetArchivedCountOk returns a tuple with the ArchivedCount field value
// and a boolean to check if the value has been set.
func (o *JobStatistics) GetArchivedCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchivedCount, true
}

// SetArchivedCount sets field value
func (o *JobStatistics) SetArchivedCount(v int32) {
	o.ArchivedCount = v
}

func (o JobStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["statusToCount"] = o.StatusToCount
	toSerialize["archivedCount"] = o.ArchivedCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statusToCount",
		"archivedCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobStatistics := _JobStatistics{}

	err = json.Unmarshal(data, &varJobStatistics)

	if err != nil {
		return err
	}

	*o = JobStatistics(varJobStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "statusToCount")
		delete(additionalProperties, "archivedCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobStatistics struct {
	value *JobStatistics
	isSet bool
}

func (v NullableJobStatistics) Get() *JobStatistics {
	return v.value
}

func (v *NullableJobStatistics) Set(val *JobStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableJobStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableJobStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobStatistics(val *JobStatistics) *NullableJobStatistics {
	return &NullableJobStatistics{value: val, isSet: true}
}

func (v NullableJobStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


