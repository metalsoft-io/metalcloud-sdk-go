/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the PartialLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartialLocation{}

// PartialLocation struct for PartialLocation
type PartialLocation struct {
	// Address of the site
	Address *string `json:"address,omitempty"`
	// Latitude of the site
	Latitude *float32 `json:"latitude,omitempty"`
	// Longitude of the site
	Longitude *float32 `json:"longitude,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PartialLocation PartialLocation

// NewPartialLocation instantiates a new PartialLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialLocation() *PartialLocation {
	this := PartialLocation{}
	return &this
}

// NewPartialLocationWithDefaults instantiates a new PartialLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialLocationWithDefaults() *PartialLocation {
	this := PartialLocation{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PartialLocation) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialLocation) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PartialLocation) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *PartialLocation) SetAddress(v string) {
	o.Address = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *PartialLocation) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialLocation) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *PartialLocation) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *PartialLocation) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *PartialLocation) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialLocation) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *PartialLocation) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *PartialLocation) SetLongitude(v float32) {
	o.Longitude = &v
}

func (o PartialLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartialLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PartialLocation) UnmarshalJSON(data []byte) (err error) {
	varPartialLocation := _PartialLocation{}

	err = json.Unmarshal(data, &varPartialLocation)

	if err != nil {
		return err
	}

	*o = PartialLocation(varPartialLocation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePartialLocation struct {
	value *PartialLocation
	isSet bool
}

func (v NullablePartialLocation) Get() *PartialLocation {
	return v.value
}

func (v *NullablePartialLocation) Set(val *PartialLocation) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialLocation) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialLocation(val *PartialLocation) *NullablePartialLocation {
	return &NullablePartialLocation{value: val, isSet: true}
}

func (v NullablePartialLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


