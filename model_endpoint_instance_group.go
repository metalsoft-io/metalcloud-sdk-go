/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the EndpointInstanceGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointInstanceGroup{}

// EndpointInstanceGroup struct for EndpointInstanceGroup
type EndpointInstanceGroup struct {
	// The Product Instance ID.
	Id int32 `json:"id"`
	// Revision number
	Revision int32 `json:"revision"`
	// The Product Instance label. Will be automatically generated if not provided.
	Label string `json:"label"`
	// Timestamp of the Product Instance creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Timestamp of the latest update of the Product Instance.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Subdomain of the Product Instance.
	Subdomain *string `json:"subdomain,omitempty"`
	// Subdomain permanent of the Product Instance.
	SubdomainPermanent *string `json:"subdomainPermanent,omitempty"`
	// Id of the DNS subdomain for the Product Instance
	DnsSubdomainId *int32 `json:"dnsSubdomainId,omitempty"`
	// Id of the permanent DNS subdomain for the Product Instance
	DnsSubdomainPermanentId *int32 `json:"dnsSubdomainPermanentId,omitempty"`
	EndpointGroupName *string `json:"endpointGroupName,omitempty"`
	InfrastructureId int32 `json:"infrastructureId"`
	ExtensionInstanceId *int32 `json:"extensionInstanceId,omitempty"`
	// Custom hostname for the DNS Load Balancing record. If set, this will be used as the DNS Load Balancing record name instead of the default \"endpoint-instance-group\". The hostname must be a valid DNS subdomain and can only contain alphanumeric characters, hyphens, and underscores. This will only take effect if the property \"dnsLoadBalancingRecord\" is true. It will be automatically suffixed with the endpoint instance group ID (e.g., \"-34\") to ensure the uniqueness of the resulting DNS name.
	Hostname *string `json:"hostname,omitempty"`
	// Current status of the Endpoint Instance Group.
	ServiceStatus string `json:"serviceStatus"`
	// The resource pool assigned to this instance array
	ResourcePoolId *int32 `json:"resourcePoolId,omitempty"`
	NetworkEndpointGroupId *int32 `json:"networkEndpointGroupId,omitempty"`
	Meta GenericMeta `json:"meta"`
	Config *EndpointInstanceGroupConfiguration `json:"config,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EndpointInstanceGroup EndpointInstanceGroup

// NewEndpointInstanceGroup instantiates a new EndpointInstanceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointInstanceGroup(id int32, revision int32, label string, createdTimestamp string, updatedTimestamp string, infrastructureId int32, serviceStatus string, meta GenericMeta) *EndpointInstanceGroup {
	this := EndpointInstanceGroup{}
	this.Id = id
	this.Revision = revision
	this.Label = label
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.InfrastructureId = infrastructureId
	this.ServiceStatus = serviceStatus
	this.Meta = meta
	return &this
}

// NewEndpointInstanceGroupWithDefaults instantiates a new EndpointInstanceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointInstanceGroupWithDefaults() *EndpointInstanceGroup {
	this := EndpointInstanceGroup{}
	return &this
}

// GetId returns the Id field value
func (o *EndpointInstanceGroup) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EndpointInstanceGroup) SetId(v int32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *EndpointInstanceGroup) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *EndpointInstanceGroup) SetRevision(v int32) {
	o.Revision = v
}

// GetLabel returns the Label field value
func (o *EndpointInstanceGroup) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *EndpointInstanceGroup) SetLabel(v string) {
	o.Label = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *EndpointInstanceGroup) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *EndpointInstanceGroup) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *EndpointInstanceGroup) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *EndpointInstanceGroup) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *EndpointInstanceGroup) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetSubdomainPermanent() string {
	if o == nil || IsNil(o.SubdomainPermanent) {
		var ret string
		return ret
	}
	return *o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil || IsNil(o.SubdomainPermanent) {
		return nil, false
	}
	return o.SubdomainPermanent, true
}

// HasSubdomainPermanent returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasSubdomainPermanent() bool {
	if o != nil && !IsNil(o.SubdomainPermanent) {
		return true
	}

	return false
}

// SetSubdomainPermanent gets a reference to the given string and assigns it to the SubdomainPermanent field.
func (o *EndpointInstanceGroup) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = &v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetDnsSubdomainId() int32 {
	if o == nil || IsNil(o.DnsSubdomainId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetDnsSubdomainIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainId) {
		return nil, false
	}
	return o.DnsSubdomainId, true
}

// HasDnsSubdomainId returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasDnsSubdomainId() bool {
	if o != nil && !IsNil(o.DnsSubdomainId) {
		return true
	}

	return false
}

// SetDnsSubdomainId gets a reference to the given int32 and assigns it to the DnsSubdomainId field.
func (o *EndpointInstanceGroup) SetDnsSubdomainId(v int32) {
	o.DnsSubdomainId = &v
}

// GetDnsSubdomainPermanentId returns the DnsSubdomainPermanentId field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetDnsSubdomainPermanentId() int32 {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainPermanentId
}

// GetDnsSubdomainPermanentIdOk returns a tuple with the DnsSubdomainPermanentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetDnsSubdomainPermanentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		return nil, false
	}
	return o.DnsSubdomainPermanentId, true
}

// HasDnsSubdomainPermanentId returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasDnsSubdomainPermanentId() bool {
	if o != nil && !IsNil(o.DnsSubdomainPermanentId) {
		return true
	}

	return false
}

// SetDnsSubdomainPermanentId gets a reference to the given int32 and assigns it to the DnsSubdomainPermanentId field.
func (o *EndpointInstanceGroup) SetDnsSubdomainPermanentId(v int32) {
	o.DnsSubdomainPermanentId = &v
}

// GetEndpointGroupName returns the EndpointGroupName field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetEndpointGroupName() string {
	if o == nil || IsNil(o.EndpointGroupName) {
		var ret string
		return ret
	}
	return *o.EndpointGroupName
}

// GetEndpointGroupNameOk returns a tuple with the EndpointGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetEndpointGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.EndpointGroupName) {
		return nil, false
	}
	return o.EndpointGroupName, true
}

// HasEndpointGroupName returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasEndpointGroupName() bool {
	if o != nil && !IsNil(o.EndpointGroupName) {
		return true
	}

	return false
}

// SetEndpointGroupName gets a reference to the given string and assigns it to the EndpointGroupName field.
func (o *EndpointInstanceGroup) SetEndpointGroupName(v string) {
	o.EndpointGroupName = &v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *EndpointInstanceGroup) GetInfrastructureId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetInfrastructureIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *EndpointInstanceGroup) SetInfrastructureId(v int32) {
	o.InfrastructureId = v
}

// GetExtensionInstanceId returns the ExtensionInstanceId field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetExtensionInstanceId() int32 {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		var ret int32
		return ret
	}
	return *o.ExtensionInstanceId
}

// GetExtensionInstanceIdOk returns a tuple with the ExtensionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetExtensionInstanceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		return nil, false
	}
	return o.ExtensionInstanceId, true
}

// HasExtensionInstanceId returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasExtensionInstanceId() bool {
	if o != nil && !IsNil(o.ExtensionInstanceId) {
		return true
	}

	return false
}

// SetExtensionInstanceId gets a reference to the given int32 and assigns it to the ExtensionInstanceId field.
func (o *EndpointInstanceGroup) SetExtensionInstanceId(v int32) {
	o.ExtensionInstanceId = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *EndpointInstanceGroup) SetHostname(v string) {
	o.Hostname = &v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *EndpointInstanceGroup) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *EndpointInstanceGroup) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetResourcePoolId returns the ResourcePoolId field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetResourcePoolId() int32 {
	if o == nil || IsNil(o.ResourcePoolId) {
		var ret int32
		return ret
	}
	return *o.ResourcePoolId
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetResourcePoolIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourcePoolId) {
		return nil, false
	}
	return o.ResourcePoolId, true
}

// HasResourcePoolId returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasResourcePoolId() bool {
	if o != nil && !IsNil(o.ResourcePoolId) {
		return true
	}

	return false
}

// SetResourcePoolId gets a reference to the given int32 and assigns it to the ResourcePoolId field.
func (o *EndpointInstanceGroup) SetResourcePoolId(v int32) {
	o.ResourcePoolId = &v
}

// GetNetworkEndpointGroupId returns the NetworkEndpointGroupId field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetNetworkEndpointGroupId() int32 {
	if o == nil || IsNil(o.NetworkEndpointGroupId) {
		var ret int32
		return ret
	}
	return *o.NetworkEndpointGroupId
}

// GetNetworkEndpointGroupIdOk returns a tuple with the NetworkEndpointGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetNetworkEndpointGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkEndpointGroupId) {
		return nil, false
	}
	return o.NetworkEndpointGroupId, true
}

// HasNetworkEndpointGroupId returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasNetworkEndpointGroupId() bool {
	if o != nil && !IsNil(o.NetworkEndpointGroupId) {
		return true
	}

	return false
}

// SetNetworkEndpointGroupId gets a reference to the given int32 and assigns it to the NetworkEndpointGroupId field.
func (o *EndpointInstanceGroup) SetNetworkEndpointGroupId(v int32) {
	o.NetworkEndpointGroupId = &v
}

// GetMeta returns the Meta field value
func (o *EndpointInstanceGroup) GetMeta() GenericMeta {
	if o == nil {
		var ret GenericMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetMetaOk() (*GenericMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *EndpointInstanceGroup) SetMeta(v GenericMeta) {
	o.Meta = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetConfig() EndpointInstanceGroupConfiguration {
	if o == nil || IsNil(o.Config) {
		var ret EndpointInstanceGroupConfiguration
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetConfigOk() (*EndpointInstanceGroupConfiguration, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given EndpointInstanceGroupConfiguration and assigns it to the Config field.
func (o *EndpointInstanceGroup) SetConfig(v EndpointInstanceGroupConfiguration) {
	o.Config = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *EndpointInstanceGroup) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroup) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *EndpointInstanceGroup) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *EndpointInstanceGroup) SetLinks(v []Link) {
	o.Links = v
}

func (o EndpointInstanceGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointInstanceGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	toSerialize["label"] = o.Label
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.SubdomainPermanent) {
		toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	}
	if !IsNil(o.DnsSubdomainId) {
		toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	}
	if !IsNil(o.DnsSubdomainPermanentId) {
		toSerialize["dnsSubdomainPermanentId"] = o.DnsSubdomainPermanentId
	}
	if !IsNil(o.EndpointGroupName) {
		toSerialize["endpointGroupName"] = o.EndpointGroupName
	}
	toSerialize["infrastructureId"] = o.InfrastructureId
	if !IsNil(o.ExtensionInstanceId) {
		toSerialize["extensionInstanceId"] = o.ExtensionInstanceId
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	toSerialize["serviceStatus"] = o.ServiceStatus
	if !IsNil(o.ResourcePoolId) {
		toSerialize["resourcePoolId"] = o.ResourcePoolId
	}
	if !IsNil(o.NetworkEndpointGroupId) {
		toSerialize["networkEndpointGroupId"] = o.NetworkEndpointGroupId
	}
	toSerialize["meta"] = o.Meta
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EndpointInstanceGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"revision",
		"label",
		"createdTimestamp",
		"updatedTimestamp",
		"infrastructureId",
		"serviceStatus",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointInstanceGroup := _EndpointInstanceGroup{}

	err = json.Unmarshal(data, &varEndpointInstanceGroup)

	if err != nil {
		return err
	}

	*o = EndpointInstanceGroup(varEndpointInstanceGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "dnsSubdomainId")
		delete(additionalProperties, "dnsSubdomainPermanentId")
		delete(additionalProperties, "endpointGroupName")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "extensionInstanceId")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "resourcePoolId")
		delete(additionalProperties, "networkEndpointGroupId")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "config")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEndpointInstanceGroup struct {
	value *EndpointInstanceGroup
	isSet bool
}

func (v NullableEndpointInstanceGroup) Get() *EndpointInstanceGroup {
	return v.value
}

func (v *NullableEndpointInstanceGroup) Set(val *EndpointInstanceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointInstanceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointInstanceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointInstanceGroup(val *EndpointInstanceGroup) *NullableEndpointInstanceGroup {
	return &NullableEndpointInstanceGroup{value: val, isSet: true}
}

func (v NullableEndpointInstanceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointInstanceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


