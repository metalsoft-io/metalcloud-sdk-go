/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ServerInstanceNetworkConfigIpInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceNetworkConfigIpInfo{}

// ServerInstanceNetworkConfigIpInfo struct for ServerInstanceNetworkConfigIpInfo
type ServerInstanceNetworkConfigIpInfo struct {
	// The CIDR notation of the IP address.
	Cidr *string `json:"cidr,omitempty"`
	// The gateway IP address.
	Gateway *string `json:"gateway,omitempty"`
	// The IP address.
	Ip *string `json:"ip,omitempty"`
	// The subnet mask bits.
	MaskBits *float32 `json:"maskBits,omitempty"`
	// The netmask.
	Netmask *string `json:"netmask,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceNetworkConfigIpInfo ServerInstanceNetworkConfigIpInfo

// NewServerInstanceNetworkConfigIpInfo instantiates a new ServerInstanceNetworkConfigIpInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceNetworkConfigIpInfo() *ServerInstanceNetworkConfigIpInfo {
	this := ServerInstanceNetworkConfigIpInfo{}
	return &this
}

// NewServerInstanceNetworkConfigIpInfoWithDefaults instantiates a new ServerInstanceNetworkConfigIpInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceNetworkConfigIpInfoWithDefaults() *ServerInstanceNetworkConfigIpInfo {
	this := ServerInstanceNetworkConfigIpInfo{}
	return &this
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *ServerInstanceNetworkConfigIpInfo) GetCidr() string {
	if o == nil || IsNil(o.Cidr) {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceNetworkConfigIpInfo) GetCidrOk() (*string, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *ServerInstanceNetworkConfigIpInfo) HasCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *ServerInstanceNetworkConfigIpInfo) SetCidr(v string) {
	o.Cidr = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *ServerInstanceNetworkConfigIpInfo) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceNetworkConfigIpInfo) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *ServerInstanceNetworkConfigIpInfo) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *ServerInstanceNetworkConfigIpInfo) SetGateway(v string) {
	o.Gateway = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *ServerInstanceNetworkConfigIpInfo) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceNetworkConfigIpInfo) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *ServerInstanceNetworkConfigIpInfo) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *ServerInstanceNetworkConfigIpInfo) SetIp(v string) {
	o.Ip = &v
}

// GetMaskBits returns the MaskBits field value if set, zero value otherwise.
func (o *ServerInstanceNetworkConfigIpInfo) GetMaskBits() float32 {
	if o == nil || IsNil(o.MaskBits) {
		var ret float32
		return ret
	}
	return *o.MaskBits
}

// GetMaskBitsOk returns a tuple with the MaskBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceNetworkConfigIpInfo) GetMaskBitsOk() (*float32, bool) {
	if o == nil || IsNil(o.MaskBits) {
		return nil, false
	}
	return o.MaskBits, true
}

// HasMaskBits returns a boolean if a field has been set.
func (o *ServerInstanceNetworkConfigIpInfo) HasMaskBits() bool {
	if o != nil && !IsNil(o.MaskBits) {
		return true
	}

	return false
}

// SetMaskBits gets a reference to the given float32 and assigns it to the MaskBits field.
func (o *ServerInstanceNetworkConfigIpInfo) SetMaskBits(v float32) {
	o.MaskBits = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *ServerInstanceNetworkConfigIpInfo) GetNetmask() string {
	if o == nil || IsNil(o.Netmask) {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceNetworkConfigIpInfo) GetNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *ServerInstanceNetworkConfigIpInfo) HasNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *ServerInstanceNetworkConfigIpInfo) SetNetmask(v string) {
	o.Netmask = &v
}

func (o ServerInstanceNetworkConfigIpInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceNetworkConfigIpInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.MaskBits) {
		toSerialize["maskBits"] = o.MaskBits
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceNetworkConfigIpInfo) UnmarshalJSON(data []byte) (err error) {
	varServerInstanceNetworkConfigIpInfo := _ServerInstanceNetworkConfigIpInfo{}

	err = json.Unmarshal(data, &varServerInstanceNetworkConfigIpInfo)

	if err != nil {
		return err
	}

	*o = ServerInstanceNetworkConfigIpInfo(varServerInstanceNetworkConfigIpInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "maskBits")
		delete(additionalProperties, "netmask")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceNetworkConfigIpInfo struct {
	value *ServerInstanceNetworkConfigIpInfo
	isSet bool
}

func (v NullableServerInstanceNetworkConfigIpInfo) Get() *ServerInstanceNetworkConfigIpInfo {
	return v.value
}

func (v *NullableServerInstanceNetworkConfigIpInfo) Set(val *ServerInstanceNetworkConfigIpInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceNetworkConfigIpInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceNetworkConfigIpInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceNetworkConfigIpInfo(val *ServerInstanceNetworkConfigIpInfo) *NullableServerInstanceNetworkConfigIpInfo {
	return &NullableServerInstanceNetworkConfigIpInfo{value: val, isSet: true}
}

func (v NullableServerInstanceNetworkConfigIpInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceNetworkConfigIpInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


