/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the EndpointInstanceGroupConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointInstanceGroupConfiguration{}

// EndpointInstanceGroupConfiguration struct for EndpointInstanceGroupConfiguration
type EndpointInstanceGroupConfiguration struct {
	// Revision number
	Revision int32 `json:"revision"`
	// The Product Instance label. Will be automatically generated if not provided.
	Label string `json:"label"`
	// Timestamp of the latest update of the Product Instance.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Subdomain of the Product Instance.
	Subdomain *string `json:"subdomain,omitempty"`
	EndpointGroupName *string `json:"endpointGroupName,omitempty"`
	// Custom hostname for the DNS Load Balancing record. If set, this will be used as the DNS Load Balancing record name instead of the default \"endpoint-instance-group\". The hostname must be a valid DNS subdomain and can only contain alphanumeric characters, hyphens, and underscores. This will only take effect if the property \"dnsLoadBalancingRecord\" is true. It will be automatically suffixed with the endpoint instance group ID (e.g., \"-34\") to ensure the uniqueness of the resulting DNS name.
	Hostname *string `json:"hostname,omitempty"`
	// Id of the DNS subdomain for the Product Instance
	DnsSubdomainChangeId *int32 `json:"dnsSubdomainChangeId,omitempty"`
	// Id of the deployment for the Product Instance
	InfrastructureDeployId *int32 `json:"infrastructureDeployId,omitempty"`
	// Number of empty edits
	EmptyEdit *int32 `json:"emptyEdit,omitempty"`
	// Product Instance deploy type
	DeployType string `json:"deployType"`
	// Product Instance deploy status
	DeployStatus string `json:"deployStatus"`
	AdditionalProperties map[string]interface{}
}

type _EndpointInstanceGroupConfiguration EndpointInstanceGroupConfiguration

// NewEndpointInstanceGroupConfiguration instantiates a new EndpointInstanceGroupConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointInstanceGroupConfiguration(revision int32, label string, updatedTimestamp string, deployType string, deployStatus string) *EndpointInstanceGroupConfiguration {
	this := EndpointInstanceGroupConfiguration{}
	this.Revision = revision
	this.Label = label
	this.UpdatedTimestamp = updatedTimestamp
	this.DeployType = deployType
	this.DeployStatus = deployStatus
	return &this
}

// NewEndpointInstanceGroupConfigurationWithDefaults instantiates a new EndpointInstanceGroupConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointInstanceGroupConfigurationWithDefaults() *EndpointInstanceGroupConfiguration {
	this := EndpointInstanceGroupConfiguration{}
	var deployType string = "create"
	this.DeployType = deployType
	var deployStatus string = "not_started"
	this.DeployStatus = deployStatus
	return &this
}

// GetRevision returns the Revision field value
func (o *EndpointInstanceGroupConfiguration) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *EndpointInstanceGroupConfiguration) SetRevision(v int32) {
	o.Revision = v
}

// GetLabel returns the Label field value
func (o *EndpointInstanceGroupConfiguration) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *EndpointInstanceGroupConfiguration) SetLabel(v string) {
	o.Label = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *EndpointInstanceGroupConfiguration) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *EndpointInstanceGroupConfiguration) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *EndpointInstanceGroupConfiguration) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *EndpointInstanceGroupConfiguration) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *EndpointInstanceGroupConfiguration) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetEndpointGroupName returns the EndpointGroupName field value if set, zero value otherwise.
func (o *EndpointInstanceGroupConfiguration) GetEndpointGroupName() string {
	if o == nil || IsNil(o.EndpointGroupName) {
		var ret string
		return ret
	}
	return *o.EndpointGroupName
}

// GetEndpointGroupNameOk returns a tuple with the EndpointGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetEndpointGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.EndpointGroupName) {
		return nil, false
	}
	return o.EndpointGroupName, true
}

// HasEndpointGroupName returns a boolean if a field has been set.
func (o *EndpointInstanceGroupConfiguration) HasEndpointGroupName() bool {
	if o != nil && !IsNil(o.EndpointGroupName) {
		return true
	}

	return false
}

// SetEndpointGroupName gets a reference to the given string and assigns it to the EndpointGroupName field.
func (o *EndpointInstanceGroupConfiguration) SetEndpointGroupName(v string) {
	o.EndpointGroupName = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *EndpointInstanceGroupConfiguration) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *EndpointInstanceGroupConfiguration) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *EndpointInstanceGroupConfiguration) SetHostname(v string) {
	o.Hostname = &v
}

// GetDnsSubdomainChangeId returns the DnsSubdomainChangeId field value if set, zero value otherwise.
func (o *EndpointInstanceGroupConfiguration) GetDnsSubdomainChangeId() int32 {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainChangeId
}

// GetDnsSubdomainChangeIdOk returns a tuple with the DnsSubdomainChangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetDnsSubdomainChangeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		return nil, false
	}
	return o.DnsSubdomainChangeId, true
}

// HasDnsSubdomainChangeId returns a boolean if a field has been set.
func (o *EndpointInstanceGroupConfiguration) HasDnsSubdomainChangeId() bool {
	if o != nil && !IsNil(o.DnsSubdomainChangeId) {
		return true
	}

	return false
}

// SetDnsSubdomainChangeId gets a reference to the given int32 and assigns it to the DnsSubdomainChangeId field.
func (o *EndpointInstanceGroupConfiguration) SetDnsSubdomainChangeId(v int32) {
	o.DnsSubdomainChangeId = &v
}

// GetInfrastructureDeployId returns the InfrastructureDeployId field value if set, zero value otherwise.
func (o *EndpointInstanceGroupConfiguration) GetInfrastructureDeployId() int32 {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		var ret int32
		return ret
	}
	return *o.InfrastructureDeployId
}

// GetInfrastructureDeployIdOk returns a tuple with the InfrastructureDeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetInfrastructureDeployIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		return nil, false
	}
	return o.InfrastructureDeployId, true
}

// HasInfrastructureDeployId returns a boolean if a field has been set.
func (o *EndpointInstanceGroupConfiguration) HasInfrastructureDeployId() bool {
	if o != nil && !IsNil(o.InfrastructureDeployId) {
		return true
	}

	return false
}

// SetInfrastructureDeployId gets a reference to the given int32 and assigns it to the InfrastructureDeployId field.
func (o *EndpointInstanceGroupConfiguration) SetInfrastructureDeployId(v int32) {
	o.InfrastructureDeployId = &v
}

// GetEmptyEdit returns the EmptyEdit field value if set, zero value otherwise.
func (o *EndpointInstanceGroupConfiguration) GetEmptyEdit() int32 {
	if o == nil || IsNil(o.EmptyEdit) {
		var ret int32
		return ret
	}
	return *o.EmptyEdit
}

// GetEmptyEditOk returns a tuple with the EmptyEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetEmptyEditOk() (*int32, bool) {
	if o == nil || IsNil(o.EmptyEdit) {
		return nil, false
	}
	return o.EmptyEdit, true
}

// HasEmptyEdit returns a boolean if a field has been set.
func (o *EndpointInstanceGroupConfiguration) HasEmptyEdit() bool {
	if o != nil && !IsNil(o.EmptyEdit) {
		return true
	}

	return false
}

// SetEmptyEdit gets a reference to the given int32 and assigns it to the EmptyEdit field.
func (o *EndpointInstanceGroupConfiguration) SetEmptyEdit(v int32) {
	o.EmptyEdit = &v
}

// GetDeployType returns the DeployType field value
func (o *EndpointInstanceGroupConfiguration) GetDeployType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetDeployTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployType, true
}

// SetDeployType sets field value
func (o *EndpointInstanceGroupConfiguration) SetDeployType(v string) {
	o.DeployType = v
}

// GetDeployStatus returns the DeployStatus field value
func (o *EndpointInstanceGroupConfiguration) GetDeployStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployStatus
}

// GetDeployStatusOk returns a tuple with the DeployStatus field value
// and a boolean to check if the value has been set.
func (o *EndpointInstanceGroupConfiguration) GetDeployStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployStatus, true
}

// SetDeployStatus sets field value
func (o *EndpointInstanceGroupConfiguration) SetDeployStatus(v string) {
	o.DeployStatus = v
}

func (o EndpointInstanceGroupConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointInstanceGroupConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revision"] = o.Revision
	toSerialize["label"] = o.Label
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.EndpointGroupName) {
		toSerialize["endpointGroupName"] = o.EndpointGroupName
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.DnsSubdomainChangeId) {
		toSerialize["dnsSubdomainChangeId"] = o.DnsSubdomainChangeId
	}
	if !IsNil(o.InfrastructureDeployId) {
		toSerialize["infrastructureDeployId"] = o.InfrastructureDeployId
	}
	if !IsNil(o.EmptyEdit) {
		toSerialize["emptyEdit"] = o.EmptyEdit
	}
	toSerialize["deployType"] = o.DeployType
	toSerialize["deployStatus"] = o.DeployStatus

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EndpointInstanceGroupConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revision",
		"label",
		"updatedTimestamp",
		"deployType",
		"deployStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointInstanceGroupConfiguration := _EndpointInstanceGroupConfiguration{}

	err = json.Unmarshal(data, &varEndpointInstanceGroupConfiguration)

	if err != nil {
		return err
	}

	*o = EndpointInstanceGroupConfiguration(varEndpointInstanceGroupConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "endpointGroupName")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "dnsSubdomainChangeId")
		delete(additionalProperties, "infrastructureDeployId")
		delete(additionalProperties, "emptyEdit")
		delete(additionalProperties, "deployType")
		delete(additionalProperties, "deployStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEndpointInstanceGroupConfiguration struct {
	value *EndpointInstanceGroupConfiguration
	isSet bool
}

func (v NullableEndpointInstanceGroupConfiguration) Get() *EndpointInstanceGroupConfiguration {
	return v.value
}

func (v *NullableEndpointInstanceGroupConfiguration) Set(val *EndpointInstanceGroupConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointInstanceGroupConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointInstanceGroupConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointInstanceGroupConfiguration(val *EndpointInstanceGroupConfiguration) *NullableEndpointInstanceGroupConfiguration {
	return &NullableEndpointInstanceGroupConfiguration{value: val, isSet: true}
}

func (v NullableEndpointInstanceGroupConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointInstanceGroupConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


