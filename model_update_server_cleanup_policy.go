/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateServerCleanupPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateServerCleanupPolicy{}

// UpdateServerCleanupPolicy struct for UpdateServerCleanupPolicy
type UpdateServerCleanupPolicy struct {
	// Server cleanup policy label
	Label *string `json:"label,omitempty"`
	// Cleanup drives for oob enabled server
	CleanupDrivesForOobEnabledServer *float32 `json:"cleanupDrivesForOobEnabledServer,omitempty"`
	// Recreate raid
	RecreateRaid *float32 `json:"recreateRaid,omitempty"`
	// Disable embedded nics
	DisableEmbeddedNics *float32 `json:"disableEmbeddedNics,omitempty"`
	// Raid one drive
	RaidOneDrive *string `json:"raidOneDrive,omitempty"`
	// Raid two drives
	RaidTwoDrives *string `json:"raidTwoDrives,omitempty"`
	// Raid even number more than two drives
	RaidEvenNumberMoreThanTwoDrives *string `json:"raidEvenNumberMoreThanTwoDrives,omitempty"`
	// Raid odd number more than one drive
	RaidOddNumberMoreThanOneDrive *string `json:"raidOddNumberMoreThanOneDrive,omitempty"`
	// Skip raid actions
	SkipRaidActions []string `json:"skipRaidActions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateServerCleanupPolicy UpdateServerCleanupPolicy

// NewUpdateServerCleanupPolicy instantiates a new UpdateServerCleanupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateServerCleanupPolicy() *UpdateServerCleanupPolicy {
	this := UpdateServerCleanupPolicy{}
	return &this
}

// NewUpdateServerCleanupPolicyWithDefaults instantiates a new UpdateServerCleanupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServerCleanupPolicyWithDefaults() *UpdateServerCleanupPolicy {
	this := UpdateServerCleanupPolicy{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateServerCleanupPolicy) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCleanupPolicy) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateServerCleanupPolicy) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateServerCleanupPolicy) SetLabel(v string) {
	o.Label = &v
}

// GetCleanupDrivesForOobEnabledServer returns the CleanupDrivesForOobEnabledServer field value if set, zero value otherwise.
func (o *UpdateServerCleanupPolicy) GetCleanupDrivesForOobEnabledServer() float32 {
	if o == nil || IsNil(o.CleanupDrivesForOobEnabledServer) {
		var ret float32
		return ret
	}
	return *o.CleanupDrivesForOobEnabledServer
}

// GetCleanupDrivesForOobEnabledServerOk returns a tuple with the CleanupDrivesForOobEnabledServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCleanupPolicy) GetCleanupDrivesForOobEnabledServerOk() (*float32, bool) {
	if o == nil || IsNil(o.CleanupDrivesForOobEnabledServer) {
		return nil, false
	}
	return o.CleanupDrivesForOobEnabledServer, true
}

// HasCleanupDrivesForOobEnabledServer returns a boolean if a field has been set.
func (o *UpdateServerCleanupPolicy) HasCleanupDrivesForOobEnabledServer() bool {
	if o != nil && !IsNil(o.CleanupDrivesForOobEnabledServer) {
		return true
	}

	return false
}

// SetCleanupDrivesForOobEnabledServer gets a reference to the given float32 and assigns it to the CleanupDrivesForOobEnabledServer field.
func (o *UpdateServerCleanupPolicy) SetCleanupDrivesForOobEnabledServer(v float32) {
	o.CleanupDrivesForOobEnabledServer = &v
}

// GetRecreateRaid returns the RecreateRaid field value if set, zero value otherwise.
func (o *UpdateServerCleanupPolicy) GetRecreateRaid() float32 {
	if o == nil || IsNil(o.RecreateRaid) {
		var ret float32
		return ret
	}
	return *o.RecreateRaid
}

// GetRecreateRaidOk returns a tuple with the RecreateRaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCleanupPolicy) GetRecreateRaidOk() (*float32, bool) {
	if o == nil || IsNil(o.RecreateRaid) {
		return nil, false
	}
	return o.RecreateRaid, true
}

// HasRecreateRaid returns a boolean if a field has been set.
func (o *UpdateServerCleanupPolicy) HasRecreateRaid() bool {
	if o != nil && !IsNil(o.RecreateRaid) {
		return true
	}

	return false
}

// SetRecreateRaid gets a reference to the given float32 and assigns it to the RecreateRaid field.
func (o *UpdateServerCleanupPolicy) SetRecreateRaid(v float32) {
	o.RecreateRaid = &v
}

// GetDisableEmbeddedNics returns the DisableEmbeddedNics field value if set, zero value otherwise.
func (o *UpdateServerCleanupPolicy) GetDisableEmbeddedNics() float32 {
	if o == nil || IsNil(o.DisableEmbeddedNics) {
		var ret float32
		return ret
	}
	return *o.DisableEmbeddedNics
}

// GetDisableEmbeddedNicsOk returns a tuple with the DisableEmbeddedNics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCleanupPolicy) GetDisableEmbeddedNicsOk() (*float32, bool) {
	if o == nil || IsNil(o.DisableEmbeddedNics) {
		return nil, false
	}
	return o.DisableEmbeddedNics, true
}

// HasDisableEmbeddedNics returns a boolean if a field has been set.
func (o *UpdateServerCleanupPolicy) HasDisableEmbeddedNics() bool {
	if o != nil && !IsNil(o.DisableEmbeddedNics) {
		return true
	}

	return false
}

// SetDisableEmbeddedNics gets a reference to the given float32 and assigns it to the DisableEmbeddedNics field.
func (o *UpdateServerCleanupPolicy) SetDisableEmbeddedNics(v float32) {
	o.DisableEmbeddedNics = &v
}

// GetRaidOneDrive returns the RaidOneDrive field value if set, zero value otherwise.
func (o *UpdateServerCleanupPolicy) GetRaidOneDrive() string {
	if o == nil || IsNil(o.RaidOneDrive) {
		var ret string
		return ret
	}
	return *o.RaidOneDrive
}

// GetRaidOneDriveOk returns a tuple with the RaidOneDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCleanupPolicy) GetRaidOneDriveOk() (*string, bool) {
	if o == nil || IsNil(o.RaidOneDrive) {
		return nil, false
	}
	return o.RaidOneDrive, true
}

// HasRaidOneDrive returns a boolean if a field has been set.
func (o *UpdateServerCleanupPolicy) HasRaidOneDrive() bool {
	if o != nil && !IsNil(o.RaidOneDrive) {
		return true
	}

	return false
}

// SetRaidOneDrive gets a reference to the given string and assigns it to the RaidOneDrive field.
func (o *UpdateServerCleanupPolicy) SetRaidOneDrive(v string) {
	o.RaidOneDrive = &v
}

// GetRaidTwoDrives returns the RaidTwoDrives field value if set, zero value otherwise.
func (o *UpdateServerCleanupPolicy) GetRaidTwoDrives() string {
	if o == nil || IsNil(o.RaidTwoDrives) {
		var ret string
		return ret
	}
	return *o.RaidTwoDrives
}

// GetRaidTwoDrivesOk returns a tuple with the RaidTwoDrives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCleanupPolicy) GetRaidTwoDrivesOk() (*string, bool) {
	if o == nil || IsNil(o.RaidTwoDrives) {
		return nil, false
	}
	return o.RaidTwoDrives, true
}

// HasRaidTwoDrives returns a boolean if a field has been set.
func (o *UpdateServerCleanupPolicy) HasRaidTwoDrives() bool {
	if o != nil && !IsNil(o.RaidTwoDrives) {
		return true
	}

	return false
}

// SetRaidTwoDrives gets a reference to the given string and assigns it to the RaidTwoDrives field.
func (o *UpdateServerCleanupPolicy) SetRaidTwoDrives(v string) {
	o.RaidTwoDrives = &v
}

// GetRaidEvenNumberMoreThanTwoDrives returns the RaidEvenNumberMoreThanTwoDrives field value if set, zero value otherwise.
func (o *UpdateServerCleanupPolicy) GetRaidEvenNumberMoreThanTwoDrives() string {
	if o == nil || IsNil(o.RaidEvenNumberMoreThanTwoDrives) {
		var ret string
		return ret
	}
	return *o.RaidEvenNumberMoreThanTwoDrives
}

// GetRaidEvenNumberMoreThanTwoDrivesOk returns a tuple with the RaidEvenNumberMoreThanTwoDrives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCleanupPolicy) GetRaidEvenNumberMoreThanTwoDrivesOk() (*string, bool) {
	if o == nil || IsNil(o.RaidEvenNumberMoreThanTwoDrives) {
		return nil, false
	}
	return o.RaidEvenNumberMoreThanTwoDrives, true
}

// HasRaidEvenNumberMoreThanTwoDrives returns a boolean if a field has been set.
func (o *UpdateServerCleanupPolicy) HasRaidEvenNumberMoreThanTwoDrives() bool {
	if o != nil && !IsNil(o.RaidEvenNumberMoreThanTwoDrives) {
		return true
	}

	return false
}

// SetRaidEvenNumberMoreThanTwoDrives gets a reference to the given string and assigns it to the RaidEvenNumberMoreThanTwoDrives field.
func (o *UpdateServerCleanupPolicy) SetRaidEvenNumberMoreThanTwoDrives(v string) {
	o.RaidEvenNumberMoreThanTwoDrives = &v
}

// GetRaidOddNumberMoreThanOneDrive returns the RaidOddNumberMoreThanOneDrive field value if set, zero value otherwise.
func (o *UpdateServerCleanupPolicy) GetRaidOddNumberMoreThanOneDrive() string {
	if o == nil || IsNil(o.RaidOddNumberMoreThanOneDrive) {
		var ret string
		return ret
	}
	return *o.RaidOddNumberMoreThanOneDrive
}

// GetRaidOddNumberMoreThanOneDriveOk returns a tuple with the RaidOddNumberMoreThanOneDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCleanupPolicy) GetRaidOddNumberMoreThanOneDriveOk() (*string, bool) {
	if o == nil || IsNil(o.RaidOddNumberMoreThanOneDrive) {
		return nil, false
	}
	return o.RaidOddNumberMoreThanOneDrive, true
}

// HasRaidOddNumberMoreThanOneDrive returns a boolean if a field has been set.
func (o *UpdateServerCleanupPolicy) HasRaidOddNumberMoreThanOneDrive() bool {
	if o != nil && !IsNil(o.RaidOddNumberMoreThanOneDrive) {
		return true
	}

	return false
}

// SetRaidOddNumberMoreThanOneDrive gets a reference to the given string and assigns it to the RaidOddNumberMoreThanOneDrive field.
func (o *UpdateServerCleanupPolicy) SetRaidOddNumberMoreThanOneDrive(v string) {
	o.RaidOddNumberMoreThanOneDrive = &v
}

// GetSkipRaidActions returns the SkipRaidActions field value if set, zero value otherwise.
func (o *UpdateServerCleanupPolicy) GetSkipRaidActions() []string {
	if o == nil || IsNil(o.SkipRaidActions) {
		var ret []string
		return ret
	}
	return o.SkipRaidActions
}

// GetSkipRaidActionsOk returns a tuple with the SkipRaidActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCleanupPolicy) GetSkipRaidActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.SkipRaidActions) {
		return nil, false
	}
	return o.SkipRaidActions, true
}

// HasSkipRaidActions returns a boolean if a field has been set.
func (o *UpdateServerCleanupPolicy) HasSkipRaidActions() bool {
	if o != nil && !IsNil(o.SkipRaidActions) {
		return true
	}

	return false
}

// SetSkipRaidActions gets a reference to the given []string and assigns it to the SkipRaidActions field.
func (o *UpdateServerCleanupPolicy) SetSkipRaidActions(v []string) {
	o.SkipRaidActions = v
}

func (o UpdateServerCleanupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateServerCleanupPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.CleanupDrivesForOobEnabledServer) {
		toSerialize["cleanupDrivesForOobEnabledServer"] = o.CleanupDrivesForOobEnabledServer
	}
	if !IsNil(o.RecreateRaid) {
		toSerialize["recreateRaid"] = o.RecreateRaid
	}
	if !IsNil(o.DisableEmbeddedNics) {
		toSerialize["disableEmbeddedNics"] = o.DisableEmbeddedNics
	}
	if !IsNil(o.RaidOneDrive) {
		toSerialize["raidOneDrive"] = o.RaidOneDrive
	}
	if !IsNil(o.RaidTwoDrives) {
		toSerialize["raidTwoDrives"] = o.RaidTwoDrives
	}
	if !IsNil(o.RaidEvenNumberMoreThanTwoDrives) {
		toSerialize["raidEvenNumberMoreThanTwoDrives"] = o.RaidEvenNumberMoreThanTwoDrives
	}
	if !IsNil(o.RaidOddNumberMoreThanOneDrive) {
		toSerialize["raidOddNumberMoreThanOneDrive"] = o.RaidOddNumberMoreThanOneDrive
	}
	if !IsNil(o.SkipRaidActions) {
		toSerialize["skipRaidActions"] = o.SkipRaidActions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateServerCleanupPolicy) UnmarshalJSON(data []byte) (err error) {
	varUpdateServerCleanupPolicy := _UpdateServerCleanupPolicy{}

	err = json.Unmarshal(data, &varUpdateServerCleanupPolicy)

	if err != nil {
		return err
	}

	*o = UpdateServerCleanupPolicy(varUpdateServerCleanupPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "cleanupDrivesForOobEnabledServer")
		delete(additionalProperties, "recreateRaid")
		delete(additionalProperties, "disableEmbeddedNics")
		delete(additionalProperties, "raidOneDrive")
		delete(additionalProperties, "raidTwoDrives")
		delete(additionalProperties, "raidEvenNumberMoreThanTwoDrives")
		delete(additionalProperties, "raidOddNumberMoreThanOneDrive")
		delete(additionalProperties, "skipRaidActions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateServerCleanupPolicy struct {
	value *UpdateServerCleanupPolicy
	isSet bool
}

func (v NullableUpdateServerCleanupPolicy) Get() *UpdateServerCleanupPolicy {
	return v.value
}

func (v *NullableUpdateServerCleanupPolicy) Set(val *UpdateServerCleanupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateServerCleanupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateServerCleanupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateServerCleanupPolicy(val *UpdateServerCleanupPolicy) *NullableUpdateServerCleanupPolicy {
	return &NullableUpdateServerCleanupPolicy{value: val, isSet: true}
}

func (v NullableUpdateServerCleanupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateServerCleanupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


