/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerComponent{}

// ServerComponent struct for ServerComponent
type ServerComponent struct {
	// The unique identifier of the server component.
	Id float32 `json:"id"`
	// The external identifier of the server component.
	ExternalId *string `json:"externalId,omitempty"`
	// The unique identifier of the server.
	ServerId *float32 `json:"serverId,omitempty"`
	// The name of the server component.
	Name *string `json:"name,omitempty"`
	// The target firmware version of the server component.
	FirmwareTargetVersion *string `json:"firmwareTargetVersion,omitempty"`
	// The available firmware versions of the server component.
	FirmwareUpdateAvailableVersions map[string]interface{} `json:"firmwareUpdateAvailableVersions,omitempty"`
	// The required fixes for the firmware upgrade of the server component.
	FirmwareUpdateRequiredFixes map[string]interface{} `json:"firmwareUpdateRequiredFixes,omitempty"`
	// The flag indicating if the server component has updateable firmware.
	FirmwareUpdateable float32 `json:"firmwareUpdateable"`
	// The current firmware version of the server component.
	FirmwareVersion *string `json:"firmwareVersion,omitempty"`
	// The firmware information of the server component.
	FirmwareInfo map[string]interface{} `json:"firmwareInfo,omitempty"`
	// The flag indicating if the firmware upgrade of the server component requires confirmation.
	FirmwareUpgradeNeedsConfirmation float32 `json:"firmwareUpgradeNeedsConfirmation"`
	// The timestamp of the last firmware upgrade of the server component.
	FirmwareUpdateTimestamp *string `json:"firmwareUpdateTimestamp,omitempty"`
	// The timestamp of the scheduled firmware upgrade of the server component.
	FirmwareScheduledTimestamp *string `json:"firmwareScheduledTimestamp,omitempty"`
	// The status of the firmware upgrade of the server component.
	FirmwareStatus string `json:"firmwareStatus"`
	// The type of the server component.
	Type *string `json:"type,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerComponent ServerComponent

// NewServerComponent instantiates a new ServerComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerComponent(id float32, firmwareUpdateable float32, firmwareUpgradeNeedsConfirmation float32, firmwareStatus string) *ServerComponent {
	this := ServerComponent{}
	this.Id = id
	this.FirmwareUpdateable = firmwareUpdateable
	this.FirmwareUpgradeNeedsConfirmation = firmwareUpgradeNeedsConfirmation
	this.FirmwareStatus = firmwareStatus
	return &this
}

// NewServerComponentWithDefaults instantiates a new ServerComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerComponentWithDefaults() *ServerComponent {
	this := ServerComponent{}
	return &this
}

// GetId returns the Id field value
func (o *ServerComponent) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerComponent) SetId(v float32) {
	o.Id = v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *ServerComponent) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *ServerComponent) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *ServerComponent) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *ServerComponent) GetServerId() float32 {
	if o == nil || IsNil(o.ServerId) {
		var ret float32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetServerIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *ServerComponent) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given float32 and assigns it to the ServerId field.
func (o *ServerComponent) SetServerId(v float32) {
	o.ServerId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServerComponent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServerComponent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServerComponent) SetName(v string) {
	o.Name = &v
}

// GetFirmwareTargetVersion returns the FirmwareTargetVersion field value if set, zero value otherwise.
func (o *ServerComponent) GetFirmwareTargetVersion() string {
	if o == nil || IsNil(o.FirmwareTargetVersion) {
		var ret string
		return ret
	}
	return *o.FirmwareTargetVersion
}

// GetFirmwareTargetVersionOk returns a tuple with the FirmwareTargetVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareTargetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareTargetVersion) {
		return nil, false
	}
	return o.FirmwareTargetVersion, true
}

// HasFirmwareTargetVersion returns a boolean if a field has been set.
func (o *ServerComponent) HasFirmwareTargetVersion() bool {
	if o != nil && !IsNil(o.FirmwareTargetVersion) {
		return true
	}

	return false
}

// SetFirmwareTargetVersion gets a reference to the given string and assigns it to the FirmwareTargetVersion field.
func (o *ServerComponent) SetFirmwareTargetVersion(v string) {
	o.FirmwareTargetVersion = &v
}

// GetFirmwareUpdateAvailableVersions returns the FirmwareUpdateAvailableVersions field value if set, zero value otherwise.
func (o *ServerComponent) GetFirmwareUpdateAvailableVersions() map[string]interface{} {
	if o == nil || IsNil(o.FirmwareUpdateAvailableVersions) {
		var ret map[string]interface{}
		return ret
	}
	return o.FirmwareUpdateAvailableVersions
}

// GetFirmwareUpdateAvailableVersionsOk returns a tuple with the FirmwareUpdateAvailableVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareUpdateAvailableVersionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FirmwareUpdateAvailableVersions) {
		return map[string]interface{}{}, false
	}
	return o.FirmwareUpdateAvailableVersions, true
}

// HasFirmwareUpdateAvailableVersions returns a boolean if a field has been set.
func (o *ServerComponent) HasFirmwareUpdateAvailableVersions() bool {
	if o != nil && !IsNil(o.FirmwareUpdateAvailableVersions) {
		return true
	}

	return false
}

// SetFirmwareUpdateAvailableVersions gets a reference to the given map[string]interface{} and assigns it to the FirmwareUpdateAvailableVersions field.
func (o *ServerComponent) SetFirmwareUpdateAvailableVersions(v map[string]interface{}) {
	o.FirmwareUpdateAvailableVersions = v
}

// GetFirmwareUpdateRequiredFixes returns the FirmwareUpdateRequiredFixes field value if set, zero value otherwise.
func (o *ServerComponent) GetFirmwareUpdateRequiredFixes() map[string]interface{} {
	if o == nil || IsNil(o.FirmwareUpdateRequiredFixes) {
		var ret map[string]interface{}
		return ret
	}
	return o.FirmwareUpdateRequiredFixes
}

// GetFirmwareUpdateRequiredFixesOk returns a tuple with the FirmwareUpdateRequiredFixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareUpdateRequiredFixesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FirmwareUpdateRequiredFixes) {
		return map[string]interface{}{}, false
	}
	return o.FirmwareUpdateRequiredFixes, true
}

// HasFirmwareUpdateRequiredFixes returns a boolean if a field has been set.
func (o *ServerComponent) HasFirmwareUpdateRequiredFixes() bool {
	if o != nil && !IsNil(o.FirmwareUpdateRequiredFixes) {
		return true
	}

	return false
}

// SetFirmwareUpdateRequiredFixes gets a reference to the given map[string]interface{} and assigns it to the FirmwareUpdateRequiredFixes field.
func (o *ServerComponent) SetFirmwareUpdateRequiredFixes(v map[string]interface{}) {
	o.FirmwareUpdateRequiredFixes = v
}

// GetFirmwareUpdateable returns the FirmwareUpdateable field value
func (o *ServerComponent) GetFirmwareUpdateable() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FirmwareUpdateable
}

// GetFirmwareUpdateableOk returns a tuple with the FirmwareUpdateable field value
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareUpdateableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirmwareUpdateable, true
}

// SetFirmwareUpdateable sets field value
func (o *ServerComponent) SetFirmwareUpdateable(v float32) {
	o.FirmwareUpdateable = v
}

// GetFirmwareVersion returns the FirmwareVersion field value if set, zero value otherwise.
func (o *ServerComponent) GetFirmwareVersion() string {
	if o == nil || IsNil(o.FirmwareVersion) {
		var ret string
		return ret
	}
	return *o.FirmwareVersion
}

// GetFirmwareVersionOk returns a tuple with the FirmwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareVersion) {
		return nil, false
	}
	return o.FirmwareVersion, true
}

// HasFirmwareVersion returns a boolean if a field has been set.
func (o *ServerComponent) HasFirmwareVersion() bool {
	if o != nil && !IsNil(o.FirmwareVersion) {
		return true
	}

	return false
}

// SetFirmwareVersion gets a reference to the given string and assigns it to the FirmwareVersion field.
func (o *ServerComponent) SetFirmwareVersion(v string) {
	o.FirmwareVersion = &v
}

// GetFirmwareInfo returns the FirmwareInfo field value if set, zero value otherwise.
func (o *ServerComponent) GetFirmwareInfo() map[string]interface{} {
	if o == nil || IsNil(o.FirmwareInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.FirmwareInfo
}

// GetFirmwareInfoOk returns a tuple with the FirmwareInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FirmwareInfo) {
		return map[string]interface{}{}, false
	}
	return o.FirmwareInfo, true
}

// HasFirmwareInfo returns a boolean if a field has been set.
func (o *ServerComponent) HasFirmwareInfo() bool {
	if o != nil && !IsNil(o.FirmwareInfo) {
		return true
	}

	return false
}

// SetFirmwareInfo gets a reference to the given map[string]interface{} and assigns it to the FirmwareInfo field.
func (o *ServerComponent) SetFirmwareInfo(v map[string]interface{}) {
	o.FirmwareInfo = v
}

// GetFirmwareUpgradeNeedsConfirmation returns the FirmwareUpgradeNeedsConfirmation field value
func (o *ServerComponent) GetFirmwareUpgradeNeedsConfirmation() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FirmwareUpgradeNeedsConfirmation
}

// GetFirmwareUpgradeNeedsConfirmationOk returns a tuple with the FirmwareUpgradeNeedsConfirmation field value
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareUpgradeNeedsConfirmationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirmwareUpgradeNeedsConfirmation, true
}

// SetFirmwareUpgradeNeedsConfirmation sets field value
func (o *ServerComponent) SetFirmwareUpgradeNeedsConfirmation(v float32) {
	o.FirmwareUpgradeNeedsConfirmation = v
}

// GetFirmwareUpdateTimestamp returns the FirmwareUpdateTimestamp field value if set, zero value otherwise.
func (o *ServerComponent) GetFirmwareUpdateTimestamp() string {
	if o == nil || IsNil(o.FirmwareUpdateTimestamp) {
		var ret string
		return ret
	}
	return *o.FirmwareUpdateTimestamp
}

// GetFirmwareUpdateTimestampOk returns a tuple with the FirmwareUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareUpdateTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareUpdateTimestamp) {
		return nil, false
	}
	return o.FirmwareUpdateTimestamp, true
}

// HasFirmwareUpdateTimestamp returns a boolean if a field has been set.
func (o *ServerComponent) HasFirmwareUpdateTimestamp() bool {
	if o != nil && !IsNil(o.FirmwareUpdateTimestamp) {
		return true
	}

	return false
}

// SetFirmwareUpdateTimestamp gets a reference to the given string and assigns it to the FirmwareUpdateTimestamp field.
func (o *ServerComponent) SetFirmwareUpdateTimestamp(v string) {
	o.FirmwareUpdateTimestamp = &v
}

// GetFirmwareScheduledTimestamp returns the FirmwareScheduledTimestamp field value if set, zero value otherwise.
func (o *ServerComponent) GetFirmwareScheduledTimestamp() string {
	if o == nil || IsNil(o.FirmwareScheduledTimestamp) {
		var ret string
		return ret
	}
	return *o.FirmwareScheduledTimestamp
}

// GetFirmwareScheduledTimestampOk returns a tuple with the FirmwareScheduledTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareScheduledTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareScheduledTimestamp) {
		return nil, false
	}
	return o.FirmwareScheduledTimestamp, true
}

// HasFirmwareScheduledTimestamp returns a boolean if a field has been set.
func (o *ServerComponent) HasFirmwareScheduledTimestamp() bool {
	if o != nil && !IsNil(o.FirmwareScheduledTimestamp) {
		return true
	}

	return false
}

// SetFirmwareScheduledTimestamp gets a reference to the given string and assigns it to the FirmwareScheduledTimestamp field.
func (o *ServerComponent) SetFirmwareScheduledTimestamp(v string) {
	o.FirmwareScheduledTimestamp = &v
}

// GetFirmwareStatus returns the FirmwareStatus field value
func (o *ServerComponent) GetFirmwareStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirmwareStatus
}

// GetFirmwareStatusOk returns a tuple with the FirmwareStatus field value
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetFirmwareStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirmwareStatus, true
}

// SetFirmwareStatus sets field value
func (o *ServerComponent) SetFirmwareStatus(v string) {
	o.FirmwareStatus = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ServerComponent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ServerComponent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ServerComponent) SetType(v string) {
	o.Type = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ServerComponent) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponent) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ServerComponent) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ServerComponent) SetLinks(v []Link) {
	o.Links = v
}

func (o ServerComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FirmwareTargetVersion) {
		toSerialize["firmwareTargetVersion"] = o.FirmwareTargetVersion
	}
	if !IsNil(o.FirmwareUpdateAvailableVersions) {
		toSerialize["firmwareUpdateAvailableVersions"] = o.FirmwareUpdateAvailableVersions
	}
	if !IsNil(o.FirmwareUpdateRequiredFixes) {
		toSerialize["firmwareUpdateRequiredFixes"] = o.FirmwareUpdateRequiredFixes
	}
	toSerialize["firmwareUpdateable"] = o.FirmwareUpdateable
	if !IsNil(o.FirmwareVersion) {
		toSerialize["firmwareVersion"] = o.FirmwareVersion
	}
	if !IsNil(o.FirmwareInfo) {
		toSerialize["firmwareInfo"] = o.FirmwareInfo
	}
	toSerialize["firmwareUpgradeNeedsConfirmation"] = o.FirmwareUpgradeNeedsConfirmation
	if !IsNil(o.FirmwareUpdateTimestamp) {
		toSerialize["firmwareUpdateTimestamp"] = o.FirmwareUpdateTimestamp
	}
	if !IsNil(o.FirmwareScheduledTimestamp) {
		toSerialize["firmwareScheduledTimestamp"] = o.FirmwareScheduledTimestamp
	}
	toSerialize["firmwareStatus"] = o.FirmwareStatus
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerComponent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"firmwareUpdateable",
		"firmwareUpgradeNeedsConfirmation",
		"firmwareStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerComponent := _ServerComponent{}

	err = json.Unmarshal(data, &varServerComponent)

	if err != nil {
		return err
	}

	*o = ServerComponent(varServerComponent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "externalId")
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "firmwareTargetVersion")
		delete(additionalProperties, "firmwareUpdateAvailableVersions")
		delete(additionalProperties, "firmwareUpdateRequiredFixes")
		delete(additionalProperties, "firmwareUpdateable")
		delete(additionalProperties, "firmwareVersion")
		delete(additionalProperties, "firmwareInfo")
		delete(additionalProperties, "firmwareUpgradeNeedsConfirmation")
		delete(additionalProperties, "firmwareUpdateTimestamp")
		delete(additionalProperties, "firmwareScheduledTimestamp")
		delete(additionalProperties, "firmwareStatus")
		delete(additionalProperties, "type")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerComponent struct {
	value *ServerComponent
	isSet bool
}

func (v NullableServerComponent) Get() *ServerComponent {
	return v.value
}

func (v *NullableServerComponent) Set(val *ServerComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableServerComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableServerComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerComponent(val *ServerComponent) *NullableServerComponent {
	return &NullableServerComponent{value: val, isSet: true}
}

func (v NullableServerComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


