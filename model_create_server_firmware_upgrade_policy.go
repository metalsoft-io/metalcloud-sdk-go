/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateServerFirmwareUpgradePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateServerFirmwareUpgradePolicy{}

// CreateServerFirmwareUpgradePolicy struct for CreateServerFirmwareUpgradePolicy
type CreateServerFirmwareUpgradePolicy struct {
	// The label of the firmware upgrade policy.
	Label string `json:"label"`
	// The unique identifier of the user who owns the firmware upgrade policy.
	UserIdOwner *float32 `json:"userIdOwner,omitempty"`
	// The action of the firmware upgrade policy.
	Action string `json:"action"`
	// The rules of the firmware upgrade policy.
	Rules []ServerFirmwareUpgradePolicyRule `json:"rules,omitempty"`
	// The unique identifiers of the instance arrays associated with the firmware upgrade policy.
	InstanceArrayIds []float32 `json:"instanceArrayIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateServerFirmwareUpgradePolicy CreateServerFirmwareUpgradePolicy

// NewCreateServerFirmwareUpgradePolicy instantiates a new CreateServerFirmwareUpgradePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateServerFirmwareUpgradePolicy(label string, action string) *CreateServerFirmwareUpgradePolicy {
	this := CreateServerFirmwareUpgradePolicy{}
	this.Label = label
	this.Action = action
	return &this
}

// NewCreateServerFirmwareUpgradePolicyWithDefaults instantiates a new CreateServerFirmwareUpgradePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateServerFirmwareUpgradePolicyWithDefaults() *CreateServerFirmwareUpgradePolicy {
	this := CreateServerFirmwareUpgradePolicy{}
	return &this
}

// GetLabel returns the Label field value
func (o *CreateServerFirmwareUpgradePolicy) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CreateServerFirmwareUpgradePolicy) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CreateServerFirmwareUpgradePolicy) SetLabel(v string) {
	o.Label = v
}

// GetUserIdOwner returns the UserIdOwner field value if set, zero value otherwise.
func (o *CreateServerFirmwareUpgradePolicy) GetUserIdOwner() float32 {
	if o == nil || IsNil(o.UserIdOwner) {
		var ret float32
		return ret
	}
	return *o.UserIdOwner
}

// GetUserIdOwnerOk returns a tuple with the UserIdOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateServerFirmwareUpgradePolicy) GetUserIdOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.UserIdOwner) {
		return nil, false
	}
	return o.UserIdOwner, true
}

// HasUserIdOwner returns a boolean if a field has been set.
func (o *CreateServerFirmwareUpgradePolicy) HasUserIdOwner() bool {
	if o != nil && !IsNil(o.UserIdOwner) {
		return true
	}

	return false
}

// SetUserIdOwner gets a reference to the given float32 and assigns it to the UserIdOwner field.
func (o *CreateServerFirmwareUpgradePolicy) SetUserIdOwner(v float32) {
	o.UserIdOwner = &v
}

// GetAction returns the Action field value
func (o *CreateServerFirmwareUpgradePolicy) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *CreateServerFirmwareUpgradePolicy) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *CreateServerFirmwareUpgradePolicy) SetAction(v string) {
	o.Action = v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *CreateServerFirmwareUpgradePolicy) GetRules() []ServerFirmwareUpgradePolicyRule {
	if o == nil || IsNil(o.Rules) {
		var ret []ServerFirmwareUpgradePolicyRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateServerFirmwareUpgradePolicy) GetRulesOk() ([]ServerFirmwareUpgradePolicyRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *CreateServerFirmwareUpgradePolicy) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []ServerFirmwareUpgradePolicyRule and assigns it to the Rules field.
func (o *CreateServerFirmwareUpgradePolicy) SetRules(v []ServerFirmwareUpgradePolicyRule) {
	o.Rules = v
}

// GetInstanceArrayIds returns the InstanceArrayIds field value if set, zero value otherwise.
func (o *CreateServerFirmwareUpgradePolicy) GetInstanceArrayIds() []float32 {
	if o == nil || IsNil(o.InstanceArrayIds) {
		var ret []float32
		return ret
	}
	return o.InstanceArrayIds
}

// GetInstanceArrayIdsOk returns a tuple with the InstanceArrayIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateServerFirmwareUpgradePolicy) GetInstanceArrayIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.InstanceArrayIds) {
		return nil, false
	}
	return o.InstanceArrayIds, true
}

// HasInstanceArrayIds returns a boolean if a field has been set.
func (o *CreateServerFirmwareUpgradePolicy) HasInstanceArrayIds() bool {
	if o != nil && !IsNil(o.InstanceArrayIds) {
		return true
	}

	return false
}

// SetInstanceArrayIds gets a reference to the given []float32 and assigns it to the InstanceArrayIds field.
func (o *CreateServerFirmwareUpgradePolicy) SetInstanceArrayIds(v []float32) {
	o.InstanceArrayIds = v
}

func (o CreateServerFirmwareUpgradePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateServerFirmwareUpgradePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	if !IsNil(o.UserIdOwner) {
		toSerialize["userIdOwner"] = o.UserIdOwner
	}
	toSerialize["action"] = o.Action
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.InstanceArrayIds) {
		toSerialize["instanceArrayIds"] = o.InstanceArrayIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateServerFirmwareUpgradePolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateServerFirmwareUpgradePolicy := _CreateServerFirmwareUpgradePolicy{}

	err = json.Unmarshal(data, &varCreateServerFirmwareUpgradePolicy)

	if err != nil {
		return err
	}

	*o = CreateServerFirmwareUpgradePolicy(varCreateServerFirmwareUpgradePolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "userIdOwner")
		delete(additionalProperties, "action")
		delete(additionalProperties, "rules")
		delete(additionalProperties, "instanceArrayIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateServerFirmwareUpgradePolicy struct {
	value *CreateServerFirmwareUpgradePolicy
	isSet bool
}

func (v NullableCreateServerFirmwareUpgradePolicy) Get() *CreateServerFirmwareUpgradePolicy {
	return v.value
}

func (v *NullableCreateServerFirmwareUpgradePolicy) Set(val *CreateServerFirmwareUpgradePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateServerFirmwareUpgradePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateServerFirmwareUpgradePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateServerFirmwareUpgradePolicy(val *CreateServerFirmwareUpgradePolicy) *NullableCreateServerFirmwareUpgradePolicy {
	return &NullableCreateServerFirmwareUpgradePolicy{value: val, isSet: true}
}

func (v NullableCreateServerFirmwareUpgradePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateServerFirmwareUpgradePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


