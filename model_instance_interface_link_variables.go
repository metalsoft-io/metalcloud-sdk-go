/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceInterfaceLinkVariables type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceInterfaceLinkVariables{}

// InstanceInterfaceLinkVariables struct for InstanceInterfaceLinkVariables
type InstanceInterfaceLinkVariables struct {
	Id float32 `json:"id"`
	InterfaceType InstanceInterfaceType `json:"interfaceType"`
	AdditionalProperties map[string]interface{}
}

type _InstanceInterfaceLinkVariables InstanceInterfaceLinkVariables

// NewInstanceInterfaceLinkVariables instantiates a new InstanceInterfaceLinkVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceInterfaceLinkVariables(id float32, interfaceType InstanceInterfaceType) *InstanceInterfaceLinkVariables {
	this := InstanceInterfaceLinkVariables{}
	this.Id = id
	this.InterfaceType = interfaceType
	return &this
}

// NewInstanceInterfaceLinkVariablesWithDefaults instantiates a new InstanceInterfaceLinkVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceInterfaceLinkVariablesWithDefaults() *InstanceInterfaceLinkVariables {
	this := InstanceInterfaceLinkVariables{}
	return &this
}

// GetId returns the Id field value
func (o *InstanceInterfaceLinkVariables) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceLinkVariables) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InstanceInterfaceLinkVariables) SetId(v float32) {
	o.Id = v
}

// GetInterfaceType returns the InterfaceType field value
func (o *InstanceInterfaceLinkVariables) GetInterfaceType() InstanceInterfaceType {
	if o == nil {
		var ret InstanceInterfaceType
		return ret
	}

	return o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceLinkVariables) GetInterfaceTypeOk() (*InstanceInterfaceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterfaceType, true
}

// SetInterfaceType sets field value
func (o *InstanceInterfaceLinkVariables) SetInterfaceType(v InstanceInterfaceType) {
	o.InterfaceType = v
}

func (o InstanceInterfaceLinkVariables) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceInterfaceLinkVariables) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["interfaceType"] = o.InterfaceType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceInterfaceLinkVariables) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"interfaceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceInterfaceLinkVariables := _InstanceInterfaceLinkVariables{}

	err = json.Unmarshal(data, &varInstanceInterfaceLinkVariables)

	if err != nil {
		return err
	}

	*o = InstanceInterfaceLinkVariables(varInstanceInterfaceLinkVariables)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "interfaceType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceInterfaceLinkVariables struct {
	value *InstanceInterfaceLinkVariables
	isSet bool
}

func (v NullableInstanceInterfaceLinkVariables) Get() *InstanceInterfaceLinkVariables {
	return v.value
}

func (v *NullableInstanceInterfaceLinkVariables) Set(val *InstanceInterfaceLinkVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceInterfaceLinkVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceInterfaceLinkVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceInterfaceLinkVariables(val *InstanceInterfaceLinkVariables) *NullableInstanceInterfaceLinkVariables {
	return &NullableInstanceInterfaceLinkVariables{value: val, isSet: true}
}

func (v NullableInstanceInterfaceLinkVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceInterfaceLinkVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


