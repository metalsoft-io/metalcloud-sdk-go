/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the DnsZoneDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsZoneDto{}

// DnsZoneDto struct for DnsZoneDto
type DnsZoneDto struct {
	// The DNS zone ID
	Id int32 `json:"id"`
	// The DNS zone label. It must be unique
	Label string `json:"label"`
	// The DNS zone description
	Description *string `json:"description,omitempty"`
	// The name of the DNS zone (without a terminating dot).                   The DNS zone name, must be unique
	ZoneName string `json:"zoneName"`
	// The type of zone, 'master' is controlled by the application,                   'slave' is controlled by an external DNS server.
	ZoneType string `json:"zoneType"`
	// The email address of the DNS zone administrator
	SoaEmail string `json:"soaEmail"`
	// The serial number of the DNS zone
	SoaSerial int32 `json:"soaSerial"`
	// TTL (Time to Live) for the DNS zone.
	Ttl int32 `json:"ttl"`
	// The name servers for this DNS zone. This is a list of DNS servers that are authoritative for the zone.
	NameServers []string `json:"nameServers"`
	// The default DNS zone to be used in deployments.
	IsDefault bool `json:"isDefault"`
	// The status, let the user to decide with DNS zone to delete and when,       and how much to keep them in the history (archived status). Also, it allows the user to       resurrect the archived DNS zone if needed.       Status: READY           - is the initial status of the DNS zone           - the DNS zone is ready for deployment           - the DNS zone can be deleted, use in deployments and updated       Status: ACTIVE           - the DNS zone is part of at least one ongoing deployment           - can't be deleted (the dns service will have validation for this)           - the status can't be changed to ARCHIVED (the dns service will have validation for this)       Status: USED           - the DNS zone is part of at least one finished deployment, that is not deleted, and             there are no ongoing deployments that use this DNS zone           - can't be deleted (the dns service will have validation for this)           - can be updated, deploy or ARCHIVED       Status: ARCHIVED           - the DNS zone is kept in the system for historical reasons           - can't be deleted (the dns service will have validation for this)           - can't be updated or deployed           - the status can be changed to READY or USED, if it needs to be used again or deleted
	Status string `json:"status"`
	// The tags associated with the DNS zone
	Tags []string `json:"tags,omitempty"`
	// The revision number of the DNS zone
	Revision int32 `json:"revision"`
	// The user ID of the user who created the DNS zone
	CreatedBy int32 `json:"createdBy"`
	// The user ID of the user who last modified the DNS zone
	UpdatedBy *int32 `json:"updatedBy,omitempty"`
	// The date and time the DNS zone was created
	CreatedAt time.Time `json:"createdAt"`
	// The date and time the DNS zone was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DnsZoneDto DnsZoneDto

// NewDnsZoneDto instantiates a new DnsZoneDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsZoneDto(id int32, label string, zoneName string, zoneType string, soaEmail string, soaSerial int32, ttl int32, nameServers []string, isDefault bool, status string, revision int32, createdBy int32, createdAt time.Time) *DnsZoneDto {
	this := DnsZoneDto{}
	this.Id = id
	this.Label = label
	this.ZoneName = zoneName
	this.ZoneType = zoneType
	this.SoaEmail = soaEmail
	this.SoaSerial = soaSerial
	this.Ttl = ttl
	this.NameServers = nameServers
	this.IsDefault = isDefault
	this.Status = status
	this.Revision = revision
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	return &this
}

// NewDnsZoneDtoWithDefaults instantiates a new DnsZoneDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsZoneDtoWithDefaults() *DnsZoneDto {
	this := DnsZoneDto{}
	var zoneType string = "master"
	this.ZoneType = zoneType
	var soaEmail string = "admin.<zone_name>"
	this.SoaEmail = soaEmail
	var status string = "ready"
	this.Status = status
	return &this
}

// GetId returns the Id field value
func (o *DnsZoneDto) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DnsZoneDto) SetId(v int32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *DnsZoneDto) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *DnsZoneDto) SetLabel(v string) {
	o.Label = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DnsZoneDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DnsZoneDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DnsZoneDto) SetDescription(v string) {
	o.Description = &v
}

// GetZoneName returns the ZoneName field value
func (o *DnsZoneDto) GetZoneName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetZoneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneName, true
}

// SetZoneName sets field value
func (o *DnsZoneDto) SetZoneName(v string) {
	o.ZoneName = v
}

// GetZoneType returns the ZoneType field value
func (o *DnsZoneDto) GetZoneType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneType
}

// GetZoneTypeOk returns a tuple with the ZoneType field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetZoneTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneType, true
}

// SetZoneType sets field value
func (o *DnsZoneDto) SetZoneType(v string) {
	o.ZoneType = v
}

// GetSoaEmail returns the SoaEmail field value
func (o *DnsZoneDto) GetSoaEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SoaEmail
}

// GetSoaEmailOk returns a tuple with the SoaEmail field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetSoaEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoaEmail, true
}

// SetSoaEmail sets field value
func (o *DnsZoneDto) SetSoaEmail(v string) {
	o.SoaEmail = v
}

// GetSoaSerial returns the SoaSerial field value
func (o *DnsZoneDto) GetSoaSerial() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SoaSerial
}

// GetSoaSerialOk returns a tuple with the SoaSerial field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetSoaSerialOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoaSerial, true
}

// SetSoaSerial sets field value
func (o *DnsZoneDto) SetSoaSerial(v int32) {
	o.SoaSerial = v
}

// GetTtl returns the Ttl field value
func (o *DnsZoneDto) GetTtl() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *DnsZoneDto) SetTtl(v int32) {
	o.Ttl = v
}

// GetNameServers returns the NameServers field value
func (o *DnsZoneDto) GetNameServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NameServers
}

// GetNameServersOk returns a tuple with the NameServers field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetNameServersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameServers, true
}

// SetNameServers sets field value
func (o *DnsZoneDto) SetNameServers(v []string) {
	o.NameServers = v
}

// GetIsDefault returns the IsDefault field value
func (o *DnsZoneDto) GetIsDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDefault, true
}

// SetIsDefault sets field value
func (o *DnsZoneDto) SetIsDefault(v bool) {
	o.IsDefault = v
}

// GetStatus returns the Status field value
func (o *DnsZoneDto) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DnsZoneDto) SetStatus(v string) {
	o.Status = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DnsZoneDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DnsZoneDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DnsZoneDto) SetTags(v []string) {
	o.Tags = v
}

// GetRevision returns the Revision field value
func (o *DnsZoneDto) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *DnsZoneDto) SetRevision(v int32) {
	o.Revision = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *DnsZoneDto) GetCreatedBy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetCreatedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *DnsZoneDto) SetCreatedBy(v int32) {
	o.CreatedBy = v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DnsZoneDto) GetUpdatedBy() int32 {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret int32
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetUpdatedByOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DnsZoneDto) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given int32 and assigns it to the UpdatedBy field.
func (o *DnsZoneDto) SetUpdatedBy(v int32) {
	o.UpdatedBy = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DnsZoneDto) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DnsZoneDto) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DnsZoneDto) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DnsZoneDto) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DnsZoneDto) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DnsZoneDto) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneDto) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DnsZoneDto) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *DnsZoneDto) SetLinks(v []Link) {
	o.Links = v
}

func (o DnsZoneDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsZoneDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["zoneName"] = o.ZoneName
	toSerialize["zoneType"] = o.ZoneType
	toSerialize["soaEmail"] = o.SoaEmail
	toSerialize["soaSerial"] = o.SoaSerial
	toSerialize["ttl"] = o.Ttl
	toSerialize["nameServers"] = o.NameServers
	toSerialize["isDefault"] = o.IsDefault
	toSerialize["status"] = o.Status
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["revision"] = o.Revision
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsZoneDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"zoneName",
		"zoneType",
		"soaEmail",
		"soaSerial",
		"ttl",
		"nameServers",
		"isDefault",
		"status",
		"revision",
		"createdBy",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsZoneDto := _DnsZoneDto{}

	err = json.Unmarshal(data, &varDnsZoneDto)

	if err != nil {
		return err
	}

	*o = DnsZoneDto(varDnsZoneDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "description")
		delete(additionalProperties, "zoneName")
		delete(additionalProperties, "zoneType")
		delete(additionalProperties, "soaEmail")
		delete(additionalProperties, "soaSerial")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "nameServers")
		delete(additionalProperties, "isDefault")
		delete(additionalProperties, "status")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "updatedBy")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsZoneDto struct {
	value *DnsZoneDto
	isSet bool
}

func (v NullableDnsZoneDto) Get() *DnsZoneDto {
	return v.value
}

func (v *NullableDnsZoneDto) Set(val *DnsZoneDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsZoneDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsZoneDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsZoneDto(val *DnsZoneDto) *NullableDnsZoneDto {
	return &NullableDnsZoneDto{value: val, isSet: true}
}

func (v NullableDnsZoneDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsZoneDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


