/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GenerateSiteControllerOneliner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateSiteControllerOneliner{}

// GenerateSiteControllerOneliner struct for GenerateSiteControllerOneliner
type GenerateSiteControllerOneliner struct {
	// Use Podman instead of Docker
	UsePodman bool `json:"usePodman"`
	// Install in inband mode
	InbandMode bool `json:"inbandMode"`
	// Use Docker environment variables
	DockerEnv bool `json:"dockerEnv"`
	// Registry URL
	Registry string `json:"registry"`
	// GitHub tag for deploy-agents.sh script
	GitHubTag string `json:"gitHubTag"`
	// Use local script instead of curling it
	LocalScript bool `json:"localScript"`
	// SSL hostname
	SslHostname string `json:"sslHostname"`
	// Docker images tag version ( The version of tunnel microservice )
	ImagesTag string `json:"imagesTag"`
	// MS Tunnel Secret for secure connections
	MsTunnelSecret string `json:"msTunnelSecret"`
	// Enable OOB HTTP proxy capability
	OobHttpProxy bool `json:"oobHttpProxy"`
	// Enable inband HTTP proxy capability
	InbandHttpProxy bool `json:"inbandHttpProxy"`
	// Enable file transfer capability
	FileTransfer bool `json:"fileTransfer"`
	// Enable inband file transfer capability
	InbandFileTransfer bool `json:"inbandFileTransfer"`
	// Enable switch subscription capability
	SwitchSubscription bool `json:"switchSubscription"`
	// Enable command execution capability
	CommandExecution bool `json:"commandExecution"`
	// Enable NETCONF capability
	Netconf bool `json:"netconf"`
	// Enable VNC capability
	Vnc bool `json:"vnc"`
	// Enable SPICE capability
	Spice bool `json:"spice"`
	// Enable syslog capability
	Syslog bool `json:"syslog"`
	// Enable DHCP OOB capability
	DhcpOob bool `json:"dhcpOob"`
	// Enable Ansible runner capability
	AnsibleRunner bool `json:"ansibleRunner"`
	// Second IP address
	SecondIp *string `json:"secondIp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GenerateSiteControllerOneliner GenerateSiteControllerOneliner

// NewGenerateSiteControllerOneliner instantiates a new GenerateSiteControllerOneliner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateSiteControllerOneliner(usePodman bool, inbandMode bool, dockerEnv bool, registry string, gitHubTag string, localScript bool, sslHostname string, imagesTag string, msTunnelSecret string, oobHttpProxy bool, inbandHttpProxy bool, fileTransfer bool, inbandFileTransfer bool, switchSubscription bool, commandExecution bool, netconf bool, vnc bool, spice bool, syslog bool, dhcpOob bool, ansibleRunner bool) *GenerateSiteControllerOneliner {
	this := GenerateSiteControllerOneliner{}
	this.UsePodman = usePodman
	this.InbandMode = inbandMode
	this.DockerEnv = dockerEnv
	this.Registry = registry
	this.GitHubTag = gitHubTag
	this.LocalScript = localScript
	this.SslHostname = sslHostname
	this.ImagesTag = imagesTag
	this.MsTunnelSecret = msTunnelSecret
	this.OobHttpProxy = oobHttpProxy
	this.InbandHttpProxy = inbandHttpProxy
	this.FileTransfer = fileTransfer
	this.InbandFileTransfer = inbandFileTransfer
	this.SwitchSubscription = switchSubscription
	this.CommandExecution = commandExecution
	this.Netconf = netconf
	this.Vnc = vnc
	this.Spice = spice
	this.Syslog = syslog
	this.DhcpOob = dhcpOob
	this.AnsibleRunner = ansibleRunner
	return &this
}

// NewGenerateSiteControllerOnelinerWithDefaults instantiates a new GenerateSiteControllerOneliner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateSiteControllerOnelinerWithDefaults() *GenerateSiteControllerOneliner {
	this := GenerateSiteControllerOneliner{}
	var usePodman bool = false
	this.UsePodman = usePodman
	var inbandMode bool = false
	this.InbandMode = inbandMode
	var dockerEnv bool = false
	this.DockerEnv = dockerEnv
	var registry string = "registry.metalsoft.dev"
	this.Registry = registry
	var gitHubTag string = "main"
	this.GitHubTag = gitHubTag
	var localScript bool = false
	this.LocalScript = localScript
	var oobHttpProxy bool = false
	this.OobHttpProxy = oobHttpProxy
	var inbandHttpProxy bool = false
	this.InbandHttpProxy = inbandHttpProxy
	var fileTransfer bool = false
	this.FileTransfer = fileTransfer
	var inbandFileTransfer bool = false
	this.InbandFileTransfer = inbandFileTransfer
	var switchSubscription bool = false
	this.SwitchSubscription = switchSubscription
	var commandExecution bool = false
	this.CommandExecution = commandExecution
	var netconf bool = false
	this.Netconf = netconf
	var vnc bool = false
	this.Vnc = vnc
	var spice bool = false
	this.Spice = spice
	var syslog bool = false
	this.Syslog = syslog
	var dhcpOob bool = false
	this.DhcpOob = dhcpOob
	var ansibleRunner bool = false
	this.AnsibleRunner = ansibleRunner
	return &this
}

// GetUsePodman returns the UsePodman field value
func (o *GenerateSiteControllerOneliner) GetUsePodman() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UsePodman
}

// GetUsePodmanOk returns a tuple with the UsePodman field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetUsePodmanOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsePodman, true
}

// SetUsePodman sets field value
func (o *GenerateSiteControllerOneliner) SetUsePodman(v bool) {
	o.UsePodman = v
}

// GetInbandMode returns the InbandMode field value
func (o *GenerateSiteControllerOneliner) GetInbandMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InbandMode
}

// GetInbandModeOk returns a tuple with the InbandMode field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetInbandModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InbandMode, true
}

// SetInbandMode sets field value
func (o *GenerateSiteControllerOneliner) SetInbandMode(v bool) {
	o.InbandMode = v
}

// GetDockerEnv returns the DockerEnv field value
func (o *GenerateSiteControllerOneliner) GetDockerEnv() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DockerEnv
}

// GetDockerEnvOk returns a tuple with the DockerEnv field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetDockerEnvOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DockerEnv, true
}

// SetDockerEnv sets field value
func (o *GenerateSiteControllerOneliner) SetDockerEnv(v bool) {
	o.DockerEnv = v
}

// GetRegistry returns the Registry field value
func (o *GenerateSiteControllerOneliner) GetRegistry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Registry
}

// GetRegistryOk returns a tuple with the Registry field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetRegistryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Registry, true
}

// SetRegistry sets field value
func (o *GenerateSiteControllerOneliner) SetRegistry(v string) {
	o.Registry = v
}

// GetGitHubTag returns the GitHubTag field value
func (o *GenerateSiteControllerOneliner) GetGitHubTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitHubTag
}

// GetGitHubTagOk returns a tuple with the GitHubTag field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetGitHubTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitHubTag, true
}

// SetGitHubTag sets field value
func (o *GenerateSiteControllerOneliner) SetGitHubTag(v string) {
	o.GitHubTag = v
}

// GetLocalScript returns the LocalScript field value
func (o *GenerateSiteControllerOneliner) GetLocalScript() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LocalScript
}

// GetLocalScriptOk returns a tuple with the LocalScript field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetLocalScriptOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalScript, true
}

// SetLocalScript sets field value
func (o *GenerateSiteControllerOneliner) SetLocalScript(v bool) {
	o.LocalScript = v
}

// GetSslHostname returns the SslHostname field value
func (o *GenerateSiteControllerOneliner) GetSslHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SslHostname
}

// GetSslHostnameOk returns a tuple with the SslHostname field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetSslHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SslHostname, true
}

// SetSslHostname sets field value
func (o *GenerateSiteControllerOneliner) SetSslHostname(v string) {
	o.SslHostname = v
}

// GetImagesTag returns the ImagesTag field value
func (o *GenerateSiteControllerOneliner) GetImagesTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImagesTag
}

// GetImagesTagOk returns a tuple with the ImagesTag field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetImagesTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImagesTag, true
}

// SetImagesTag sets field value
func (o *GenerateSiteControllerOneliner) SetImagesTag(v string) {
	o.ImagesTag = v
}

// GetMsTunnelSecret returns the MsTunnelSecret field value
func (o *GenerateSiteControllerOneliner) GetMsTunnelSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MsTunnelSecret
}

// GetMsTunnelSecretOk returns a tuple with the MsTunnelSecret field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetMsTunnelSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MsTunnelSecret, true
}

// SetMsTunnelSecret sets field value
func (o *GenerateSiteControllerOneliner) SetMsTunnelSecret(v string) {
	o.MsTunnelSecret = v
}

// GetOobHttpProxy returns the OobHttpProxy field value
func (o *GenerateSiteControllerOneliner) GetOobHttpProxy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OobHttpProxy
}

// GetOobHttpProxyOk returns a tuple with the OobHttpProxy field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetOobHttpProxyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OobHttpProxy, true
}

// SetOobHttpProxy sets field value
func (o *GenerateSiteControllerOneliner) SetOobHttpProxy(v bool) {
	o.OobHttpProxy = v
}

// GetInbandHttpProxy returns the InbandHttpProxy field value
func (o *GenerateSiteControllerOneliner) GetInbandHttpProxy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InbandHttpProxy
}

// GetInbandHttpProxyOk returns a tuple with the InbandHttpProxy field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetInbandHttpProxyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InbandHttpProxy, true
}

// SetInbandHttpProxy sets field value
func (o *GenerateSiteControllerOneliner) SetInbandHttpProxy(v bool) {
	o.InbandHttpProxy = v
}

// GetFileTransfer returns the FileTransfer field value
func (o *GenerateSiteControllerOneliner) GetFileTransfer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FileTransfer
}

// GetFileTransferOk returns a tuple with the FileTransfer field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetFileTransferOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileTransfer, true
}

// SetFileTransfer sets field value
func (o *GenerateSiteControllerOneliner) SetFileTransfer(v bool) {
	o.FileTransfer = v
}

// GetInbandFileTransfer returns the InbandFileTransfer field value
func (o *GenerateSiteControllerOneliner) GetInbandFileTransfer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InbandFileTransfer
}

// GetInbandFileTransferOk returns a tuple with the InbandFileTransfer field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetInbandFileTransferOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InbandFileTransfer, true
}

// SetInbandFileTransfer sets field value
func (o *GenerateSiteControllerOneliner) SetInbandFileTransfer(v bool) {
	o.InbandFileTransfer = v
}

// GetSwitchSubscription returns the SwitchSubscription field value
func (o *GenerateSiteControllerOneliner) GetSwitchSubscription() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SwitchSubscription
}

// GetSwitchSubscriptionOk returns a tuple with the SwitchSubscription field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetSwitchSubscriptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SwitchSubscription, true
}

// SetSwitchSubscription sets field value
func (o *GenerateSiteControllerOneliner) SetSwitchSubscription(v bool) {
	o.SwitchSubscription = v
}

// GetCommandExecution returns the CommandExecution field value
func (o *GenerateSiteControllerOneliner) GetCommandExecution() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CommandExecution
}

// GetCommandExecutionOk returns a tuple with the CommandExecution field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetCommandExecutionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandExecution, true
}

// SetCommandExecution sets field value
func (o *GenerateSiteControllerOneliner) SetCommandExecution(v bool) {
	o.CommandExecution = v
}

// GetNetconf returns the Netconf field value
func (o *GenerateSiteControllerOneliner) GetNetconf() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Netconf
}

// GetNetconfOk returns a tuple with the Netconf field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetNetconfOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netconf, true
}

// SetNetconf sets field value
func (o *GenerateSiteControllerOneliner) SetNetconf(v bool) {
	o.Netconf = v
}

// GetVnc returns the Vnc field value
func (o *GenerateSiteControllerOneliner) GetVnc() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Vnc
}

// GetVncOk returns a tuple with the Vnc field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetVncOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vnc, true
}

// SetVnc sets field value
func (o *GenerateSiteControllerOneliner) SetVnc(v bool) {
	o.Vnc = v
}

// GetSpice returns the Spice field value
func (o *GenerateSiteControllerOneliner) GetSpice() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Spice
}

// GetSpiceOk returns a tuple with the Spice field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetSpiceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spice, true
}

// SetSpice sets field value
func (o *GenerateSiteControllerOneliner) SetSpice(v bool) {
	o.Spice = v
}

// GetSyslog returns the Syslog field value
func (o *GenerateSiteControllerOneliner) GetSyslog() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Syslog
}

// GetSyslogOk returns a tuple with the Syslog field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetSyslogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Syslog, true
}

// SetSyslog sets field value
func (o *GenerateSiteControllerOneliner) SetSyslog(v bool) {
	o.Syslog = v
}

// GetDhcpOob returns the DhcpOob field value
func (o *GenerateSiteControllerOneliner) GetDhcpOob() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DhcpOob
}

// GetDhcpOobOk returns a tuple with the DhcpOob field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetDhcpOobOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DhcpOob, true
}

// SetDhcpOob sets field value
func (o *GenerateSiteControllerOneliner) SetDhcpOob(v bool) {
	o.DhcpOob = v
}

// GetAnsibleRunner returns the AnsibleRunner field value
func (o *GenerateSiteControllerOneliner) GetAnsibleRunner() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AnsibleRunner
}

// GetAnsibleRunnerOk returns a tuple with the AnsibleRunner field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetAnsibleRunnerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnsibleRunner, true
}

// SetAnsibleRunner sets field value
func (o *GenerateSiteControllerOneliner) SetAnsibleRunner(v bool) {
	o.AnsibleRunner = v
}

// GetSecondIp returns the SecondIp field value if set, zero value otherwise.
func (o *GenerateSiteControllerOneliner) GetSecondIp() string {
	if o == nil || IsNil(o.SecondIp) {
		var ret string
		return ret
	}
	return *o.SecondIp
}

// GetSecondIpOk returns a tuple with the SecondIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetSecondIpOk() (*string, bool) {
	if o == nil || IsNil(o.SecondIp) {
		return nil, false
	}
	return o.SecondIp, true
}

// HasSecondIp returns a boolean if a field has been set.
func (o *GenerateSiteControllerOneliner) HasSecondIp() bool {
	if o != nil && !IsNil(o.SecondIp) {
		return true
	}

	return false
}

// SetSecondIp gets a reference to the given string and assigns it to the SecondIp field.
func (o *GenerateSiteControllerOneliner) SetSecondIp(v string) {
	o.SecondIp = &v
}

func (o GenerateSiteControllerOneliner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateSiteControllerOneliner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["usePodman"] = o.UsePodman
	toSerialize["inbandMode"] = o.InbandMode
	toSerialize["dockerEnv"] = o.DockerEnv
	toSerialize["registry"] = o.Registry
	toSerialize["gitHubTag"] = o.GitHubTag
	toSerialize["localScript"] = o.LocalScript
	toSerialize["sslHostname"] = o.SslHostname
	toSerialize["imagesTag"] = o.ImagesTag
	toSerialize["msTunnelSecret"] = o.MsTunnelSecret
	toSerialize["oobHttpProxy"] = o.OobHttpProxy
	toSerialize["inbandHttpProxy"] = o.InbandHttpProxy
	toSerialize["fileTransfer"] = o.FileTransfer
	toSerialize["inbandFileTransfer"] = o.InbandFileTransfer
	toSerialize["switchSubscription"] = o.SwitchSubscription
	toSerialize["commandExecution"] = o.CommandExecution
	toSerialize["netconf"] = o.Netconf
	toSerialize["vnc"] = o.Vnc
	toSerialize["spice"] = o.Spice
	toSerialize["syslog"] = o.Syslog
	toSerialize["dhcpOob"] = o.DhcpOob
	toSerialize["ansibleRunner"] = o.AnsibleRunner
	if !IsNil(o.SecondIp) {
		toSerialize["secondIp"] = o.SecondIp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GenerateSiteControllerOneliner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"usePodman",
		"inbandMode",
		"dockerEnv",
		"registry",
		"gitHubTag",
		"localScript",
		"sslHostname",
		"imagesTag",
		"msTunnelSecret",
		"oobHttpProxy",
		"inbandHttpProxy",
		"fileTransfer",
		"inbandFileTransfer",
		"switchSubscription",
		"commandExecution",
		"netconf",
		"vnc",
		"spice",
		"syslog",
		"dhcpOob",
		"ansibleRunner",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenerateSiteControllerOneliner := _GenerateSiteControllerOneliner{}

	err = json.Unmarshal(data, &varGenerateSiteControllerOneliner)

	if err != nil {
		return err
	}

	*o = GenerateSiteControllerOneliner(varGenerateSiteControllerOneliner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "usePodman")
		delete(additionalProperties, "inbandMode")
		delete(additionalProperties, "dockerEnv")
		delete(additionalProperties, "registry")
		delete(additionalProperties, "gitHubTag")
		delete(additionalProperties, "localScript")
		delete(additionalProperties, "sslHostname")
		delete(additionalProperties, "imagesTag")
		delete(additionalProperties, "msTunnelSecret")
		delete(additionalProperties, "oobHttpProxy")
		delete(additionalProperties, "inbandHttpProxy")
		delete(additionalProperties, "fileTransfer")
		delete(additionalProperties, "inbandFileTransfer")
		delete(additionalProperties, "switchSubscription")
		delete(additionalProperties, "commandExecution")
		delete(additionalProperties, "netconf")
		delete(additionalProperties, "vnc")
		delete(additionalProperties, "spice")
		delete(additionalProperties, "syslog")
		delete(additionalProperties, "dhcpOob")
		delete(additionalProperties, "ansibleRunner")
		delete(additionalProperties, "secondIp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGenerateSiteControllerOneliner struct {
	value *GenerateSiteControllerOneliner
	isSet bool
}

func (v NullableGenerateSiteControllerOneliner) Get() *GenerateSiteControllerOneliner {
	return v.value
}

func (v *NullableGenerateSiteControllerOneliner) Set(val *GenerateSiteControllerOneliner) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateSiteControllerOneliner) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateSiteControllerOneliner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateSiteControllerOneliner(val *GenerateSiteControllerOneliner) *NullableGenerateSiteControllerOneliner {
	return &NullableGenerateSiteControllerOneliner{value: val, isSet: true}
}

func (v NullableGenerateSiteControllerOneliner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateSiteControllerOneliner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


