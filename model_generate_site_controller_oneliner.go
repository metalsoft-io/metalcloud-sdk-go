/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GenerateSiteControllerOneliner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateSiteControllerOneliner{}

// GenerateSiteControllerOneliner struct for GenerateSiteControllerOneliner
type GenerateSiteControllerOneliner struct {
	// Use Podman instead of Docker
	UsePodman bool `json:"usePodman"`
	// Install in inband mode
	InbandMode bool `json:"inbandMode"`
	// Use Docker environment variables
	DockerEnv bool `json:"dockerEnv"`
	// Registry URL
	Registry string `json:"registry"`
	// GitHub tag for deploy-agents.sh script
	GitHubTag string `json:"gitHubTag"`
	// Use local script instead of curling it
	LocalScript bool `json:"localScript"`
	// SSL hostname
	SslHostname string `json:"sslHostname"`
	// Docker images tag version ( The version of tunnel microservice )
	ImagesTag string `json:"imagesTag"`
	// MS Tunnel Secret for secure connections
	MsTunnelSecret string `json:"msTunnelSecret"`
	AdditionalProperties map[string]interface{}
}

type _GenerateSiteControllerOneliner GenerateSiteControllerOneliner

// NewGenerateSiteControllerOneliner instantiates a new GenerateSiteControllerOneliner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateSiteControllerOneliner(usePodman bool, inbandMode bool, dockerEnv bool, registry string, gitHubTag string, localScript bool, sslHostname string, imagesTag string, msTunnelSecret string) *GenerateSiteControllerOneliner {
	this := GenerateSiteControllerOneliner{}
	this.UsePodman = usePodman
	this.InbandMode = inbandMode
	this.DockerEnv = dockerEnv
	this.Registry = registry
	this.GitHubTag = gitHubTag
	this.LocalScript = localScript
	this.SslHostname = sslHostname
	this.ImagesTag = imagesTag
	this.MsTunnelSecret = msTunnelSecret
	return &this
}

// NewGenerateSiteControllerOnelinerWithDefaults instantiates a new GenerateSiteControllerOneliner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateSiteControllerOnelinerWithDefaults() *GenerateSiteControllerOneliner {
	this := GenerateSiteControllerOneliner{}
	var usePodman bool = false
	this.UsePodman = usePodman
	var inbandMode bool = false
	this.InbandMode = inbandMode
	var dockerEnv bool = false
	this.DockerEnv = dockerEnv
	var registry string = "registry.metalsoft.dev"
	this.Registry = registry
	var gitHubTag string = "main"
	this.GitHubTag = gitHubTag
	var localScript bool = false
	this.LocalScript = localScript
	return &this
}

// GetUsePodman returns the UsePodman field value
func (o *GenerateSiteControllerOneliner) GetUsePodman() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UsePodman
}

// GetUsePodmanOk returns a tuple with the UsePodman field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetUsePodmanOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsePodman, true
}

// SetUsePodman sets field value
func (o *GenerateSiteControllerOneliner) SetUsePodman(v bool) {
	o.UsePodman = v
}

// GetInbandMode returns the InbandMode field value
func (o *GenerateSiteControllerOneliner) GetInbandMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InbandMode
}

// GetInbandModeOk returns a tuple with the InbandMode field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetInbandModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InbandMode, true
}

// SetInbandMode sets field value
func (o *GenerateSiteControllerOneliner) SetInbandMode(v bool) {
	o.InbandMode = v
}

// GetDockerEnv returns the DockerEnv field value
func (o *GenerateSiteControllerOneliner) GetDockerEnv() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DockerEnv
}

// GetDockerEnvOk returns a tuple with the DockerEnv field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetDockerEnvOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DockerEnv, true
}

// SetDockerEnv sets field value
func (o *GenerateSiteControllerOneliner) SetDockerEnv(v bool) {
	o.DockerEnv = v
}

// GetRegistry returns the Registry field value
func (o *GenerateSiteControllerOneliner) GetRegistry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Registry
}

// GetRegistryOk returns a tuple with the Registry field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetRegistryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Registry, true
}

// SetRegistry sets field value
func (o *GenerateSiteControllerOneliner) SetRegistry(v string) {
	o.Registry = v
}

// GetGitHubTag returns the GitHubTag field value
func (o *GenerateSiteControllerOneliner) GetGitHubTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitHubTag
}

// GetGitHubTagOk returns a tuple with the GitHubTag field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetGitHubTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitHubTag, true
}

// SetGitHubTag sets field value
func (o *GenerateSiteControllerOneliner) SetGitHubTag(v string) {
	o.GitHubTag = v
}

// GetLocalScript returns the LocalScript field value
func (o *GenerateSiteControllerOneliner) GetLocalScript() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LocalScript
}

// GetLocalScriptOk returns a tuple with the LocalScript field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetLocalScriptOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalScript, true
}

// SetLocalScript sets field value
func (o *GenerateSiteControllerOneliner) SetLocalScript(v bool) {
	o.LocalScript = v
}

// GetSslHostname returns the SslHostname field value
func (o *GenerateSiteControllerOneliner) GetSslHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SslHostname
}

// GetSslHostnameOk returns a tuple with the SslHostname field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetSslHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SslHostname, true
}

// SetSslHostname sets field value
func (o *GenerateSiteControllerOneliner) SetSslHostname(v string) {
	o.SslHostname = v
}

// GetImagesTag returns the ImagesTag field value
func (o *GenerateSiteControllerOneliner) GetImagesTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImagesTag
}

// GetImagesTagOk returns a tuple with the ImagesTag field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetImagesTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImagesTag, true
}

// SetImagesTag sets field value
func (o *GenerateSiteControllerOneliner) SetImagesTag(v string) {
	o.ImagesTag = v
}

// GetMsTunnelSecret returns the MsTunnelSecret field value
func (o *GenerateSiteControllerOneliner) GetMsTunnelSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MsTunnelSecret
}

// GetMsTunnelSecretOk returns a tuple with the MsTunnelSecret field value
// and a boolean to check if the value has been set.
func (o *GenerateSiteControllerOneliner) GetMsTunnelSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MsTunnelSecret, true
}

// SetMsTunnelSecret sets field value
func (o *GenerateSiteControllerOneliner) SetMsTunnelSecret(v string) {
	o.MsTunnelSecret = v
}

func (o GenerateSiteControllerOneliner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateSiteControllerOneliner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["usePodman"] = o.UsePodman
	toSerialize["inbandMode"] = o.InbandMode
	toSerialize["dockerEnv"] = o.DockerEnv
	toSerialize["registry"] = o.Registry
	toSerialize["gitHubTag"] = o.GitHubTag
	toSerialize["localScript"] = o.LocalScript
	toSerialize["sslHostname"] = o.SslHostname
	toSerialize["imagesTag"] = o.ImagesTag
	toSerialize["msTunnelSecret"] = o.MsTunnelSecret

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GenerateSiteControllerOneliner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"usePodman",
		"inbandMode",
		"dockerEnv",
		"registry",
		"gitHubTag",
		"localScript",
		"sslHostname",
		"imagesTag",
		"msTunnelSecret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenerateSiteControllerOneliner := _GenerateSiteControllerOneliner{}

	err = json.Unmarshal(data, &varGenerateSiteControllerOneliner)

	if err != nil {
		return err
	}

	*o = GenerateSiteControllerOneliner(varGenerateSiteControllerOneliner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "usePodman")
		delete(additionalProperties, "inbandMode")
		delete(additionalProperties, "dockerEnv")
		delete(additionalProperties, "registry")
		delete(additionalProperties, "gitHubTag")
		delete(additionalProperties, "localScript")
		delete(additionalProperties, "sslHostname")
		delete(additionalProperties, "imagesTag")
		delete(additionalProperties, "msTunnelSecret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGenerateSiteControllerOneliner struct {
	value *GenerateSiteControllerOneliner
	isSet bool
}

func (v NullableGenerateSiteControllerOneliner) Get() *GenerateSiteControllerOneliner {
	return v.value
}

func (v *NullableGenerateSiteControllerOneliner) Set(val *GenerateSiteControllerOneliner) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateSiteControllerOneliner) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateSiteControllerOneliner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateSiteControllerOneliner(val *GenerateSiteControllerOneliner) *NullableGenerateSiteControllerOneliner {
	return &NullableGenerateSiteControllerOneliner{value: val, isSet: true}
}

func (v NullableGenerateSiteControllerOneliner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateSiteControllerOneliner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


