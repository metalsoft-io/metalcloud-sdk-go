/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ChangeUserAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeUserAccount{}

// ChangeUserAccount struct for ChangeUserAccount
type ChangeUserAccount struct {
	// The ID of the parent account
	NewAccountId float32 `json:"newAccountId"`
	AdditionalProperties map[string]interface{}
}

type _ChangeUserAccount ChangeUserAccount

// NewChangeUserAccount instantiates a new ChangeUserAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeUserAccount(newAccountId float32) *ChangeUserAccount {
	this := ChangeUserAccount{}
	this.NewAccountId = newAccountId
	return &this
}

// NewChangeUserAccountWithDefaults instantiates a new ChangeUserAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeUserAccountWithDefaults() *ChangeUserAccount {
	this := ChangeUserAccount{}
	return &this
}

// GetNewAccountId returns the NewAccountId field value
func (o *ChangeUserAccount) GetNewAccountId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NewAccountId
}

// GetNewAccountIdOk returns a tuple with the NewAccountId field value
// and a boolean to check if the value has been set.
func (o *ChangeUserAccount) GetNewAccountIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewAccountId, true
}

// SetNewAccountId sets field value
func (o *ChangeUserAccount) SetNewAccountId(v float32) {
	o.NewAccountId = v
}

func (o ChangeUserAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeUserAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["newAccountId"] = o.NewAccountId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChangeUserAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"newAccountId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangeUserAccount := _ChangeUserAccount{}

	err = json.Unmarshal(data, &varChangeUserAccount)

	if err != nil {
		return err
	}

	*o = ChangeUserAccount(varChangeUserAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "newAccountId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChangeUserAccount struct {
	value *ChangeUserAccount
	isSet bool
}

func (v NullableChangeUserAccount) Get() *ChangeUserAccount {
	return v.value
}

func (v *NullableChangeUserAccount) Set(val *ChangeUserAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeUserAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeUserAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeUserAccount(val *ChangeUserAccount) *NullableChangeUserAccount {
	return &NullableChangeUserAccount{value: val, isSet: true}
}

func (v NullableChangeUserAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeUserAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


