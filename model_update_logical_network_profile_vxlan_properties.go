/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateLogicalNetworkProfileVxlanProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLogicalNetworkProfileVxlanProperties{}

// UpdateLogicalNetworkProfileVxlanProperties struct for UpdateLogicalNetworkProfileVxlanProperties
type UpdateLogicalNetworkProfileVxlanProperties struct {
	VniAllocationStrategies []CreateVniAllocationStrategy `json:"vniAllocationStrategies,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLogicalNetworkProfileVxlanProperties UpdateLogicalNetworkProfileVxlanProperties

// NewUpdateLogicalNetworkProfileVxlanProperties instantiates a new UpdateLogicalNetworkProfileVxlanProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLogicalNetworkProfileVxlanProperties() *UpdateLogicalNetworkProfileVxlanProperties {
	this := UpdateLogicalNetworkProfileVxlanProperties{}
	return &this
}

// NewUpdateLogicalNetworkProfileVxlanPropertiesWithDefaults instantiates a new UpdateLogicalNetworkProfileVxlanProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLogicalNetworkProfileVxlanPropertiesWithDefaults() *UpdateLogicalNetworkProfileVxlanProperties {
	this := UpdateLogicalNetworkProfileVxlanProperties{}
	return &this
}

// GetVniAllocationStrategies returns the VniAllocationStrategies field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkProfileVxlanProperties) GetVniAllocationStrategies() []CreateVniAllocationStrategy {
	if o == nil || IsNil(o.VniAllocationStrategies) {
		var ret []CreateVniAllocationStrategy
		return ret
	}
	return o.VniAllocationStrategies
}

// GetVniAllocationStrategiesOk returns a tuple with the VniAllocationStrategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfileVxlanProperties) GetVniAllocationStrategiesOk() ([]CreateVniAllocationStrategy, bool) {
	if o == nil || IsNil(o.VniAllocationStrategies) {
		return nil, false
	}
	return o.VniAllocationStrategies, true
}

// HasVniAllocationStrategies returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkProfileVxlanProperties) HasVniAllocationStrategies() bool {
	if o != nil && !IsNil(o.VniAllocationStrategies) {
		return true
	}

	return false
}

// SetVniAllocationStrategies gets a reference to the given []CreateVniAllocationStrategy and assigns it to the VniAllocationStrategies field.
func (o *UpdateLogicalNetworkProfileVxlanProperties) SetVniAllocationStrategies(v []CreateVniAllocationStrategy) {
	o.VniAllocationStrategies = v
}

func (o UpdateLogicalNetworkProfileVxlanProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLogicalNetworkProfileVxlanProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VniAllocationStrategies) {
		toSerialize["vniAllocationStrategies"] = o.VniAllocationStrategies
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLogicalNetworkProfileVxlanProperties) UnmarshalJSON(data []byte) (err error) {
	varUpdateLogicalNetworkProfileVxlanProperties := _UpdateLogicalNetworkProfileVxlanProperties{}

	err = json.Unmarshal(data, &varUpdateLogicalNetworkProfileVxlanProperties)

	if err != nil {
		return err
	}

	*o = UpdateLogicalNetworkProfileVxlanProperties(varUpdateLogicalNetworkProfileVxlanProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vniAllocationStrategies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLogicalNetworkProfileVxlanProperties struct {
	value *UpdateLogicalNetworkProfileVxlanProperties
	isSet bool
}

func (v NullableUpdateLogicalNetworkProfileVxlanProperties) Get() *UpdateLogicalNetworkProfileVxlanProperties {
	return v.value
}

func (v *NullableUpdateLogicalNetworkProfileVxlanProperties) Set(val *UpdateLogicalNetworkProfileVxlanProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLogicalNetworkProfileVxlanProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLogicalNetworkProfileVxlanProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLogicalNetworkProfileVxlanProperties(val *UpdateLogicalNetworkProfileVxlanProperties) *NullableUpdateLogicalNetworkProfileVxlanProperties {
	return &NullableUpdateLogicalNetworkProfileVxlanProperties{value: val, isSet: true}
}

func (v NullableUpdateLogicalNetworkProfileVxlanProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLogicalNetworkProfileVxlanProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


