/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateLogicalNetworkACL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLogicalNetworkACL{}

// UpdateLogicalNetworkACL struct for UpdateLogicalNetworkACL
type UpdateLogicalNetworkACL struct {
	// The type of the rule
	RuleType *ACLType `json:"ruleType,omitempty"`
	// The direction of the rule
	Direction *ACLDirection `json:"direction,omitempty"`
	// The sequence number of the rule
	Sequence *int32 `json:"sequence,omitempty"`
	// The forwarding action of the rule
	ForwardingAction *ACLForwardingAction `json:"forwardingAction,omitempty"`
	// The network protocol of the ACL rule
	NetworkProtocol *string `json:"networkProtocol,omitempty"`
	// The source address of the rule if the rule type is IPv4, IPv6
	SourceAddress *string `json:"sourceAddress,omitempty"`
	// The destination address of the rule if the rule type is IPv4, IPv6
	DestinationAddress *string `json:"destinationAddress,omitempty"`
	// The source port of the rule if the rule type is IPv4, IPv6, TCP or UDP
	SourcePort *string `json:"sourcePort,omitempty"`
	// The destination port of the rule if the rule type is IPv4, IPv6
	DestinationPort *string `json:"destinationPort,omitempty"`
	// The source MAC address of the rule if the rule type is MAC
	SourceMac *string `json:"sourceMac,omitempty"`
	// The destination MAC address of the rule if the rule type is MAC
	DestinationMac *string `json:"destinationMac,omitempty"`
	// The enforcement point of the rule
	EnforcementPoint *ACLEnforcementPoint `json:"enforcementPoint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLogicalNetworkACL UpdateLogicalNetworkACL

// NewUpdateLogicalNetworkACL instantiates a new UpdateLogicalNetworkACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLogicalNetworkACL() *UpdateLogicalNetworkACL {
	this := UpdateLogicalNetworkACL{}
	return &this
}

// NewUpdateLogicalNetworkACLWithDefaults instantiates a new UpdateLogicalNetworkACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLogicalNetworkACLWithDefaults() *UpdateLogicalNetworkACL {
	this := UpdateLogicalNetworkACL{}
	return &this
}

// GetRuleType returns the RuleType field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetRuleType() ACLType {
	if o == nil || IsNil(o.RuleType) {
		var ret ACLType
		return ret
	}
	return *o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetRuleTypeOk() (*ACLType, bool) {
	if o == nil || IsNil(o.RuleType) {
		return nil, false
	}
	return o.RuleType, true
}

// HasRuleType returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasRuleType() bool {
	if o != nil && !IsNil(o.RuleType) {
		return true
	}

	return false
}

// SetRuleType gets a reference to the given ACLType and assigns it to the RuleType field.
func (o *UpdateLogicalNetworkACL) SetRuleType(v ACLType) {
	o.RuleType = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetDirection() ACLDirection {
	if o == nil || IsNil(o.Direction) {
		var ret ACLDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetDirectionOk() (*ACLDirection, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given ACLDirection and assigns it to the Direction field.
func (o *UpdateLogicalNetworkACL) SetDirection(v ACLDirection) {
	o.Direction = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *UpdateLogicalNetworkACL) SetSequence(v int32) {
	o.Sequence = &v
}

// GetForwardingAction returns the ForwardingAction field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetForwardingAction() ACLForwardingAction {
	if o == nil || IsNil(o.ForwardingAction) {
		var ret ACLForwardingAction
		return ret
	}
	return *o.ForwardingAction
}

// GetForwardingActionOk returns a tuple with the ForwardingAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetForwardingActionOk() (*ACLForwardingAction, bool) {
	if o == nil || IsNil(o.ForwardingAction) {
		return nil, false
	}
	return o.ForwardingAction, true
}

// HasForwardingAction returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasForwardingAction() bool {
	if o != nil && !IsNil(o.ForwardingAction) {
		return true
	}

	return false
}

// SetForwardingAction gets a reference to the given ACLForwardingAction and assigns it to the ForwardingAction field.
func (o *UpdateLogicalNetworkACL) SetForwardingAction(v ACLForwardingAction) {
	o.ForwardingAction = &v
}

// GetNetworkProtocol returns the NetworkProtocol field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetNetworkProtocol() string {
	if o == nil || IsNil(o.NetworkProtocol) {
		var ret string
		return ret
	}
	return *o.NetworkProtocol
}

// GetNetworkProtocolOk returns a tuple with the NetworkProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetNetworkProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkProtocol) {
		return nil, false
	}
	return o.NetworkProtocol, true
}

// HasNetworkProtocol returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasNetworkProtocol() bool {
	if o != nil && !IsNil(o.NetworkProtocol) {
		return true
	}

	return false
}

// SetNetworkProtocol gets a reference to the given string and assigns it to the NetworkProtocol field.
func (o *UpdateLogicalNetworkACL) SetNetworkProtocol(v string) {
	o.NetworkProtocol = &v
}

// GetSourceAddress returns the SourceAddress field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetSourceAddress() string {
	if o == nil || IsNil(o.SourceAddress) {
		var ret string
		return ret
	}
	return *o.SourceAddress
}

// GetSourceAddressOk returns a tuple with the SourceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetSourceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SourceAddress) {
		return nil, false
	}
	return o.SourceAddress, true
}

// HasSourceAddress returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasSourceAddress() bool {
	if o != nil && !IsNil(o.SourceAddress) {
		return true
	}

	return false
}

// SetSourceAddress gets a reference to the given string and assigns it to the SourceAddress field.
func (o *UpdateLogicalNetworkACL) SetSourceAddress(v string) {
	o.SourceAddress = &v
}

// GetDestinationAddress returns the DestinationAddress field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetDestinationAddress() string {
	if o == nil || IsNil(o.DestinationAddress) {
		var ret string
		return ret
	}
	return *o.DestinationAddress
}

// GetDestinationAddressOk returns a tuple with the DestinationAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetDestinationAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationAddress) {
		return nil, false
	}
	return o.DestinationAddress, true
}

// HasDestinationAddress returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasDestinationAddress() bool {
	if o != nil && !IsNil(o.DestinationAddress) {
		return true
	}

	return false
}

// SetDestinationAddress gets a reference to the given string and assigns it to the DestinationAddress field.
func (o *UpdateLogicalNetworkACL) SetDestinationAddress(v string) {
	o.DestinationAddress = &v
}

// GetSourcePort returns the SourcePort field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetSourcePort() string {
	if o == nil || IsNil(o.SourcePort) {
		var ret string
		return ret
	}
	return *o.SourcePort
}

// GetSourcePortOk returns a tuple with the SourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetSourcePortOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePort) {
		return nil, false
	}
	return o.SourcePort, true
}

// HasSourcePort returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasSourcePort() bool {
	if o != nil && !IsNil(o.SourcePort) {
		return true
	}

	return false
}

// SetSourcePort gets a reference to the given string and assigns it to the SourcePort field.
func (o *UpdateLogicalNetworkACL) SetSourcePort(v string) {
	o.SourcePort = &v
}

// GetDestinationPort returns the DestinationPort field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetDestinationPort() string {
	if o == nil || IsNil(o.DestinationPort) {
		var ret string
		return ret
	}
	return *o.DestinationPort
}

// GetDestinationPortOk returns a tuple with the DestinationPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetDestinationPortOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationPort) {
		return nil, false
	}
	return o.DestinationPort, true
}

// HasDestinationPort returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasDestinationPort() bool {
	if o != nil && !IsNil(o.DestinationPort) {
		return true
	}

	return false
}

// SetDestinationPort gets a reference to the given string and assigns it to the DestinationPort field.
func (o *UpdateLogicalNetworkACL) SetDestinationPort(v string) {
	o.DestinationPort = &v
}

// GetSourceMac returns the SourceMac field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetSourceMac() string {
	if o == nil || IsNil(o.SourceMac) {
		var ret string
		return ret
	}
	return *o.SourceMac
}

// GetSourceMacOk returns a tuple with the SourceMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetSourceMacOk() (*string, bool) {
	if o == nil || IsNil(o.SourceMac) {
		return nil, false
	}
	return o.SourceMac, true
}

// HasSourceMac returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasSourceMac() bool {
	if o != nil && !IsNil(o.SourceMac) {
		return true
	}

	return false
}

// SetSourceMac gets a reference to the given string and assigns it to the SourceMac field.
func (o *UpdateLogicalNetworkACL) SetSourceMac(v string) {
	o.SourceMac = &v
}

// GetDestinationMac returns the DestinationMac field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetDestinationMac() string {
	if o == nil || IsNil(o.DestinationMac) {
		var ret string
		return ret
	}
	return *o.DestinationMac
}

// GetDestinationMacOk returns a tuple with the DestinationMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetDestinationMacOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationMac) {
		return nil, false
	}
	return o.DestinationMac, true
}

// HasDestinationMac returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasDestinationMac() bool {
	if o != nil && !IsNil(o.DestinationMac) {
		return true
	}

	return false
}

// SetDestinationMac gets a reference to the given string and assigns it to the DestinationMac field.
func (o *UpdateLogicalNetworkACL) SetDestinationMac(v string) {
	o.DestinationMac = &v
}

// GetEnforcementPoint returns the EnforcementPoint field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkACL) GetEnforcementPoint() ACLEnforcementPoint {
	if o == nil || IsNil(o.EnforcementPoint) {
		var ret ACLEnforcementPoint
		return ret
	}
	return *o.EnforcementPoint
}

// GetEnforcementPointOk returns a tuple with the EnforcementPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkACL) GetEnforcementPointOk() (*ACLEnforcementPoint, bool) {
	if o == nil || IsNil(o.EnforcementPoint) {
		return nil, false
	}
	return o.EnforcementPoint, true
}

// HasEnforcementPoint returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkACL) HasEnforcementPoint() bool {
	if o != nil && !IsNil(o.EnforcementPoint) {
		return true
	}

	return false
}

// SetEnforcementPoint gets a reference to the given ACLEnforcementPoint and assigns it to the EnforcementPoint field.
func (o *UpdateLogicalNetworkACL) SetEnforcementPoint(v ACLEnforcementPoint) {
	o.EnforcementPoint = &v
}

func (o UpdateLogicalNetworkACL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLogicalNetworkACL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleType) {
		toSerialize["ruleType"] = o.RuleType
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.ForwardingAction) {
		toSerialize["forwardingAction"] = o.ForwardingAction
	}
	if !IsNil(o.NetworkProtocol) {
		toSerialize["networkProtocol"] = o.NetworkProtocol
	}
	if !IsNil(o.SourceAddress) {
		toSerialize["sourceAddress"] = o.SourceAddress
	}
	if !IsNil(o.DestinationAddress) {
		toSerialize["destinationAddress"] = o.DestinationAddress
	}
	if !IsNil(o.SourcePort) {
		toSerialize["sourcePort"] = o.SourcePort
	}
	if !IsNil(o.DestinationPort) {
		toSerialize["destinationPort"] = o.DestinationPort
	}
	if !IsNil(o.SourceMac) {
		toSerialize["sourceMac"] = o.SourceMac
	}
	if !IsNil(o.DestinationMac) {
		toSerialize["destinationMac"] = o.DestinationMac
	}
	if !IsNil(o.EnforcementPoint) {
		toSerialize["enforcementPoint"] = o.EnforcementPoint
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLogicalNetworkACL) UnmarshalJSON(data []byte) (err error) {
	varUpdateLogicalNetworkACL := _UpdateLogicalNetworkACL{}

	err = json.Unmarshal(data, &varUpdateLogicalNetworkACL)

	if err != nil {
		return err
	}

	*o = UpdateLogicalNetworkACL(varUpdateLogicalNetworkACL)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ruleType")
		delete(additionalProperties, "direction")
		delete(additionalProperties, "sequence")
		delete(additionalProperties, "forwardingAction")
		delete(additionalProperties, "networkProtocol")
		delete(additionalProperties, "sourceAddress")
		delete(additionalProperties, "destinationAddress")
		delete(additionalProperties, "sourcePort")
		delete(additionalProperties, "destinationPort")
		delete(additionalProperties, "sourceMac")
		delete(additionalProperties, "destinationMac")
		delete(additionalProperties, "enforcementPoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLogicalNetworkACL struct {
	value *UpdateLogicalNetworkACL
	isSet bool
}

func (v NullableUpdateLogicalNetworkACL) Get() *UpdateLogicalNetworkACL {
	return v.value
}

func (v *NullableUpdateLogicalNetworkACL) Set(val *UpdateLogicalNetworkACL) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLogicalNetworkACL) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLogicalNetworkACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLogicalNetworkACL(val *UpdateLogicalNetworkACL) *NullableUpdateLogicalNetworkACL {
	return &NullableUpdateLogicalNetworkACL{value: val, isSet: true}
}

func (v NullableUpdateLogicalNetworkACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLogicalNetworkACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


