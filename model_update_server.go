/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateServer{}

// UpdateServer struct for UpdateServer
type UpdateServer struct {
	// The id of the server type.
	ServerTypeId *float32 `json:"serverTypeId,omitempty"`
	// The Management Address of the server.
	ManagementAddress *string `json:"managementAddress,omitempty"`
	// The username to use.
	Username *string `json:"username,omitempty"`
	// The cleanup policy id of the server.
	ServerCleanupPolicyId *float32 `json:"serverCleanupPolicyId,omitempty"`
	// The comments of the server.
	ServerComments *string `json:"serverComments,omitempty"`
	// The chassis rack id of the server.
	ChassisRackId *float32 `json:"chassisRackId,omitempty"`
	// The chassis rack name of the server.
	RackName *string `json:"rackName,omitempty"`
	// The chassis rack upper unit position of the server.
	RackPositionUpperUnit *string `json:"rackPositionUpperUnit,omitempty"`
	// The chassis rack lower unit position of the server.
	RackPositionLowerUnit *string `json:"rackPositionLowerUnit,omitempty"`
	// The inventory id of the server.
	InventoryId *string `json:"inventoryId,omitempty"`
	// Tags for the Server.
	Tags []string `json:"tags,omitempty"`
	// Resource Pool ID
	ResourcePoolId *float32 `json:"resourcePoolId,omitempty"`
	// The status of the server.
	ServerStatus *string `json:"serverStatus,omitempty"`
	// The server class.
	ServerClass *string `json:"serverClass,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateServer UpdateServer

// NewUpdateServer instantiates a new UpdateServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateServer() *UpdateServer {
	this := UpdateServer{}
	return &this
}

// NewUpdateServerWithDefaults instantiates a new UpdateServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServerWithDefaults() *UpdateServer {
	this := UpdateServer{}
	return &this
}

// GetServerTypeId returns the ServerTypeId field value if set, zero value otherwise.
func (o *UpdateServer) GetServerTypeId() float32 {
	if o == nil || IsNil(o.ServerTypeId) {
		var ret float32
		return ret
	}
	return *o.ServerTypeId
}

// GetServerTypeIdOk returns a tuple with the ServerTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetServerTypeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerTypeId) {
		return nil, false
	}
	return o.ServerTypeId, true
}

// HasServerTypeId returns a boolean if a field has been set.
func (o *UpdateServer) HasServerTypeId() bool {
	if o != nil && !IsNil(o.ServerTypeId) {
		return true
	}

	return false
}

// SetServerTypeId gets a reference to the given float32 and assigns it to the ServerTypeId field.
func (o *UpdateServer) SetServerTypeId(v float32) {
	o.ServerTypeId = &v
}

// GetManagementAddress returns the ManagementAddress field value if set, zero value otherwise.
func (o *UpdateServer) GetManagementAddress() string {
	if o == nil || IsNil(o.ManagementAddress) {
		var ret string
		return ret
	}
	return *o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetManagementAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddress) {
		return nil, false
	}
	return o.ManagementAddress, true
}

// HasManagementAddress returns a boolean if a field has been set.
func (o *UpdateServer) HasManagementAddress() bool {
	if o != nil && !IsNil(o.ManagementAddress) {
		return true
	}

	return false
}

// SetManagementAddress gets a reference to the given string and assigns it to the ManagementAddress field.
func (o *UpdateServer) SetManagementAddress(v string) {
	o.ManagementAddress = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UpdateServer) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateServer) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UpdateServer) SetUsername(v string) {
	o.Username = &v
}

// GetServerCleanupPolicyId returns the ServerCleanupPolicyId field value if set, zero value otherwise.
func (o *UpdateServer) GetServerCleanupPolicyId() float32 {
	if o == nil || IsNil(o.ServerCleanupPolicyId) {
		var ret float32
		return ret
	}
	return *o.ServerCleanupPolicyId
}

// GetServerCleanupPolicyIdOk returns a tuple with the ServerCleanupPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetServerCleanupPolicyIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerCleanupPolicyId) {
		return nil, false
	}
	return o.ServerCleanupPolicyId, true
}

// HasServerCleanupPolicyId returns a boolean if a field has been set.
func (o *UpdateServer) HasServerCleanupPolicyId() bool {
	if o != nil && !IsNil(o.ServerCleanupPolicyId) {
		return true
	}

	return false
}

// SetServerCleanupPolicyId gets a reference to the given float32 and assigns it to the ServerCleanupPolicyId field.
func (o *UpdateServer) SetServerCleanupPolicyId(v float32) {
	o.ServerCleanupPolicyId = &v
}

// GetServerComments returns the ServerComments field value if set, zero value otherwise.
func (o *UpdateServer) GetServerComments() string {
	if o == nil || IsNil(o.ServerComments) {
		var ret string
		return ret
	}
	return *o.ServerComments
}

// GetServerCommentsOk returns a tuple with the ServerComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetServerCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.ServerComments) {
		return nil, false
	}
	return o.ServerComments, true
}

// HasServerComments returns a boolean if a field has been set.
func (o *UpdateServer) HasServerComments() bool {
	if o != nil && !IsNil(o.ServerComments) {
		return true
	}

	return false
}

// SetServerComments gets a reference to the given string and assigns it to the ServerComments field.
func (o *UpdateServer) SetServerComments(v string) {
	o.ServerComments = &v
}

// GetChassisRackId returns the ChassisRackId field value if set, zero value otherwise.
func (o *UpdateServer) GetChassisRackId() float32 {
	if o == nil || IsNil(o.ChassisRackId) {
		var ret float32
		return ret
	}
	return *o.ChassisRackId
}

// GetChassisRackIdOk returns a tuple with the ChassisRackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetChassisRackIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ChassisRackId) {
		return nil, false
	}
	return o.ChassisRackId, true
}

// HasChassisRackId returns a boolean if a field has been set.
func (o *UpdateServer) HasChassisRackId() bool {
	if o != nil && !IsNil(o.ChassisRackId) {
		return true
	}

	return false
}

// SetChassisRackId gets a reference to the given float32 and assigns it to the ChassisRackId field.
func (o *UpdateServer) SetChassisRackId(v float32) {
	o.ChassisRackId = &v
}

// GetRackName returns the RackName field value if set, zero value otherwise.
func (o *UpdateServer) GetRackName() string {
	if o == nil || IsNil(o.RackName) {
		var ret string
		return ret
	}
	return *o.RackName
}

// GetRackNameOk returns a tuple with the RackName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetRackNameOk() (*string, bool) {
	if o == nil || IsNil(o.RackName) {
		return nil, false
	}
	return o.RackName, true
}

// HasRackName returns a boolean if a field has been set.
func (o *UpdateServer) HasRackName() bool {
	if o != nil && !IsNil(o.RackName) {
		return true
	}

	return false
}

// SetRackName gets a reference to the given string and assigns it to the RackName field.
func (o *UpdateServer) SetRackName(v string) {
	o.RackName = &v
}

// GetRackPositionUpperUnit returns the RackPositionUpperUnit field value if set, zero value otherwise.
func (o *UpdateServer) GetRackPositionUpperUnit() string {
	if o == nil || IsNil(o.RackPositionUpperUnit) {
		var ret string
		return ret
	}
	return *o.RackPositionUpperUnit
}

// GetRackPositionUpperUnitOk returns a tuple with the RackPositionUpperUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetRackPositionUpperUnitOk() (*string, bool) {
	if o == nil || IsNil(o.RackPositionUpperUnit) {
		return nil, false
	}
	return o.RackPositionUpperUnit, true
}

// HasRackPositionUpperUnit returns a boolean if a field has been set.
func (o *UpdateServer) HasRackPositionUpperUnit() bool {
	if o != nil && !IsNil(o.RackPositionUpperUnit) {
		return true
	}

	return false
}

// SetRackPositionUpperUnit gets a reference to the given string and assigns it to the RackPositionUpperUnit field.
func (o *UpdateServer) SetRackPositionUpperUnit(v string) {
	o.RackPositionUpperUnit = &v
}

// GetRackPositionLowerUnit returns the RackPositionLowerUnit field value if set, zero value otherwise.
func (o *UpdateServer) GetRackPositionLowerUnit() string {
	if o == nil || IsNil(o.RackPositionLowerUnit) {
		var ret string
		return ret
	}
	return *o.RackPositionLowerUnit
}

// GetRackPositionLowerUnitOk returns a tuple with the RackPositionLowerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetRackPositionLowerUnitOk() (*string, bool) {
	if o == nil || IsNil(o.RackPositionLowerUnit) {
		return nil, false
	}
	return o.RackPositionLowerUnit, true
}

// HasRackPositionLowerUnit returns a boolean if a field has been set.
func (o *UpdateServer) HasRackPositionLowerUnit() bool {
	if o != nil && !IsNil(o.RackPositionLowerUnit) {
		return true
	}

	return false
}

// SetRackPositionLowerUnit gets a reference to the given string and assigns it to the RackPositionLowerUnit field.
func (o *UpdateServer) SetRackPositionLowerUnit(v string) {
	o.RackPositionLowerUnit = &v
}

// GetInventoryId returns the InventoryId field value if set, zero value otherwise.
func (o *UpdateServer) GetInventoryId() string {
	if o == nil || IsNil(o.InventoryId) {
		var ret string
		return ret
	}
	return *o.InventoryId
}

// GetInventoryIdOk returns a tuple with the InventoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetInventoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryId) {
		return nil, false
	}
	return o.InventoryId, true
}

// HasInventoryId returns a boolean if a field has been set.
func (o *UpdateServer) HasInventoryId() bool {
	if o != nil && !IsNil(o.InventoryId) {
		return true
	}

	return false
}

// SetInventoryId gets a reference to the given string and assigns it to the InventoryId field.
func (o *UpdateServer) SetInventoryId(v string) {
	o.InventoryId = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateServer) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateServer) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateServer) SetTags(v []string) {
	o.Tags = v
}

// GetResourcePoolId returns the ResourcePoolId field value if set, zero value otherwise.
func (o *UpdateServer) GetResourcePoolId() float32 {
	if o == nil || IsNil(o.ResourcePoolId) {
		var ret float32
		return ret
	}
	return *o.ResourcePoolId
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetResourcePoolIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ResourcePoolId) {
		return nil, false
	}
	return o.ResourcePoolId, true
}

// HasResourcePoolId returns a boolean if a field has been set.
func (o *UpdateServer) HasResourcePoolId() bool {
	if o != nil && !IsNil(o.ResourcePoolId) {
		return true
	}

	return false
}

// SetResourcePoolId gets a reference to the given float32 and assigns it to the ResourcePoolId field.
func (o *UpdateServer) SetResourcePoolId(v float32) {
	o.ResourcePoolId = &v
}

// GetServerStatus returns the ServerStatus field value if set, zero value otherwise.
func (o *UpdateServer) GetServerStatus() string {
	if o == nil || IsNil(o.ServerStatus) {
		var ret string
		return ret
	}
	return *o.ServerStatus
}

// GetServerStatusOk returns a tuple with the ServerStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetServerStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ServerStatus) {
		return nil, false
	}
	return o.ServerStatus, true
}

// HasServerStatus returns a boolean if a field has been set.
func (o *UpdateServer) HasServerStatus() bool {
	if o != nil && !IsNil(o.ServerStatus) {
		return true
	}

	return false
}

// SetServerStatus gets a reference to the given string and assigns it to the ServerStatus field.
func (o *UpdateServer) SetServerStatus(v string) {
	o.ServerStatus = &v
}

// GetServerClass returns the ServerClass field value if set, zero value otherwise.
func (o *UpdateServer) GetServerClass() string {
	if o == nil || IsNil(o.ServerClass) {
		var ret string
		return ret
	}
	return *o.ServerClass
}

// GetServerClassOk returns a tuple with the ServerClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServer) GetServerClassOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClass) {
		return nil, false
	}
	return o.ServerClass, true
}

// HasServerClass returns a boolean if a field has been set.
func (o *UpdateServer) HasServerClass() bool {
	if o != nil && !IsNil(o.ServerClass) {
		return true
	}

	return false
}

// SetServerClass gets a reference to the given string and assigns it to the ServerClass field.
func (o *UpdateServer) SetServerClass(v string) {
	o.ServerClass = &v
}

func (o UpdateServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerTypeId) {
		toSerialize["serverTypeId"] = o.ServerTypeId
	}
	if !IsNil(o.ManagementAddress) {
		toSerialize["managementAddress"] = o.ManagementAddress
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.ServerCleanupPolicyId) {
		toSerialize["serverCleanupPolicyId"] = o.ServerCleanupPolicyId
	}
	if !IsNil(o.ServerComments) {
		toSerialize["serverComments"] = o.ServerComments
	}
	if !IsNil(o.ChassisRackId) {
		toSerialize["chassisRackId"] = o.ChassisRackId
	}
	if !IsNil(o.RackName) {
		toSerialize["rackName"] = o.RackName
	}
	if !IsNil(o.RackPositionUpperUnit) {
		toSerialize["rackPositionUpperUnit"] = o.RackPositionUpperUnit
	}
	if !IsNil(o.RackPositionLowerUnit) {
		toSerialize["rackPositionLowerUnit"] = o.RackPositionLowerUnit
	}
	if !IsNil(o.InventoryId) {
		toSerialize["inventoryId"] = o.InventoryId
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ResourcePoolId) {
		toSerialize["resourcePoolId"] = o.ResourcePoolId
	}
	if !IsNil(o.ServerStatus) {
		toSerialize["serverStatus"] = o.ServerStatus
	}
	if !IsNil(o.ServerClass) {
		toSerialize["serverClass"] = o.ServerClass
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateServer) UnmarshalJSON(data []byte) (err error) {
	varUpdateServer := _UpdateServer{}

	err = json.Unmarshal(data, &varUpdateServer)

	if err != nil {
		return err
	}

	*o = UpdateServer(varUpdateServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverTypeId")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "username")
		delete(additionalProperties, "serverCleanupPolicyId")
		delete(additionalProperties, "serverComments")
		delete(additionalProperties, "chassisRackId")
		delete(additionalProperties, "rackName")
		delete(additionalProperties, "rackPositionUpperUnit")
		delete(additionalProperties, "rackPositionLowerUnit")
		delete(additionalProperties, "inventoryId")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "resourcePoolId")
		delete(additionalProperties, "serverStatus")
		delete(additionalProperties, "serverClass")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateServer struct {
	value *UpdateServer
	isSet bool
}

func (v NullableUpdateServer) Get() *UpdateServer {
	return v.value
}

func (v *NullableUpdateServer) Set(val *UpdateServer) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateServer) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateServer(val *UpdateServer) *NullableUpdateServer {
	return &NullableUpdateServer{value: val, isSet: true}
}

func (v NullableUpdateServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


