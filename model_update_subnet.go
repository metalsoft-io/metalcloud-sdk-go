/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateSubnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubnet{}

// UpdateSubnet struct for UpdateSubnet
type UpdateSubnet struct {
	// Revision of the Subnet
	Revision float32 `json:"revision"`
	Label *string `json:"label,omitempty"`
	// Name of the Subnet
	Name string `json:"name"`
	AllocationDenylist []string `json:"allocationDenylist"`
	AllowedChildOverlapConditions []string `json:"allowedChildOverlapConditions"`
	Tags map[string]interface{} `json:"tags"`
	Metadata map[string]interface{} `json:"metadata"`
	AdditionalProperties map[string]interface{}
}

type _UpdateSubnet UpdateSubnet

// NewUpdateSubnet instantiates a new UpdateSubnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSubnet(revision float32, name string, allocationDenylist []string, allowedChildOverlapConditions []string, tags map[string]interface{}, metadata map[string]interface{}) *UpdateSubnet {
	this := UpdateSubnet{}
	this.Revision = revision
	this.Name = name
	this.AllocationDenylist = allocationDenylist
	this.AllowedChildOverlapConditions = allowedChildOverlapConditions
	this.Tags = tags
	this.Metadata = metadata
	return &this
}

// NewUpdateSubnetWithDefaults instantiates a new UpdateSubnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubnetWithDefaults() *UpdateSubnet {
	this := UpdateSubnet{}
	return &this
}

// GetRevision returns the Revision field value
func (o *UpdateSubnet) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *UpdateSubnet) SetRevision(v float32) {
	o.Revision = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateSubnet) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateSubnet) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateSubnet) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value
func (o *UpdateSubnet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateSubnet) SetName(v string) {
	o.Name = v
}

// GetAllocationDenylist returns the AllocationDenylist field value
func (o *UpdateSubnet) GetAllocationDenylist() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllocationDenylist
}

// GetAllocationDenylistOk returns a tuple with the AllocationDenylist field value
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetAllocationDenylistOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllocationDenylist, true
}

// SetAllocationDenylist sets field value
func (o *UpdateSubnet) SetAllocationDenylist(v []string) {
	o.AllocationDenylist = v
}

// GetAllowedChildOverlapConditions returns the AllowedChildOverlapConditions field value
func (o *UpdateSubnet) GetAllowedChildOverlapConditions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedChildOverlapConditions
}

// GetAllowedChildOverlapConditionsOk returns a tuple with the AllowedChildOverlapConditions field value
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetAllowedChildOverlapConditionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedChildOverlapConditions, true
}

// SetAllowedChildOverlapConditions sets field value
func (o *UpdateSubnet) SetAllowedChildOverlapConditions(v []string) {
	o.AllowedChildOverlapConditions = v
}

// GetTags returns the Tags field value
func (o *UpdateSubnet) GetTags() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *UpdateSubnet) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetMetadata returns the Metadata field value
func (o *UpdateSubnet) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *UpdateSubnet) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o UpdateSubnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revision"] = o.Revision
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["name"] = o.Name
	toSerialize["allocationDenylist"] = o.AllocationDenylist
	toSerialize["allowedChildOverlapConditions"] = o.AllowedChildOverlapConditions
	toSerialize["tags"] = o.Tags
	toSerialize["metadata"] = o.Metadata

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateSubnet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revision",
		"name",
		"allocationDenylist",
		"allowedChildOverlapConditions",
		"tags",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateSubnet := _UpdateSubnet{}

	err = json.Unmarshal(data, &varUpdateSubnet)

	if err != nil {
		return err
	}

	*o = UpdateSubnet(varUpdateSubnet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "name")
		delete(additionalProperties, "allocationDenylist")
		delete(additionalProperties, "allowedChildOverlapConditions")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "metadata")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateSubnet struct {
	value *UpdateSubnet
	isSet bool
}

func (v NullableUpdateSubnet) Get() *UpdateSubnet {
	return v.value
}

func (v *NullableUpdateSubnet) Set(val *UpdateSubnet) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubnet(val *UpdateSubnet) *NullableUpdateSubnet {
	return &NullableUpdateSubnet{value: val, isSet: true}
}

func (v NullableUpdateSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


