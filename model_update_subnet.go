/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateSubnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSubnet{}

// UpdateSubnet struct for UpdateSubnet
type UpdateSubnet struct {
	Label *string `json:"label,omitempty"`
	Name *string `json:"name,omitempty"`
	Annotations *map[string]string `json:"annotations,omitempty"`
	Tags *map[string]string `json:"tags,omitempty"`
	AllocationDenylist []AddressRange `json:"allocationDenylist,omitempty"`
	ChildOverlapAllowRules []string `json:"childOverlapAllowRules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateSubnet UpdateSubnet

// NewUpdateSubnet instantiates a new UpdateSubnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSubnet() *UpdateSubnet {
	this := UpdateSubnet{}
	return &this
}

// NewUpdateSubnetWithDefaults instantiates a new UpdateSubnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSubnetWithDefaults() *UpdateSubnet {
	this := UpdateSubnet{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateSubnet) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateSubnet) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateSubnet) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateSubnet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateSubnet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateSubnet) SetName(v string) {
	o.Name = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *UpdateSubnet) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *UpdateSubnet) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *UpdateSubnet) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateSubnet) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateSubnet) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *UpdateSubnet) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetAllocationDenylist returns the AllocationDenylist field value if set, zero value otherwise.
func (o *UpdateSubnet) GetAllocationDenylist() []AddressRange {
	if o == nil || IsNil(o.AllocationDenylist) {
		var ret []AddressRange
		return ret
	}
	return o.AllocationDenylist
}

// GetAllocationDenylistOk returns a tuple with the AllocationDenylist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetAllocationDenylistOk() ([]AddressRange, bool) {
	if o == nil || IsNil(o.AllocationDenylist) {
		return nil, false
	}
	return o.AllocationDenylist, true
}

// HasAllocationDenylist returns a boolean if a field has been set.
func (o *UpdateSubnet) HasAllocationDenylist() bool {
	if o != nil && !IsNil(o.AllocationDenylist) {
		return true
	}

	return false
}

// SetAllocationDenylist gets a reference to the given []AddressRange and assigns it to the AllocationDenylist field.
func (o *UpdateSubnet) SetAllocationDenylist(v []AddressRange) {
	o.AllocationDenylist = v
}

// GetChildOverlapAllowRules returns the ChildOverlapAllowRules field value if set, zero value otherwise.
func (o *UpdateSubnet) GetChildOverlapAllowRules() []string {
	if o == nil || IsNil(o.ChildOverlapAllowRules) {
		var ret []string
		return ret
	}
	return o.ChildOverlapAllowRules
}

// GetChildOverlapAllowRulesOk returns a tuple with the ChildOverlapAllowRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSubnet) GetChildOverlapAllowRulesOk() ([]string, bool) {
	if o == nil || IsNil(o.ChildOverlapAllowRules) {
		return nil, false
	}
	return o.ChildOverlapAllowRules, true
}

// HasChildOverlapAllowRules returns a boolean if a field has been set.
func (o *UpdateSubnet) HasChildOverlapAllowRules() bool {
	if o != nil && !IsNil(o.ChildOverlapAllowRules) {
		return true
	}

	return false
}

// SetChildOverlapAllowRules gets a reference to the given []string and assigns it to the ChildOverlapAllowRules field.
func (o *UpdateSubnet) SetChildOverlapAllowRules(v []string) {
	o.ChildOverlapAllowRules = v
}

func (o UpdateSubnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSubnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.AllocationDenylist) {
		toSerialize["allocationDenylist"] = o.AllocationDenylist
	}
	if !IsNil(o.ChildOverlapAllowRules) {
		toSerialize["childOverlapAllowRules"] = o.ChildOverlapAllowRules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateSubnet) UnmarshalJSON(data []byte) (err error) {
	varUpdateSubnet := _UpdateSubnet{}

	err = json.Unmarshal(data, &varUpdateSubnet)

	if err != nil {
		return err
	}

	*o = UpdateSubnet(varUpdateSubnet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "name")
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "allocationDenylist")
		delete(additionalProperties, "childOverlapAllowRules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateSubnet struct {
	value *UpdateSubnet
	isSet bool
}

func (v NullableUpdateSubnet) Get() *UpdateSubnet {
	return v.value
}

func (v *NullableUpdateSubnet) Set(val *UpdateSubnet) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSubnet(val *UpdateSubnet) *NullableUpdateSubnet {
	return &NullableUpdateSubnet{value: val, isSet: true}
}

func (v NullableUpdateSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


