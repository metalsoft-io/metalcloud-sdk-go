/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the NetworkFabric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkFabric{}

// NetworkFabric struct for NetworkFabric
type NetworkFabric struct {
	// The ID of the site where the entity is located.
	SiteId *float32 `json:"siteId,omitempty"`
	// The network fabric name
	Name string `json:"name"`
	// Network fabric description
	Description *string `json:"description,omitempty"`
	FabricConfiguration NetworkFabricFabricConfiguration `json:"fabricConfiguration"`
	// Revision number of the entity
	Revision string `json:"revision"`
	// Entity creation timestamp
	CreatedTimestamp time.Time `json:"createdTimestamp"`
	// Entity last update timestamp
	UpdatedTimestamp time.Time `json:"updatedTimestamp"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	// The network fabric ID.
	Id string `json:"id"`
	// The status of the network fabric, by default it is in draft mode.
	Status *FabricStatus `json:"status,omitempty"`
	// The deploy ID of the network fabric, if it is being deployed.
	DeployId *int32 `json:"deployId,omitempty"`
	// The network equipments in the fabric
	NetworkEquipment []NetworkDevice `json:"networkEquipment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkFabric NetworkFabric

// NewNetworkFabric instantiates a new NetworkFabric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkFabric(name string, fabricConfiguration NetworkFabricFabricConfiguration, revision string, createdTimestamp time.Time, updatedTimestamp time.Time, id string) *NetworkFabric {
	this := NetworkFabric{}
	this.Name = name
	this.FabricConfiguration = fabricConfiguration
	this.Revision = revision
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.Id = id
	return &this
}

// NewNetworkFabricWithDefaults instantiates a new NetworkFabric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkFabricWithDefaults() *NetworkFabric {
	this := NetworkFabric{}
	return &this
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *NetworkFabric) GetSiteId() float32 {
	if o == nil || IsNil(o.SiteId) {
		var ret float32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetSiteIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *NetworkFabric) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given float32 and assigns it to the SiteId field.
func (o *NetworkFabric) SetSiteId(v float32) {
	o.SiteId = &v
}

// GetName returns the Name field value
func (o *NetworkFabric) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NetworkFabric) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NetworkFabric) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NetworkFabric) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NetworkFabric) SetDescription(v string) {
	o.Description = &v
}

// GetFabricConfiguration returns the FabricConfiguration field value
func (o *NetworkFabric) GetFabricConfiguration() NetworkFabricFabricConfiguration {
	if o == nil {
		var ret NetworkFabricFabricConfiguration
		return ret
	}

	return o.FabricConfiguration
}

// GetFabricConfigurationOk returns a tuple with the FabricConfiguration field value
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetFabricConfigurationOk() (*NetworkFabricFabricConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FabricConfiguration, true
}

// SetFabricConfiguration sets field value
func (o *NetworkFabric) SetFabricConfiguration(v NetworkFabricFabricConfiguration) {
	o.FabricConfiguration = v
}

// GetRevision returns the Revision field value
func (o *NetworkFabric) GetRevision() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetRevisionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *NetworkFabric) SetRevision(v string) {
	o.Revision = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *NetworkFabric) GetCreatedTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetCreatedTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *NetworkFabric) SetCreatedTimestamp(v time.Time) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *NetworkFabric) GetUpdatedTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetUpdatedTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *NetworkFabric) SetUpdatedTimestamp(v time.Time) {
	o.UpdatedTimestamp = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NetworkFabric) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NetworkFabric) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *NetworkFabric) SetLinks(v []Link) {
	o.Links = v
}

// GetId returns the Id field value
func (o *NetworkFabric) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NetworkFabric) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NetworkFabric) GetStatus() FabricStatus {
	if o == nil || IsNil(o.Status) {
		var ret FabricStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetStatusOk() (*FabricStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NetworkFabric) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given FabricStatus and assigns it to the Status field.
func (o *NetworkFabric) SetStatus(v FabricStatus) {
	o.Status = &v
}

// GetDeployId returns the DeployId field value if set, zero value otherwise.
func (o *NetworkFabric) GetDeployId() int32 {
	if o == nil || IsNil(o.DeployId) {
		var ret int32
		return ret
	}
	return *o.DeployId
}

// GetDeployIdOk returns a tuple with the DeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetDeployIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DeployId) {
		return nil, false
	}
	return o.DeployId, true
}

// HasDeployId returns a boolean if a field has been set.
func (o *NetworkFabric) HasDeployId() bool {
	if o != nil && !IsNil(o.DeployId) {
		return true
	}

	return false
}

// SetDeployId gets a reference to the given int32 and assigns it to the DeployId field.
func (o *NetworkFabric) SetDeployId(v int32) {
	o.DeployId = &v
}

// GetNetworkEquipment returns the NetworkEquipment field value if set, zero value otherwise.
func (o *NetworkFabric) GetNetworkEquipment() []NetworkDevice {
	if o == nil || IsNil(o.NetworkEquipment) {
		var ret []NetworkDevice
		return ret
	}
	return o.NetworkEquipment
}

// GetNetworkEquipmentOk returns a tuple with the NetworkEquipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkFabric) GetNetworkEquipmentOk() ([]NetworkDevice, bool) {
	if o == nil || IsNil(o.NetworkEquipment) {
		return nil, false
	}
	return o.NetworkEquipment, true
}

// HasNetworkEquipment returns a boolean if a field has been set.
func (o *NetworkFabric) HasNetworkEquipment() bool {
	if o != nil && !IsNil(o.NetworkEquipment) {
		return true
	}

	return false
}

// SetNetworkEquipment gets a reference to the given []NetworkDevice and assigns it to the NetworkEquipment field.
func (o *NetworkFabric) SetNetworkEquipment(v []NetworkDevice) {
	o.NetworkEquipment = v
}

func (o NetworkFabric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkFabric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["fabricConfiguration"] = o.FabricConfiguration
	toSerialize["revision"] = o.Revision
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DeployId) {
		toSerialize["deployId"] = o.DeployId
	}
	if !IsNil(o.NetworkEquipment) {
		toSerialize["networkEquipment"] = o.NetworkEquipment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkFabric) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"fabricConfiguration",
		"revision",
		"createdTimestamp",
		"updatedTimestamp",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkFabric := _NetworkFabric{}

	err = json.Unmarshal(data, &varNetworkFabric)

	if err != nil {
		return err
	}

	*o = NetworkFabric(varNetworkFabric)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "fabricConfiguration")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "links")
		delete(additionalProperties, "id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "deployId")
		delete(additionalProperties, "networkEquipment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkFabric struct {
	value *NetworkFabric
	isSet bool
}

func (v NullableNetworkFabric) Get() *NetworkFabric {
	return v.value
}

func (v *NullableNetworkFabric) Set(val *NetworkFabric) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkFabric) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkFabric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkFabric(val *NetworkFabric) *NullableNetworkFabric {
	return &NullableNetworkFabric{value: val, isSet: true}
}

func (v NullableNetworkFabric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkFabric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


