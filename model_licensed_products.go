/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the LicensedProducts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicensedProducts{}

// LicensedProducts struct for LicensedProducts
type LicensedProducts struct {
	// Indicates if servers are licensed
	ServersAreLicensed bool `json:"serversAreLicensed"`
	// Indicates if switches are licensed
	SwitchesAreLicensed bool `json:"switchesAreLicensed"`
	// Indicates if vms are licensed
	VmsAreLicensed bool `json:"vmsAreLicensed"`
	// Indicates if storages are licensed
	StoragesAreLicensed bool `json:"storagesAreLicensed"`
	AdditionalProperties map[string]interface{}
}

type _LicensedProducts LicensedProducts

// NewLicensedProducts instantiates a new LicensedProducts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicensedProducts(serversAreLicensed bool, switchesAreLicensed bool, vmsAreLicensed bool, storagesAreLicensed bool) *LicensedProducts {
	this := LicensedProducts{}
	this.ServersAreLicensed = serversAreLicensed
	this.SwitchesAreLicensed = switchesAreLicensed
	this.VmsAreLicensed = vmsAreLicensed
	this.StoragesAreLicensed = storagesAreLicensed
	return &this
}

// NewLicensedProductsWithDefaults instantiates a new LicensedProducts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicensedProductsWithDefaults() *LicensedProducts {
	this := LicensedProducts{}
	return &this
}

// GetServersAreLicensed returns the ServersAreLicensed field value
func (o *LicensedProducts) GetServersAreLicensed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ServersAreLicensed
}

// GetServersAreLicensedOk returns a tuple with the ServersAreLicensed field value
// and a boolean to check if the value has been set.
func (o *LicensedProducts) GetServersAreLicensedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServersAreLicensed, true
}

// SetServersAreLicensed sets field value
func (o *LicensedProducts) SetServersAreLicensed(v bool) {
	o.ServersAreLicensed = v
}

// GetSwitchesAreLicensed returns the SwitchesAreLicensed field value
func (o *LicensedProducts) GetSwitchesAreLicensed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SwitchesAreLicensed
}

// GetSwitchesAreLicensedOk returns a tuple with the SwitchesAreLicensed field value
// and a boolean to check if the value has been set.
func (o *LicensedProducts) GetSwitchesAreLicensedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SwitchesAreLicensed, true
}

// SetSwitchesAreLicensed sets field value
func (o *LicensedProducts) SetSwitchesAreLicensed(v bool) {
	o.SwitchesAreLicensed = v
}

// GetVmsAreLicensed returns the VmsAreLicensed field value
func (o *LicensedProducts) GetVmsAreLicensed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VmsAreLicensed
}

// GetVmsAreLicensedOk returns a tuple with the VmsAreLicensed field value
// and a boolean to check if the value has been set.
func (o *LicensedProducts) GetVmsAreLicensedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmsAreLicensed, true
}

// SetVmsAreLicensed sets field value
func (o *LicensedProducts) SetVmsAreLicensed(v bool) {
	o.VmsAreLicensed = v
}

// GetStoragesAreLicensed returns the StoragesAreLicensed field value
func (o *LicensedProducts) GetStoragesAreLicensed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.StoragesAreLicensed
}

// GetStoragesAreLicensedOk returns a tuple with the StoragesAreLicensed field value
// and a boolean to check if the value has been set.
func (o *LicensedProducts) GetStoragesAreLicensedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoragesAreLicensed, true
}

// SetStoragesAreLicensed sets field value
func (o *LicensedProducts) SetStoragesAreLicensed(v bool) {
	o.StoragesAreLicensed = v
}

func (o LicensedProducts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicensedProducts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serversAreLicensed"] = o.ServersAreLicensed
	toSerialize["switchesAreLicensed"] = o.SwitchesAreLicensed
	toSerialize["vmsAreLicensed"] = o.VmsAreLicensed
	toSerialize["storagesAreLicensed"] = o.StoragesAreLicensed

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicensedProducts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serversAreLicensed",
		"switchesAreLicensed",
		"vmsAreLicensed",
		"storagesAreLicensed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicensedProducts := _LicensedProducts{}

	err = json.Unmarshal(data, &varLicensedProducts)

	if err != nil {
		return err
	}

	*o = LicensedProducts(varLicensedProducts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serversAreLicensed")
		delete(additionalProperties, "switchesAreLicensed")
		delete(additionalProperties, "vmsAreLicensed")
		delete(additionalProperties, "storagesAreLicensed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicensedProducts struct {
	value *LicensedProducts
	isSet bool
}

func (v NullableLicensedProducts) Get() *LicensedProducts {
	return v.value
}

func (v *NullableLicensedProducts) Set(val *LicensedProducts) {
	v.value = val
	v.isSet = true
}

func (v NullableLicensedProducts) IsSet() bool {
	return v.isSet
}

func (v *NullableLicensedProducts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicensedProducts(val *LicensedProducts) *NullableLicensedProducts {
	return &NullableLicensedProducts{value: val, isSet: true}
}

func (v NullableLicensedProducts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicensedProducts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


