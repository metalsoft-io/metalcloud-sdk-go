/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the Storage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Storage{}

// Storage struct for Storage
type Storage struct {
	// Id of the Storage
	StorageId float32 `json:"storageId"`
	// Id of the owner
	UserId *float32 `json:"userId,omitempty"`
	// Id of the site
	SiteId float32 `json:"siteId"`
	// Storage driver
	StorageDriver string `json:"storageDriver"`
	// Storage technology
	StorageTechnology string `json:"storageTechnology"`
	// Storage type
	StorageType string `json:"storageType"`
	// Name of the storage
	Name string `json:"name"`
	// ISCSI host
	IscsiHost *string `json:"iscsiHost,omitempty"`
	// ISCSI port
	IscsiPort *float32 `json:"iscsiPort,omitempty"`
	// Management host
	ManagementHost string `json:"managementHost"`
	// Username
	Username string `json:"username"`
	// Password encrypted
	PasswordEncrypted string `json:"passwordEncrypted"`
	// Options for the storage
	Options *StorageOptions `json:"options,omitempty"`
	// Specifies if the storage is in maintenance
	InMaintenance float32 `json:"inMaintenance"`
	// Target IQN
	TargetIQN *string `json:"targetIQN,omitempty"`
	// Specifies if the storage is experimental
	IsExperimental *float32 `json:"isExperimental,omitempty"`
	// Specifies the drive priority
	DrivePriority *float32 `json:"drivePriority,omitempty"`
	// Specifies the shared drive priority
	SharedDrivePriority *float32 `json:"sharedDrivePriority,omitempty"`
	// Alternate SAN IPs
	AlternateSanIPs []string `json:"alternateSanIPs,omitempty"`
	// Tags
	Tags []string `json:"tags,omitempty"`
	// Port group allocation order
	PortGroupAllocationOrder map[string]interface{} `json:"portGroupAllocationOrder,omitempty"`
	// Port group physical ports
	PortGroupPhysicalPorts map[string]interface{} `json:"portGroupPhysicalPorts,omitempty"`
	// Default IO limit policy
	DefaultIoLimitPolicy *string `json:"defaultIoLimitPolicy,omitempty"`
	// Subnet type
	SubnetType string `json:"subnetType"`
	// Array id
	ArrayId *string `json:"arrayId,omitempty"`
	// Director id
	DirectorId *string `json:"directorId,omitempty"`
	// S3 hostname
	S3Hostname *string `json:"s3Hostname,omitempty"`
	// S3 port
	S3Port *string `json:"s3Port,omitempty"`
	JobInfo *JobInfo `json:"jobInfo,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Storage Storage

// NewStorage instantiates a new Storage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorage(storageId float32, siteId float32, storageDriver string, storageTechnology string, storageType string, name string, managementHost string, username string, passwordEncrypted string, inMaintenance float32, subnetType string) *Storage {
	this := Storage{}
	this.StorageId = storageId
	this.SiteId = siteId
	this.StorageDriver = storageDriver
	this.StorageTechnology = storageTechnology
	this.StorageType = storageType
	this.Name = name
	this.ManagementHost = managementHost
	this.Username = username
	this.PasswordEncrypted = passwordEncrypted
	this.InMaintenance = inMaintenance
	this.SubnetType = subnetType
	return &this
}

// NewStorageWithDefaults instantiates a new Storage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageWithDefaults() *Storage {
	this := Storage{}
	return &this
}

// GetStorageId returns the StorageId field value
func (o *Storage) GetStorageId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value
// and a boolean to check if the value has been set.
func (o *Storage) GetStorageIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageId, true
}

// SetStorageId sets field value
func (o *Storage) SetStorageId(v float32) {
	o.StorageId = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Storage) GetUserId() float32 {
	if o == nil || IsNil(o.UserId) {
		var ret float32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetUserIdOk() (*float32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Storage) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given float32 and assigns it to the UserId field.
func (o *Storage) SetUserId(v float32) {
	o.UserId = &v
}

// GetSiteId returns the SiteId field value
func (o *Storage) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *Storage) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *Storage) SetSiteId(v float32) {
	o.SiteId = v
}

// GetStorageDriver returns the StorageDriver field value
func (o *Storage) GetStorageDriver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageDriver
}

// GetStorageDriverOk returns a tuple with the StorageDriver field value
// and a boolean to check if the value has been set.
func (o *Storage) GetStorageDriverOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageDriver, true
}

// SetStorageDriver sets field value
func (o *Storage) SetStorageDriver(v string) {
	o.StorageDriver = v
}

// GetStorageTechnology returns the StorageTechnology field value
func (o *Storage) GetStorageTechnology() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageTechnology
}

// GetStorageTechnologyOk returns a tuple with the StorageTechnology field value
// and a boolean to check if the value has been set.
func (o *Storage) GetStorageTechnologyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageTechnology, true
}

// SetStorageTechnology sets field value
func (o *Storage) SetStorageTechnology(v string) {
	o.StorageTechnology = v
}

// GetStorageType returns the StorageType field value
func (o *Storage) GetStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value
// and a boolean to check if the value has been set.
func (o *Storage) GetStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageType, true
}

// SetStorageType sets field value
func (o *Storage) SetStorageType(v string) {
	o.StorageType = v
}

// GetName returns the Name field value
func (o *Storage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Storage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Storage) SetName(v string) {
	o.Name = v
}

// GetIscsiHost returns the IscsiHost field value if set, zero value otherwise.
func (o *Storage) GetIscsiHost() string {
	if o == nil || IsNil(o.IscsiHost) {
		var ret string
		return ret
	}
	return *o.IscsiHost
}

// GetIscsiHostOk returns a tuple with the IscsiHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetIscsiHostOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiHost) {
		return nil, false
	}
	return o.IscsiHost, true
}

// HasIscsiHost returns a boolean if a field has been set.
func (o *Storage) HasIscsiHost() bool {
	if o != nil && !IsNil(o.IscsiHost) {
		return true
	}

	return false
}

// SetIscsiHost gets a reference to the given string and assigns it to the IscsiHost field.
func (o *Storage) SetIscsiHost(v string) {
	o.IscsiHost = &v
}

// GetIscsiPort returns the IscsiPort field value if set, zero value otherwise.
func (o *Storage) GetIscsiPort() float32 {
	if o == nil || IsNil(o.IscsiPort) {
		var ret float32
		return ret
	}
	return *o.IscsiPort
}

// GetIscsiPortOk returns a tuple with the IscsiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetIscsiPortOk() (*float32, bool) {
	if o == nil || IsNil(o.IscsiPort) {
		return nil, false
	}
	return o.IscsiPort, true
}

// HasIscsiPort returns a boolean if a field has been set.
func (o *Storage) HasIscsiPort() bool {
	if o != nil && !IsNil(o.IscsiPort) {
		return true
	}

	return false
}

// SetIscsiPort gets a reference to the given float32 and assigns it to the IscsiPort field.
func (o *Storage) SetIscsiPort(v float32) {
	o.IscsiPort = &v
}

// GetManagementHost returns the ManagementHost field value
func (o *Storage) GetManagementHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementHost
}

// GetManagementHostOk returns a tuple with the ManagementHost field value
// and a boolean to check if the value has been set.
func (o *Storage) GetManagementHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementHost, true
}

// SetManagementHost sets field value
func (o *Storage) SetManagementHost(v string) {
	o.ManagementHost = v
}

// GetUsername returns the Username field value
func (o *Storage) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *Storage) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *Storage) SetUsername(v string) {
	o.Username = v
}

// GetPasswordEncrypted returns the PasswordEncrypted field value
func (o *Storage) GetPasswordEncrypted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PasswordEncrypted
}

// GetPasswordEncryptedOk returns a tuple with the PasswordEncrypted field value
// and a boolean to check if the value has been set.
func (o *Storage) GetPasswordEncryptedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordEncrypted, true
}

// SetPasswordEncrypted sets field value
func (o *Storage) SetPasswordEncrypted(v string) {
	o.PasswordEncrypted = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Storage) GetOptions() StorageOptions {
	if o == nil || IsNil(o.Options) {
		var ret StorageOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetOptionsOk() (*StorageOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Storage) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given StorageOptions and assigns it to the Options field.
func (o *Storage) SetOptions(v StorageOptions) {
	o.Options = &v
}

// GetInMaintenance returns the InMaintenance field value
func (o *Storage) GetInMaintenance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InMaintenance
}

// GetInMaintenanceOk returns a tuple with the InMaintenance field value
// and a boolean to check if the value has been set.
func (o *Storage) GetInMaintenanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InMaintenance, true
}

// SetInMaintenance sets field value
func (o *Storage) SetInMaintenance(v float32) {
	o.InMaintenance = v
}

// GetTargetIQN returns the TargetIQN field value if set, zero value otherwise.
func (o *Storage) GetTargetIQN() string {
	if o == nil || IsNil(o.TargetIQN) {
		var ret string
		return ret
	}
	return *o.TargetIQN
}

// GetTargetIQNOk returns a tuple with the TargetIQN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetTargetIQNOk() (*string, bool) {
	if o == nil || IsNil(o.TargetIQN) {
		return nil, false
	}
	return o.TargetIQN, true
}

// HasTargetIQN returns a boolean if a field has been set.
func (o *Storage) HasTargetIQN() bool {
	if o != nil && !IsNil(o.TargetIQN) {
		return true
	}

	return false
}

// SetTargetIQN gets a reference to the given string and assigns it to the TargetIQN field.
func (o *Storage) SetTargetIQN(v string) {
	o.TargetIQN = &v
}

// GetIsExperimental returns the IsExperimental field value if set, zero value otherwise.
func (o *Storage) GetIsExperimental() float32 {
	if o == nil || IsNil(o.IsExperimental) {
		var ret float32
		return ret
	}
	return *o.IsExperimental
}

// GetIsExperimentalOk returns a tuple with the IsExperimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetIsExperimentalOk() (*float32, bool) {
	if o == nil || IsNil(o.IsExperimental) {
		return nil, false
	}
	return o.IsExperimental, true
}

// HasIsExperimental returns a boolean if a field has been set.
func (o *Storage) HasIsExperimental() bool {
	if o != nil && !IsNil(o.IsExperimental) {
		return true
	}

	return false
}

// SetIsExperimental gets a reference to the given float32 and assigns it to the IsExperimental field.
func (o *Storage) SetIsExperimental(v float32) {
	o.IsExperimental = &v
}

// GetDrivePriority returns the DrivePriority field value if set, zero value otherwise.
func (o *Storage) GetDrivePriority() float32 {
	if o == nil || IsNil(o.DrivePriority) {
		var ret float32
		return ret
	}
	return *o.DrivePriority
}

// GetDrivePriorityOk returns a tuple with the DrivePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetDrivePriorityOk() (*float32, bool) {
	if o == nil || IsNil(o.DrivePriority) {
		return nil, false
	}
	return o.DrivePriority, true
}

// HasDrivePriority returns a boolean if a field has been set.
func (o *Storage) HasDrivePriority() bool {
	if o != nil && !IsNil(o.DrivePriority) {
		return true
	}

	return false
}

// SetDrivePriority gets a reference to the given float32 and assigns it to the DrivePriority field.
func (o *Storage) SetDrivePriority(v float32) {
	o.DrivePriority = &v
}

// GetSharedDrivePriority returns the SharedDrivePriority field value if set, zero value otherwise.
func (o *Storage) GetSharedDrivePriority() float32 {
	if o == nil || IsNil(o.SharedDrivePriority) {
		var ret float32
		return ret
	}
	return *o.SharedDrivePriority
}

// GetSharedDrivePriorityOk returns a tuple with the SharedDrivePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetSharedDrivePriorityOk() (*float32, bool) {
	if o == nil || IsNil(o.SharedDrivePriority) {
		return nil, false
	}
	return o.SharedDrivePriority, true
}

// HasSharedDrivePriority returns a boolean if a field has been set.
func (o *Storage) HasSharedDrivePriority() bool {
	if o != nil && !IsNil(o.SharedDrivePriority) {
		return true
	}

	return false
}

// SetSharedDrivePriority gets a reference to the given float32 and assigns it to the SharedDrivePriority field.
func (o *Storage) SetSharedDrivePriority(v float32) {
	o.SharedDrivePriority = &v
}

// GetAlternateSanIPs returns the AlternateSanIPs field value if set, zero value otherwise.
func (o *Storage) GetAlternateSanIPs() []string {
	if o == nil || IsNil(o.AlternateSanIPs) {
		var ret []string
		return ret
	}
	return o.AlternateSanIPs
}

// GetAlternateSanIPsOk returns a tuple with the AlternateSanIPs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetAlternateSanIPsOk() ([]string, bool) {
	if o == nil || IsNil(o.AlternateSanIPs) {
		return nil, false
	}
	return o.AlternateSanIPs, true
}

// HasAlternateSanIPs returns a boolean if a field has been set.
func (o *Storage) HasAlternateSanIPs() bool {
	if o != nil && !IsNil(o.AlternateSanIPs) {
		return true
	}

	return false
}

// SetAlternateSanIPs gets a reference to the given []string and assigns it to the AlternateSanIPs field.
func (o *Storage) SetAlternateSanIPs(v []string) {
	o.AlternateSanIPs = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Storage) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Storage) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Storage) SetTags(v []string) {
	o.Tags = v
}

// GetPortGroupAllocationOrder returns the PortGroupAllocationOrder field value if set, zero value otherwise.
func (o *Storage) GetPortGroupAllocationOrder() map[string]interface{} {
	if o == nil || IsNil(o.PortGroupAllocationOrder) {
		var ret map[string]interface{}
		return ret
	}
	return o.PortGroupAllocationOrder
}

// GetPortGroupAllocationOrderOk returns a tuple with the PortGroupAllocationOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetPortGroupAllocationOrderOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PortGroupAllocationOrder) {
		return map[string]interface{}{}, false
	}
	return o.PortGroupAllocationOrder, true
}

// HasPortGroupAllocationOrder returns a boolean if a field has been set.
func (o *Storage) HasPortGroupAllocationOrder() bool {
	if o != nil && !IsNil(o.PortGroupAllocationOrder) {
		return true
	}

	return false
}

// SetPortGroupAllocationOrder gets a reference to the given map[string]interface{} and assigns it to the PortGroupAllocationOrder field.
func (o *Storage) SetPortGroupAllocationOrder(v map[string]interface{}) {
	o.PortGroupAllocationOrder = v
}

// GetPortGroupPhysicalPorts returns the PortGroupPhysicalPorts field value if set, zero value otherwise.
func (o *Storage) GetPortGroupPhysicalPorts() map[string]interface{} {
	if o == nil || IsNil(o.PortGroupPhysicalPorts) {
		var ret map[string]interface{}
		return ret
	}
	return o.PortGroupPhysicalPorts
}

// GetPortGroupPhysicalPortsOk returns a tuple with the PortGroupPhysicalPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetPortGroupPhysicalPortsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PortGroupPhysicalPorts) {
		return map[string]interface{}{}, false
	}
	return o.PortGroupPhysicalPorts, true
}

// HasPortGroupPhysicalPorts returns a boolean if a field has been set.
func (o *Storage) HasPortGroupPhysicalPorts() bool {
	if o != nil && !IsNil(o.PortGroupPhysicalPorts) {
		return true
	}

	return false
}

// SetPortGroupPhysicalPorts gets a reference to the given map[string]interface{} and assigns it to the PortGroupPhysicalPorts field.
func (o *Storage) SetPortGroupPhysicalPorts(v map[string]interface{}) {
	o.PortGroupPhysicalPorts = v
}

// GetDefaultIoLimitPolicy returns the DefaultIoLimitPolicy field value if set, zero value otherwise.
func (o *Storage) GetDefaultIoLimitPolicy() string {
	if o == nil || IsNil(o.DefaultIoLimitPolicy) {
		var ret string
		return ret
	}
	return *o.DefaultIoLimitPolicy
}

// GetDefaultIoLimitPolicyOk returns a tuple with the DefaultIoLimitPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetDefaultIoLimitPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultIoLimitPolicy) {
		return nil, false
	}
	return o.DefaultIoLimitPolicy, true
}

// HasDefaultIoLimitPolicy returns a boolean if a field has been set.
func (o *Storage) HasDefaultIoLimitPolicy() bool {
	if o != nil && !IsNil(o.DefaultIoLimitPolicy) {
		return true
	}

	return false
}

// SetDefaultIoLimitPolicy gets a reference to the given string and assigns it to the DefaultIoLimitPolicy field.
func (o *Storage) SetDefaultIoLimitPolicy(v string) {
	o.DefaultIoLimitPolicy = &v
}

// GetSubnetType returns the SubnetType field value
func (o *Storage) GetSubnetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetType
}

// GetSubnetTypeOk returns a tuple with the SubnetType field value
// and a boolean to check if the value has been set.
func (o *Storage) GetSubnetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetType, true
}

// SetSubnetType sets field value
func (o *Storage) SetSubnetType(v string) {
	o.SubnetType = v
}

// GetArrayId returns the ArrayId field value if set, zero value otherwise.
func (o *Storage) GetArrayId() string {
	if o == nil || IsNil(o.ArrayId) {
		var ret string
		return ret
	}
	return *o.ArrayId
}

// GetArrayIdOk returns a tuple with the ArrayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetArrayIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArrayId) {
		return nil, false
	}
	return o.ArrayId, true
}

// HasArrayId returns a boolean if a field has been set.
func (o *Storage) HasArrayId() bool {
	if o != nil && !IsNil(o.ArrayId) {
		return true
	}

	return false
}

// SetArrayId gets a reference to the given string and assigns it to the ArrayId field.
func (o *Storage) SetArrayId(v string) {
	o.ArrayId = &v
}

// GetDirectorId returns the DirectorId field value if set, zero value otherwise.
func (o *Storage) GetDirectorId() string {
	if o == nil || IsNil(o.DirectorId) {
		var ret string
		return ret
	}
	return *o.DirectorId
}

// GetDirectorIdOk returns a tuple with the DirectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetDirectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.DirectorId) {
		return nil, false
	}
	return o.DirectorId, true
}

// HasDirectorId returns a boolean if a field has been set.
func (o *Storage) HasDirectorId() bool {
	if o != nil && !IsNil(o.DirectorId) {
		return true
	}

	return false
}

// SetDirectorId gets a reference to the given string and assigns it to the DirectorId field.
func (o *Storage) SetDirectorId(v string) {
	o.DirectorId = &v
}

// GetS3Hostname returns the S3Hostname field value if set, zero value otherwise.
func (o *Storage) GetS3Hostname() string {
	if o == nil || IsNil(o.S3Hostname) {
		var ret string
		return ret
	}
	return *o.S3Hostname
}

// GetS3HostnameOk returns a tuple with the S3Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetS3HostnameOk() (*string, bool) {
	if o == nil || IsNil(o.S3Hostname) {
		return nil, false
	}
	return o.S3Hostname, true
}

// HasS3Hostname returns a boolean if a field has been set.
func (o *Storage) HasS3Hostname() bool {
	if o != nil && !IsNil(o.S3Hostname) {
		return true
	}

	return false
}

// SetS3Hostname gets a reference to the given string and assigns it to the S3Hostname field.
func (o *Storage) SetS3Hostname(v string) {
	o.S3Hostname = &v
}

// GetS3Port returns the S3Port field value if set, zero value otherwise.
func (o *Storage) GetS3Port() string {
	if o == nil || IsNil(o.S3Port) {
		var ret string
		return ret
	}
	return *o.S3Port
}

// GetS3PortOk returns a tuple with the S3Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetS3PortOk() (*string, bool) {
	if o == nil || IsNil(o.S3Port) {
		return nil, false
	}
	return o.S3Port, true
}

// HasS3Port returns a boolean if a field has been set.
func (o *Storage) HasS3Port() bool {
	if o != nil && !IsNil(o.S3Port) {
		return true
	}

	return false
}

// SetS3Port gets a reference to the given string and assigns it to the S3Port field.
func (o *Storage) SetS3Port(v string) {
	o.S3Port = &v
}

// GetJobInfo returns the JobInfo field value if set, zero value otherwise.
func (o *Storage) GetJobInfo() JobInfo {
	if o == nil || IsNil(o.JobInfo) {
		var ret JobInfo
		return ret
	}
	return *o.JobInfo
}

// GetJobInfoOk returns a tuple with the JobInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetJobInfoOk() (*JobInfo, bool) {
	if o == nil || IsNil(o.JobInfo) {
		return nil, false
	}
	return o.JobInfo, true
}

// HasJobInfo returns a boolean if a field has been set.
func (o *Storage) HasJobInfo() bool {
	if o != nil && !IsNil(o.JobInfo) {
		return true
	}

	return false
}

// SetJobInfo gets a reference to the given JobInfo and assigns it to the JobInfo field.
func (o *Storage) SetJobInfo(v JobInfo) {
	o.JobInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Storage) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storage) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Storage) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *Storage) SetLinks(v []Link) {
	o.Links = v
}

func (o Storage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Storage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storageId"] = o.StorageId
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	toSerialize["siteId"] = o.SiteId
	toSerialize["storageDriver"] = o.StorageDriver
	toSerialize["storageTechnology"] = o.StorageTechnology
	toSerialize["storageType"] = o.StorageType
	toSerialize["name"] = o.Name
	if !IsNil(o.IscsiHost) {
		toSerialize["iscsiHost"] = o.IscsiHost
	}
	if !IsNil(o.IscsiPort) {
		toSerialize["iscsiPort"] = o.IscsiPort
	}
	toSerialize["managementHost"] = o.ManagementHost
	toSerialize["username"] = o.Username
	toSerialize["passwordEncrypted"] = o.PasswordEncrypted
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	toSerialize["inMaintenance"] = o.InMaintenance
	if !IsNil(o.TargetIQN) {
		toSerialize["targetIQN"] = o.TargetIQN
	}
	if !IsNil(o.IsExperimental) {
		toSerialize["isExperimental"] = o.IsExperimental
	}
	if !IsNil(o.DrivePriority) {
		toSerialize["drivePriority"] = o.DrivePriority
	}
	if !IsNil(o.SharedDrivePriority) {
		toSerialize["sharedDrivePriority"] = o.SharedDrivePriority
	}
	if !IsNil(o.AlternateSanIPs) {
		toSerialize["alternateSanIPs"] = o.AlternateSanIPs
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.PortGroupAllocationOrder) {
		toSerialize["portGroupAllocationOrder"] = o.PortGroupAllocationOrder
	}
	if !IsNil(o.PortGroupPhysicalPorts) {
		toSerialize["portGroupPhysicalPorts"] = o.PortGroupPhysicalPorts
	}
	if !IsNil(o.DefaultIoLimitPolicy) {
		toSerialize["defaultIoLimitPolicy"] = o.DefaultIoLimitPolicy
	}
	toSerialize["subnetType"] = o.SubnetType
	if !IsNil(o.ArrayId) {
		toSerialize["arrayId"] = o.ArrayId
	}
	if !IsNil(o.DirectorId) {
		toSerialize["directorId"] = o.DirectorId
	}
	if !IsNil(o.S3Hostname) {
		toSerialize["s3Hostname"] = o.S3Hostname
	}
	if !IsNil(o.S3Port) {
		toSerialize["s3Port"] = o.S3Port
	}
	if !IsNil(o.JobInfo) {
		toSerialize["jobInfo"] = o.JobInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Storage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storageId",
		"siteId",
		"storageDriver",
		"storageTechnology",
		"storageType",
		"name",
		"managementHost",
		"username",
		"passwordEncrypted",
		"inMaintenance",
		"subnetType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorage := _Storage{}

	err = json.Unmarshal(data, &varStorage)

	if err != nil {
		return err
	}

	*o = Storage(varStorage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "storageId")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "storageDriver")
		delete(additionalProperties, "storageTechnology")
		delete(additionalProperties, "storageType")
		delete(additionalProperties, "name")
		delete(additionalProperties, "iscsiHost")
		delete(additionalProperties, "iscsiPort")
		delete(additionalProperties, "managementHost")
		delete(additionalProperties, "username")
		delete(additionalProperties, "passwordEncrypted")
		delete(additionalProperties, "options")
		delete(additionalProperties, "inMaintenance")
		delete(additionalProperties, "targetIQN")
		delete(additionalProperties, "isExperimental")
		delete(additionalProperties, "drivePriority")
		delete(additionalProperties, "sharedDrivePriority")
		delete(additionalProperties, "alternateSanIPs")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "portGroupAllocationOrder")
		delete(additionalProperties, "portGroupPhysicalPorts")
		delete(additionalProperties, "defaultIoLimitPolicy")
		delete(additionalProperties, "subnetType")
		delete(additionalProperties, "arrayId")
		delete(additionalProperties, "directorId")
		delete(additionalProperties, "s3Hostname")
		delete(additionalProperties, "s3Port")
		delete(additionalProperties, "jobInfo")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorage struct {
	value *Storage
	isSet bool
}

func (v NullableStorage) Get() *Storage {
	return v.value
}

func (v *NullableStorage) Set(val *Storage) {
	v.value = val
	v.isSet = true
}

func (v NullableStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorage(val *Storage) *NullableStorage {
	return &NullableStorage{value: val, isSet: true}
}

func (v NullableStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


