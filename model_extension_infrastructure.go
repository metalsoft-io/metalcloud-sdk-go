/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ExtensionInfrastructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionInfrastructure{}

// ExtensionInfrastructure struct for ExtensionInfrastructure
type ExtensionInfrastructure struct {
	// Instance array details for the infrastructure requirement.
	InstanceArrays []ExtensionInstanceArray `json:"instanceArrays,omitempty"`
	// Shared drive details for the infrastructure requirement.
	SharedDrives []ExtensionSharedDrive `json:"sharedDrives,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionInfrastructure ExtensionInfrastructure

// NewExtensionInfrastructure instantiates a new ExtensionInfrastructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionInfrastructure() *ExtensionInfrastructure {
	this := ExtensionInfrastructure{}
	return &this
}

// NewExtensionInfrastructureWithDefaults instantiates a new ExtensionInfrastructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionInfrastructureWithDefaults() *ExtensionInfrastructure {
	this := ExtensionInfrastructure{}
	return &this
}

// GetInstanceArrays returns the InstanceArrays field value if set, zero value otherwise.
func (o *ExtensionInfrastructure) GetInstanceArrays() []ExtensionInstanceArray {
	if o == nil || IsNil(o.InstanceArrays) {
		var ret []ExtensionInstanceArray
		return ret
	}
	return o.InstanceArrays
}

// GetInstanceArraysOk returns a tuple with the InstanceArrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInfrastructure) GetInstanceArraysOk() ([]ExtensionInstanceArray, bool) {
	if o == nil || IsNil(o.InstanceArrays) {
		return nil, false
	}
	return o.InstanceArrays, true
}

// HasInstanceArrays returns a boolean if a field has been set.
func (o *ExtensionInfrastructure) HasInstanceArrays() bool {
	if o != nil && !IsNil(o.InstanceArrays) {
		return true
	}

	return false
}

// SetInstanceArrays gets a reference to the given []ExtensionInstanceArray and assigns it to the InstanceArrays field.
func (o *ExtensionInfrastructure) SetInstanceArrays(v []ExtensionInstanceArray) {
	o.InstanceArrays = v
}

// GetSharedDrives returns the SharedDrives field value if set, zero value otherwise.
func (o *ExtensionInfrastructure) GetSharedDrives() []ExtensionSharedDrive {
	if o == nil || IsNil(o.SharedDrives) {
		var ret []ExtensionSharedDrive
		return ret
	}
	return o.SharedDrives
}

// GetSharedDrivesOk returns a tuple with the SharedDrives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInfrastructure) GetSharedDrivesOk() ([]ExtensionSharedDrive, bool) {
	if o == nil || IsNil(o.SharedDrives) {
		return nil, false
	}
	return o.SharedDrives, true
}

// HasSharedDrives returns a boolean if a field has been set.
func (o *ExtensionInfrastructure) HasSharedDrives() bool {
	if o != nil && !IsNil(o.SharedDrives) {
		return true
	}

	return false
}

// SetSharedDrives gets a reference to the given []ExtensionSharedDrive and assigns it to the SharedDrives field.
func (o *ExtensionInfrastructure) SetSharedDrives(v []ExtensionSharedDrive) {
	o.SharedDrives = v
}

func (o ExtensionInfrastructure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionInfrastructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstanceArrays) {
		toSerialize["instanceArrays"] = o.InstanceArrays
	}
	if !IsNil(o.SharedDrives) {
		toSerialize["sharedDrives"] = o.SharedDrives
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionInfrastructure) UnmarshalJSON(data []byte) (err error) {
	varExtensionInfrastructure := _ExtensionInfrastructure{}

	err = json.Unmarshal(data, &varExtensionInfrastructure)

	if err != nil {
		return err
	}

	*o = ExtensionInfrastructure(varExtensionInfrastructure)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instanceArrays")
		delete(additionalProperties, "sharedDrives")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionInfrastructure struct {
	value *ExtensionInfrastructure
	isSet bool
}

func (v NullableExtensionInfrastructure) Get() *ExtensionInfrastructure {
	return v.value
}

func (v *NullableExtensionInfrastructure) Set(val *ExtensionInfrastructure) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionInfrastructure) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionInfrastructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionInfrastructure(val *ExtensionInfrastructure) *NullableExtensionInfrastructure {
	return &NullableExtensionInfrastructure{value: val, isSet: true}
}

func (v NullableExtensionInfrastructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionInfrastructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


