/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the DriveGroupMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DriveGroupMeta{}

// DriveGroupMeta struct for DriveGroupMeta
type DriveGroupMeta struct {
	// Name of the Drive Group
	Name string `json:"name"`
	// Tags for the Drive Group.
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DriveGroupMeta DriveGroupMeta

// NewDriveGroupMeta instantiates a new DriveGroupMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriveGroupMeta(name string) *DriveGroupMeta {
	this := DriveGroupMeta{}
	this.Name = name
	return &this
}

// NewDriveGroupMetaWithDefaults instantiates a new DriveGroupMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriveGroupMetaWithDefaults() *DriveGroupMeta {
	this := DriveGroupMeta{}
	return &this
}

// GetName returns the Name field value
func (o *DriveGroupMeta) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DriveGroupMeta) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DriveGroupMeta) SetName(v string) {
	o.Name = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DriveGroupMeta) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroupMeta) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DriveGroupMeta) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DriveGroupMeta) SetTags(v []string) {
	o.Tags = v
}

func (o DriveGroupMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DriveGroupMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DriveGroupMeta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDriveGroupMeta := _DriveGroupMeta{}

	err = json.Unmarshal(data, &varDriveGroupMeta)

	if err != nil {
		return err
	}

	*o = DriveGroupMeta(varDriveGroupMeta)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDriveGroupMeta struct {
	value *DriveGroupMeta
	isSet bool
}

func (v NullableDriveGroupMeta) Get() *DriveGroupMeta {
	return v.value
}

func (v *NullableDriveGroupMeta) Set(val *DriveGroupMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableDriveGroupMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableDriveGroupMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriveGroupMeta(val *DriveGroupMeta) *NullableDriveGroupMeta {
	return &NullableDriveGroupMeta{value: val, isSet: true}
}

func (v NullableDriveGroupMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriveGroupMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


