/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMInstanceConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMInstanceConfiguration{}

// VMInstanceConfiguration struct for VMInstanceConfiguration
type VMInstanceConfiguration struct {
	// Revision of the VM Instance Configuration
	Revision float32 `json:"revision"`
	// Name of the VM Instance.
	Label string `json:"label"`
	// Id of the VM.
	VmId *float32 `json:"vmId,omitempty"`
	// Id of the VM Type.
	TypeId float32 `json:"typeId"`
	// Subdomain of the VM Instance.
	Subdomain *string `json:"subdomain,omitempty"`
	// Id of the DNS subdomain for the VM Instance.
	DnsSubdomainChangeId *float32 `json:"dnsSubdomainChangeId,omitempty"`
	// Deploy type of the VM Instance
	DeployType string `json:"deployType"`
	// Deploy status of the VM Instance
	DeployStatus string `json:"deployStatus"`
	// Id of the deployment for the VM Instance.
	InfrastructureDeployId *float32 `json:"infrastructureDeployId,omitempty"`
	// Id of the VM Pool.
	VmPoolId *float32 `json:"vmPoolId,omitempty"`
	// Disk size in GB of the VM Instance.
	DiskSizeGB float32 `json:"diskSizeGB"`
	// RAM size in GB of the VM Instance.
	RamGB float32 `json:"ramGB"`
	// Number of CPU cores for the VM Instance.
	CpuCores float32 `json:"cpuCores"`
	// Id of the template used by the VM Instance.
	OsTemplateId *float32 `json:"osTemplateId,omitempty"`
	// Custom variables for the VM Instance.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// Timestamp of the VM Instance last update.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	AdditionalProperties map[string]interface{}
}

type _VMInstanceConfiguration VMInstanceConfiguration

// NewVMInstanceConfiguration instantiates a new VMInstanceConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMInstanceConfiguration(revision float32, label string, typeId float32, deployType string, deployStatus string, diskSizeGB float32, ramGB float32, cpuCores float32, updatedTimestamp string) *VMInstanceConfiguration {
	this := VMInstanceConfiguration{}
	this.Revision = revision
	this.Label = label
	this.TypeId = typeId
	this.DeployType = deployType
	this.DeployStatus = deployStatus
	this.DiskSizeGB = diskSizeGB
	this.RamGB = ramGB
	this.CpuCores = cpuCores
	this.UpdatedTimestamp = updatedTimestamp
	return &this
}

// NewVMInstanceConfigurationWithDefaults instantiates a new VMInstanceConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMInstanceConfigurationWithDefaults() *VMInstanceConfiguration {
	this := VMInstanceConfiguration{}
	var deployType string = "create"
	this.DeployType = deployType
	var deployStatus string = "not_started"
	this.DeployStatus = deployStatus
	return &this
}

// GetRevision returns the Revision field value
func (o *VMInstanceConfiguration) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *VMInstanceConfiguration) SetRevision(v float32) {
	o.Revision = v
}

// GetLabel returns the Label field value
func (o *VMInstanceConfiguration) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *VMInstanceConfiguration) SetLabel(v string) {
	o.Label = v
}

// GetVmId returns the VmId field value if set, zero value otherwise.
func (o *VMInstanceConfiguration) GetVmId() float32 {
	if o == nil || IsNil(o.VmId) {
		var ret float32
		return ret
	}
	return *o.VmId
}

// GetVmIdOk returns a tuple with the VmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetVmIdOk() (*float32, bool) {
	if o == nil || IsNil(o.VmId) {
		return nil, false
	}
	return o.VmId, true
}

// HasVmId returns a boolean if a field has been set.
func (o *VMInstanceConfiguration) HasVmId() bool {
	if o != nil && !IsNil(o.VmId) {
		return true
	}

	return false
}

// SetVmId gets a reference to the given float32 and assigns it to the VmId field.
func (o *VMInstanceConfiguration) SetVmId(v float32) {
	o.VmId = &v
}

// GetTypeId returns the TypeId field value
func (o *VMInstanceConfiguration) GetTypeId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetTypeIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *VMInstanceConfiguration) SetTypeId(v float32) {
	o.TypeId = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *VMInstanceConfiguration) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *VMInstanceConfiguration) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *VMInstanceConfiguration) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetDnsSubdomainChangeId returns the DnsSubdomainChangeId field value if set, zero value otherwise.
func (o *VMInstanceConfiguration) GetDnsSubdomainChangeId() float32 {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainChangeId
}

// GetDnsSubdomainChangeIdOk returns a tuple with the DnsSubdomainChangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetDnsSubdomainChangeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		return nil, false
	}
	return o.DnsSubdomainChangeId, true
}

// HasDnsSubdomainChangeId returns a boolean if a field has been set.
func (o *VMInstanceConfiguration) HasDnsSubdomainChangeId() bool {
	if o != nil && !IsNil(o.DnsSubdomainChangeId) {
		return true
	}

	return false
}

// SetDnsSubdomainChangeId gets a reference to the given float32 and assigns it to the DnsSubdomainChangeId field.
func (o *VMInstanceConfiguration) SetDnsSubdomainChangeId(v float32) {
	o.DnsSubdomainChangeId = &v
}

// GetDeployType returns the DeployType field value
func (o *VMInstanceConfiguration) GetDeployType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetDeployTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployType, true
}

// SetDeployType sets field value
func (o *VMInstanceConfiguration) SetDeployType(v string) {
	o.DeployType = v
}

// GetDeployStatus returns the DeployStatus field value
func (o *VMInstanceConfiguration) GetDeployStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployStatus
}

// GetDeployStatusOk returns a tuple with the DeployStatus field value
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetDeployStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployStatus, true
}

// SetDeployStatus sets field value
func (o *VMInstanceConfiguration) SetDeployStatus(v string) {
	o.DeployStatus = v
}

// GetInfrastructureDeployId returns the InfrastructureDeployId field value if set, zero value otherwise.
func (o *VMInstanceConfiguration) GetInfrastructureDeployId() float32 {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		var ret float32
		return ret
	}
	return *o.InfrastructureDeployId
}

// GetInfrastructureDeployIdOk returns a tuple with the InfrastructureDeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetInfrastructureDeployIdOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		return nil, false
	}
	return o.InfrastructureDeployId, true
}

// HasInfrastructureDeployId returns a boolean if a field has been set.
func (o *VMInstanceConfiguration) HasInfrastructureDeployId() bool {
	if o != nil && !IsNil(o.InfrastructureDeployId) {
		return true
	}

	return false
}

// SetInfrastructureDeployId gets a reference to the given float32 and assigns it to the InfrastructureDeployId field.
func (o *VMInstanceConfiguration) SetInfrastructureDeployId(v float32) {
	o.InfrastructureDeployId = &v
}

// GetVmPoolId returns the VmPoolId field value if set, zero value otherwise.
func (o *VMInstanceConfiguration) GetVmPoolId() float32 {
	if o == nil || IsNil(o.VmPoolId) {
		var ret float32
		return ret
	}
	return *o.VmPoolId
}

// GetVmPoolIdOk returns a tuple with the VmPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetVmPoolIdOk() (*float32, bool) {
	if o == nil || IsNil(o.VmPoolId) {
		return nil, false
	}
	return o.VmPoolId, true
}

// HasVmPoolId returns a boolean if a field has been set.
func (o *VMInstanceConfiguration) HasVmPoolId() bool {
	if o != nil && !IsNil(o.VmPoolId) {
		return true
	}

	return false
}

// SetVmPoolId gets a reference to the given float32 and assigns it to the VmPoolId field.
func (o *VMInstanceConfiguration) SetVmPoolId(v float32) {
	o.VmPoolId = &v
}

// GetDiskSizeGB returns the DiskSizeGB field value
func (o *VMInstanceConfiguration) GetDiskSizeGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DiskSizeGB
}

// GetDiskSizeGBOk returns a tuple with the DiskSizeGB field value
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetDiskSizeGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSizeGB, true
}

// SetDiskSizeGB sets field value
func (o *VMInstanceConfiguration) SetDiskSizeGB(v float32) {
	o.DiskSizeGB = v
}

// GetRamGB returns the RamGB field value
func (o *VMInstanceConfiguration) GetRamGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RamGB
}

// GetRamGBOk returns a tuple with the RamGB field value
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetRamGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RamGB, true
}

// SetRamGB sets field value
func (o *VMInstanceConfiguration) SetRamGB(v float32) {
	o.RamGB = v
}

// GetCpuCores returns the CpuCores field value
func (o *VMInstanceConfiguration) GetCpuCores() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CpuCores
}

// GetCpuCoresOk returns a tuple with the CpuCores field value
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetCpuCoresOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CpuCores, true
}

// SetCpuCores sets field value
func (o *VMInstanceConfiguration) SetCpuCores(v float32) {
	o.CpuCores = v
}

// GetOsTemplateId returns the OsTemplateId field value if set, zero value otherwise.
func (o *VMInstanceConfiguration) GetOsTemplateId() float32 {
	if o == nil || IsNil(o.OsTemplateId) {
		var ret float32
		return ret
	}
	return *o.OsTemplateId
}

// GetOsTemplateIdOk returns a tuple with the OsTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetOsTemplateIdOk() (*float32, bool) {
	if o == nil || IsNil(o.OsTemplateId) {
		return nil, false
	}
	return o.OsTemplateId, true
}

// HasOsTemplateId returns a boolean if a field has been set.
func (o *VMInstanceConfiguration) HasOsTemplateId() bool {
	if o != nil && !IsNil(o.OsTemplateId) {
		return true
	}

	return false
}

// SetOsTemplateId gets a reference to the given float32 and assigns it to the OsTemplateId field.
func (o *VMInstanceConfiguration) SetOsTemplateId(v float32) {
	o.OsTemplateId = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *VMInstanceConfiguration) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *VMInstanceConfiguration) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *VMInstanceConfiguration) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *VMInstanceConfiguration) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMInstanceConfiguration) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *VMInstanceConfiguration) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

func (o VMInstanceConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMInstanceConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revision"] = o.Revision
	toSerialize["label"] = o.Label
	if !IsNil(o.VmId) {
		toSerialize["vmId"] = o.VmId
	}
	toSerialize["typeId"] = o.TypeId
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.DnsSubdomainChangeId) {
		toSerialize["dnsSubdomainChangeId"] = o.DnsSubdomainChangeId
	}
	toSerialize["deployType"] = o.DeployType
	toSerialize["deployStatus"] = o.DeployStatus
	if !IsNil(o.InfrastructureDeployId) {
		toSerialize["infrastructureDeployId"] = o.InfrastructureDeployId
	}
	if !IsNil(o.VmPoolId) {
		toSerialize["vmPoolId"] = o.VmPoolId
	}
	toSerialize["diskSizeGB"] = o.DiskSizeGB
	toSerialize["ramGB"] = o.RamGB
	toSerialize["cpuCores"] = o.CpuCores
	if !IsNil(o.OsTemplateId) {
		toSerialize["osTemplateId"] = o.OsTemplateId
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMInstanceConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revision",
		"label",
		"typeId",
		"deployType",
		"deployStatus",
		"diskSizeGB",
		"ramGB",
		"cpuCores",
		"updatedTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMInstanceConfiguration := _VMInstanceConfiguration{}

	err = json.Unmarshal(data, &varVMInstanceConfiguration)

	if err != nil {
		return err
	}

	*o = VMInstanceConfiguration(varVMInstanceConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "vmId")
		delete(additionalProperties, "typeId")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "dnsSubdomainChangeId")
		delete(additionalProperties, "deployType")
		delete(additionalProperties, "deployStatus")
		delete(additionalProperties, "infrastructureDeployId")
		delete(additionalProperties, "vmPoolId")
		delete(additionalProperties, "diskSizeGB")
		delete(additionalProperties, "ramGB")
		delete(additionalProperties, "cpuCores")
		delete(additionalProperties, "osTemplateId")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "updatedTimestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMInstanceConfiguration struct {
	value *VMInstanceConfiguration
	isSet bool
}

func (v NullableVMInstanceConfiguration) Get() *VMInstanceConfiguration {
	return v.value
}

func (v *NullableVMInstanceConfiguration) Set(val *VMInstanceConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableVMInstanceConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableVMInstanceConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMInstanceConfiguration(val *VMInstanceConfiguration) *NullableVMInstanceConfiguration {
	return &NullableVMInstanceConfiguration{value: val, isSet: true}
}

func (v NullableVMInstanceConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMInstanceConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


