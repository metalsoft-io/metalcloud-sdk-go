/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// NetworkEndpointGroupRedundancyImplementationType The type of redundancy implementation
type NetworkEndpointGroupRedundancyImplementationType string

// List of NetworkEndpointGroupRedundancyImplementationType
const (
	NETWORKENDPOINTGROUPREDUNDANCYIMPLEMENTATIONTYPE_LINK_AGGREGATION NetworkEndpointGroupRedundancyImplementationType = "link-aggregation"
	NETWORKENDPOINTGROUPREDUNDANCYIMPLEMENTATIONTYPE_DISTRIBUTED_LINK_AGGREGATION NetworkEndpointGroupRedundancyImplementationType = "distributed-link-aggregation"
	NETWORKENDPOINTGROUPREDUNDANCYIMPLEMENTATIONTYPE_ECMP NetworkEndpointGroupRedundancyImplementationType = "ecmp"
)

// All allowed values of NetworkEndpointGroupRedundancyImplementationType enum
var AllowedNetworkEndpointGroupRedundancyImplementationTypeEnumValues = []NetworkEndpointGroupRedundancyImplementationType{
	"link-aggregation",
	"distributed-link-aggregation",
	"ecmp",
}

func (v *NetworkEndpointGroupRedundancyImplementationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkEndpointGroupRedundancyImplementationType(value)
	for _, existing := range AllowedNetworkEndpointGroupRedundancyImplementationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkEndpointGroupRedundancyImplementationType", value)
}

// NewNetworkEndpointGroupRedundancyImplementationTypeFromValue returns a pointer to a valid NetworkEndpointGroupRedundancyImplementationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkEndpointGroupRedundancyImplementationTypeFromValue(v string) (*NetworkEndpointGroupRedundancyImplementationType, error) {
	ev := NetworkEndpointGroupRedundancyImplementationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkEndpointGroupRedundancyImplementationType: valid values are %v", v, AllowedNetworkEndpointGroupRedundancyImplementationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkEndpointGroupRedundancyImplementationType) IsValid() bool {
	for _, existing := range AllowedNetworkEndpointGroupRedundancyImplementationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkEndpointGroupRedundancyImplementationType value
func (v NetworkEndpointGroupRedundancyImplementationType) Ptr() *NetworkEndpointGroupRedundancyImplementationType {
	return &v
}

type NullableNetworkEndpointGroupRedundancyImplementationType struct {
	value *NetworkEndpointGroupRedundancyImplementationType
	isSet bool
}

func (v NullableNetworkEndpointGroupRedundancyImplementationType) Get() *NetworkEndpointGroupRedundancyImplementationType {
	return v.value
}

func (v *NullableNetworkEndpointGroupRedundancyImplementationType) Set(val *NetworkEndpointGroupRedundancyImplementationType) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkEndpointGroupRedundancyImplementationType) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkEndpointGroupRedundancyImplementationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkEndpointGroupRedundancyImplementationType(val *NetworkEndpointGroupRedundancyImplementationType) *NullableNetworkEndpointGroupRedundancyImplementationType {
	return &NullableNetworkEndpointGroupRedundancyImplementationType{value: val, isSet: true}
}

func (v NullableNetworkEndpointGroupRedundancyImplementationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkEndpointGroupRedundancyImplementationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

