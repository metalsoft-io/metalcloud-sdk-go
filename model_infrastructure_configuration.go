/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InfrastructureConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureConfiguration{}

// InfrastructureConfiguration struct for InfrastructureConfiguration
type InfrastructureConfiguration struct {
	// Revision of the Infrastructure
	Revision float32 `json:"revision"`
	// Deploy type of the Infrastructure
	DeployType string `json:"deployType"`
	// Deploy status of the Infrastructure
	DeployStatus string `json:"deployStatus"`
	// An object having as key the server type id and as value an array of preferred server ids
	ServerTypeIdToPreferredServerIds map[string]interface{} `json:"serverTypeIdToPreferredServerIds,omitempty"`
	// Id of the deployment for the Infrastructure
	InfrastructureDeployId *float32 `json:"infrastructureDeployId,omitempty"`
	// DNS Subdomain Change ID
	DnsSubdomainChangeId *float32 `json:"dnsSubdomainChangeId,omitempty"`
	// Label of the Infrastructure.
	Label string `json:"label"`
	// Datacenter name where the Infrastructure is located.
	DatacenterName string `json:"datacenterName"`
	// The ID of the site where the Infrastructure is located.
	SiteId float32 `json:"siteId"`
	// Custom variables in JSON format.
	CustomVariables *string `json:"customVariables,omitempty"`
	// User ID of the owner of the Infrastructure.
	UserIdOwner *float32 `json:"userIdOwner,omitempty"`
	// Subdomain associated with the Infrastructure.
	Subdomain *string `json:"subdomain,omitempty"`
	// Number of active instances.
	InstancesCountActive *float32 `json:"instancesCountActive,omitempty"`
	// Number of active drives.
	DrivesCountActive *float32 `json:"drivesCountActive,omitempty"`
	// Number of active IPv4 subnets.
	Ipv4SubnetsCountActive *float32 `json:"ipv4SubnetsCountActive,omitempty"`
	// Number of active IPv6 subnets.
	Ipv6SubnetsCountActive *float32 `json:"ipv6SubnetsCountActive,omitempty"`
	// Number of unused IPv4 addresses.
	Ipv4UnusedIpAddresses *float32 `json:"ipv4UnusedIpAddresses,omitempty"`
	// Description of the infrastructure.
	Description *string `json:"description,omitempty"`
	// Settings in JSON format.
	Settings *string `json:"settings,omitempty"`
	// Whether the infrastructure API is private.
	IsApiPrivate *float32 `json:"isApiPrivate,omitempty"`
	// Experimental priority.
	ExperimentalPriority *string `json:"experimentalPriority,omitempty"`
	// Whether the infrastructure is a member of public designs.
	IsPublicDesignsMember *float32 `json:"isPublicDesignsMember,omitempty"`
	// Certificates in JSON format.
	CertificatesJson *string `json:"certificatesJson,omitempty"`
	// Deploy cookie jar JSON.
	DeployCookieJarJson *string `json:"deployCookieJarJson,omitempty"`
	// Last error of deferred deploy attempt.
	DeferredDeployAttemptLastErrorJson *string `json:"deferredDeployAttemptLastErrorJson,omitempty"`
	// Whether the infrastructure is automanaged.
	IsAutomanaged *float32 `json:"isAutomanaged,omitempty"`
	// Number of empty edits
	EmptyEdit *float32 `json:"emptyEdit,omitempty"`
	// Reserved LAN IP ranges in JSON format.
	ReservedLanIpRanges *string `json:"reservedLanIpRanges,omitempty"`
	// Subnet pool for LAN in JSON format.
	SubnetPoolLan *string `json:"subnetPoolLan,omitempty"`
	// Timestamp of the latest update for the Infrastructure.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// DNS Subdomain ID.
	DnsSubdomainId *float32 `json:"dnsSubdomainId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureConfiguration InfrastructureConfiguration

// NewInfrastructureConfiguration instantiates a new InfrastructureConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureConfiguration(revision float32, deployType string, deployStatus string, label string, datacenterName string, siteId float32, updatedTimestamp string) *InfrastructureConfiguration {
	this := InfrastructureConfiguration{}
	this.Revision = revision
	this.DeployType = deployType
	this.DeployStatus = deployStatus
	this.Label = label
	this.DatacenterName = datacenterName
	this.SiteId = siteId
	this.UpdatedTimestamp = updatedTimestamp
	return &this
}

// NewInfrastructureConfigurationWithDefaults instantiates a new InfrastructureConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureConfigurationWithDefaults() *InfrastructureConfiguration {
	this := InfrastructureConfiguration{}
	var deployType string = "create"
	this.DeployType = deployType
	var deployStatus string = "not_started"
	this.DeployStatus = deployStatus
	return &this
}

// GetRevision returns the Revision field value
func (o *InfrastructureConfiguration) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *InfrastructureConfiguration) SetRevision(v float32) {
	o.Revision = v
}

// GetDeployType returns the DeployType field value
func (o *InfrastructureConfiguration) GetDeployType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetDeployTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployType, true
}

// SetDeployType sets field value
func (o *InfrastructureConfiguration) SetDeployType(v string) {
	o.DeployType = v
}

// GetDeployStatus returns the DeployStatus field value
func (o *InfrastructureConfiguration) GetDeployStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployStatus
}

// GetDeployStatusOk returns a tuple with the DeployStatus field value
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetDeployStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployStatus, true
}

// SetDeployStatus sets field value
func (o *InfrastructureConfiguration) SetDeployStatus(v string) {
	o.DeployStatus = v
}

// GetServerTypeIdToPreferredServerIds returns the ServerTypeIdToPreferredServerIds field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetServerTypeIdToPreferredServerIds() map[string]interface{} {
	if o == nil || IsNil(o.ServerTypeIdToPreferredServerIds) {
		var ret map[string]interface{}
		return ret
	}
	return o.ServerTypeIdToPreferredServerIds
}

// GetServerTypeIdToPreferredServerIdsOk returns a tuple with the ServerTypeIdToPreferredServerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetServerTypeIdToPreferredServerIdsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ServerTypeIdToPreferredServerIds) {
		return map[string]interface{}{}, false
	}
	return o.ServerTypeIdToPreferredServerIds, true
}

// HasServerTypeIdToPreferredServerIds returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasServerTypeIdToPreferredServerIds() bool {
	if o != nil && !IsNil(o.ServerTypeIdToPreferredServerIds) {
		return true
	}

	return false
}

// SetServerTypeIdToPreferredServerIds gets a reference to the given map[string]interface{} and assigns it to the ServerTypeIdToPreferredServerIds field.
func (o *InfrastructureConfiguration) SetServerTypeIdToPreferredServerIds(v map[string]interface{}) {
	o.ServerTypeIdToPreferredServerIds = v
}

// GetInfrastructureDeployId returns the InfrastructureDeployId field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetInfrastructureDeployId() float32 {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		var ret float32
		return ret
	}
	return *o.InfrastructureDeployId
}

// GetInfrastructureDeployIdOk returns a tuple with the InfrastructureDeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetInfrastructureDeployIdOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		return nil, false
	}
	return o.InfrastructureDeployId, true
}

// HasInfrastructureDeployId returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasInfrastructureDeployId() bool {
	if o != nil && !IsNil(o.InfrastructureDeployId) {
		return true
	}

	return false
}

// SetInfrastructureDeployId gets a reference to the given float32 and assigns it to the InfrastructureDeployId field.
func (o *InfrastructureConfiguration) SetInfrastructureDeployId(v float32) {
	o.InfrastructureDeployId = &v
}

// GetDnsSubdomainChangeId returns the DnsSubdomainChangeId field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetDnsSubdomainChangeId() float32 {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainChangeId
}

// GetDnsSubdomainChangeIdOk returns a tuple with the DnsSubdomainChangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetDnsSubdomainChangeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		return nil, false
	}
	return o.DnsSubdomainChangeId, true
}

// HasDnsSubdomainChangeId returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasDnsSubdomainChangeId() bool {
	if o != nil && !IsNil(o.DnsSubdomainChangeId) {
		return true
	}

	return false
}

// SetDnsSubdomainChangeId gets a reference to the given float32 and assigns it to the DnsSubdomainChangeId field.
func (o *InfrastructureConfiguration) SetDnsSubdomainChangeId(v float32) {
	o.DnsSubdomainChangeId = &v
}

// GetLabel returns the Label field value
func (o *InfrastructureConfiguration) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *InfrastructureConfiguration) SetLabel(v string) {
	o.Label = v
}

// GetDatacenterName returns the DatacenterName field value
func (o *InfrastructureConfiguration) GetDatacenterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetDatacenterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatacenterName, true
}

// SetDatacenterName sets field value
func (o *InfrastructureConfiguration) SetDatacenterName(v string) {
	o.DatacenterName = v
}

// GetSiteId returns the SiteId field value
func (o *InfrastructureConfiguration) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *InfrastructureConfiguration) SetSiteId(v float32) {
	o.SiteId = v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetCustomVariables() string {
	if o == nil || IsNil(o.CustomVariables) {
		var ret string
		return ret
	}
	return *o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetCustomVariablesOk() (*string, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return nil, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given string and assigns it to the CustomVariables field.
func (o *InfrastructureConfiguration) SetCustomVariables(v string) {
	o.CustomVariables = &v
}

// GetUserIdOwner returns the UserIdOwner field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetUserIdOwner() float32 {
	if o == nil || IsNil(o.UserIdOwner) {
		var ret float32
		return ret
	}
	return *o.UserIdOwner
}

// GetUserIdOwnerOk returns a tuple with the UserIdOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetUserIdOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.UserIdOwner) {
		return nil, false
	}
	return o.UserIdOwner, true
}

// HasUserIdOwner returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasUserIdOwner() bool {
	if o != nil && !IsNil(o.UserIdOwner) {
		return true
	}

	return false
}

// SetUserIdOwner gets a reference to the given float32 and assigns it to the UserIdOwner field.
func (o *InfrastructureConfiguration) SetUserIdOwner(v float32) {
	o.UserIdOwner = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *InfrastructureConfiguration) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetInstancesCountActive returns the InstancesCountActive field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetInstancesCountActive() float32 {
	if o == nil || IsNil(o.InstancesCountActive) {
		var ret float32
		return ret
	}
	return *o.InstancesCountActive
}

// GetInstancesCountActiveOk returns a tuple with the InstancesCountActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetInstancesCountActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.InstancesCountActive) {
		return nil, false
	}
	return o.InstancesCountActive, true
}

// HasInstancesCountActive returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasInstancesCountActive() bool {
	if o != nil && !IsNil(o.InstancesCountActive) {
		return true
	}

	return false
}

// SetInstancesCountActive gets a reference to the given float32 and assigns it to the InstancesCountActive field.
func (o *InfrastructureConfiguration) SetInstancesCountActive(v float32) {
	o.InstancesCountActive = &v
}

// GetDrivesCountActive returns the DrivesCountActive field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetDrivesCountActive() float32 {
	if o == nil || IsNil(o.DrivesCountActive) {
		var ret float32
		return ret
	}
	return *o.DrivesCountActive
}

// GetDrivesCountActiveOk returns a tuple with the DrivesCountActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetDrivesCountActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.DrivesCountActive) {
		return nil, false
	}
	return o.DrivesCountActive, true
}

// HasDrivesCountActive returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasDrivesCountActive() bool {
	if o != nil && !IsNil(o.DrivesCountActive) {
		return true
	}

	return false
}

// SetDrivesCountActive gets a reference to the given float32 and assigns it to the DrivesCountActive field.
func (o *InfrastructureConfiguration) SetDrivesCountActive(v float32) {
	o.DrivesCountActive = &v
}

// GetIpv4SubnetsCountActive returns the Ipv4SubnetsCountActive field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetIpv4SubnetsCountActive() float32 {
	if o == nil || IsNil(o.Ipv4SubnetsCountActive) {
		var ret float32
		return ret
	}
	return *o.Ipv4SubnetsCountActive
}

// GetIpv4SubnetsCountActiveOk returns a tuple with the Ipv4SubnetsCountActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetIpv4SubnetsCountActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.Ipv4SubnetsCountActive) {
		return nil, false
	}
	return o.Ipv4SubnetsCountActive, true
}

// HasIpv4SubnetsCountActive returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasIpv4SubnetsCountActive() bool {
	if o != nil && !IsNil(o.Ipv4SubnetsCountActive) {
		return true
	}

	return false
}

// SetIpv4SubnetsCountActive gets a reference to the given float32 and assigns it to the Ipv4SubnetsCountActive field.
func (o *InfrastructureConfiguration) SetIpv4SubnetsCountActive(v float32) {
	o.Ipv4SubnetsCountActive = &v
}

// GetIpv6SubnetsCountActive returns the Ipv6SubnetsCountActive field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetIpv6SubnetsCountActive() float32 {
	if o == nil || IsNil(o.Ipv6SubnetsCountActive) {
		var ret float32
		return ret
	}
	return *o.Ipv6SubnetsCountActive
}

// GetIpv6SubnetsCountActiveOk returns a tuple with the Ipv6SubnetsCountActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetIpv6SubnetsCountActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.Ipv6SubnetsCountActive) {
		return nil, false
	}
	return o.Ipv6SubnetsCountActive, true
}

// HasIpv6SubnetsCountActive returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasIpv6SubnetsCountActive() bool {
	if o != nil && !IsNil(o.Ipv6SubnetsCountActive) {
		return true
	}

	return false
}

// SetIpv6SubnetsCountActive gets a reference to the given float32 and assigns it to the Ipv6SubnetsCountActive field.
func (o *InfrastructureConfiguration) SetIpv6SubnetsCountActive(v float32) {
	o.Ipv6SubnetsCountActive = &v
}

// GetIpv4UnusedIpAddresses returns the Ipv4UnusedIpAddresses field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetIpv4UnusedIpAddresses() float32 {
	if o == nil || IsNil(o.Ipv4UnusedIpAddresses) {
		var ret float32
		return ret
	}
	return *o.Ipv4UnusedIpAddresses
}

// GetIpv4UnusedIpAddressesOk returns a tuple with the Ipv4UnusedIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetIpv4UnusedIpAddressesOk() (*float32, bool) {
	if o == nil || IsNil(o.Ipv4UnusedIpAddresses) {
		return nil, false
	}
	return o.Ipv4UnusedIpAddresses, true
}

// HasIpv4UnusedIpAddresses returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasIpv4UnusedIpAddresses() bool {
	if o != nil && !IsNil(o.Ipv4UnusedIpAddresses) {
		return true
	}

	return false
}

// SetIpv4UnusedIpAddresses gets a reference to the given float32 and assigns it to the Ipv4UnusedIpAddresses field.
func (o *InfrastructureConfiguration) SetIpv4UnusedIpAddresses(v float32) {
	o.Ipv4UnusedIpAddresses = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InfrastructureConfiguration) SetDescription(v string) {
	o.Description = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetSettings() string {
	if o == nil || IsNil(o.Settings) {
		var ret string
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetSettingsOk() (*string, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given string and assigns it to the Settings field.
func (o *InfrastructureConfiguration) SetSettings(v string) {
	o.Settings = &v
}

// GetIsApiPrivate returns the IsApiPrivate field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetIsApiPrivate() float32 {
	if o == nil || IsNil(o.IsApiPrivate) {
		var ret float32
		return ret
	}
	return *o.IsApiPrivate
}

// GetIsApiPrivateOk returns a tuple with the IsApiPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetIsApiPrivateOk() (*float32, bool) {
	if o == nil || IsNil(o.IsApiPrivate) {
		return nil, false
	}
	return o.IsApiPrivate, true
}

// HasIsApiPrivate returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasIsApiPrivate() bool {
	if o != nil && !IsNil(o.IsApiPrivate) {
		return true
	}

	return false
}

// SetIsApiPrivate gets a reference to the given float32 and assigns it to the IsApiPrivate field.
func (o *InfrastructureConfiguration) SetIsApiPrivate(v float32) {
	o.IsApiPrivate = &v
}

// GetExperimentalPriority returns the ExperimentalPriority field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetExperimentalPriority() string {
	if o == nil || IsNil(o.ExperimentalPriority) {
		var ret string
		return ret
	}
	return *o.ExperimentalPriority
}

// GetExperimentalPriorityOk returns a tuple with the ExperimentalPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetExperimentalPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.ExperimentalPriority) {
		return nil, false
	}
	return o.ExperimentalPriority, true
}

// HasExperimentalPriority returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasExperimentalPriority() bool {
	if o != nil && !IsNil(o.ExperimentalPriority) {
		return true
	}

	return false
}

// SetExperimentalPriority gets a reference to the given string and assigns it to the ExperimentalPriority field.
func (o *InfrastructureConfiguration) SetExperimentalPriority(v string) {
	o.ExperimentalPriority = &v
}

// GetIsPublicDesignsMember returns the IsPublicDesignsMember field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetIsPublicDesignsMember() float32 {
	if o == nil || IsNil(o.IsPublicDesignsMember) {
		var ret float32
		return ret
	}
	return *o.IsPublicDesignsMember
}

// GetIsPublicDesignsMemberOk returns a tuple with the IsPublicDesignsMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetIsPublicDesignsMemberOk() (*float32, bool) {
	if o == nil || IsNil(o.IsPublicDesignsMember) {
		return nil, false
	}
	return o.IsPublicDesignsMember, true
}

// HasIsPublicDesignsMember returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasIsPublicDesignsMember() bool {
	if o != nil && !IsNil(o.IsPublicDesignsMember) {
		return true
	}

	return false
}

// SetIsPublicDesignsMember gets a reference to the given float32 and assigns it to the IsPublicDesignsMember field.
func (o *InfrastructureConfiguration) SetIsPublicDesignsMember(v float32) {
	o.IsPublicDesignsMember = &v
}

// GetCertificatesJson returns the CertificatesJson field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetCertificatesJson() string {
	if o == nil || IsNil(o.CertificatesJson) {
		var ret string
		return ret
	}
	return *o.CertificatesJson
}

// GetCertificatesJsonOk returns a tuple with the CertificatesJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetCertificatesJsonOk() (*string, bool) {
	if o == nil || IsNil(o.CertificatesJson) {
		return nil, false
	}
	return o.CertificatesJson, true
}

// HasCertificatesJson returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasCertificatesJson() bool {
	if o != nil && !IsNil(o.CertificatesJson) {
		return true
	}

	return false
}

// SetCertificatesJson gets a reference to the given string and assigns it to the CertificatesJson field.
func (o *InfrastructureConfiguration) SetCertificatesJson(v string) {
	o.CertificatesJson = &v
}

// GetDeployCookieJarJson returns the DeployCookieJarJson field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetDeployCookieJarJson() string {
	if o == nil || IsNil(o.DeployCookieJarJson) {
		var ret string
		return ret
	}
	return *o.DeployCookieJarJson
}

// GetDeployCookieJarJsonOk returns a tuple with the DeployCookieJarJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetDeployCookieJarJsonOk() (*string, bool) {
	if o == nil || IsNil(o.DeployCookieJarJson) {
		return nil, false
	}
	return o.DeployCookieJarJson, true
}

// HasDeployCookieJarJson returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasDeployCookieJarJson() bool {
	if o != nil && !IsNil(o.DeployCookieJarJson) {
		return true
	}

	return false
}

// SetDeployCookieJarJson gets a reference to the given string and assigns it to the DeployCookieJarJson field.
func (o *InfrastructureConfiguration) SetDeployCookieJarJson(v string) {
	o.DeployCookieJarJson = &v
}

// GetDeferredDeployAttemptLastErrorJson returns the DeferredDeployAttemptLastErrorJson field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetDeferredDeployAttemptLastErrorJson() string {
	if o == nil || IsNil(o.DeferredDeployAttemptLastErrorJson) {
		var ret string
		return ret
	}
	return *o.DeferredDeployAttemptLastErrorJson
}

// GetDeferredDeployAttemptLastErrorJsonOk returns a tuple with the DeferredDeployAttemptLastErrorJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetDeferredDeployAttemptLastErrorJsonOk() (*string, bool) {
	if o == nil || IsNil(o.DeferredDeployAttemptLastErrorJson) {
		return nil, false
	}
	return o.DeferredDeployAttemptLastErrorJson, true
}

// HasDeferredDeployAttemptLastErrorJson returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasDeferredDeployAttemptLastErrorJson() bool {
	if o != nil && !IsNil(o.DeferredDeployAttemptLastErrorJson) {
		return true
	}

	return false
}

// SetDeferredDeployAttemptLastErrorJson gets a reference to the given string and assigns it to the DeferredDeployAttemptLastErrorJson field.
func (o *InfrastructureConfiguration) SetDeferredDeployAttemptLastErrorJson(v string) {
	o.DeferredDeployAttemptLastErrorJson = &v
}

// GetIsAutomanaged returns the IsAutomanaged field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetIsAutomanaged() float32 {
	if o == nil || IsNil(o.IsAutomanaged) {
		var ret float32
		return ret
	}
	return *o.IsAutomanaged
}

// GetIsAutomanagedOk returns a tuple with the IsAutomanaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetIsAutomanagedOk() (*float32, bool) {
	if o == nil || IsNil(o.IsAutomanaged) {
		return nil, false
	}
	return o.IsAutomanaged, true
}

// HasIsAutomanaged returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasIsAutomanaged() bool {
	if o != nil && !IsNil(o.IsAutomanaged) {
		return true
	}

	return false
}

// SetIsAutomanaged gets a reference to the given float32 and assigns it to the IsAutomanaged field.
func (o *InfrastructureConfiguration) SetIsAutomanaged(v float32) {
	o.IsAutomanaged = &v
}

// GetEmptyEdit returns the EmptyEdit field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetEmptyEdit() float32 {
	if o == nil || IsNil(o.EmptyEdit) {
		var ret float32
		return ret
	}
	return *o.EmptyEdit
}

// GetEmptyEditOk returns a tuple with the EmptyEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetEmptyEditOk() (*float32, bool) {
	if o == nil || IsNil(o.EmptyEdit) {
		return nil, false
	}
	return o.EmptyEdit, true
}

// HasEmptyEdit returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasEmptyEdit() bool {
	if o != nil && !IsNil(o.EmptyEdit) {
		return true
	}

	return false
}

// SetEmptyEdit gets a reference to the given float32 and assigns it to the EmptyEdit field.
func (o *InfrastructureConfiguration) SetEmptyEdit(v float32) {
	o.EmptyEdit = &v
}

// GetReservedLanIpRanges returns the ReservedLanIpRanges field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetReservedLanIpRanges() string {
	if o == nil || IsNil(o.ReservedLanIpRanges) {
		var ret string
		return ret
	}
	return *o.ReservedLanIpRanges
}

// GetReservedLanIpRangesOk returns a tuple with the ReservedLanIpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetReservedLanIpRangesOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedLanIpRanges) {
		return nil, false
	}
	return o.ReservedLanIpRanges, true
}

// HasReservedLanIpRanges returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasReservedLanIpRanges() bool {
	if o != nil && !IsNil(o.ReservedLanIpRanges) {
		return true
	}

	return false
}

// SetReservedLanIpRanges gets a reference to the given string and assigns it to the ReservedLanIpRanges field.
func (o *InfrastructureConfiguration) SetReservedLanIpRanges(v string) {
	o.ReservedLanIpRanges = &v
}

// GetSubnetPoolLan returns the SubnetPoolLan field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetSubnetPoolLan() string {
	if o == nil || IsNil(o.SubnetPoolLan) {
		var ret string
		return ret
	}
	return *o.SubnetPoolLan
}

// GetSubnetPoolLanOk returns a tuple with the SubnetPoolLan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetSubnetPoolLanOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetPoolLan) {
		return nil, false
	}
	return o.SubnetPoolLan, true
}

// HasSubnetPoolLan returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasSubnetPoolLan() bool {
	if o != nil && !IsNil(o.SubnetPoolLan) {
		return true
	}

	return false
}

// SetSubnetPoolLan gets a reference to the given string and assigns it to the SubnetPoolLan field.
func (o *InfrastructureConfiguration) SetSubnetPoolLan(v string) {
	o.SubnetPoolLan = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *InfrastructureConfiguration) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *InfrastructureConfiguration) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value if set, zero value otherwise.
func (o *InfrastructureConfiguration) GetDnsSubdomainId() float32 {
	if o == nil || IsNil(o.DnsSubdomainId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfiguration) GetDnsSubdomainIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainId) {
		return nil, false
	}
	return o.DnsSubdomainId, true
}

// HasDnsSubdomainId returns a boolean if a field has been set.
func (o *InfrastructureConfiguration) HasDnsSubdomainId() bool {
	if o != nil && !IsNil(o.DnsSubdomainId) {
		return true
	}

	return false
}

// SetDnsSubdomainId gets a reference to the given float32 and assigns it to the DnsSubdomainId field.
func (o *InfrastructureConfiguration) SetDnsSubdomainId(v float32) {
	o.DnsSubdomainId = &v
}

func (o InfrastructureConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revision"] = o.Revision
	toSerialize["deployType"] = o.DeployType
	toSerialize["deployStatus"] = o.DeployStatus
	if !IsNil(o.ServerTypeIdToPreferredServerIds) {
		toSerialize["serverTypeIdToPreferredServerIds"] = o.ServerTypeIdToPreferredServerIds
	}
	if !IsNil(o.InfrastructureDeployId) {
		toSerialize["infrastructureDeployId"] = o.InfrastructureDeployId
	}
	if !IsNil(o.DnsSubdomainChangeId) {
		toSerialize["dnsSubdomainChangeId"] = o.DnsSubdomainChangeId
	}
	toSerialize["label"] = o.Label
	toSerialize["datacenterName"] = o.DatacenterName
	toSerialize["siteId"] = o.SiteId
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	if !IsNil(o.UserIdOwner) {
		toSerialize["userIdOwner"] = o.UserIdOwner
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.InstancesCountActive) {
		toSerialize["instancesCountActive"] = o.InstancesCountActive
	}
	if !IsNil(o.DrivesCountActive) {
		toSerialize["drivesCountActive"] = o.DrivesCountActive
	}
	if !IsNil(o.Ipv4SubnetsCountActive) {
		toSerialize["ipv4SubnetsCountActive"] = o.Ipv4SubnetsCountActive
	}
	if !IsNil(o.Ipv6SubnetsCountActive) {
		toSerialize["ipv6SubnetsCountActive"] = o.Ipv6SubnetsCountActive
	}
	if !IsNil(o.Ipv4UnusedIpAddresses) {
		toSerialize["ipv4UnusedIpAddresses"] = o.Ipv4UnusedIpAddresses
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.IsApiPrivate) {
		toSerialize["isApiPrivate"] = o.IsApiPrivate
	}
	if !IsNil(o.ExperimentalPriority) {
		toSerialize["experimentalPriority"] = o.ExperimentalPriority
	}
	if !IsNil(o.IsPublicDesignsMember) {
		toSerialize["isPublicDesignsMember"] = o.IsPublicDesignsMember
	}
	if !IsNil(o.CertificatesJson) {
		toSerialize["certificatesJson"] = o.CertificatesJson
	}
	if !IsNil(o.DeployCookieJarJson) {
		toSerialize["deployCookieJarJson"] = o.DeployCookieJarJson
	}
	if !IsNil(o.DeferredDeployAttemptLastErrorJson) {
		toSerialize["deferredDeployAttemptLastErrorJson"] = o.DeferredDeployAttemptLastErrorJson
	}
	if !IsNil(o.IsAutomanaged) {
		toSerialize["isAutomanaged"] = o.IsAutomanaged
	}
	if !IsNil(o.EmptyEdit) {
		toSerialize["emptyEdit"] = o.EmptyEdit
	}
	if !IsNil(o.ReservedLanIpRanges) {
		toSerialize["reservedLanIpRanges"] = o.ReservedLanIpRanges
	}
	if !IsNil(o.SubnetPoolLan) {
		toSerialize["subnetPoolLan"] = o.SubnetPoolLan
	}
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.DnsSubdomainId) {
		toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revision",
		"deployType",
		"deployStatus",
		"label",
		"datacenterName",
		"siteId",
		"updatedTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfrastructureConfiguration := _InfrastructureConfiguration{}

	err = json.Unmarshal(data, &varInfrastructureConfiguration)

	if err != nil {
		return err
	}

	*o = InfrastructureConfiguration(varInfrastructureConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revision")
		delete(additionalProperties, "deployType")
		delete(additionalProperties, "deployStatus")
		delete(additionalProperties, "serverTypeIdToPreferredServerIds")
		delete(additionalProperties, "infrastructureDeployId")
		delete(additionalProperties, "dnsSubdomainChangeId")
		delete(additionalProperties, "label")
		delete(additionalProperties, "datacenterName")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "userIdOwner")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "instancesCountActive")
		delete(additionalProperties, "drivesCountActive")
		delete(additionalProperties, "ipv4SubnetsCountActive")
		delete(additionalProperties, "ipv6SubnetsCountActive")
		delete(additionalProperties, "ipv4UnusedIpAddresses")
		delete(additionalProperties, "description")
		delete(additionalProperties, "settings")
		delete(additionalProperties, "isApiPrivate")
		delete(additionalProperties, "experimentalPriority")
		delete(additionalProperties, "isPublicDesignsMember")
		delete(additionalProperties, "certificatesJson")
		delete(additionalProperties, "deployCookieJarJson")
		delete(additionalProperties, "deferredDeployAttemptLastErrorJson")
		delete(additionalProperties, "isAutomanaged")
		delete(additionalProperties, "emptyEdit")
		delete(additionalProperties, "reservedLanIpRanges")
		delete(additionalProperties, "subnetPoolLan")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "dnsSubdomainId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureConfiguration struct {
	value *InfrastructureConfiguration
	isSet bool
}

func (v NullableInfrastructureConfiguration) Get() *InfrastructureConfiguration {
	return v.value
}

func (v *NullableInfrastructureConfiguration) Set(val *InfrastructureConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureConfiguration(val *InfrastructureConfiguration) *NullableInfrastructureConfiguration {
	return &NullableInfrastructureConfiguration{value: val, isSet: true}
}

func (v NullableInfrastructureConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


