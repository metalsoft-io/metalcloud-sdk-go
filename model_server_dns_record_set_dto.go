/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerDNSRecordSetDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerDNSRecordSetDto{}

// ServerDNSRecordSetDto struct for ServerDNSRecordSetDto
type ServerDNSRecordSetDto struct {
	// The id of the server.
	ServerId float32 `json:"serverId"`
	// The DNS zone information.
	Zone GenericDNSZoneInformation `json:"zone"`
	// The serial number of the server.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// The management address of the server.
	ManagementAddress string `json:"managementAddress"`
	// The hostname of the server DNS record.
	Hostname string `json:"hostname"`
	// The hostname of the server DNS record.
	Fqdn string `json:"fqdn"`
	// The IP address of the server.
	Ip map[string]interface{} `json:"ip"`
	// The operation to perform for the DNS record. Either \"create\" or \"delete\".
	Operation string `json:"operation"`
	AdditionalProperties map[string]interface{}
}

type _ServerDNSRecordSetDto ServerDNSRecordSetDto

// NewServerDNSRecordSetDto instantiates a new ServerDNSRecordSetDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerDNSRecordSetDto(serverId float32, zone GenericDNSZoneInformation, managementAddress string, hostname string, fqdn string, ip map[string]interface{}, operation string) *ServerDNSRecordSetDto {
	this := ServerDNSRecordSetDto{}
	this.ServerId = serverId
	this.Zone = zone
	this.ManagementAddress = managementAddress
	this.Hostname = hostname
	this.Fqdn = fqdn
	this.Ip = ip
	this.Operation = operation
	return &this
}

// NewServerDNSRecordSetDtoWithDefaults instantiates a new ServerDNSRecordSetDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerDNSRecordSetDtoWithDefaults() *ServerDNSRecordSetDto {
	this := ServerDNSRecordSetDto{}
	return &this
}

// GetServerId returns the ServerId field value
func (o *ServerDNSRecordSetDto) GetServerId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value
// and a boolean to check if the value has been set.
func (o *ServerDNSRecordSetDto) GetServerIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerId, true
}

// SetServerId sets field value
func (o *ServerDNSRecordSetDto) SetServerId(v float32) {
	o.ServerId = v
}

// GetZone returns the Zone field value
func (o *ServerDNSRecordSetDto) GetZone() GenericDNSZoneInformation {
	if o == nil {
		var ret GenericDNSZoneInformation
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *ServerDNSRecordSetDto) GetZoneOk() (*GenericDNSZoneInformation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *ServerDNSRecordSetDto) SetZone(v GenericDNSZoneInformation) {
	o.Zone = v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *ServerDNSRecordSetDto) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerDNSRecordSetDto) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *ServerDNSRecordSetDto) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *ServerDNSRecordSetDto) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetManagementAddress returns the ManagementAddress field value
func (o *ServerDNSRecordSetDto) GetManagementAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value
// and a boolean to check if the value has been set.
func (o *ServerDNSRecordSetDto) GetManagementAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementAddress, true
}

// SetManagementAddress sets field value
func (o *ServerDNSRecordSetDto) SetManagementAddress(v string) {
	o.ManagementAddress = v
}

// GetHostname returns the Hostname field value
func (o *ServerDNSRecordSetDto) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *ServerDNSRecordSetDto) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *ServerDNSRecordSetDto) SetHostname(v string) {
	o.Hostname = v
}

// GetFqdn returns the Fqdn field value
func (o *ServerDNSRecordSetDto) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *ServerDNSRecordSetDto) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *ServerDNSRecordSetDto) SetFqdn(v string) {
	o.Fqdn = v
}

// GetIp returns the Ip field value
func (o *ServerDNSRecordSetDto) GetIp() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *ServerDNSRecordSetDto) GetIpOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Ip, true
}

// SetIp sets field value
func (o *ServerDNSRecordSetDto) SetIp(v map[string]interface{}) {
	o.Ip = v
}

// GetOperation returns the Operation field value
func (o *ServerDNSRecordSetDto) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *ServerDNSRecordSetDto) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *ServerDNSRecordSetDto) SetOperation(v string) {
	o.Operation = v
}

func (o ServerDNSRecordSetDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerDNSRecordSetDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverId"] = o.ServerId
	toSerialize["zone"] = o.Zone
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	toSerialize["managementAddress"] = o.ManagementAddress
	toSerialize["hostname"] = o.Hostname
	toSerialize["fqdn"] = o.Fqdn
	toSerialize["ip"] = o.Ip
	toSerialize["operation"] = o.Operation

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerDNSRecordSetDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverId",
		"zone",
		"managementAddress",
		"hostname",
		"fqdn",
		"ip",
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerDNSRecordSetDto := _ServerDNSRecordSetDto{}

	err = json.Unmarshal(data, &varServerDNSRecordSetDto)

	if err != nil {
		return err
	}

	*o = ServerDNSRecordSetDto(varServerDNSRecordSetDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "zone")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "fqdn")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "operation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerDNSRecordSetDto struct {
	value *ServerDNSRecordSetDto
	isSet bool
}

func (v NullableServerDNSRecordSetDto) Get() *ServerDNSRecordSetDto {
	return v.value
}

func (v *NullableServerDNSRecordSetDto) Set(val *ServerDNSRecordSetDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServerDNSRecordSetDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServerDNSRecordSetDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerDNSRecordSetDto(val *ServerDNSRecordSetDto) *NullableServerDNSRecordSetDto {
	return &NullableServerDNSRecordSetDto{value: val, isSet: true}
}

func (v NullableServerDNSRecordSetDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerDNSRecordSetDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


