/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the BucketVariables type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BucketVariables{}

// BucketVariables struct for BucketVariables
type BucketVariables struct {
	// Disk size in GB for Bucket
	SizeGB float32 `json:"sizeGB"`
	// Timestamp of the Bucket last update.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Id of the storage pool the Bucket is assigned to
	StoragePoolId *float32 `json:"storagePoolId,omitempty"`
	// Label of the Bucket.
	Label string `json:"label"`
	// Subdomain of the Bucket.
	Subdomain string `json:"subdomain"`
	// Id of the Logical Network for the Bucket.
	LogicalNetworkId *float32 `json:"logicalNetworkId,omitempty"`
	// Id of the Bucket
	Id float32 `json:"id"`
	// Revision of the Bucket
	Revision float32 `json:"revision"`
	// Infrastructure id of the Bucket
	InfrastructureId float32 `json:"infrastructureId"`
	// Timestamp of the Bucket creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Service status of the Bucket
	ServiceStatus string `json:"serviceStatus"`
	// Subdomain permanent of the Bucket.
	SubdomainPermanent string `json:"subdomainPermanent"`
	// Id of the DNS subdomain for the Bucket.
	DnsSubdomainId float32 `json:"dnsSubdomainId"`
	// Endpoint of the Bucket.
	Endpoint *string `json:"endpoint,omitempty"`
	// Endpoint of the Bucket.
	AccessKeyId *string `json:"accessKeyId,omitempty"`
	// Endpoint of the Bucket.
	SecretKeyEncrypted *string `json:"secretKeyEncrypted,omitempty"`
	// The current changes to be deployed for the Bucket.
	Config BucketConfiguration `json:"config"`
	AdditionalProperties map[string]interface{}
}

type _BucketVariables BucketVariables

// NewBucketVariables instantiates a new BucketVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketVariables(sizeGB float32, updatedTimestamp string, label string, subdomain string, id float32, revision float32, infrastructureId float32, createdTimestamp string, serviceStatus string, subdomainPermanent string, dnsSubdomainId float32, config BucketConfiguration) *BucketVariables {
	this := BucketVariables{}
	this.SizeGB = sizeGB
	this.UpdatedTimestamp = updatedTimestamp
	this.Label = label
	this.Subdomain = subdomain
	this.Id = id
	this.Revision = revision
	this.InfrastructureId = infrastructureId
	this.CreatedTimestamp = createdTimestamp
	this.ServiceStatus = serviceStatus
	this.SubdomainPermanent = subdomainPermanent
	this.DnsSubdomainId = dnsSubdomainId
	this.Config = config
	return &this
}

// NewBucketVariablesWithDefaults instantiates a new BucketVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketVariablesWithDefaults() *BucketVariables {
	this := BucketVariables{}
	return &this
}

// GetSizeGB returns the SizeGB field value
func (o *BucketVariables) GetSizeGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SizeGB
}

// GetSizeGBOk returns a tuple with the SizeGB field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetSizeGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeGB, true
}

// SetSizeGB sets field value
func (o *BucketVariables) SetSizeGB(v float32) {
	o.SizeGB = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *BucketVariables) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *BucketVariables) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetStoragePoolId returns the StoragePoolId field value if set, zero value otherwise.
func (o *BucketVariables) GetStoragePoolId() float32 {
	if o == nil || IsNil(o.StoragePoolId) {
		var ret float32
		return ret
	}
	return *o.StoragePoolId
}

// GetStoragePoolIdOk returns a tuple with the StoragePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetStoragePoolIdOk() (*float32, bool) {
	if o == nil || IsNil(o.StoragePoolId) {
		return nil, false
	}
	return o.StoragePoolId, true
}

// HasStoragePoolId returns a boolean if a field has been set.
func (o *BucketVariables) HasStoragePoolId() bool {
	if o != nil && !IsNil(o.StoragePoolId) {
		return true
	}

	return false
}

// SetStoragePoolId gets a reference to the given float32 and assigns it to the StoragePoolId field.
func (o *BucketVariables) SetStoragePoolId(v float32) {
	o.StoragePoolId = &v
}

// GetLabel returns the Label field value
func (o *BucketVariables) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *BucketVariables) SetLabel(v string) {
	o.Label = v
}

// GetSubdomain returns the Subdomain field value
func (o *BucketVariables) GetSubdomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetSubdomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subdomain, true
}

// SetSubdomain sets field value
func (o *BucketVariables) SetSubdomain(v string) {
	o.Subdomain = v
}

// GetLogicalNetworkId returns the LogicalNetworkId field value if set, zero value otherwise.
func (o *BucketVariables) GetLogicalNetworkId() float32 {
	if o == nil || IsNil(o.LogicalNetworkId) {
		var ret float32
		return ret
	}
	return *o.LogicalNetworkId
}

// GetLogicalNetworkIdOk returns a tuple with the LogicalNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetLogicalNetworkIdOk() (*float32, bool) {
	if o == nil || IsNil(o.LogicalNetworkId) {
		return nil, false
	}
	return o.LogicalNetworkId, true
}

// HasLogicalNetworkId returns a boolean if a field has been set.
func (o *BucketVariables) HasLogicalNetworkId() bool {
	if o != nil && !IsNil(o.LogicalNetworkId) {
		return true
	}

	return false
}

// SetLogicalNetworkId gets a reference to the given float32 and assigns it to the LogicalNetworkId field.
func (o *BucketVariables) SetLogicalNetworkId(v float32) {
	o.LogicalNetworkId = &v
}

// GetId returns the Id field value
func (o *BucketVariables) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BucketVariables) SetId(v float32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *BucketVariables) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *BucketVariables) SetRevision(v float32) {
	o.Revision = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *BucketVariables) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *BucketVariables) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *BucketVariables) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *BucketVariables) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *BucketVariables) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *BucketVariables) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value
func (o *BucketVariables) GetSubdomainPermanent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubdomainPermanent, true
}

// SetSubdomainPermanent sets field value
func (o *BucketVariables) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value
func (o *BucketVariables) GetDnsSubdomainId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetDnsSubdomainIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DnsSubdomainId, true
}

// SetDnsSubdomainId sets field value
func (o *BucketVariables) SetDnsSubdomainId(v float32) {
	o.DnsSubdomainId = v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *BucketVariables) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *BucketVariables) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *BucketVariables) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetAccessKeyId returns the AccessKeyId field value if set, zero value otherwise.
func (o *BucketVariables) GetAccessKeyId() string {
	if o == nil || IsNil(o.AccessKeyId) {
		var ret string
		return ret
	}
	return *o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetAccessKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKeyId) {
		return nil, false
	}
	return o.AccessKeyId, true
}

// HasAccessKeyId returns a boolean if a field has been set.
func (o *BucketVariables) HasAccessKeyId() bool {
	if o != nil && !IsNil(o.AccessKeyId) {
		return true
	}

	return false
}

// SetAccessKeyId gets a reference to the given string and assigns it to the AccessKeyId field.
func (o *BucketVariables) SetAccessKeyId(v string) {
	o.AccessKeyId = &v
}

// GetSecretKeyEncrypted returns the SecretKeyEncrypted field value if set, zero value otherwise.
func (o *BucketVariables) GetSecretKeyEncrypted() string {
	if o == nil || IsNil(o.SecretKeyEncrypted) {
		var ret string
		return ret
	}
	return *o.SecretKeyEncrypted
}

// GetSecretKeyEncryptedOk returns a tuple with the SecretKeyEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetSecretKeyEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKeyEncrypted) {
		return nil, false
	}
	return o.SecretKeyEncrypted, true
}

// HasSecretKeyEncrypted returns a boolean if a field has been set.
func (o *BucketVariables) HasSecretKeyEncrypted() bool {
	if o != nil && !IsNil(o.SecretKeyEncrypted) {
		return true
	}

	return false
}

// SetSecretKeyEncrypted gets a reference to the given string and assigns it to the SecretKeyEncrypted field.
func (o *BucketVariables) SetSecretKeyEncrypted(v string) {
	o.SecretKeyEncrypted = &v
}

// GetConfig returns the Config field value
func (o *BucketVariables) GetConfig() BucketConfiguration {
	if o == nil {
		var ret BucketConfiguration
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *BucketVariables) GetConfigOk() (*BucketConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *BucketVariables) SetConfig(v BucketConfiguration) {
	o.Config = v
}

func (o BucketVariables) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BucketVariables) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sizeGB"] = o.SizeGB
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.StoragePoolId) {
		toSerialize["storagePoolId"] = o.StoragePoolId
	}
	toSerialize["label"] = o.Label
	toSerialize["subdomain"] = o.Subdomain
	if !IsNil(o.LogicalNetworkId) {
		toSerialize["logicalNetworkId"] = o.LogicalNetworkId
	}
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["serviceStatus"] = o.ServiceStatus
	toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.AccessKeyId) {
		toSerialize["accessKeyId"] = o.AccessKeyId
	}
	if !IsNil(o.SecretKeyEncrypted) {
		toSerialize["secretKeyEncrypted"] = o.SecretKeyEncrypted
	}
	toSerialize["config"] = o.Config

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BucketVariables) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sizeGB",
		"updatedTimestamp",
		"label",
		"subdomain",
		"id",
		"revision",
		"infrastructureId",
		"createdTimestamp",
		"serviceStatus",
		"subdomainPermanent",
		"dnsSubdomainId",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBucketVariables := _BucketVariables{}

	err = json.Unmarshal(data, &varBucketVariables)

	if err != nil {
		return err
	}

	*o = BucketVariables(varBucketVariables)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sizeGB")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "storagePoolId")
		delete(additionalProperties, "label")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "logicalNetworkId")
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "dnsSubdomainId")
		delete(additionalProperties, "endpoint")
		delete(additionalProperties, "accessKeyId")
		delete(additionalProperties, "secretKeyEncrypted")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBucketVariables struct {
	value *BucketVariables
	isSet bool
}

func (v NullableBucketVariables) Get() *BucketVariables {
	return v.value
}

func (v *NullableBucketVariables) Set(val *BucketVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketVariables(val *BucketVariables) *NullableBucketVariables {
	return &NullableBucketVariables{value: val, isSet: true}
}

func (v NullableBucketVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


