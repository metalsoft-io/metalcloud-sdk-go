/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SiteControllerSeenAliveStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteControllerSeenAliveStatus{}

// SiteControllerSeenAliveStatus struct for SiteControllerSeenAliveStatus
type SiteControllerSeenAliveStatus struct {
	// Number of site controllers that may be offline
	MayBeOffline float32 `json:"may_be_offline"`
	// Number of site controllers that are offline
	Offline float32 `json:"offline"`
	// Number of site controllers seen connected very recently
	WasSeenConnectedVeryRecently float32 `json:"was_seen_connected_very_recently"`
	AdditionalProperties map[string]interface{}
}

type _SiteControllerSeenAliveStatus SiteControllerSeenAliveStatus

// NewSiteControllerSeenAliveStatus instantiates a new SiteControllerSeenAliveStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteControllerSeenAliveStatus(mayBeOffline float32, offline float32, wasSeenConnectedVeryRecently float32) *SiteControllerSeenAliveStatus {
	this := SiteControllerSeenAliveStatus{}
	this.MayBeOffline = mayBeOffline
	this.Offline = offline
	this.WasSeenConnectedVeryRecently = wasSeenConnectedVeryRecently
	return &this
}

// NewSiteControllerSeenAliveStatusWithDefaults instantiates a new SiteControllerSeenAliveStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteControllerSeenAliveStatusWithDefaults() *SiteControllerSeenAliveStatus {
	this := SiteControllerSeenAliveStatus{}
	return &this
}

// GetMayBeOffline returns the MayBeOffline field value
func (o *SiteControllerSeenAliveStatus) GetMayBeOffline() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MayBeOffline
}

// GetMayBeOfflineOk returns a tuple with the MayBeOffline field value
// and a boolean to check if the value has been set.
func (o *SiteControllerSeenAliveStatus) GetMayBeOfflineOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MayBeOffline, true
}

// SetMayBeOffline sets field value
func (o *SiteControllerSeenAliveStatus) SetMayBeOffline(v float32) {
	o.MayBeOffline = v
}

// GetOffline returns the Offline field value
func (o *SiteControllerSeenAliveStatus) GetOffline() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Offline
}

// GetOfflineOk returns a tuple with the Offline field value
// and a boolean to check if the value has been set.
func (o *SiteControllerSeenAliveStatus) GetOfflineOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offline, true
}

// SetOffline sets field value
func (o *SiteControllerSeenAliveStatus) SetOffline(v float32) {
	o.Offline = v
}

// GetWasSeenConnectedVeryRecently returns the WasSeenConnectedVeryRecently field value
func (o *SiteControllerSeenAliveStatus) GetWasSeenConnectedVeryRecently() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WasSeenConnectedVeryRecently
}

// GetWasSeenConnectedVeryRecentlyOk returns a tuple with the WasSeenConnectedVeryRecently field value
// and a boolean to check if the value has been set.
func (o *SiteControllerSeenAliveStatus) GetWasSeenConnectedVeryRecentlyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WasSeenConnectedVeryRecently, true
}

// SetWasSeenConnectedVeryRecently sets field value
func (o *SiteControllerSeenAliveStatus) SetWasSeenConnectedVeryRecently(v float32) {
	o.WasSeenConnectedVeryRecently = v
}

func (o SiteControllerSeenAliveStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteControllerSeenAliveStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["may_be_offline"] = o.MayBeOffline
	toSerialize["offline"] = o.Offline
	toSerialize["was_seen_connected_very_recently"] = o.WasSeenConnectedVeryRecently

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteControllerSeenAliveStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"may_be_offline",
		"offline",
		"was_seen_connected_very_recently",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSiteControllerSeenAliveStatus := _SiteControllerSeenAliveStatus{}

	err = json.Unmarshal(data, &varSiteControllerSeenAliveStatus)

	if err != nil {
		return err
	}

	*o = SiteControllerSeenAliveStatus(varSiteControllerSeenAliveStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "may_be_offline")
		delete(additionalProperties, "offline")
		delete(additionalProperties, "was_seen_connected_very_recently")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteControllerSeenAliveStatus struct {
	value *SiteControllerSeenAliveStatus
	isSet bool
}

func (v NullableSiteControllerSeenAliveStatus) Get() *SiteControllerSeenAliveStatus {
	return v.value
}

func (v *NullableSiteControllerSeenAliveStatus) Set(val *SiteControllerSeenAliveStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteControllerSeenAliveStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteControllerSeenAliveStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteControllerSeenAliveStatus(val *SiteControllerSeenAliveStatus) *NullableSiteControllerSeenAliveStatus {
	return &NullableSiteControllerSeenAliveStatus{value: val, isSet: true}
}

func (v NullableSiteControllerSeenAliveStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteControllerSeenAliveStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


