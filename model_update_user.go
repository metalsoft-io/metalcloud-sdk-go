/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUser{}

// UpdateUser struct for UpdateUser
type UpdateUser struct {
	// The display name of the user
	DisplayName *string `json:"displayName,omitempty"`
	// The email status of the user
	EmailStatus *string `json:"emailStatus,omitempty"`
	// The language of the user
	Language *string `json:"language,omitempty"`
	// The brand of the user
	Brand *string `json:"brand,omitempty"`
	// Whether the user is a brand manager
	IsBrandManager *bool `json:"isBrandManager,omitempty"`
	// The timestamp when the user logged in last
	LastLoginTimestamp *string `json:"lastLoginTimestamp,omitempty"`
	// The last login type of the user
	LastLoginType *string `json:"lastLoginType,omitempty"`
	// Whether the user is blocked
	IsBlocked *bool `json:"isBlocked,omitempty"`
	// Whether the user must change password
	PasswordChangeRequired *bool `json:"passwordChangeRequired,omitempty"`
	// The access level of the user
	AccessLevel *string `json:"accessLevel,omitempty"`
	// Whether the user is billable
	IsBillable *bool `json:"isBillable,omitempty"`
	// Whether the user is in testing mode
	IsTestingMode *bool `json:"isTestingMode,omitempty"`
	// The default infrastructure ID of the user
	InfrastructureIdDefault *float32 `json:"infrastructureIdDefault,omitempty"`
	// Whether the user must change authenticator
	AuthenticatorMustChange *bool `json:"authenticatorMustChange,omitempty"`
	// The timestamp when the authenticator was created
	AuthenticatorCreatedTimestamp *string `json:"authenticatorCreatedTimestamp,omitempty"`
	// The promotion tags of the user
	PromotionTags []string `json:"promotionTags,omitempty"`
	// The experimental tags of the user
	ExperimentalTags []string `json:"experimentalTags,omitempty"`
	// The external IDs of the user
	ExternalIds map[string]interface{} `json:"externalIds,omitempty"`
	// Whether the user is excluded from reports
	ExcludeFromReports *bool `json:"excludeFromReports,omitempty"`
	// Whether the user is a test account
	IsTestAccount *bool `json:"isTestAccount,omitempty"`
	// Whether the user is a archived
	IsArchived *bool `json:"isArchived,omitempty"`
	// Whether the user is a datastore publisher
	IsDatastorePublisher *bool `json:"isDatastorePublisher,omitempty"`
	// The account ID of the user
	AccountId *float32 `json:"accountId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateUser UpdateUser

// NewUpdateUser instantiates a new UpdateUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUser() *UpdateUser {
	this := UpdateUser{}
	var brand string = "default"
	this.Brand = &brand
	var lastLoginType string = "md5"
	this.LastLoginType = &lastLoginType
	return &this
}

// NewUpdateUserWithDefaults instantiates a new UpdateUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserWithDefaults() *UpdateUser {
	this := UpdateUser{}
	var brand string = "default"
	this.Brand = &brand
	var lastLoginType string = "md5"
	this.LastLoginType = &lastLoginType
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UpdateUser) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UpdateUser) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UpdateUser) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmailStatus returns the EmailStatus field value if set, zero value otherwise.
func (o *UpdateUser) GetEmailStatus() string {
	if o == nil || IsNil(o.EmailStatus) {
		var ret string
		return ret
	}
	return *o.EmailStatus
}

// GetEmailStatusOk returns a tuple with the EmailStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetEmailStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EmailStatus) {
		return nil, false
	}
	return o.EmailStatus, true
}

// HasEmailStatus returns a boolean if a field has been set.
func (o *UpdateUser) HasEmailStatus() bool {
	if o != nil && !IsNil(o.EmailStatus) {
		return true
	}

	return false
}

// SetEmailStatus gets a reference to the given string and assigns it to the EmailStatus field.
func (o *UpdateUser) SetEmailStatus(v string) {
	o.EmailStatus = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *UpdateUser) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *UpdateUser) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *UpdateUser) SetLanguage(v string) {
	o.Language = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *UpdateUser) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *UpdateUser) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *UpdateUser) SetBrand(v string) {
	o.Brand = &v
}

// GetIsBrandManager returns the IsBrandManager field value if set, zero value otherwise.
func (o *UpdateUser) GetIsBrandManager() bool {
	if o == nil || IsNil(o.IsBrandManager) {
		var ret bool
		return ret
	}
	return *o.IsBrandManager
}

// GetIsBrandManagerOk returns a tuple with the IsBrandManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsBrandManagerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBrandManager) {
		return nil, false
	}
	return o.IsBrandManager, true
}

// HasIsBrandManager returns a boolean if a field has been set.
func (o *UpdateUser) HasIsBrandManager() bool {
	if o != nil && !IsNil(o.IsBrandManager) {
		return true
	}

	return false
}

// SetIsBrandManager gets a reference to the given bool and assigns it to the IsBrandManager field.
func (o *UpdateUser) SetIsBrandManager(v bool) {
	o.IsBrandManager = &v
}

// GetLastLoginTimestamp returns the LastLoginTimestamp field value if set, zero value otherwise.
func (o *UpdateUser) GetLastLoginTimestamp() string {
	if o == nil || IsNil(o.LastLoginTimestamp) {
		var ret string
		return ret
	}
	return *o.LastLoginTimestamp
}

// GetLastLoginTimestampOk returns a tuple with the LastLoginTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetLastLoginTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginTimestamp) {
		return nil, false
	}
	return o.LastLoginTimestamp, true
}

// HasLastLoginTimestamp returns a boolean if a field has been set.
func (o *UpdateUser) HasLastLoginTimestamp() bool {
	if o != nil && !IsNil(o.LastLoginTimestamp) {
		return true
	}

	return false
}

// SetLastLoginTimestamp gets a reference to the given string and assigns it to the LastLoginTimestamp field.
func (o *UpdateUser) SetLastLoginTimestamp(v string) {
	o.LastLoginTimestamp = &v
}

// GetLastLoginType returns the LastLoginType field value if set, zero value otherwise.
func (o *UpdateUser) GetLastLoginType() string {
	if o == nil || IsNil(o.LastLoginType) {
		var ret string
		return ret
	}
	return *o.LastLoginType
}

// GetLastLoginTypeOk returns a tuple with the LastLoginType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetLastLoginTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginType) {
		return nil, false
	}
	return o.LastLoginType, true
}

// HasLastLoginType returns a boolean if a field has been set.
func (o *UpdateUser) HasLastLoginType() bool {
	if o != nil && !IsNil(o.LastLoginType) {
		return true
	}

	return false
}

// SetLastLoginType gets a reference to the given string and assigns it to the LastLoginType field.
func (o *UpdateUser) SetLastLoginType(v string) {
	o.LastLoginType = &v
}

// GetIsBlocked returns the IsBlocked field value if set, zero value otherwise.
func (o *UpdateUser) GetIsBlocked() bool {
	if o == nil || IsNil(o.IsBlocked) {
		var ret bool
		return ret
	}
	return *o.IsBlocked
}

// GetIsBlockedOk returns a tuple with the IsBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsBlockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBlocked) {
		return nil, false
	}
	return o.IsBlocked, true
}

// HasIsBlocked returns a boolean if a field has been set.
func (o *UpdateUser) HasIsBlocked() bool {
	if o != nil && !IsNil(o.IsBlocked) {
		return true
	}

	return false
}

// SetIsBlocked gets a reference to the given bool and assigns it to the IsBlocked field.
func (o *UpdateUser) SetIsBlocked(v bool) {
	o.IsBlocked = &v
}

// GetPasswordChangeRequired returns the PasswordChangeRequired field value if set, zero value otherwise.
func (o *UpdateUser) GetPasswordChangeRequired() bool {
	if o == nil || IsNil(o.PasswordChangeRequired) {
		var ret bool
		return ret
	}
	return *o.PasswordChangeRequired
}

// GetPasswordChangeRequiredOk returns a tuple with the PasswordChangeRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetPasswordChangeRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.PasswordChangeRequired) {
		return nil, false
	}
	return o.PasswordChangeRequired, true
}

// HasPasswordChangeRequired returns a boolean if a field has been set.
func (o *UpdateUser) HasPasswordChangeRequired() bool {
	if o != nil && !IsNil(o.PasswordChangeRequired) {
		return true
	}

	return false
}

// SetPasswordChangeRequired gets a reference to the given bool and assigns it to the PasswordChangeRequired field.
func (o *UpdateUser) SetPasswordChangeRequired(v bool) {
	o.PasswordChangeRequired = &v
}

// GetAccessLevel returns the AccessLevel field value if set, zero value otherwise.
func (o *UpdateUser) GetAccessLevel() string {
	if o == nil || IsNil(o.AccessLevel) {
		var ret string
		return ret
	}
	return *o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetAccessLevelOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevel) {
		return nil, false
	}
	return o.AccessLevel, true
}

// HasAccessLevel returns a boolean if a field has been set.
func (o *UpdateUser) HasAccessLevel() bool {
	if o != nil && !IsNil(o.AccessLevel) {
		return true
	}

	return false
}

// SetAccessLevel gets a reference to the given string and assigns it to the AccessLevel field.
func (o *UpdateUser) SetAccessLevel(v string) {
	o.AccessLevel = &v
}

// GetIsBillable returns the IsBillable field value if set, zero value otherwise.
func (o *UpdateUser) GetIsBillable() bool {
	if o == nil || IsNil(o.IsBillable) {
		var ret bool
		return ret
	}
	return *o.IsBillable
}

// GetIsBillableOk returns a tuple with the IsBillable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsBillableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBillable) {
		return nil, false
	}
	return o.IsBillable, true
}

// HasIsBillable returns a boolean if a field has been set.
func (o *UpdateUser) HasIsBillable() bool {
	if o != nil && !IsNil(o.IsBillable) {
		return true
	}

	return false
}

// SetIsBillable gets a reference to the given bool and assigns it to the IsBillable field.
func (o *UpdateUser) SetIsBillable(v bool) {
	o.IsBillable = &v
}

// GetIsTestingMode returns the IsTestingMode field value if set, zero value otherwise.
func (o *UpdateUser) GetIsTestingMode() bool {
	if o == nil || IsNil(o.IsTestingMode) {
		var ret bool
		return ret
	}
	return *o.IsTestingMode
}

// GetIsTestingModeOk returns a tuple with the IsTestingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsTestingModeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTestingMode) {
		return nil, false
	}
	return o.IsTestingMode, true
}

// HasIsTestingMode returns a boolean if a field has been set.
func (o *UpdateUser) HasIsTestingMode() bool {
	if o != nil && !IsNil(o.IsTestingMode) {
		return true
	}

	return false
}

// SetIsTestingMode gets a reference to the given bool and assigns it to the IsTestingMode field.
func (o *UpdateUser) SetIsTestingMode(v bool) {
	o.IsTestingMode = &v
}

// GetInfrastructureIdDefault returns the InfrastructureIdDefault field value if set, zero value otherwise.
func (o *UpdateUser) GetInfrastructureIdDefault() float32 {
	if o == nil || IsNil(o.InfrastructureIdDefault) {
		var ret float32
		return ret
	}
	return *o.InfrastructureIdDefault
}

// GetInfrastructureIdDefaultOk returns a tuple with the InfrastructureIdDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetInfrastructureIdDefaultOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureIdDefault) {
		return nil, false
	}
	return o.InfrastructureIdDefault, true
}

// HasInfrastructureIdDefault returns a boolean if a field has been set.
func (o *UpdateUser) HasInfrastructureIdDefault() bool {
	if o != nil && !IsNil(o.InfrastructureIdDefault) {
		return true
	}

	return false
}

// SetInfrastructureIdDefault gets a reference to the given float32 and assigns it to the InfrastructureIdDefault field.
func (o *UpdateUser) SetInfrastructureIdDefault(v float32) {
	o.InfrastructureIdDefault = &v
}

// GetAuthenticatorMustChange returns the AuthenticatorMustChange field value if set, zero value otherwise.
func (o *UpdateUser) GetAuthenticatorMustChange() bool {
	if o == nil || IsNil(o.AuthenticatorMustChange) {
		var ret bool
		return ret
	}
	return *o.AuthenticatorMustChange
}

// GetAuthenticatorMustChangeOk returns a tuple with the AuthenticatorMustChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetAuthenticatorMustChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthenticatorMustChange) {
		return nil, false
	}
	return o.AuthenticatorMustChange, true
}

// HasAuthenticatorMustChange returns a boolean if a field has been set.
func (o *UpdateUser) HasAuthenticatorMustChange() bool {
	if o != nil && !IsNil(o.AuthenticatorMustChange) {
		return true
	}

	return false
}

// SetAuthenticatorMustChange gets a reference to the given bool and assigns it to the AuthenticatorMustChange field.
func (o *UpdateUser) SetAuthenticatorMustChange(v bool) {
	o.AuthenticatorMustChange = &v
}

// GetAuthenticatorCreatedTimestamp returns the AuthenticatorCreatedTimestamp field value if set, zero value otherwise.
func (o *UpdateUser) GetAuthenticatorCreatedTimestamp() string {
	if o == nil || IsNil(o.AuthenticatorCreatedTimestamp) {
		var ret string
		return ret
	}
	return *o.AuthenticatorCreatedTimestamp
}

// GetAuthenticatorCreatedTimestampOk returns a tuple with the AuthenticatorCreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetAuthenticatorCreatedTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticatorCreatedTimestamp) {
		return nil, false
	}
	return o.AuthenticatorCreatedTimestamp, true
}

// HasAuthenticatorCreatedTimestamp returns a boolean if a field has been set.
func (o *UpdateUser) HasAuthenticatorCreatedTimestamp() bool {
	if o != nil && !IsNil(o.AuthenticatorCreatedTimestamp) {
		return true
	}

	return false
}

// SetAuthenticatorCreatedTimestamp gets a reference to the given string and assigns it to the AuthenticatorCreatedTimestamp field.
func (o *UpdateUser) SetAuthenticatorCreatedTimestamp(v string) {
	o.AuthenticatorCreatedTimestamp = &v
}

// GetPromotionTags returns the PromotionTags field value if set, zero value otherwise.
func (o *UpdateUser) GetPromotionTags() []string {
	if o == nil || IsNil(o.PromotionTags) {
		var ret []string
		return ret
	}
	return o.PromotionTags
}

// GetPromotionTagsOk returns a tuple with the PromotionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetPromotionTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.PromotionTags) {
		return nil, false
	}
	return o.PromotionTags, true
}

// HasPromotionTags returns a boolean if a field has been set.
func (o *UpdateUser) HasPromotionTags() bool {
	if o != nil && !IsNil(o.PromotionTags) {
		return true
	}

	return false
}

// SetPromotionTags gets a reference to the given []string and assigns it to the PromotionTags field.
func (o *UpdateUser) SetPromotionTags(v []string) {
	o.PromotionTags = v
}

// GetExperimentalTags returns the ExperimentalTags field value if set, zero value otherwise.
func (o *UpdateUser) GetExperimentalTags() []string {
	if o == nil || IsNil(o.ExperimentalTags) {
		var ret []string
		return ret
	}
	return o.ExperimentalTags
}

// GetExperimentalTagsOk returns a tuple with the ExperimentalTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetExperimentalTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExperimentalTags) {
		return nil, false
	}
	return o.ExperimentalTags, true
}

// HasExperimentalTags returns a boolean if a field has been set.
func (o *UpdateUser) HasExperimentalTags() bool {
	if o != nil && !IsNil(o.ExperimentalTags) {
		return true
	}

	return false
}

// SetExperimentalTags gets a reference to the given []string and assigns it to the ExperimentalTags field.
func (o *UpdateUser) SetExperimentalTags(v []string) {
	o.ExperimentalTags = v
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise.
func (o *UpdateUser) GetExternalIds() map[string]interface{} {
	if o == nil || IsNil(o.ExternalIds) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetExternalIdsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExternalIds) {
		return map[string]interface{}{}, false
	}
	return o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *UpdateUser) HasExternalIds() bool {
	if o != nil && !IsNil(o.ExternalIds) {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given map[string]interface{} and assigns it to the ExternalIds field.
func (o *UpdateUser) SetExternalIds(v map[string]interface{}) {
	o.ExternalIds = v
}

// GetExcludeFromReports returns the ExcludeFromReports field value if set, zero value otherwise.
func (o *UpdateUser) GetExcludeFromReports() bool {
	if o == nil || IsNil(o.ExcludeFromReports) {
		var ret bool
		return ret
	}
	return *o.ExcludeFromReports
}

// GetExcludeFromReportsOk returns a tuple with the ExcludeFromReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetExcludeFromReportsOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeFromReports) {
		return nil, false
	}
	return o.ExcludeFromReports, true
}

// HasExcludeFromReports returns a boolean if a field has been set.
func (o *UpdateUser) HasExcludeFromReports() bool {
	if o != nil && !IsNil(o.ExcludeFromReports) {
		return true
	}

	return false
}

// SetExcludeFromReports gets a reference to the given bool and assigns it to the ExcludeFromReports field.
func (o *UpdateUser) SetExcludeFromReports(v bool) {
	o.ExcludeFromReports = &v
}

// GetIsTestAccount returns the IsTestAccount field value if set, zero value otherwise.
func (o *UpdateUser) GetIsTestAccount() bool {
	if o == nil || IsNil(o.IsTestAccount) {
		var ret bool
		return ret
	}
	return *o.IsTestAccount
}

// GetIsTestAccountOk returns a tuple with the IsTestAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsTestAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTestAccount) {
		return nil, false
	}
	return o.IsTestAccount, true
}

// HasIsTestAccount returns a boolean if a field has been set.
func (o *UpdateUser) HasIsTestAccount() bool {
	if o != nil && !IsNil(o.IsTestAccount) {
		return true
	}

	return false
}

// SetIsTestAccount gets a reference to the given bool and assigns it to the IsTestAccount field.
func (o *UpdateUser) SetIsTestAccount(v bool) {
	o.IsTestAccount = &v
}

// GetIsArchived returns the IsArchived field value if set, zero value otherwise.
func (o *UpdateUser) GetIsArchived() bool {
	if o == nil || IsNil(o.IsArchived) {
		var ret bool
		return ret
	}
	return *o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsArchived) {
		return nil, false
	}
	return o.IsArchived, true
}

// HasIsArchived returns a boolean if a field has been set.
func (o *UpdateUser) HasIsArchived() bool {
	if o != nil && !IsNil(o.IsArchived) {
		return true
	}

	return false
}

// SetIsArchived gets a reference to the given bool and assigns it to the IsArchived field.
func (o *UpdateUser) SetIsArchived(v bool) {
	o.IsArchived = &v
}

// GetIsDatastorePublisher returns the IsDatastorePublisher field value if set, zero value otherwise.
func (o *UpdateUser) GetIsDatastorePublisher() bool {
	if o == nil || IsNil(o.IsDatastorePublisher) {
		var ret bool
		return ret
	}
	return *o.IsDatastorePublisher
}

// GetIsDatastorePublisherOk returns a tuple with the IsDatastorePublisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsDatastorePublisherOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDatastorePublisher) {
		return nil, false
	}
	return o.IsDatastorePublisher, true
}

// HasIsDatastorePublisher returns a boolean if a field has been set.
func (o *UpdateUser) HasIsDatastorePublisher() bool {
	if o != nil && !IsNil(o.IsDatastorePublisher) {
		return true
	}

	return false
}

// SetIsDatastorePublisher gets a reference to the given bool and assigns it to the IsDatastorePublisher field.
func (o *UpdateUser) SetIsDatastorePublisher(v bool) {
	o.IsDatastorePublisher = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *UpdateUser) GetAccountId() float32 {
	if o == nil || IsNil(o.AccountId) {
		var ret float32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetAccountIdOk() (*float32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *UpdateUser) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given float32 and assigns it to the AccountId field.
func (o *UpdateUser) SetAccountId(v float32) {
	o.AccountId = &v
}

func (o UpdateUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EmailStatus) {
		toSerialize["emailStatus"] = o.EmailStatus
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.IsBrandManager) {
		toSerialize["isBrandManager"] = o.IsBrandManager
	}
	if !IsNil(o.LastLoginTimestamp) {
		toSerialize["lastLoginTimestamp"] = o.LastLoginTimestamp
	}
	if !IsNil(o.LastLoginType) {
		toSerialize["lastLoginType"] = o.LastLoginType
	}
	if !IsNil(o.IsBlocked) {
		toSerialize["isBlocked"] = o.IsBlocked
	}
	if !IsNil(o.PasswordChangeRequired) {
		toSerialize["passwordChangeRequired"] = o.PasswordChangeRequired
	}
	if !IsNil(o.AccessLevel) {
		toSerialize["accessLevel"] = o.AccessLevel
	}
	if !IsNil(o.IsBillable) {
		toSerialize["isBillable"] = o.IsBillable
	}
	if !IsNil(o.IsTestingMode) {
		toSerialize["isTestingMode"] = o.IsTestingMode
	}
	if !IsNil(o.InfrastructureIdDefault) {
		toSerialize["infrastructureIdDefault"] = o.InfrastructureIdDefault
	}
	if !IsNil(o.AuthenticatorMustChange) {
		toSerialize["authenticatorMustChange"] = o.AuthenticatorMustChange
	}
	if !IsNil(o.AuthenticatorCreatedTimestamp) {
		toSerialize["authenticatorCreatedTimestamp"] = o.AuthenticatorCreatedTimestamp
	}
	if !IsNil(o.PromotionTags) {
		toSerialize["promotionTags"] = o.PromotionTags
	}
	if !IsNil(o.ExperimentalTags) {
		toSerialize["experimentalTags"] = o.ExperimentalTags
	}
	if !IsNil(o.ExternalIds) {
		toSerialize["externalIds"] = o.ExternalIds
	}
	if !IsNil(o.ExcludeFromReports) {
		toSerialize["excludeFromReports"] = o.ExcludeFromReports
	}
	if !IsNil(o.IsTestAccount) {
		toSerialize["isTestAccount"] = o.IsTestAccount
	}
	if !IsNil(o.IsArchived) {
		toSerialize["isArchived"] = o.IsArchived
	}
	if !IsNil(o.IsDatastorePublisher) {
		toSerialize["isDatastorePublisher"] = o.IsDatastorePublisher
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateUser) UnmarshalJSON(data []byte) (err error) {
	varUpdateUser := _UpdateUser{}

	err = json.Unmarshal(data, &varUpdateUser)

	if err != nil {
		return err
	}

	*o = UpdateUser(varUpdateUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "emailStatus")
		delete(additionalProperties, "language")
		delete(additionalProperties, "brand")
		delete(additionalProperties, "isBrandManager")
		delete(additionalProperties, "lastLoginTimestamp")
		delete(additionalProperties, "lastLoginType")
		delete(additionalProperties, "isBlocked")
		delete(additionalProperties, "passwordChangeRequired")
		delete(additionalProperties, "accessLevel")
		delete(additionalProperties, "isBillable")
		delete(additionalProperties, "isTestingMode")
		delete(additionalProperties, "infrastructureIdDefault")
		delete(additionalProperties, "authenticatorMustChange")
		delete(additionalProperties, "authenticatorCreatedTimestamp")
		delete(additionalProperties, "promotionTags")
		delete(additionalProperties, "experimentalTags")
		delete(additionalProperties, "externalIds")
		delete(additionalProperties, "excludeFromReports")
		delete(additionalProperties, "isTestAccount")
		delete(additionalProperties, "isArchived")
		delete(additionalProperties, "isDatastorePublisher")
		delete(additionalProperties, "accountId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateUser struct {
	value *UpdateUser
	isSet bool
}

func (v NullableUpdateUser) Get() *UpdateUser {
	return v.value
}

func (v *NullableUpdateUser) Set(val *UpdateUser) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUser(val *UpdateUser) *NullableUpdateUser {
	return &NullableUpdateUser{value: val, isSet: true}
}

func (v NullableUpdateUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


