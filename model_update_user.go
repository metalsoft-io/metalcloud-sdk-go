/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUser{}

// UpdateUser struct for UpdateUser
type UpdateUser struct {
	// The redirect URL for the user
	RedirectUrl *string `json:"redirectUrl,omitempty"`
	// The new display name of the user
	DisplayName *string `json:"displayName,omitempty"`
	// The new login e-mail of the user
	Email *string `json:"email,omitempty"`
	// The new e-mail status of the user
	EmailStatus *string `json:"emailStatus,omitempty"`
	// The new language of the user
	Language *string `json:"language,omitempty"`
	// The new brand of the user
	Brand *string `json:"brand,omitempty"`
	// The new brand manager status of the user
	IsBrandManager *bool `json:"isBrandManager,omitempty"`
	// The new user delegates of the user.
	Delegates []UserDelegate `json:"delegates,omitempty"`
	// The new blocked status of the user
	IsBlocked *bool `json:"isBlocked,omitempty"`
	Suspension *UserSuspend `json:"suspension,omitempty"`
	// The new access level of the user
	AccessLevel *string `json:"accessLevel,omitempty"`
	// The new promotions of the user.
	Promotions []UserPromotion `json:"promotions,omitempty"`
	// The new experimental tags of the user.
	ExperimentalTags []UserExperimentalTag `json:"experimentalTags,omitempty"`
	Permissions *UserResourcePermissions `json:"permissions,omitempty"`
	// Whether the user account is a test one.
	IsTestAccount *bool `json:"isTestAccount,omitempty"`
	// Whether the user account is billable.
	IsBillable *bool `json:"isBillable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateUser UpdateUser

// NewUpdateUser instantiates a new UpdateUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUser() *UpdateUser {
	this := UpdateUser{}
	return &this
}

// NewUpdateUserWithDefaults instantiates a new UpdateUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserWithDefaults() *UpdateUser {
	this := UpdateUser{}
	return &this
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *UpdateUser) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl) {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectUrl) {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *UpdateUser) HasRedirectUrl() bool {
	if o != nil && !IsNil(o.RedirectUrl) {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *UpdateUser) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UpdateUser) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UpdateUser) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UpdateUser) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUser) SetEmail(v string) {
	o.Email = &v
}

// GetEmailStatus returns the EmailStatus field value if set, zero value otherwise.
func (o *UpdateUser) GetEmailStatus() string {
	if o == nil || IsNil(o.EmailStatus) {
		var ret string
		return ret
	}
	return *o.EmailStatus
}

// GetEmailStatusOk returns a tuple with the EmailStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetEmailStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EmailStatus) {
		return nil, false
	}
	return o.EmailStatus, true
}

// HasEmailStatus returns a boolean if a field has been set.
func (o *UpdateUser) HasEmailStatus() bool {
	if o != nil && !IsNil(o.EmailStatus) {
		return true
	}

	return false
}

// SetEmailStatus gets a reference to the given string and assigns it to the EmailStatus field.
func (o *UpdateUser) SetEmailStatus(v string) {
	o.EmailStatus = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *UpdateUser) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *UpdateUser) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *UpdateUser) SetLanguage(v string) {
	o.Language = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *UpdateUser) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *UpdateUser) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *UpdateUser) SetBrand(v string) {
	o.Brand = &v
}

// GetIsBrandManager returns the IsBrandManager field value if set, zero value otherwise.
func (o *UpdateUser) GetIsBrandManager() bool {
	if o == nil || IsNil(o.IsBrandManager) {
		var ret bool
		return ret
	}
	return *o.IsBrandManager
}

// GetIsBrandManagerOk returns a tuple with the IsBrandManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsBrandManagerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBrandManager) {
		return nil, false
	}
	return o.IsBrandManager, true
}

// HasIsBrandManager returns a boolean if a field has been set.
func (o *UpdateUser) HasIsBrandManager() bool {
	if o != nil && !IsNil(o.IsBrandManager) {
		return true
	}

	return false
}

// SetIsBrandManager gets a reference to the given bool and assigns it to the IsBrandManager field.
func (o *UpdateUser) SetIsBrandManager(v bool) {
	o.IsBrandManager = &v
}

// GetDelegates returns the Delegates field value if set, zero value otherwise.
func (o *UpdateUser) GetDelegates() []UserDelegate {
	if o == nil || IsNil(o.Delegates) {
		var ret []UserDelegate
		return ret
	}
	return o.Delegates
}

// GetDelegatesOk returns a tuple with the Delegates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetDelegatesOk() ([]UserDelegate, bool) {
	if o == nil || IsNil(o.Delegates) {
		return nil, false
	}
	return o.Delegates, true
}

// HasDelegates returns a boolean if a field has been set.
func (o *UpdateUser) HasDelegates() bool {
	if o != nil && !IsNil(o.Delegates) {
		return true
	}

	return false
}

// SetDelegates gets a reference to the given []UserDelegate and assigns it to the Delegates field.
func (o *UpdateUser) SetDelegates(v []UserDelegate) {
	o.Delegates = v
}

// GetIsBlocked returns the IsBlocked field value if set, zero value otherwise.
func (o *UpdateUser) GetIsBlocked() bool {
	if o == nil || IsNil(o.IsBlocked) {
		var ret bool
		return ret
	}
	return *o.IsBlocked
}

// GetIsBlockedOk returns a tuple with the IsBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsBlockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBlocked) {
		return nil, false
	}
	return o.IsBlocked, true
}

// HasIsBlocked returns a boolean if a field has been set.
func (o *UpdateUser) HasIsBlocked() bool {
	if o != nil && !IsNil(o.IsBlocked) {
		return true
	}

	return false
}

// SetIsBlocked gets a reference to the given bool and assigns it to the IsBlocked field.
func (o *UpdateUser) SetIsBlocked(v bool) {
	o.IsBlocked = &v
}

// GetSuspension returns the Suspension field value if set, zero value otherwise.
func (o *UpdateUser) GetSuspension() UserSuspend {
	if o == nil || IsNil(o.Suspension) {
		var ret UserSuspend
		return ret
	}
	return *o.Suspension
}

// GetSuspensionOk returns a tuple with the Suspension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetSuspensionOk() (*UserSuspend, bool) {
	if o == nil || IsNil(o.Suspension) {
		return nil, false
	}
	return o.Suspension, true
}

// HasSuspension returns a boolean if a field has been set.
func (o *UpdateUser) HasSuspension() bool {
	if o != nil && !IsNil(o.Suspension) {
		return true
	}

	return false
}

// SetSuspension gets a reference to the given UserSuspend and assigns it to the Suspension field.
func (o *UpdateUser) SetSuspension(v UserSuspend) {
	o.Suspension = &v
}

// GetAccessLevel returns the AccessLevel field value if set, zero value otherwise.
func (o *UpdateUser) GetAccessLevel() string {
	if o == nil || IsNil(o.AccessLevel) {
		var ret string
		return ret
	}
	return *o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetAccessLevelOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevel) {
		return nil, false
	}
	return o.AccessLevel, true
}

// HasAccessLevel returns a boolean if a field has been set.
func (o *UpdateUser) HasAccessLevel() bool {
	if o != nil && !IsNil(o.AccessLevel) {
		return true
	}

	return false
}

// SetAccessLevel gets a reference to the given string and assigns it to the AccessLevel field.
func (o *UpdateUser) SetAccessLevel(v string) {
	o.AccessLevel = &v
}

// GetPromotions returns the Promotions field value if set, zero value otherwise.
func (o *UpdateUser) GetPromotions() []UserPromotion {
	if o == nil || IsNil(o.Promotions) {
		var ret []UserPromotion
		return ret
	}
	return o.Promotions
}

// GetPromotionsOk returns a tuple with the Promotions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetPromotionsOk() ([]UserPromotion, bool) {
	if o == nil || IsNil(o.Promotions) {
		return nil, false
	}
	return o.Promotions, true
}

// HasPromotions returns a boolean if a field has been set.
func (o *UpdateUser) HasPromotions() bool {
	if o != nil && !IsNil(o.Promotions) {
		return true
	}

	return false
}

// SetPromotions gets a reference to the given []UserPromotion and assigns it to the Promotions field.
func (o *UpdateUser) SetPromotions(v []UserPromotion) {
	o.Promotions = v
}

// GetExperimentalTags returns the ExperimentalTags field value if set, zero value otherwise.
func (o *UpdateUser) GetExperimentalTags() []UserExperimentalTag {
	if o == nil || IsNil(o.ExperimentalTags) {
		var ret []UserExperimentalTag
		return ret
	}
	return o.ExperimentalTags
}

// GetExperimentalTagsOk returns a tuple with the ExperimentalTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetExperimentalTagsOk() ([]UserExperimentalTag, bool) {
	if o == nil || IsNil(o.ExperimentalTags) {
		return nil, false
	}
	return o.ExperimentalTags, true
}

// HasExperimentalTags returns a boolean if a field has been set.
func (o *UpdateUser) HasExperimentalTags() bool {
	if o != nil && !IsNil(o.ExperimentalTags) {
		return true
	}

	return false
}

// SetExperimentalTags gets a reference to the given []UserExperimentalTag and assigns it to the ExperimentalTags field.
func (o *UpdateUser) SetExperimentalTags(v []UserExperimentalTag) {
	o.ExperimentalTags = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *UpdateUser) GetPermissions() UserResourcePermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret UserResourcePermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetPermissionsOk() (*UserResourcePermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UpdateUser) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given UserResourcePermissions and assigns it to the Permissions field.
func (o *UpdateUser) SetPermissions(v UserResourcePermissions) {
	o.Permissions = &v
}

// GetIsTestAccount returns the IsTestAccount field value if set, zero value otherwise.
func (o *UpdateUser) GetIsTestAccount() bool {
	if o == nil || IsNil(o.IsTestAccount) {
		var ret bool
		return ret
	}
	return *o.IsTestAccount
}

// GetIsTestAccountOk returns a tuple with the IsTestAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsTestAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTestAccount) {
		return nil, false
	}
	return o.IsTestAccount, true
}

// HasIsTestAccount returns a boolean if a field has been set.
func (o *UpdateUser) HasIsTestAccount() bool {
	if o != nil && !IsNil(o.IsTestAccount) {
		return true
	}

	return false
}

// SetIsTestAccount gets a reference to the given bool and assigns it to the IsTestAccount field.
func (o *UpdateUser) SetIsTestAccount(v bool) {
	o.IsTestAccount = &v
}

// GetIsBillable returns the IsBillable field value if set, zero value otherwise.
func (o *UpdateUser) GetIsBillable() bool {
	if o == nil || IsNil(o.IsBillable) {
		var ret bool
		return ret
	}
	return *o.IsBillable
}

// GetIsBillableOk returns a tuple with the IsBillable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUser) GetIsBillableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBillable) {
		return nil, false
	}
	return o.IsBillable, true
}

// HasIsBillable returns a boolean if a field has been set.
func (o *UpdateUser) HasIsBillable() bool {
	if o != nil && !IsNil(o.IsBillable) {
		return true
	}

	return false
}

// SetIsBillable gets a reference to the given bool and assigns it to the IsBillable field.
func (o *UpdateUser) SetIsBillable(v bool) {
	o.IsBillable = &v
}

func (o UpdateUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RedirectUrl) {
		toSerialize["redirectUrl"] = o.RedirectUrl
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EmailStatus) {
		toSerialize["emailStatus"] = o.EmailStatus
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.IsBrandManager) {
		toSerialize["isBrandManager"] = o.IsBrandManager
	}
	if !IsNil(o.Delegates) {
		toSerialize["delegates"] = o.Delegates
	}
	if !IsNil(o.IsBlocked) {
		toSerialize["isBlocked"] = o.IsBlocked
	}
	if !IsNil(o.Suspension) {
		toSerialize["suspension"] = o.Suspension
	}
	if !IsNil(o.AccessLevel) {
		toSerialize["accessLevel"] = o.AccessLevel
	}
	if !IsNil(o.Promotions) {
		toSerialize["promotions"] = o.Promotions
	}
	if !IsNil(o.ExperimentalTags) {
		toSerialize["experimentalTags"] = o.ExperimentalTags
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.IsTestAccount) {
		toSerialize["isTestAccount"] = o.IsTestAccount
	}
	if !IsNil(o.IsBillable) {
		toSerialize["isBillable"] = o.IsBillable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateUser) UnmarshalJSON(data []byte) (err error) {
	varUpdateUser := _UpdateUser{}

	err = json.Unmarshal(data, &varUpdateUser)

	if err != nil {
		return err
	}

	*o = UpdateUser(varUpdateUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "redirectUrl")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "email")
		delete(additionalProperties, "emailStatus")
		delete(additionalProperties, "language")
		delete(additionalProperties, "brand")
		delete(additionalProperties, "isBrandManager")
		delete(additionalProperties, "delegates")
		delete(additionalProperties, "isBlocked")
		delete(additionalProperties, "suspension")
		delete(additionalProperties, "accessLevel")
		delete(additionalProperties, "promotions")
		delete(additionalProperties, "experimentalTags")
		delete(additionalProperties, "permissions")
		delete(additionalProperties, "isTestAccount")
		delete(additionalProperties, "isBillable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateUser struct {
	value *UpdateUser
	isSet bool
}

func (v NullableUpdateUser) Get() *UpdateUser {
	return v.value
}

func (v *NullableUpdateUser) Set(val *UpdateUser) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUser(val *UpdateUser) *NullableUpdateUser {
	return &NullableUpdateUser{value: val, isSet: true}
}

func (v NullableUpdateUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


