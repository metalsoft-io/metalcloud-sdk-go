/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// SwitchPosition The physical or logical position of the network device in the network topology.
type SwitchPosition string

// List of SwitchPosition
const (
	SWITCHPOSITION_TOR SwitchPosition = "tor"
	SWITCHPOSITION_NORTH SwitchPosition = "north"
	SWITCHPOSITION_SPINE SwitchPosition = "spine"
	SWITCHPOSITION_LEAF SwitchPosition = "leaf"
	SWITCHPOSITION_OTHER SwitchPosition = "other"
)

// All allowed values of SwitchPosition enum
var AllowedSwitchPositionEnumValues = []SwitchPosition{
	"tor",
	"north",
	"spine",
	"leaf",
	"other",
}

func (v *SwitchPosition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SwitchPosition(value)
	for _, existing := range AllowedSwitchPositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SwitchPosition", value)
}

// NewSwitchPositionFromValue returns a pointer to a valid SwitchPosition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSwitchPositionFromValue(v string) (*SwitchPosition, error) {
	ev := SwitchPosition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SwitchPosition: valid values are %v", v, AllowedSwitchPositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SwitchPosition) IsValid() bool {
	for _, existing := range AllowedSwitchPositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SwitchPosition value
func (v SwitchPosition) Ptr() *SwitchPosition {
	return &v
}

type NullableSwitchPosition struct {
	value *SwitchPosition
	isSet bool
}

func (v NullableSwitchPosition) Get() *SwitchPosition {
	return v.value
}

func (v *NullableSwitchPosition) Set(val *SwitchPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchPosition(val *SwitchPosition) *NullableSwitchPosition {
	return &NullableSwitchPosition{value: val, isSet: true}
}

func (v NullableSwitchPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

