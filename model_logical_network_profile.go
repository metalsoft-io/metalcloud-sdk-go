/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the LogicalNetworkProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalNetworkProfile{}

// LogicalNetworkProfile struct for LogicalNetworkProfile
type LogicalNetworkProfile struct {
	Id int32 `json:"id"`
	Label string `json:"label"`
	Name string `json:"name"`
	Annotations map[string]string `json:"annotations"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Revision int32 `json:"revision"`
	Kind LogicalNetworkKind `json:"kind"`
	FabricId int32 `json:"fabricId"`
	Vlan *LogicalNetworkProfileVlanProperties `json:"vlan,omitempty"`
	Vxlan *LogicalNetworkProfileVxlanProperties `json:"vxlan,omitempty"`
	Ipv4 *LogicalNetworkProfileIpv4Properties `json:"ipv4,omitempty"`
	Ipv6 *LogicalNetworkProfileIpv6Properties `json:"ipv6,omitempty"`
	RouteDomainId NullableInt32 `json:"routeDomainId,omitempty"`
	// Maximum Transmission Unit (MTU) in bytes
	Mtu NullableInt32 `json:"mtu,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogicalNetworkProfile LogicalNetworkProfile

// NewLogicalNetworkProfile instantiates a new LogicalNetworkProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalNetworkProfile(id int32, label string, name string, annotations map[string]string, createdAt time.Time, updatedAt time.Time, revision int32, kind LogicalNetworkKind, fabricId int32) *LogicalNetworkProfile {
	this := LogicalNetworkProfile{}
	this.Id = id
	this.Label = label
	this.Name = name
	this.Annotations = annotations
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Revision = revision
	this.Kind = kind
	this.FabricId = fabricId
	return &this
}

// NewLogicalNetworkProfileWithDefaults instantiates a new LogicalNetworkProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalNetworkProfileWithDefaults() *LogicalNetworkProfile {
	this := LogicalNetworkProfile{}
	return &this
}

// GetId returns the Id field value
func (o *LogicalNetworkProfile) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogicalNetworkProfile) SetId(v int32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *LogicalNetworkProfile) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *LogicalNetworkProfile) SetLabel(v string) {
	o.Label = v
}

// GetName returns the Name field value
func (o *LogicalNetworkProfile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogicalNetworkProfile) SetName(v string) {
	o.Name = v
}

// GetAnnotations returns the Annotations field value
func (o *LogicalNetworkProfile) GetAnnotations() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Annotations, true
}

// SetAnnotations sets field value
func (o *LogicalNetworkProfile) SetAnnotations(v map[string]string) {
	o.Annotations = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *LogicalNetworkProfile) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *LogicalNetworkProfile) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *LogicalNetworkProfile) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *LogicalNetworkProfile) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetRevision returns the Revision field value
func (o *LogicalNetworkProfile) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *LogicalNetworkProfile) SetRevision(v int32) {
	o.Revision = v
}

// GetKind returns the Kind field value
func (o *LogicalNetworkProfile) GetKind() LogicalNetworkKind {
	if o == nil {
		var ret LogicalNetworkKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetKindOk() (*LogicalNetworkKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *LogicalNetworkProfile) SetKind(v LogicalNetworkKind) {
	o.Kind = v
}

// GetFabricId returns the FabricId field value
func (o *LogicalNetworkProfile) GetFabricId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FabricId
}

// GetFabricIdOk returns a tuple with the FabricId field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetFabricIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FabricId, true
}

// SetFabricId sets field value
func (o *LogicalNetworkProfile) SetFabricId(v int32) {
	o.FabricId = v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *LogicalNetworkProfile) GetVlan() LogicalNetworkProfileVlanProperties {
	if o == nil || IsNil(o.Vlan) {
		var ret LogicalNetworkProfileVlanProperties
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetVlanOk() (*LogicalNetworkProfileVlanProperties, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *LogicalNetworkProfile) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given LogicalNetworkProfileVlanProperties and assigns it to the Vlan field.
func (o *LogicalNetworkProfile) SetVlan(v LogicalNetworkProfileVlanProperties) {
	o.Vlan = &v
}

// GetVxlan returns the Vxlan field value if set, zero value otherwise.
func (o *LogicalNetworkProfile) GetVxlan() LogicalNetworkProfileVxlanProperties {
	if o == nil || IsNil(o.Vxlan) {
		var ret LogicalNetworkProfileVxlanProperties
		return ret
	}
	return *o.Vxlan
}

// GetVxlanOk returns a tuple with the Vxlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetVxlanOk() (*LogicalNetworkProfileVxlanProperties, bool) {
	if o == nil || IsNil(o.Vxlan) {
		return nil, false
	}
	return o.Vxlan, true
}

// HasVxlan returns a boolean if a field has been set.
func (o *LogicalNetworkProfile) HasVxlan() bool {
	if o != nil && !IsNil(o.Vxlan) {
		return true
	}

	return false
}

// SetVxlan gets a reference to the given LogicalNetworkProfileVxlanProperties and assigns it to the Vxlan field.
func (o *LogicalNetworkProfile) SetVxlan(v LogicalNetworkProfileVxlanProperties) {
	o.Vxlan = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *LogicalNetworkProfile) GetIpv4() LogicalNetworkProfileIpv4Properties {
	if o == nil || IsNil(o.Ipv4) {
		var ret LogicalNetworkProfileIpv4Properties
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetIpv4Ok() (*LogicalNetworkProfileIpv4Properties, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *LogicalNetworkProfile) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given LogicalNetworkProfileIpv4Properties and assigns it to the Ipv4 field.
func (o *LogicalNetworkProfile) SetIpv4(v LogicalNetworkProfileIpv4Properties) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *LogicalNetworkProfile) GetIpv6() LogicalNetworkProfileIpv6Properties {
	if o == nil || IsNil(o.Ipv6) {
		var ret LogicalNetworkProfileIpv6Properties
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetworkProfile) GetIpv6Ok() (*LogicalNetworkProfileIpv6Properties, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *LogicalNetworkProfile) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given LogicalNetworkProfileIpv6Properties and assigns it to the Ipv6 field.
func (o *LogicalNetworkProfile) SetIpv6(v LogicalNetworkProfileIpv6Properties) {
	o.Ipv6 = &v
}

// GetRouteDomainId returns the RouteDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogicalNetworkProfile) GetRouteDomainId() int32 {
	if o == nil || IsNil(o.RouteDomainId.Get()) {
		var ret int32
		return ret
	}
	return *o.RouteDomainId.Get()
}

// GetRouteDomainIdOk returns a tuple with the RouteDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogicalNetworkProfile) GetRouteDomainIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RouteDomainId.Get(), o.RouteDomainId.IsSet()
}

// HasRouteDomainId returns a boolean if a field has been set.
func (o *LogicalNetworkProfile) HasRouteDomainId() bool {
	if o != nil && o.RouteDomainId.IsSet() {
		return true
	}

	return false
}

// SetRouteDomainId gets a reference to the given NullableInt32 and assigns it to the RouteDomainId field.
func (o *LogicalNetworkProfile) SetRouteDomainId(v int32) {
	o.RouteDomainId.Set(&v)
}
// SetRouteDomainIdNil sets the value for RouteDomainId to be an explicit nil
func (o *LogicalNetworkProfile) SetRouteDomainIdNil() {
	o.RouteDomainId.Set(nil)
}

// UnsetRouteDomainId ensures that no value is present for RouteDomainId, not even an explicit nil
func (o *LogicalNetworkProfile) UnsetRouteDomainId() {
	o.RouteDomainId.Unset()
}

// GetMtu returns the Mtu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogicalNetworkProfile) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu.Get()) {
		var ret int32
		return ret
	}
	return *o.Mtu.Get()
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogicalNetworkProfile) GetMtuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mtu.Get(), o.Mtu.IsSet()
}

// HasMtu returns a boolean if a field has been set.
func (o *LogicalNetworkProfile) HasMtu() bool {
	if o != nil && o.Mtu.IsSet() {
		return true
	}

	return false
}

// SetMtu gets a reference to the given NullableInt32 and assigns it to the Mtu field.
func (o *LogicalNetworkProfile) SetMtu(v int32) {
	o.Mtu.Set(&v)
}
// SetMtuNil sets the value for Mtu to be an explicit nil
func (o *LogicalNetworkProfile) SetMtuNil() {
	o.Mtu.Set(nil)
}

// UnsetMtu ensures that no value is present for Mtu, not even an explicit nil
func (o *LogicalNetworkProfile) UnsetMtu() {
	o.Mtu.Unset()
}

func (o LogicalNetworkProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalNetworkProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["name"] = o.Name
	toSerialize["annotations"] = o.Annotations
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["revision"] = o.Revision
	toSerialize["kind"] = o.Kind
	toSerialize["fabricId"] = o.FabricId
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}
	if !IsNil(o.Vxlan) {
		toSerialize["vxlan"] = o.Vxlan
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if o.RouteDomainId.IsSet() {
		toSerialize["routeDomainId"] = o.RouteDomainId.Get()
	}
	if o.Mtu.IsSet() {
		toSerialize["mtu"] = o.Mtu.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalNetworkProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"name",
		"annotations",
		"createdAt",
		"updatedAt",
		"revision",
		"kind",
		"fabricId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogicalNetworkProfile := _LogicalNetworkProfile{}

	err = json.Unmarshal(data, &varLogicalNetworkProfile)

	if err != nil {
		return err
	}

	*o = LogicalNetworkProfile(varLogicalNetworkProfile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "name")
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "fabricId")
		delete(additionalProperties, "vlan")
		delete(additionalProperties, "vxlan")
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "ipv6")
		delete(additionalProperties, "routeDomainId")
		delete(additionalProperties, "mtu")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalNetworkProfile struct {
	value *LogicalNetworkProfile
	isSet bool
}

func (v NullableLogicalNetworkProfile) Get() *LogicalNetworkProfile {
	return v.value
}

func (v *NullableLogicalNetworkProfile) Set(val *LogicalNetworkProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalNetworkProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalNetworkProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalNetworkProfile(val *LogicalNetworkProfile) *NullableLogicalNetworkProfile {
	return &NullableLogicalNetworkProfile{value: val, isSet: true}
}

func (v NullableLogicalNetworkProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalNetworkProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


