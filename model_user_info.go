/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInfo{}

// UserInfo struct for UserInfo
type UserInfo struct {
	// The display name of the user
	DisplayName string `json:"displayName"`
	// The email status of the user
	EmailStatus string `json:"emailStatus"`
	// The language of the user
	Language string `json:"language"`
	// The timestamp when the user logged in last
	LastLoginTimestamp string `json:"lastLoginTimestamp"`
	// The access level of the user
	AccessLevel string `json:"accessLevel"`
	// Whether the user is a archived
	IsArchived bool `json:"isArchived"`
	// The account ID of the user
	AccountId *float32 `json:"accountId,omitempty"`
	// User ID
	Id float32 `json:"id"`
	// Revision of the user
	Revision float32 `json:"revision"`
	// The email address of the user
	Email string `json:"email"`
	// The timestamp when the user was created
	CreatedTimestamp string `json:"createdTimestamp"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserInfo UserInfo

// NewUserInfo instantiates a new UserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfo(displayName string, emailStatus string, language string, lastLoginTimestamp string, accessLevel string, isArchived bool, id float32, revision float32, email string, createdTimestamp string) *UserInfo {
	this := UserInfo{}
	this.DisplayName = displayName
	this.EmailStatus = emailStatus
	this.Language = language
	this.LastLoginTimestamp = lastLoginTimestamp
	this.AccessLevel = accessLevel
	this.IsArchived = isArchived
	this.Id = id
	this.Revision = revision
	this.Email = email
	this.CreatedTimestamp = createdTimestamp
	return &this
}

// NewUserInfoWithDefaults instantiates a new UserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoWithDefaults() *UserInfo {
	this := UserInfo{}
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *UserInfo) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *UserInfo) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEmailStatus returns the EmailStatus field value
func (o *UserInfo) GetEmailStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailStatus
}

// GetEmailStatusOk returns a tuple with the EmailStatus field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetEmailStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailStatus, true
}

// SetEmailStatus sets field value
func (o *UserInfo) SetEmailStatus(v string) {
	o.EmailStatus = v
}

// GetLanguage returns the Language field value
func (o *UserInfo) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *UserInfo) SetLanguage(v string) {
	o.Language = v
}

// GetLastLoginTimestamp returns the LastLoginTimestamp field value
func (o *UserInfo) GetLastLoginTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastLoginTimestamp
}

// GetLastLoginTimestampOk returns a tuple with the LastLoginTimestamp field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetLastLoginTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastLoginTimestamp, true
}

// SetLastLoginTimestamp sets field value
func (o *UserInfo) SetLastLoginTimestamp(v string) {
	o.LastLoginTimestamp = v
}

// GetAccessLevel returns the AccessLevel field value
func (o *UserInfo) GetAccessLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetAccessLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessLevel, true
}

// SetAccessLevel sets field value
func (o *UserInfo) SetAccessLevel(v string) {
	o.AccessLevel = v
}

// GetIsArchived returns the IsArchived field value
func (o *UserInfo) GetIsArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetIsArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsArchived, true
}

// SetIsArchived sets field value
func (o *UserInfo) SetIsArchived(v bool) {
	o.IsArchived = v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *UserInfo) GetAccountId() float32 {
	if o == nil || IsNil(o.AccountId) {
		var ret float32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetAccountIdOk() (*float32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *UserInfo) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given float32 and assigns it to the AccountId field.
func (o *UserInfo) SetAccountId(v float32) {
	o.AccountId = &v
}

// GetId returns the Id field value
func (o *UserInfo) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserInfo) SetId(v float32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *UserInfo) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *UserInfo) SetRevision(v float32) {
	o.Revision = v
}

// GetEmail returns the Email field value
func (o *UserInfo) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserInfo) SetEmail(v string) {
	o.Email = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *UserInfo) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *UserInfo) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *UserInfo) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *UserInfo) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *UserInfo) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *UserInfo) SetLinks(v []Link) {
	o.Links = v
}

func (o UserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["emailStatus"] = o.EmailStatus
	toSerialize["language"] = o.Language
	toSerialize["lastLoginTimestamp"] = o.LastLoginTimestamp
	toSerialize["accessLevel"] = o.AccessLevel
	toSerialize["isArchived"] = o.IsArchived
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	toSerialize["email"] = o.Email
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"emailStatus",
		"language",
		"lastLoginTimestamp",
		"accessLevel",
		"isArchived",
		"id",
		"revision",
		"email",
		"createdTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserInfo := _UserInfo{}

	err = json.Unmarshal(data, &varUserInfo)

	if err != nil {
		return err
	}

	*o = UserInfo(varUserInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "emailStatus")
		delete(additionalProperties, "language")
		delete(additionalProperties, "lastLoginTimestamp")
		delete(additionalProperties, "accessLevel")
		delete(additionalProperties, "isArchived")
		delete(additionalProperties, "accountId")
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "email")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserInfo struct {
	value *UserInfo
	isSet bool
}

func (v NullableUserInfo) Get() *UserInfo {
	return v.value
}

func (v *NullableUserInfo) Set(val *UserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfo(val *UserInfo) *NullableUserInfo {
	return &NullableUserInfo{value: val, isSet: true}
}

func (v NullableUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


