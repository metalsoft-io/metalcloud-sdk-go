/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateNetworkFabric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNetworkFabric{}

// CreateNetworkFabric struct for CreateNetworkFabric
type CreateNetworkFabric struct {
	// The ID of the site where the entity is located.
	SiteId *float32 `json:"siteId,omitempty"`
	// The network fabric name
	Name string `json:"name"`
	// Network fabric description
	Description *string `json:"description,omitempty"`
	FabricConfiguration NetworkFabricFabricConfiguration `json:"fabricConfiguration"`
	AdditionalProperties map[string]interface{}
}

type _CreateNetworkFabric CreateNetworkFabric

// NewCreateNetworkFabric instantiates a new CreateNetworkFabric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNetworkFabric(name string, fabricConfiguration NetworkFabricFabricConfiguration) *CreateNetworkFabric {
	this := CreateNetworkFabric{}
	this.Name = name
	this.FabricConfiguration = fabricConfiguration
	return &this
}

// NewCreateNetworkFabricWithDefaults instantiates a new CreateNetworkFabric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNetworkFabricWithDefaults() *CreateNetworkFabric {
	this := CreateNetworkFabric{}
	return &this
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *CreateNetworkFabric) GetSiteId() float32 {
	if o == nil || IsNil(o.SiteId) {
		var ret float32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkFabric) GetSiteIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *CreateNetworkFabric) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given float32 and assigns it to the SiteId field.
func (o *CreateNetworkFabric) SetSiteId(v float32) {
	o.SiteId = &v
}

// GetName returns the Name field value
func (o *CreateNetworkFabric) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkFabric) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateNetworkFabric) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateNetworkFabric) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkFabric) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateNetworkFabric) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateNetworkFabric) SetDescription(v string) {
	o.Description = &v
}

// GetFabricConfiguration returns the FabricConfiguration field value
func (o *CreateNetworkFabric) GetFabricConfiguration() NetworkFabricFabricConfiguration {
	if o == nil {
		var ret NetworkFabricFabricConfiguration
		return ret
	}

	return o.FabricConfiguration
}

// GetFabricConfigurationOk returns a tuple with the FabricConfiguration field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkFabric) GetFabricConfigurationOk() (*NetworkFabricFabricConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FabricConfiguration, true
}

// SetFabricConfiguration sets field value
func (o *CreateNetworkFabric) SetFabricConfiguration(v NetworkFabricFabricConfiguration) {
	o.FabricConfiguration = v
}

func (o CreateNetworkFabric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNetworkFabric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["fabricConfiguration"] = o.FabricConfiguration

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateNetworkFabric) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"fabricConfiguration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNetworkFabric := _CreateNetworkFabric{}

	err = json.Unmarshal(data, &varCreateNetworkFabric)

	if err != nil {
		return err
	}

	*o = CreateNetworkFabric(varCreateNetworkFabric)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "fabricConfiguration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNetworkFabric struct {
	value *CreateNetworkFabric
	isSet bool
}

func (v NullableCreateNetworkFabric) Get() *CreateNetworkFabric {
	return v.value
}

func (v *NullableCreateNetworkFabric) Set(val *CreateNetworkFabric) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetworkFabric) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetworkFabric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetworkFabric(val *CreateNetworkFabric) *NullableCreateNetworkFabric {
	return &NullableCreateNetworkFabric{value: val, isSet: true}
}

func (v NullableCreateNetworkFabric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetworkFabric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


