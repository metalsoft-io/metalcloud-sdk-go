/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMPoolRecordSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMPoolRecordSet{}

// VMPoolRecordSet struct for VMPoolRecordSet
type VMPoolRecordSet struct {
	// The ID of the VM Pool.
	VmPoolId float32 `json:"vmPoolId"`
	// The hostname of the VM Pool.
	Hostname string `json:"hostname"`
	// The operation of the VM Pool.
	Operation string `json:"operation"`
	AdditionalProperties map[string]interface{}
}

type _VMPoolRecordSet VMPoolRecordSet

// NewVMPoolRecordSet instantiates a new VMPoolRecordSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMPoolRecordSet(vmPoolId float32, hostname string, operation string) *VMPoolRecordSet {
	this := VMPoolRecordSet{}
	this.VmPoolId = vmPoolId
	this.Hostname = hostname
	this.Operation = operation
	return &this
}

// NewVMPoolRecordSetWithDefaults instantiates a new VMPoolRecordSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMPoolRecordSetWithDefaults() *VMPoolRecordSet {
	this := VMPoolRecordSet{}
	return &this
}

// GetVmPoolId returns the VmPoolId field value
func (o *VMPoolRecordSet) GetVmPoolId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VmPoolId
}

// GetVmPoolIdOk returns a tuple with the VmPoolId field value
// and a boolean to check if the value has been set.
func (o *VMPoolRecordSet) GetVmPoolIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmPoolId, true
}

// SetVmPoolId sets field value
func (o *VMPoolRecordSet) SetVmPoolId(v float32) {
	o.VmPoolId = v
}

// GetHostname returns the Hostname field value
func (o *VMPoolRecordSet) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *VMPoolRecordSet) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *VMPoolRecordSet) SetHostname(v string) {
	o.Hostname = v
}

// GetOperation returns the Operation field value
func (o *VMPoolRecordSet) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *VMPoolRecordSet) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *VMPoolRecordSet) SetOperation(v string) {
	o.Operation = v
}

func (o VMPoolRecordSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMPoolRecordSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vmPoolId"] = o.VmPoolId
	toSerialize["hostname"] = o.Hostname
	toSerialize["operation"] = o.Operation

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMPoolRecordSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vmPoolId",
		"hostname",
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMPoolRecordSet := _VMPoolRecordSet{}

	err = json.Unmarshal(data, &varVMPoolRecordSet)

	if err != nil {
		return err
	}

	*o = VMPoolRecordSet(varVMPoolRecordSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vmPoolId")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "operation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMPoolRecordSet struct {
	value *VMPoolRecordSet
	isSet bool
}

func (v NullableVMPoolRecordSet) Get() *VMPoolRecordSet {
	return v.value
}

func (v *NullableVMPoolRecordSet) Set(val *VMPoolRecordSet) {
	v.value = val
	v.isSet = true
}

func (v NullableVMPoolRecordSet) IsSet() bool {
	return v.isSet
}

func (v *NullableVMPoolRecordSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMPoolRecordSet(val *VMPoolRecordSet) *NullableVMPoolRecordSet {
	return &NullableVMPoolRecordSet{value: val, isSet: true}
}

func (v NullableVMPoolRecordSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMPoolRecordSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


