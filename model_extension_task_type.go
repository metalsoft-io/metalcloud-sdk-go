/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ExtensionTaskType the model 'ExtensionTaskType'
type ExtensionTaskType string

// List of ExtensionTaskType
const (
	EXTENSIONTASKTYPE_EXTENSION_TASK_ANSIBLE ExtensionTaskType = "ExtensionTaskAnsible"
	EXTENSIONTASKTYPE_EXTENSION_TASK_WEBHOOK ExtensionTaskType = "ExtensionTaskWebhook"
	EXTENSIONTASKTYPE_EXTENSION_TASK_SSH ExtensionTaskType = "ExtensionTaskSsh"
)

// All allowed values of ExtensionTaskType enum
var AllowedExtensionTaskTypeEnumValues = []ExtensionTaskType{
	"ExtensionTaskAnsible",
	"ExtensionTaskWebhook",
	"ExtensionTaskSsh",
}

func (v *ExtensionTaskType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExtensionTaskType(value)
	for _, existing := range AllowedExtensionTaskTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExtensionTaskType", value)
}

// NewExtensionTaskTypeFromValue returns a pointer to a valid ExtensionTaskType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExtensionTaskTypeFromValue(v string) (*ExtensionTaskType, error) {
	ev := ExtensionTaskType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExtensionTaskType: valid values are %v", v, AllowedExtensionTaskTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExtensionTaskType) IsValid() bool {
	for _, existing := range AllowedExtensionTaskTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExtensionTaskType value
func (v ExtensionTaskType) Ptr() *ExtensionTaskType {
	return &v
}

type NullableExtensionTaskType struct {
	value *ExtensionTaskType
	isSet bool
}

func (v NullableExtensionTaskType) Get() *ExtensionTaskType {
	return v.value
}

func (v *NullableExtensionTaskType) Set(val *ExtensionTaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionTaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionTaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionTaskType(val *ExtensionTaskType) *NullableExtensionTaskType {
	return &NullableExtensionTaskType{value: val, isSet: true}
}

func (v NullableExtensionTaskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionTaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

