/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ACLEnforcementPoint The enforcement point of the rule
type ACLEnforcementPoint string

// List of ACLEnforcementPoint
const (
	ACLENFORCEMENTPOINT_SVI ACLEnforcementPoint = "svi"
	ACLENFORCEMENTPOINT_PHYSICAL_INTERFACE_VLAN_SCOPED ACLEnforcementPoint = "physical-interface-vlan-scoped"
	ACLENFORCEMENTPOINT_PHYSICAL_INTERFACE ACLEnforcementPoint = "physical-interface"
)

// All allowed values of ACLEnforcementPoint enum
var AllowedACLEnforcementPointEnumValues = []ACLEnforcementPoint{
	"svi",
	"physical-interface-vlan-scoped",
	"physical-interface",
}

func (v *ACLEnforcementPoint) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ACLEnforcementPoint(value)
	for _, existing := range AllowedACLEnforcementPointEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ACLEnforcementPoint", value)
}

// NewACLEnforcementPointFromValue returns a pointer to a valid ACLEnforcementPoint
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewACLEnforcementPointFromValue(v string) (*ACLEnforcementPoint, error) {
	ev := ACLEnforcementPoint(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ACLEnforcementPoint: valid values are %v", v, AllowedACLEnforcementPointEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ACLEnforcementPoint) IsValid() bool {
	for _, existing := range AllowedACLEnforcementPointEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ACLEnforcementPoint value
func (v ACLEnforcementPoint) Ptr() *ACLEnforcementPoint {
	return &v
}

type NullableACLEnforcementPoint struct {
	value *ACLEnforcementPoint
	isSet bool
}

func (v NullableACLEnforcementPoint) Get() *ACLEnforcementPoint {
	return v.value
}

func (v *NullableACLEnforcementPoint) Set(val *ACLEnforcementPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableACLEnforcementPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableACLEnforcementPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLEnforcementPoint(val *ACLEnforcementPoint) *NullableACLEnforcementPoint {
	return &NullableACLEnforcementPoint{value: val, isSet: true}
}

func (v NullableACLEnforcementPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLEnforcementPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

