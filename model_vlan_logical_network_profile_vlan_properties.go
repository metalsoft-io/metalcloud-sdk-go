/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VlanLogicalNetworkProfileVlanProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VlanLogicalNetworkProfileVlanProperties{}

// VlanLogicalNetworkProfileVlanProperties struct for VlanLogicalNetworkProfileVlanProperties
type VlanLogicalNetworkProfileVlanProperties struct {
	Vlans []VlanAllocation `json:"vlans"`
	VlanAllocationStrategies []VlanAllocationStrategy `json:"vlanAllocationStrategies"`
	AdditionalProperties map[string]interface{}
}

type _VlanLogicalNetworkProfileVlanProperties VlanLogicalNetworkProfileVlanProperties

// NewVlanLogicalNetworkProfileVlanProperties instantiates a new VlanLogicalNetworkProfileVlanProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVlanLogicalNetworkProfileVlanProperties(vlans []VlanAllocation, vlanAllocationStrategies []VlanAllocationStrategy) *VlanLogicalNetworkProfileVlanProperties {
	this := VlanLogicalNetworkProfileVlanProperties{}
	this.Vlans = vlans
	this.VlanAllocationStrategies = vlanAllocationStrategies
	return &this
}

// NewVlanLogicalNetworkProfileVlanPropertiesWithDefaults instantiates a new VlanLogicalNetworkProfileVlanProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVlanLogicalNetworkProfileVlanPropertiesWithDefaults() *VlanLogicalNetworkProfileVlanProperties {
	this := VlanLogicalNetworkProfileVlanProperties{}
	return &this
}

// GetVlans returns the Vlans field value
func (o *VlanLogicalNetworkProfileVlanProperties) GetVlans() []VlanAllocation {
	if o == nil {
		var ret []VlanAllocation
		return ret
	}

	return o.Vlans
}

// GetVlansOk returns a tuple with the Vlans field value
// and a boolean to check if the value has been set.
func (o *VlanLogicalNetworkProfileVlanProperties) GetVlansOk() ([]VlanAllocation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vlans, true
}

// SetVlans sets field value
func (o *VlanLogicalNetworkProfileVlanProperties) SetVlans(v []VlanAllocation) {
	o.Vlans = v
}

// GetVlanAllocationStrategies returns the VlanAllocationStrategies field value
func (o *VlanLogicalNetworkProfileVlanProperties) GetVlanAllocationStrategies() []VlanAllocationStrategy {
	if o == nil {
		var ret []VlanAllocationStrategy
		return ret
	}

	return o.VlanAllocationStrategies
}

// GetVlanAllocationStrategiesOk returns a tuple with the VlanAllocationStrategies field value
// and a boolean to check if the value has been set.
func (o *VlanLogicalNetworkProfileVlanProperties) GetVlanAllocationStrategiesOk() ([]VlanAllocationStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanAllocationStrategies, true
}

// SetVlanAllocationStrategies sets field value
func (o *VlanLogicalNetworkProfileVlanProperties) SetVlanAllocationStrategies(v []VlanAllocationStrategy) {
	o.VlanAllocationStrategies = v
}

func (o VlanLogicalNetworkProfileVlanProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VlanLogicalNetworkProfileVlanProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vlans"] = o.Vlans
	toSerialize["vlanAllocationStrategies"] = o.VlanAllocationStrategies

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VlanLogicalNetworkProfileVlanProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vlans",
		"vlanAllocationStrategies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVlanLogicalNetworkProfileVlanProperties := _VlanLogicalNetworkProfileVlanProperties{}

	err = json.Unmarshal(data, &varVlanLogicalNetworkProfileVlanProperties)

	if err != nil {
		return err
	}

	*o = VlanLogicalNetworkProfileVlanProperties(varVlanLogicalNetworkProfileVlanProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vlans")
		delete(additionalProperties, "vlanAllocationStrategies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVlanLogicalNetworkProfileVlanProperties struct {
	value *VlanLogicalNetworkProfileVlanProperties
	isSet bool
}

func (v NullableVlanLogicalNetworkProfileVlanProperties) Get() *VlanLogicalNetworkProfileVlanProperties {
	return v.value
}

func (v *NullableVlanLogicalNetworkProfileVlanProperties) Set(val *VlanLogicalNetworkProfileVlanProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableVlanLogicalNetworkProfileVlanProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableVlanLogicalNetworkProfileVlanProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVlanLogicalNetworkProfileVlanProperties(val *VlanLogicalNetworkProfileVlanProperties) *NullableVlanLogicalNetworkProfileVlanProperties {
	return &NullableVlanLogicalNetworkProfileVlanProperties{value: val, isSet: true}
}

func (v NullableVlanLogicalNetworkProfileVlanProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVlanLogicalNetworkProfileVlanProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


