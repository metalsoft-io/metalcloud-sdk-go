/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreatePermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePermission{}

// CreatePermission struct for CreatePermission
type CreatePermission struct {
	// Permission name
	Name string `json:"name"`
	// Permission label
	Label string `json:"label"`
	// Permission description
	Description *string `json:"description,omitempty"`
	// Permission type
	Type *string `json:"type,omitempty"`
	// List of Policy Entries
	Policies []PolicyEntry `json:"policies,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreatePermission CreatePermission

// NewCreatePermission instantiates a new CreatePermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePermission(name string, label string) *CreatePermission {
	this := CreatePermission{}
	this.Name = name
	this.Label = label
	return &this
}

// NewCreatePermissionWithDefaults instantiates a new CreatePermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePermissionWithDefaults() *CreatePermission {
	this := CreatePermission{}
	return &this
}

// GetName returns the Name field value
func (o *CreatePermission) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePermission) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePermission) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value
func (o *CreatePermission) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CreatePermission) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CreatePermission) SetLabel(v string) {
	o.Label = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreatePermission) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePermission) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreatePermission) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreatePermission) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreatePermission) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePermission) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreatePermission) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreatePermission) SetType(v string) {
	o.Type = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *CreatePermission) GetPolicies() []PolicyEntry {
	if o == nil || IsNil(o.Policies) {
		var ret []PolicyEntry
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePermission) GetPoliciesOk() ([]PolicyEntry, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *CreatePermission) HasPolicies() bool {
	if o != nil && !IsNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []PolicyEntry and assigns it to the Policies field.
func (o *CreatePermission) SetPolicies(v []PolicyEntry) {
	o.Policies = v
}

func (o CreatePermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["label"] = o.Label
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Policies) {
		toSerialize["policies"] = o.Policies
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreatePermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePermission := _CreatePermission{}

	err = json.Unmarshal(data, &varCreatePermission)

	if err != nil {
		return err
	}

	*o = CreatePermission(varCreatePermission)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "label")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "policies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreatePermission struct {
	value *CreatePermission
	isSet bool
}

func (v NullableCreatePermission) Get() *CreatePermission {
	return v.value
}

func (v *NullableCreatePermission) Set(val *CreatePermission) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePermission) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePermission(val *CreatePermission) *NullableCreatePermission {
	return &NullableCreatePermission{value: val, isSet: true}
}

func (v NullableCreatePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


