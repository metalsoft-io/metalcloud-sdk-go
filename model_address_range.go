/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the AddressRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressRange{}

// AddressRange struct for AddressRange
type AddressRange struct {
	StartAddress string `json:"startAddress"`
	EndAddress string `json:"endAddress"`
	AdditionalProperties map[string]interface{}
}

type _AddressRange AddressRange

// NewAddressRange instantiates a new AddressRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressRange(startAddress string, endAddress string) *AddressRange {
	this := AddressRange{}
	this.StartAddress = startAddress
	this.EndAddress = endAddress
	return &this
}

// NewAddressRangeWithDefaults instantiates a new AddressRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressRangeWithDefaults() *AddressRange {
	this := AddressRange{}
	return &this
}

// GetStartAddress returns the StartAddress field value
func (o *AddressRange) GetStartAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartAddress
}

// GetStartAddressOk returns a tuple with the StartAddress field value
// and a boolean to check if the value has been set.
func (o *AddressRange) GetStartAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartAddress, true
}

// SetStartAddress sets field value
func (o *AddressRange) SetStartAddress(v string) {
	o.StartAddress = v
}

// GetEndAddress returns the EndAddress field value
func (o *AddressRange) GetEndAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndAddress
}

// GetEndAddressOk returns a tuple with the EndAddress field value
// and a boolean to check if the value has been set.
func (o *AddressRange) GetEndAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndAddress, true
}

// SetEndAddress sets field value
func (o *AddressRange) SetEndAddress(v string) {
	o.EndAddress = v
}

func (o AddressRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startAddress"] = o.StartAddress
	toSerialize["endAddress"] = o.EndAddress

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AddressRange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startAddress",
		"endAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressRange := _AddressRange{}

	err = json.Unmarshal(data, &varAddressRange)

	if err != nil {
		return err
	}

	*o = AddressRange(varAddressRange)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "startAddress")
		delete(additionalProperties, "endAddress")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAddressRange struct {
	value *AddressRange
	isSet bool
}

func (v NullableAddressRange) Get() *AddressRange {
	return v.value
}

func (v *NullableAddressRange) Set(val *AddressRange) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressRange) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressRange(val *AddressRange) *NullableAddressRange {
	return &NullableAddressRange{value: val, isSet: true}
}

func (v NullableAddressRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


