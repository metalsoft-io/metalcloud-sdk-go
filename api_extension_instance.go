/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ExtensionInstanceAPIService ExtensionInstanceAPI service
type ExtensionInstanceAPIService service

type ExtensionInstanceAPICreateExtensionInstanceRequest struct {
	ctx context.Context
	ApiService *ExtensionInstanceAPIService
	infrastructureId float32
	createExtensionInstance *CreateExtensionInstance
}

// The extension instance to create
func (r ExtensionInstanceAPICreateExtensionInstanceRequest) CreateExtensionInstance(createExtensionInstance CreateExtensionInstance) ExtensionInstanceAPICreateExtensionInstanceRequest {
	r.createExtensionInstance = &createExtensionInstance
	return r
}

func (r ExtensionInstanceAPICreateExtensionInstanceRequest) Execute() (*ExtensionInstance, *http.Response, error) {
	return r.ApiService.CreateExtensionInstanceExecute(r)
}

/*
CreateExtensionInstance Add extension instance to an infrastructure

Adds extension instance to the specified infrastructure. Note that a infrastructure deploy is needed for the changes to take effect.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @return ExtensionInstanceAPICreateExtensionInstanceRequest
*/
func (a *ExtensionInstanceAPIService) CreateExtensionInstance(ctx context.Context, infrastructureId float32) ExtensionInstanceAPICreateExtensionInstanceRequest {
	return ExtensionInstanceAPICreateExtensionInstanceRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
	}
}

// Execute executes the request
//  @return ExtensionInstance
func (a *ExtensionInstanceAPIService) CreateExtensionInstanceExecute(r ExtensionInstanceAPICreateExtensionInstanceRequest) (*ExtensionInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtensionInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionInstanceAPIService.CreateExtensionInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/extension-instances"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createExtensionInstance == nil {
		return localVarReturnValue, nil, reportError("createExtensionInstance is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createExtensionInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExtensionInstanceAPIDeleteExtensionInstanceRequest struct {
	ctx context.Context
	ApiService *ExtensionInstanceAPIService
	extensionInstanceId float32
	ifMatch *string
}

// Entity tag
func (r ExtensionInstanceAPIDeleteExtensionInstanceRequest) IfMatch(ifMatch string) ExtensionInstanceAPIDeleteExtensionInstanceRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ExtensionInstanceAPIDeleteExtensionInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExtensionInstanceExecute(r)
}

/*
DeleteExtensionInstance Delete extension instance

Deletes the specified extension instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param extensionInstanceId
 @return ExtensionInstanceAPIDeleteExtensionInstanceRequest
*/
func (a *ExtensionInstanceAPIService) DeleteExtensionInstance(ctx context.Context, extensionInstanceId float32) ExtensionInstanceAPIDeleteExtensionInstanceRequest {
	return ExtensionInstanceAPIDeleteExtensionInstanceRequest{
		ApiService: a,
		ctx: ctx,
		extensionInstanceId: extensionInstanceId,
	}
}

// Execute executes the request
func (a *ExtensionInstanceAPIService) DeleteExtensionInstanceExecute(r ExtensionInstanceAPIDeleteExtensionInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionInstanceAPIService.DeleteExtensionInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/extension-instances/{extensionInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"extensionInstanceId"+"}", url.PathEscape(parameterValueToString(r.extensionInstanceId, "extensionInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ExtensionInstanceAPIGetExtensionInstanceRequest struct {
	ctx context.Context
	ApiService *ExtensionInstanceAPIService
	extensionInstanceId float32
}

func (r ExtensionInstanceAPIGetExtensionInstanceRequest) Execute() (*ExtensionInstance, *http.Response, error) {
	return r.ApiService.GetExtensionInstanceExecute(r)
}

/*
GetExtensionInstance Get extension instance details

Returns the details of the specified extension instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param extensionInstanceId
 @return ExtensionInstanceAPIGetExtensionInstanceRequest
*/
func (a *ExtensionInstanceAPIService) GetExtensionInstance(ctx context.Context, extensionInstanceId float32) ExtensionInstanceAPIGetExtensionInstanceRequest {
	return ExtensionInstanceAPIGetExtensionInstanceRequest{
		ApiService: a,
		ctx: ctx,
		extensionInstanceId: extensionInstanceId,
	}
}

// Execute executes the request
//  @return ExtensionInstance
func (a *ExtensionInstanceAPIService) GetExtensionInstanceExecute(r ExtensionInstanceAPIGetExtensionInstanceRequest) (*ExtensionInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtensionInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionInstanceAPIService.GetExtensionInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/extension-instances/{extensionInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"extensionInstanceId"+"}", url.PathEscape(parameterValueToString(r.extensionInstanceId, "extensionInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExtensionInstanceAPIGetExtensionInstancesRequest struct {
	ctx context.Context
	ApiService *ExtensionInstanceAPIService
	infrastructureId float32
	page *float32
	limit *float32
	filterExtensionId *[]string
	filterInfrastructureId *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r ExtensionInstanceAPIGetExtensionInstancesRequest) Page(page float32) ExtensionInstanceAPIGetExtensionInstancesRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r ExtensionInstanceAPIGetExtensionInstancesRequest) Limit(limit float32) ExtensionInstanceAPIGetExtensionInstancesRequest {
	r.limit = &limit
	return r
}

// Filter by extensionId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.extensionId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.extensionId&#x3D;$not:$like:John Doe&amp;filter.extensionId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ExtensionInstanceAPIGetExtensionInstancesRequest) FilterExtensionId(filterExtensionId []string) ExtensionInstanceAPIGetExtensionInstancesRequest {
	r.filterExtensionId = &filterExtensionId
	return r
}

// Filter by infrastructureId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.infrastructureId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.infrastructureId&#x3D;$not:$like:John Doe&amp;filter.infrastructureId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ExtensionInstanceAPIGetExtensionInstancesRequest) FilterInfrastructureId(filterInfrastructureId []string) ExtensionInstanceAPIGetExtensionInstancesRequest {
	r.filterInfrastructureId = &filterInfrastructureId
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;label&lt;/li&gt; &lt;li&gt;extensionId&lt;/li&gt; &lt;li&gt;infrastructureId&lt;/li&gt;&lt;/ul&gt;       
func (r ExtensionInstanceAPIGetExtensionInstancesRequest) SortBy(sortBy []string) ExtensionInstanceAPIGetExtensionInstancesRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r ExtensionInstanceAPIGetExtensionInstancesRequest) Search(search string) ExtensionInstanceAPIGetExtensionInstancesRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; label           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;label&lt;/li&gt;&lt;/ul&gt;         
func (r ExtensionInstanceAPIGetExtensionInstancesRequest) SearchBy(searchBy []string) ExtensionInstanceAPIGetExtensionInstancesRequest {
	r.searchBy = &searchBy
	return r
}

func (r ExtensionInstanceAPIGetExtensionInstancesRequest) Execute() (*ExtensionInstancePaginatedList, *http.Response, error) {
	return r.ApiService.GetExtensionInstancesExecute(r)
}

/*
GetExtensionInstances Get extension instances list

Returns list of extension instances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @return ExtensionInstanceAPIGetExtensionInstancesRequest
*/
func (a *ExtensionInstanceAPIService) GetExtensionInstances(ctx context.Context, infrastructureId float32) ExtensionInstanceAPIGetExtensionInstancesRequest {
	return ExtensionInstanceAPIGetExtensionInstancesRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
	}
}

// Execute executes the request
//  @return ExtensionInstancePaginatedList
func (a *ExtensionInstanceAPIService) GetExtensionInstancesExecute(r ExtensionInstanceAPIGetExtensionInstancesRequest) (*ExtensionInstancePaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtensionInstancePaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionInstanceAPIService.GetExtensionInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/extension-instances"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterExtensionId != nil {
		t := *r.filterExtensionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.extensionId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.extensionId", t, "form", "multi")
		}
	}
	if r.filterInfrastructureId != nil {
		t := *r.filterInfrastructureId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.infrastructureId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.infrastructureId", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExtensionInstanceAPIUpdateExtensionInstanceRequest struct {
	ctx context.Context
	ApiService *ExtensionInstanceAPIService
	extensionInstanceId float32
	updateExtensionInstance *UpdateExtensionInstance
	ifMatch *string
}

// The extension instance changes
func (r ExtensionInstanceAPIUpdateExtensionInstanceRequest) UpdateExtensionInstance(updateExtensionInstance UpdateExtensionInstance) ExtensionInstanceAPIUpdateExtensionInstanceRequest {
	r.updateExtensionInstance = &updateExtensionInstance
	return r
}

// Entity tag
func (r ExtensionInstanceAPIUpdateExtensionInstanceRequest) IfMatch(ifMatch string) ExtensionInstanceAPIUpdateExtensionInstanceRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ExtensionInstanceAPIUpdateExtensionInstanceRequest) Execute() (*ExtensionInstance, *http.Response, error) {
	return r.ApiService.UpdateExtensionInstanceExecute(r)
}

/*
UpdateExtensionInstance Update extension instance configuration

Updates the specified extension instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param extensionInstanceId
 @return ExtensionInstanceAPIUpdateExtensionInstanceRequest
*/
func (a *ExtensionInstanceAPIService) UpdateExtensionInstance(ctx context.Context, extensionInstanceId float32) ExtensionInstanceAPIUpdateExtensionInstanceRequest {
	return ExtensionInstanceAPIUpdateExtensionInstanceRequest{
		ApiService: a,
		ctx: ctx,
		extensionInstanceId: extensionInstanceId,
	}
}

// Execute executes the request
//  @return ExtensionInstance
func (a *ExtensionInstanceAPIService) UpdateExtensionInstanceExecute(r ExtensionInstanceAPIUpdateExtensionInstanceRequest) (*ExtensionInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtensionInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtensionInstanceAPIService.UpdateExtensionInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/extension-instances/{extensionInstanceId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"extensionInstanceId"+"}", url.PathEscape(parameterValueToString(r.extensionInstanceId, "extensionInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateExtensionInstance == nil {
		return localVarReturnValue, nil, reportError("updateExtensionInstance is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "simple", "")
	}
	// body params
	localVarPostBody = r.updateExtensionInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
