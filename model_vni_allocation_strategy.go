/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// VniAllocationStrategy - struct for VniAllocationStrategy
type VniAllocationStrategy struct {
	AutoVniAllocationStrategy *AutoVniAllocationStrategy
	ManualVniAllocationStrategy *ManualVniAllocationStrategy
}

// AutoVniAllocationStrategyAsVniAllocationStrategy is a convenience function that returns AutoVniAllocationStrategy wrapped in VniAllocationStrategy
func AutoVniAllocationStrategyAsVniAllocationStrategy(v *AutoVniAllocationStrategy) VniAllocationStrategy {
	return VniAllocationStrategy{
		AutoVniAllocationStrategy: v,
	}
}

// ManualVniAllocationStrategyAsVniAllocationStrategy is a convenience function that returns ManualVniAllocationStrategy wrapped in VniAllocationStrategy
func ManualVniAllocationStrategyAsVniAllocationStrategy(v *ManualVniAllocationStrategy) VniAllocationStrategy {
	return VniAllocationStrategy{
		ManualVniAllocationStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VniAllocationStrategy) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'auto'
	if jsonDict["kind"] == "auto" {
		// try to unmarshal JSON data into AutoVniAllocationStrategy
		err = json.Unmarshal(data, &dst.AutoVniAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.AutoVniAllocationStrategy, return on the first match
		} else {
			dst.AutoVniAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal VniAllocationStrategy as AutoVniAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'manual'
	if jsonDict["kind"] == "manual" {
		// try to unmarshal JSON data into ManualVniAllocationStrategy
		err = json.Unmarshal(data, &dst.ManualVniAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.ManualVniAllocationStrategy, return on the first match
		} else {
			dst.ManualVniAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal VniAllocationStrategy as ManualVniAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AutoVniAllocationStrategy'
	if jsonDict["kind"] == "AutoVniAllocationStrategy" {
		// try to unmarshal JSON data into AutoVniAllocationStrategy
		err = json.Unmarshal(data, &dst.AutoVniAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.AutoVniAllocationStrategy, return on the first match
		} else {
			dst.AutoVniAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal VniAllocationStrategy as AutoVniAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ManualVniAllocationStrategy'
	if jsonDict["kind"] == "ManualVniAllocationStrategy" {
		// try to unmarshal JSON data into ManualVniAllocationStrategy
		err = json.Unmarshal(data, &dst.ManualVniAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.ManualVniAllocationStrategy, return on the first match
		} else {
			dst.ManualVniAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal VniAllocationStrategy as ManualVniAllocationStrategy: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VniAllocationStrategy) MarshalJSON() ([]byte, error) {
	if src.AutoVniAllocationStrategy != nil {
		return json.Marshal(&src.AutoVniAllocationStrategy)
	}

	if src.ManualVniAllocationStrategy != nil {
		return json.Marshal(&src.ManualVniAllocationStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VniAllocationStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AutoVniAllocationStrategy != nil {
		return obj.AutoVniAllocationStrategy
	}

	if obj.ManualVniAllocationStrategy != nil {
		return obj.ManualVniAllocationStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj VniAllocationStrategy) GetActualInstanceValue() (interface{}) {
	if obj.AutoVniAllocationStrategy != nil {
		return *obj.AutoVniAllocationStrategy
	}

	if obj.ManualVniAllocationStrategy != nil {
		return *obj.ManualVniAllocationStrategy
	}

	// all schemas are nil
	return nil
}

type NullableVniAllocationStrategy struct {
	value *VniAllocationStrategy
	isSet bool
}

func (v NullableVniAllocationStrategy) Get() *VniAllocationStrategy {
	return v.value
}

func (v *NullableVniAllocationStrategy) Set(val *VniAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableVniAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableVniAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVniAllocationStrategy(val *VniAllocationStrategy) *NullableVniAllocationStrategy {
	return &NullableVniAllocationStrategy{value: val, isSet: true}
}

func (v NullableVniAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVniAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


