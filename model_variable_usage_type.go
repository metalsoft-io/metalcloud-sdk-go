/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// VariableUsageType the model 'VariableUsageType'
type VariableUsageType string

// List of VariableUsageType
const (
	VARIABLEUSAGETYPE_HTTP_REQUEST VariableUsageType = "HTTPRequest"
	VARIABLEUSAGETYPE_JAVA_SCRIPT VariableUsageType = "JavaScript"
	VARIABLEUSAGETYPE_API_CALL VariableUsageType = "APICall"
	VARIABLEUSAGETYPE_ANSIBLE_BUNDLE VariableUsageType = "AnsibleBundle"
	VARIABLEUSAGETYPE_SSH_EXEC VariableUsageType = "SSHExec"
	VARIABLEUSAGETYPE_COPY VariableUsageType = "Copy"
	VARIABLEUSAGETYPE_OS_ASSET VariableUsageType = "OSAsset"
)

// All allowed values of VariableUsageType enum
var AllowedVariableUsageTypeEnumValues = []VariableUsageType{
	"HTTPRequest",
	"JavaScript",
	"APICall",
	"AnsibleBundle",
	"SSHExec",
	"Copy",
	"OSAsset",
}

func (v *VariableUsageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VariableUsageType(value)
	for _, existing := range AllowedVariableUsageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VariableUsageType", value)
}

// NewVariableUsageTypeFromValue returns a pointer to a valid VariableUsageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVariableUsageTypeFromValue(v string) (*VariableUsageType, error) {
	ev := VariableUsageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VariableUsageType: valid values are %v", v, AllowedVariableUsageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VariableUsageType) IsValid() bool {
	for _, existing := range AllowedVariableUsageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VariableUsageType value
func (v VariableUsageType) Ptr() *VariableUsageType {
	return &v
}

type NullableVariableUsageType struct {
	value *VariableUsageType
	isSet bool
}

func (v NullableVariableUsageType) Get() *VariableUsageType {
	return v.value
}

func (v *NullableVariableUsageType) Set(val *VariableUsageType) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableUsageType) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableUsageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableUsageType(val *VariableUsageType) *NullableVariableUsageType {
	return &NullableVariableUsageType{value: val, isSet: true}
}

func (v NullableVariableUsageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableUsageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

