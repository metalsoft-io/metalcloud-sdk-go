/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateNetworkDeviceDefaultsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNetworkDeviceDefaultsDto{}

// CreateNetworkDeviceDefaultsDto struct for CreateNetworkDeviceDefaultsDto
type CreateNetworkDeviceDefaultsDto struct {
	// Name of the datacenter
	DatacenterName string `json:"datacenterName"`
	// Serial number of the network device
	SerialNumber *string `json:"serialNumber,omitempty"`
	// MAC address of the network device. Must be in the format XX:XX:XX:XX:XX:XX.
	ManagementMacAddress string `json:"managementMacAddress"`
	// Position of the network device
	Position *string `json:"position,omitempty"`
	// Identifier string of the network device. Can contain letters, numbers, dots, underscores, and hyphens (1-63 characters).
	IdentifierString *string `json:"identifierString,omitempty"`
	// ASN of the network device
	Asn *float32 `json:"asn,omitempty"`
	// Skip initial configuration
	SkipInitialConfiguration *float32 `json:"skipInitialConfiguration,omitempty"`
	// Custom variables associated with the network device, stored as key-value pairs.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// MLAG domain ID, must be between 1 and 4096.
	MlagDomainId *float32 `json:"mlagDomainId,omitempty"`
	// IPv4 address assigned to the loopback interface.
	LoopbackAddressIpv4 *string `json:"loopbackAddressIpv4,omitempty"`
	// IPv6 address assigned to the loopback interface.
	LoopbackAddressIpv6 *string `json:"loopbackAddressIpv6,omitempty"`
	// VTEP (VXLAN Tunnel Endpoint) IPv4 address.
	VtepAddressIpv4 *string `json:"vtepAddressIpv4,omitempty"`
	// VTEP (VXLAN Tunnel Endpoint) IPv6 address.
	VtepAddressIpv6 *string `json:"vtepAddressIpv6,omitempty"`
	// Order index used for sorting or prioritization.
	OrderIndex *float32 `json:"orderIndex,omitempty"`
	// Default MTU size, must be between 68 and 10000.
	DefaultMtu *float32 `json:"defaultMtu,omitempty"`
	// ID of the volume template associated with the network device.
	VolumeTemplateId *float32 `json:"volumeTemplateId,omitempty"`
	// MLAG partner hostname. Can contain letters, numbers, dots, underscores, and hyphens (1-63 characters).
	MlagPartnerHostname *string `json:"mlagPartnerHostname,omitempty"`
	// Indicates whether the device is part of an MLAG pair (0 = No, 1 = Yes).
	IsPartOfMlagPair *float32 `json:"isPartOfMlagPair,omitempty"`
	// MLAG system MAC address in the format XX:XX:XX:XX:XX:XX.
	MlagSystemMac *string `json:"mlagSystemMac,omitempty"`
	// MLAG peer link Port-Channel ID, must be between 1 and 4096.
	MlagPeerLinkPortChannelId *float32 `json:"mlagPeerLinkPortChannelId,omitempty"`
	// MLAG partner VLAN ID, must be between 1 and 4096.
	MlagPartnerVlanId *float32 `json:"mlagPartnerVlanId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateNetworkDeviceDefaultsDto CreateNetworkDeviceDefaultsDto

// NewCreateNetworkDeviceDefaultsDto instantiates a new CreateNetworkDeviceDefaultsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNetworkDeviceDefaultsDto(datacenterName string, managementMacAddress string) *CreateNetworkDeviceDefaultsDto {
	this := CreateNetworkDeviceDefaultsDto{}
	this.DatacenterName = datacenterName
	this.ManagementMacAddress = managementMacAddress
	return &this
}

// NewCreateNetworkDeviceDefaultsDtoWithDefaults instantiates a new CreateNetworkDeviceDefaultsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNetworkDeviceDefaultsDtoWithDefaults() *CreateNetworkDeviceDefaultsDto {
	this := CreateNetworkDeviceDefaultsDto{}
	return &this
}

// GetDatacenterName returns the DatacenterName field value
func (o *CreateNetworkDeviceDefaultsDto) GetDatacenterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetDatacenterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatacenterName, true
}

// SetDatacenterName sets field value
func (o *CreateNetworkDeviceDefaultsDto) SetDatacenterName(v string) {
	o.DatacenterName = v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CreateNetworkDeviceDefaultsDto) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetManagementMacAddress returns the ManagementMacAddress field value
func (o *CreateNetworkDeviceDefaultsDto) GetManagementMacAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementMacAddress
}

// GetManagementMacAddressOk returns a tuple with the ManagementMacAddress field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetManagementMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementMacAddress, true
}

// SetManagementMacAddress sets field value
func (o *CreateNetworkDeviceDefaultsDto) SetManagementMacAddress(v string) {
	o.ManagementMacAddress = v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetPosition() string {
	if o == nil || IsNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetPositionOk() (*string, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *CreateNetworkDeviceDefaultsDto) SetPosition(v string) {
	o.Position = &v
}

// GetIdentifierString returns the IdentifierString field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetIdentifierString() string {
	if o == nil || IsNil(o.IdentifierString) {
		var ret string
		return ret
	}
	return *o.IdentifierString
}

// GetIdentifierStringOk returns a tuple with the IdentifierString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetIdentifierStringOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifierString) {
		return nil, false
	}
	return o.IdentifierString, true
}

// HasIdentifierString returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasIdentifierString() bool {
	if o != nil && !IsNil(o.IdentifierString) {
		return true
	}

	return false
}

// SetIdentifierString gets a reference to the given string and assigns it to the IdentifierString field.
func (o *CreateNetworkDeviceDefaultsDto) SetIdentifierString(v string) {
	o.IdentifierString = &v
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetAsn() float32 {
	if o == nil || IsNil(o.Asn) {
		var ret float32
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetAsnOk() (*float32, bool) {
	if o == nil || IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasAsn() bool {
	if o != nil && !IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given float32 and assigns it to the Asn field.
func (o *CreateNetworkDeviceDefaultsDto) SetAsn(v float32) {
	o.Asn = &v
}

// GetSkipInitialConfiguration returns the SkipInitialConfiguration field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetSkipInitialConfiguration() float32 {
	if o == nil || IsNil(o.SkipInitialConfiguration) {
		var ret float32
		return ret
	}
	return *o.SkipInitialConfiguration
}

// GetSkipInitialConfigurationOk returns a tuple with the SkipInitialConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetSkipInitialConfigurationOk() (*float32, bool) {
	if o == nil || IsNil(o.SkipInitialConfiguration) {
		return nil, false
	}
	return o.SkipInitialConfiguration, true
}

// HasSkipInitialConfiguration returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasSkipInitialConfiguration() bool {
	if o != nil && !IsNil(o.SkipInitialConfiguration) {
		return true
	}

	return false
}

// SetSkipInitialConfiguration gets a reference to the given float32 and assigns it to the SkipInitialConfiguration field.
func (o *CreateNetworkDeviceDefaultsDto) SetSkipInitialConfiguration(v float32) {
	o.SkipInitialConfiguration = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *CreateNetworkDeviceDefaultsDto) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetMlagDomainId returns the MlagDomainId field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagDomainId() float32 {
	if o == nil || IsNil(o.MlagDomainId) {
		var ret float32
		return ret
	}
	return *o.MlagDomainId
}

// GetMlagDomainIdOk returns a tuple with the MlagDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagDomainIdOk() (*float32, bool) {
	if o == nil || IsNil(o.MlagDomainId) {
		return nil, false
	}
	return o.MlagDomainId, true
}

// HasMlagDomainId returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasMlagDomainId() bool {
	if o != nil && !IsNil(o.MlagDomainId) {
		return true
	}

	return false
}

// SetMlagDomainId gets a reference to the given float32 and assigns it to the MlagDomainId field.
func (o *CreateNetworkDeviceDefaultsDto) SetMlagDomainId(v float32) {
	o.MlagDomainId = &v
}

// GetLoopbackAddressIpv4 returns the LoopbackAddressIpv4 field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetLoopbackAddressIpv4() string {
	if o == nil || IsNil(o.LoopbackAddressIpv4) {
		var ret string
		return ret
	}
	return *o.LoopbackAddressIpv4
}

// GetLoopbackAddressIpv4Ok returns a tuple with the LoopbackAddressIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetLoopbackAddressIpv4Ok() (*string, bool) {
	if o == nil || IsNil(o.LoopbackAddressIpv4) {
		return nil, false
	}
	return o.LoopbackAddressIpv4, true
}

// HasLoopbackAddressIpv4 returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasLoopbackAddressIpv4() bool {
	if o != nil && !IsNil(o.LoopbackAddressIpv4) {
		return true
	}

	return false
}

// SetLoopbackAddressIpv4 gets a reference to the given string and assigns it to the LoopbackAddressIpv4 field.
func (o *CreateNetworkDeviceDefaultsDto) SetLoopbackAddressIpv4(v string) {
	o.LoopbackAddressIpv4 = &v
}

// GetLoopbackAddressIpv6 returns the LoopbackAddressIpv6 field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetLoopbackAddressIpv6() string {
	if o == nil || IsNil(o.LoopbackAddressIpv6) {
		var ret string
		return ret
	}
	return *o.LoopbackAddressIpv6
}

// GetLoopbackAddressIpv6Ok returns a tuple with the LoopbackAddressIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetLoopbackAddressIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.LoopbackAddressIpv6) {
		return nil, false
	}
	return o.LoopbackAddressIpv6, true
}

// HasLoopbackAddressIpv6 returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasLoopbackAddressIpv6() bool {
	if o != nil && !IsNil(o.LoopbackAddressIpv6) {
		return true
	}

	return false
}

// SetLoopbackAddressIpv6 gets a reference to the given string and assigns it to the LoopbackAddressIpv6 field.
func (o *CreateNetworkDeviceDefaultsDto) SetLoopbackAddressIpv6(v string) {
	o.LoopbackAddressIpv6 = &v
}

// GetVtepAddressIpv4 returns the VtepAddressIpv4 field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetVtepAddressIpv4() string {
	if o == nil || IsNil(o.VtepAddressIpv4) {
		var ret string
		return ret
	}
	return *o.VtepAddressIpv4
}

// GetVtepAddressIpv4Ok returns a tuple with the VtepAddressIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetVtepAddressIpv4Ok() (*string, bool) {
	if o == nil || IsNil(o.VtepAddressIpv4) {
		return nil, false
	}
	return o.VtepAddressIpv4, true
}

// HasVtepAddressIpv4 returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasVtepAddressIpv4() bool {
	if o != nil && !IsNil(o.VtepAddressIpv4) {
		return true
	}

	return false
}

// SetVtepAddressIpv4 gets a reference to the given string and assigns it to the VtepAddressIpv4 field.
func (o *CreateNetworkDeviceDefaultsDto) SetVtepAddressIpv4(v string) {
	o.VtepAddressIpv4 = &v
}

// GetVtepAddressIpv6 returns the VtepAddressIpv6 field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetVtepAddressIpv6() string {
	if o == nil || IsNil(o.VtepAddressIpv6) {
		var ret string
		return ret
	}
	return *o.VtepAddressIpv6
}

// GetVtepAddressIpv6Ok returns a tuple with the VtepAddressIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetVtepAddressIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.VtepAddressIpv6) {
		return nil, false
	}
	return o.VtepAddressIpv6, true
}

// HasVtepAddressIpv6 returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasVtepAddressIpv6() bool {
	if o != nil && !IsNil(o.VtepAddressIpv6) {
		return true
	}

	return false
}

// SetVtepAddressIpv6 gets a reference to the given string and assigns it to the VtepAddressIpv6 field.
func (o *CreateNetworkDeviceDefaultsDto) SetVtepAddressIpv6(v string) {
	o.VtepAddressIpv6 = &v
}

// GetOrderIndex returns the OrderIndex field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetOrderIndex() float32 {
	if o == nil || IsNil(o.OrderIndex) {
		var ret float32
		return ret
	}
	return *o.OrderIndex
}

// GetOrderIndexOk returns a tuple with the OrderIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetOrderIndexOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderIndex) {
		return nil, false
	}
	return o.OrderIndex, true
}

// HasOrderIndex returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasOrderIndex() bool {
	if o != nil && !IsNil(o.OrderIndex) {
		return true
	}

	return false
}

// SetOrderIndex gets a reference to the given float32 and assigns it to the OrderIndex field.
func (o *CreateNetworkDeviceDefaultsDto) SetOrderIndex(v float32) {
	o.OrderIndex = &v
}

// GetDefaultMtu returns the DefaultMtu field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetDefaultMtu() float32 {
	if o == nil || IsNil(o.DefaultMtu) {
		var ret float32
		return ret
	}
	return *o.DefaultMtu
}

// GetDefaultMtuOk returns a tuple with the DefaultMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetDefaultMtuOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultMtu) {
		return nil, false
	}
	return o.DefaultMtu, true
}

// HasDefaultMtu returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasDefaultMtu() bool {
	if o != nil && !IsNil(o.DefaultMtu) {
		return true
	}

	return false
}

// SetDefaultMtu gets a reference to the given float32 and assigns it to the DefaultMtu field.
func (o *CreateNetworkDeviceDefaultsDto) SetDefaultMtu(v float32) {
	o.DefaultMtu = &v
}

// GetVolumeTemplateId returns the VolumeTemplateId field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetVolumeTemplateId() float32 {
	if o == nil || IsNil(o.VolumeTemplateId) {
		var ret float32
		return ret
	}
	return *o.VolumeTemplateId
}

// GetVolumeTemplateIdOk returns a tuple with the VolumeTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetVolumeTemplateIdOk() (*float32, bool) {
	if o == nil || IsNil(o.VolumeTemplateId) {
		return nil, false
	}
	return o.VolumeTemplateId, true
}

// HasVolumeTemplateId returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasVolumeTemplateId() bool {
	if o != nil && !IsNil(o.VolumeTemplateId) {
		return true
	}

	return false
}

// SetVolumeTemplateId gets a reference to the given float32 and assigns it to the VolumeTemplateId field.
func (o *CreateNetworkDeviceDefaultsDto) SetVolumeTemplateId(v float32) {
	o.VolumeTemplateId = &v
}

// GetMlagPartnerHostname returns the MlagPartnerHostname field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagPartnerHostname() string {
	if o == nil || IsNil(o.MlagPartnerHostname) {
		var ret string
		return ret
	}
	return *o.MlagPartnerHostname
}

// GetMlagPartnerHostnameOk returns a tuple with the MlagPartnerHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagPartnerHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.MlagPartnerHostname) {
		return nil, false
	}
	return o.MlagPartnerHostname, true
}

// HasMlagPartnerHostname returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasMlagPartnerHostname() bool {
	if o != nil && !IsNil(o.MlagPartnerHostname) {
		return true
	}

	return false
}

// SetMlagPartnerHostname gets a reference to the given string and assigns it to the MlagPartnerHostname field.
func (o *CreateNetworkDeviceDefaultsDto) SetMlagPartnerHostname(v string) {
	o.MlagPartnerHostname = &v
}

// GetIsPartOfMlagPair returns the IsPartOfMlagPair field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetIsPartOfMlagPair() float32 {
	if o == nil || IsNil(o.IsPartOfMlagPair) {
		var ret float32
		return ret
	}
	return *o.IsPartOfMlagPair
}

// GetIsPartOfMlagPairOk returns a tuple with the IsPartOfMlagPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetIsPartOfMlagPairOk() (*float32, bool) {
	if o == nil || IsNil(o.IsPartOfMlagPair) {
		return nil, false
	}
	return o.IsPartOfMlagPair, true
}

// HasIsPartOfMlagPair returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasIsPartOfMlagPair() bool {
	if o != nil && !IsNil(o.IsPartOfMlagPair) {
		return true
	}

	return false
}

// SetIsPartOfMlagPair gets a reference to the given float32 and assigns it to the IsPartOfMlagPair field.
func (o *CreateNetworkDeviceDefaultsDto) SetIsPartOfMlagPair(v float32) {
	o.IsPartOfMlagPair = &v
}

// GetMlagSystemMac returns the MlagSystemMac field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagSystemMac() string {
	if o == nil || IsNil(o.MlagSystemMac) {
		var ret string
		return ret
	}
	return *o.MlagSystemMac
}

// GetMlagSystemMacOk returns a tuple with the MlagSystemMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagSystemMacOk() (*string, bool) {
	if o == nil || IsNil(o.MlagSystemMac) {
		return nil, false
	}
	return o.MlagSystemMac, true
}

// HasMlagSystemMac returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasMlagSystemMac() bool {
	if o != nil && !IsNil(o.MlagSystemMac) {
		return true
	}

	return false
}

// SetMlagSystemMac gets a reference to the given string and assigns it to the MlagSystemMac field.
func (o *CreateNetworkDeviceDefaultsDto) SetMlagSystemMac(v string) {
	o.MlagSystemMac = &v
}

// GetMlagPeerLinkPortChannelId returns the MlagPeerLinkPortChannelId field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagPeerLinkPortChannelId() float32 {
	if o == nil || IsNil(o.MlagPeerLinkPortChannelId) {
		var ret float32
		return ret
	}
	return *o.MlagPeerLinkPortChannelId
}

// GetMlagPeerLinkPortChannelIdOk returns a tuple with the MlagPeerLinkPortChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagPeerLinkPortChannelIdOk() (*float32, bool) {
	if o == nil || IsNil(o.MlagPeerLinkPortChannelId) {
		return nil, false
	}
	return o.MlagPeerLinkPortChannelId, true
}

// HasMlagPeerLinkPortChannelId returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasMlagPeerLinkPortChannelId() bool {
	if o != nil && !IsNil(o.MlagPeerLinkPortChannelId) {
		return true
	}

	return false
}

// SetMlagPeerLinkPortChannelId gets a reference to the given float32 and assigns it to the MlagPeerLinkPortChannelId field.
func (o *CreateNetworkDeviceDefaultsDto) SetMlagPeerLinkPortChannelId(v float32) {
	o.MlagPeerLinkPortChannelId = &v
}

// GetMlagPartnerVlanId returns the MlagPartnerVlanId field value if set, zero value otherwise.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagPartnerVlanId() float32 {
	if o == nil || IsNil(o.MlagPartnerVlanId) {
		var ret float32
		return ret
	}
	return *o.MlagPartnerVlanId
}

// GetMlagPartnerVlanIdOk returns a tuple with the MlagPartnerVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultsDto) GetMlagPartnerVlanIdOk() (*float32, bool) {
	if o == nil || IsNil(o.MlagPartnerVlanId) {
		return nil, false
	}
	return o.MlagPartnerVlanId, true
}

// HasMlagPartnerVlanId returns a boolean if a field has been set.
func (o *CreateNetworkDeviceDefaultsDto) HasMlagPartnerVlanId() bool {
	if o != nil && !IsNil(o.MlagPartnerVlanId) {
		return true
	}

	return false
}

// SetMlagPartnerVlanId gets a reference to the given float32 and assigns it to the MlagPartnerVlanId field.
func (o *CreateNetworkDeviceDefaultsDto) SetMlagPartnerVlanId(v float32) {
	o.MlagPartnerVlanId = &v
}

func (o CreateNetworkDeviceDefaultsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNetworkDeviceDefaultsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datacenterName"] = o.DatacenterName
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	toSerialize["managementMacAddress"] = o.ManagementMacAddress
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.IdentifierString) {
		toSerialize["identifierString"] = o.IdentifierString
	}
	if !IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	if !IsNil(o.SkipInitialConfiguration) {
		toSerialize["skipInitialConfiguration"] = o.SkipInitialConfiguration
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	if !IsNil(o.MlagDomainId) {
		toSerialize["mlagDomainId"] = o.MlagDomainId
	}
	if !IsNil(o.LoopbackAddressIpv4) {
		toSerialize["loopbackAddressIpv4"] = o.LoopbackAddressIpv4
	}
	if !IsNil(o.LoopbackAddressIpv6) {
		toSerialize["loopbackAddressIpv6"] = o.LoopbackAddressIpv6
	}
	if !IsNil(o.VtepAddressIpv4) {
		toSerialize["vtepAddressIpv4"] = o.VtepAddressIpv4
	}
	if !IsNil(o.VtepAddressIpv6) {
		toSerialize["vtepAddressIpv6"] = o.VtepAddressIpv6
	}
	if !IsNil(o.OrderIndex) {
		toSerialize["orderIndex"] = o.OrderIndex
	}
	if !IsNil(o.DefaultMtu) {
		toSerialize["defaultMtu"] = o.DefaultMtu
	}
	if !IsNil(o.VolumeTemplateId) {
		toSerialize["volumeTemplateId"] = o.VolumeTemplateId
	}
	if !IsNil(o.MlagPartnerHostname) {
		toSerialize["mlagPartnerHostname"] = o.MlagPartnerHostname
	}
	if !IsNil(o.IsPartOfMlagPair) {
		toSerialize["isPartOfMlagPair"] = o.IsPartOfMlagPair
	}
	if !IsNil(o.MlagSystemMac) {
		toSerialize["mlagSystemMac"] = o.MlagSystemMac
	}
	if !IsNil(o.MlagPeerLinkPortChannelId) {
		toSerialize["mlagPeerLinkPortChannelId"] = o.MlagPeerLinkPortChannelId
	}
	if !IsNil(o.MlagPartnerVlanId) {
		toSerialize["mlagPartnerVlanId"] = o.MlagPartnerVlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateNetworkDeviceDefaultsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datacenterName",
		"managementMacAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNetworkDeviceDefaultsDto := _CreateNetworkDeviceDefaultsDto{}

	err = json.Unmarshal(data, &varCreateNetworkDeviceDefaultsDto)

	if err != nil {
		return err
	}

	*o = CreateNetworkDeviceDefaultsDto(varCreateNetworkDeviceDefaultsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "datacenterName")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "managementMacAddress")
		delete(additionalProperties, "position")
		delete(additionalProperties, "identifierString")
		delete(additionalProperties, "asn")
		delete(additionalProperties, "skipInitialConfiguration")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "mlagDomainId")
		delete(additionalProperties, "loopbackAddressIpv4")
		delete(additionalProperties, "loopbackAddressIpv6")
		delete(additionalProperties, "vtepAddressIpv4")
		delete(additionalProperties, "vtepAddressIpv6")
		delete(additionalProperties, "orderIndex")
		delete(additionalProperties, "defaultMtu")
		delete(additionalProperties, "volumeTemplateId")
		delete(additionalProperties, "mlagPartnerHostname")
		delete(additionalProperties, "isPartOfMlagPair")
		delete(additionalProperties, "mlagSystemMac")
		delete(additionalProperties, "mlagPeerLinkPortChannelId")
		delete(additionalProperties, "mlagPartnerVlanId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNetworkDeviceDefaultsDto struct {
	value *CreateNetworkDeviceDefaultsDto
	isSet bool
}

func (v NullableCreateNetworkDeviceDefaultsDto) Get() *CreateNetworkDeviceDefaultsDto {
	return v.value
}

func (v *NullableCreateNetworkDeviceDefaultsDto) Set(val *CreateNetworkDeviceDefaultsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetworkDeviceDefaultsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetworkDeviceDefaultsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetworkDeviceDefaultsDto(val *CreateNetworkDeviceDefaultsDto) *NullableCreateNetworkDeviceDefaultsDto {
	return &NullableCreateNetworkDeviceDefaultsDto{value: val, isSet: true}
}

func (v NullableCreateNetworkDeviceDefaultsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetworkDeviceDefaultsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


