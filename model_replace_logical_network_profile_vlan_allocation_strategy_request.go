/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest - struct for ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest
type ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest struct {
	CreateAutoVlanAllocationStrategy *CreateAutoVlanAllocationStrategy
	CreateManualVlanAllocationStrategy *CreateManualVlanAllocationStrategy
}

// CreateAutoVlanAllocationStrategyAsReplaceLogicalNetworkProfileVlanAllocationStrategyRequest is a convenience function that returns CreateAutoVlanAllocationStrategy wrapped in ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest
func CreateAutoVlanAllocationStrategyAsReplaceLogicalNetworkProfileVlanAllocationStrategyRequest(v *CreateAutoVlanAllocationStrategy) ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest {
	return ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest{
		CreateAutoVlanAllocationStrategy: v,
	}
}

// CreateManualVlanAllocationStrategyAsReplaceLogicalNetworkProfileVlanAllocationStrategyRequest is a convenience function that returns CreateManualVlanAllocationStrategy wrapped in ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest
func CreateManualVlanAllocationStrategyAsReplaceLogicalNetworkProfileVlanAllocationStrategyRequest(v *CreateManualVlanAllocationStrategy) ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest {
	return ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest{
		CreateManualVlanAllocationStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'auto'
	if jsonDict["kind"] == "auto" {
		// try to unmarshal JSON data into CreateAutoVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoVlanAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest as CreateAutoVlanAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'manual'
	if jsonDict["kind"] == "manual" {
		// try to unmarshal JSON data into CreateManualVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualVlanAllocationStrategy, return on the first match
		} else {
			dst.CreateManualVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest as CreateManualVlanAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateAutoVlanAllocationStrategy'
	if jsonDict["kind"] == "CreateAutoVlanAllocationStrategy" {
		// try to unmarshal JSON data into CreateAutoVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoVlanAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest as CreateAutoVlanAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateManualVlanAllocationStrategy'
	if jsonDict["kind"] == "CreateManualVlanAllocationStrategy" {
		// try to unmarshal JSON data into CreateManualVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualVlanAllocationStrategy, return on the first match
		} else {
			dst.CreateManualVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest as CreateManualVlanAllocationStrategy: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) MarshalJSON() ([]byte, error) {
	if src.CreateAutoVlanAllocationStrategy != nil {
		return json.Marshal(&src.CreateAutoVlanAllocationStrategy)
	}

	if src.CreateManualVlanAllocationStrategy != nil {
		return json.Marshal(&src.CreateManualVlanAllocationStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateAutoVlanAllocationStrategy != nil {
		return obj.CreateAutoVlanAllocationStrategy
	}

	if obj.CreateManualVlanAllocationStrategy != nil {
		return obj.CreateManualVlanAllocationStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) GetActualInstanceValue() (interface{}) {
	if obj.CreateAutoVlanAllocationStrategy != nil {
		return *obj.CreateAutoVlanAllocationStrategy
	}

	if obj.CreateManualVlanAllocationStrategy != nil {
		return *obj.CreateManualVlanAllocationStrategy
	}

	// all schemas are nil
	return nil
}

type NullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest struct {
	value *ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest
	isSet bool
}

func (v NullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) Get() *ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest {
	return v.value
}

func (v *NullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) Set(val *ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest(val *ReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) *NullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest {
	return &NullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest{value: val, isSet: true}
}

func (v NullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceLogicalNetworkProfileVlanAllocationStrategyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


