/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VniAllocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VniAllocation{}

// VniAllocation struct for VniAllocation
type VniAllocation struct {
	Id int32 `json:"id"`
	Scope ResourceScope `json:"scope"`
	Status ResourceAllocationStatus `json:"status"`
	Vni int32 `json:"vni"`
	AdditionalProperties map[string]interface{}
}

type _VniAllocation VniAllocation

// NewVniAllocation instantiates a new VniAllocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVniAllocation(id int32, scope ResourceScope, status ResourceAllocationStatus, vni int32) *VniAllocation {
	this := VniAllocation{}
	this.Id = id
	this.Scope = scope
	this.Status = status
	this.Vni = vni
	return &this
}

// NewVniAllocationWithDefaults instantiates a new VniAllocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVniAllocationWithDefaults() *VniAllocation {
	this := VniAllocation{}
	return &this
}

// GetId returns the Id field value
func (o *VniAllocation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VniAllocation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VniAllocation) SetId(v int32) {
	o.Id = v
}

// GetScope returns the Scope field value
func (o *VniAllocation) GetScope() ResourceScope {
	if o == nil {
		var ret ResourceScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *VniAllocation) GetScopeOk() (*ResourceScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *VniAllocation) SetScope(v ResourceScope) {
	o.Scope = v
}

// GetStatus returns the Status field value
func (o *VniAllocation) GetStatus() ResourceAllocationStatus {
	if o == nil {
		var ret ResourceAllocationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VniAllocation) GetStatusOk() (*ResourceAllocationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VniAllocation) SetStatus(v ResourceAllocationStatus) {
	o.Status = v
}

// GetVni returns the Vni field value
func (o *VniAllocation) GetVni() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vni
}

// GetVniOk returns a tuple with the Vni field value
// and a boolean to check if the value has been set.
func (o *VniAllocation) GetVniOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vni, true
}

// SetVni sets field value
func (o *VniAllocation) SetVni(v int32) {
	o.Vni = v
}

func (o VniAllocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VniAllocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["scope"] = o.Scope
	toSerialize["status"] = o.Status
	toSerialize["vni"] = o.Vni

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VniAllocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"scope",
		"status",
		"vni",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVniAllocation := _VniAllocation{}

	err = json.Unmarshal(data, &varVniAllocation)

	if err != nil {
		return err
	}

	*o = VniAllocation(varVniAllocation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "status")
		delete(additionalProperties, "vni")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVniAllocation struct {
	value *VniAllocation
	isSet bool
}

func (v NullableVniAllocation) Get() *VniAllocation {
	return v.value
}

func (v *NullableVniAllocation) Set(val *VniAllocation) {
	v.value = val
	v.isSet = true
}

func (v NullableVniAllocation) IsSet() bool {
	return v.isSet
}

func (v *NullableVniAllocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVniAllocation(val *VniAllocation) *NullableVniAllocation {
	return &NullableVniAllocation{value: val, isSet: true}
}

func (v NullableVniAllocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVniAllocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


