/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourcePoolStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourcePoolStatistics{}

// ResourcePoolStatistics struct for ResourcePoolStatistics
type ResourcePoolStatistics struct {
	// Number of users in the Resource Pool
	Users float32 `json:"users"`
	// Number of servers in the Resource Pool
	Servers float32 `json:"servers"`
	// Number of subnet pools in the Resource Pool
	SubnetPools float32 `json:"subnetPools"`
	AdditionalProperties map[string]interface{}
}

type _ResourcePoolStatistics ResourcePoolStatistics

// NewResourcePoolStatistics instantiates a new ResourcePoolStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourcePoolStatistics(users float32, servers float32, subnetPools float32) *ResourcePoolStatistics {
	this := ResourcePoolStatistics{}
	this.Users = users
	this.Servers = servers
	this.SubnetPools = subnetPools
	return &this
}

// NewResourcePoolStatisticsWithDefaults instantiates a new ResourcePoolStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcePoolStatisticsWithDefaults() *ResourcePoolStatistics {
	this := ResourcePoolStatistics{}
	return &this
}

// GetUsers returns the Users field value
func (o *ResourcePoolStatistics) GetUsers() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *ResourcePoolStatistics) GetUsersOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Users, true
}

// SetUsers sets field value
func (o *ResourcePoolStatistics) SetUsers(v float32) {
	o.Users = v
}

// GetServers returns the Servers field value
func (o *ResourcePoolStatistics) GetServers() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value
// and a boolean to check if the value has been set.
func (o *ResourcePoolStatistics) GetServersOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Servers, true
}

// SetServers sets field value
func (o *ResourcePoolStatistics) SetServers(v float32) {
	o.Servers = v
}

// GetSubnetPools returns the SubnetPools field value
func (o *ResourcePoolStatistics) GetSubnetPools() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SubnetPools
}

// GetSubnetPoolsOk returns a tuple with the SubnetPools field value
// and a boolean to check if the value has been set.
func (o *ResourcePoolStatistics) GetSubnetPoolsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetPools, true
}

// SetSubnetPools sets field value
func (o *ResourcePoolStatistics) SetSubnetPools(v float32) {
	o.SubnetPools = v
}

func (o ResourcePoolStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourcePoolStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["users"] = o.Users
	toSerialize["servers"] = o.Servers
	toSerialize["subnetPools"] = o.SubnetPools

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourcePoolStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"users",
		"servers",
		"subnetPools",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourcePoolStatistics := _ResourcePoolStatistics{}

	err = json.Unmarshal(data, &varResourcePoolStatistics)

	if err != nil {
		return err
	}

	*o = ResourcePoolStatistics(varResourcePoolStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "users")
		delete(additionalProperties, "servers")
		delete(additionalProperties, "subnetPools")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourcePoolStatistics struct {
	value *ResourcePoolStatistics
	isSet bool
}

func (v NullableResourcePoolStatistics) Get() *ResourcePoolStatistics {
	return v.value
}

func (v *NullableResourcePoolStatistics) Set(val *ResourcePoolStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcePoolStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcePoolStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcePoolStatistics(val *ResourcePoolStatistics) *NullableResourcePoolStatistics {
	return &NullableResourcePoolStatistics{value: val, isSet: true}
}

func (v NullableResourcePoolStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcePoolStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


