/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateNetworkDeviceDefaultSecretsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNetworkDeviceDefaultSecretsDto{}

// CreateNetworkDeviceDefaultSecretsDto struct for CreateNetworkDeviceDefaultSecretsDto
type CreateNetworkDeviceDefaultSecretsDto struct {
	// The site ID of the network device default secrets
	SiteId float32 `json:"siteId"`
	// The MAC address or serial number of the network device
	MacAddressOrSerialNumber string `json:"macAddressOrSerialNumber"`
	// The name of the secret
	SecretName string `json:"secretName"`
	// The value of the secret
	SecretValue string `json:"secretValue"`
	AdditionalProperties map[string]interface{}
}

type _CreateNetworkDeviceDefaultSecretsDto CreateNetworkDeviceDefaultSecretsDto

// NewCreateNetworkDeviceDefaultSecretsDto instantiates a new CreateNetworkDeviceDefaultSecretsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNetworkDeviceDefaultSecretsDto(siteId float32, macAddressOrSerialNumber string, secretName string, secretValue string) *CreateNetworkDeviceDefaultSecretsDto {
	this := CreateNetworkDeviceDefaultSecretsDto{}
	this.SiteId = siteId
	this.MacAddressOrSerialNumber = macAddressOrSerialNumber
	this.SecretName = secretName
	this.SecretValue = secretValue
	return &this
}

// NewCreateNetworkDeviceDefaultSecretsDtoWithDefaults instantiates a new CreateNetworkDeviceDefaultSecretsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNetworkDeviceDefaultSecretsDtoWithDefaults() *CreateNetworkDeviceDefaultSecretsDto {
	this := CreateNetworkDeviceDefaultSecretsDto{}
	return &this
}

// GetSiteId returns the SiteId field value
func (o *CreateNetworkDeviceDefaultSecretsDto) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultSecretsDto) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *CreateNetworkDeviceDefaultSecretsDto) SetSiteId(v float32) {
	o.SiteId = v
}

// GetMacAddressOrSerialNumber returns the MacAddressOrSerialNumber field value
func (o *CreateNetworkDeviceDefaultSecretsDto) GetMacAddressOrSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MacAddressOrSerialNumber
}

// GetMacAddressOrSerialNumberOk returns a tuple with the MacAddressOrSerialNumber field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultSecretsDto) GetMacAddressOrSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MacAddressOrSerialNumber, true
}

// SetMacAddressOrSerialNumber sets field value
func (o *CreateNetworkDeviceDefaultSecretsDto) SetMacAddressOrSerialNumber(v string) {
	o.MacAddressOrSerialNumber = v
}

// GetSecretName returns the SecretName field value
func (o *CreateNetworkDeviceDefaultSecretsDto) GetSecretName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretName
}

// GetSecretNameOk returns a tuple with the SecretName field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultSecretsDto) GetSecretNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretName, true
}

// SetSecretName sets field value
func (o *CreateNetworkDeviceDefaultSecretsDto) SetSecretName(v string) {
	o.SecretName = v
}

// GetSecretValue returns the SecretValue field value
func (o *CreateNetworkDeviceDefaultSecretsDto) GetSecretValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretValue
}

// GetSecretValueOk returns a tuple with the SecretValue field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDeviceDefaultSecretsDto) GetSecretValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretValue, true
}

// SetSecretValue sets field value
func (o *CreateNetworkDeviceDefaultSecretsDto) SetSecretValue(v string) {
	o.SecretValue = v
}

func (o CreateNetworkDeviceDefaultSecretsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNetworkDeviceDefaultSecretsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["siteId"] = o.SiteId
	toSerialize["macAddressOrSerialNumber"] = o.MacAddressOrSerialNumber
	toSerialize["secretName"] = o.SecretName
	toSerialize["secretValue"] = o.SecretValue

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateNetworkDeviceDefaultSecretsDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"siteId",
		"macAddressOrSerialNumber",
		"secretName",
		"secretValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNetworkDeviceDefaultSecretsDto := _CreateNetworkDeviceDefaultSecretsDto{}

	err = json.Unmarshal(data, &varCreateNetworkDeviceDefaultSecretsDto)

	if err != nil {
		return err
	}

	*o = CreateNetworkDeviceDefaultSecretsDto(varCreateNetworkDeviceDefaultSecretsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "macAddressOrSerialNumber")
		delete(additionalProperties, "secretName")
		delete(additionalProperties, "secretValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNetworkDeviceDefaultSecretsDto struct {
	value *CreateNetworkDeviceDefaultSecretsDto
	isSet bool
}

func (v NullableCreateNetworkDeviceDefaultSecretsDto) Get() *CreateNetworkDeviceDefaultSecretsDto {
	return v.value
}

func (v *NullableCreateNetworkDeviceDefaultSecretsDto) Set(val *CreateNetworkDeviceDefaultSecretsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetworkDeviceDefaultSecretsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetworkDeviceDefaultSecretsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetworkDeviceDefaultSecretsDto(val *CreateNetworkDeviceDefaultSecretsDto) *NullableCreateNetworkDeviceDefaultSecretsDto {
	return &NullableCreateNetworkDeviceDefaultSecretsDto{value: val, isSet: true}
}

func (v NullableCreateNetworkDeviceDefaultSecretsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetworkDeviceDefaultSecretsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


