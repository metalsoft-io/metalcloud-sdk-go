/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Version type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Version{}

// Version struct for Version
type Version struct {
	// The version of the installed MetalSoft software
	Version string `json:"version"`
	// The release date of the version
	VersionDate *time.Time `json:"versionDate,omitempty"`
	// The build number of the version
	VersionBuild *string `json:"versionBuild,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Version Version

// NewVersion instantiates a new Version object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersion(version string) *Version {
	this := Version{}
	this.Version = version
	return &this
}

// NewVersionWithDefaults instantiates a new Version object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionWithDefaults() *Version {
	this := Version{}
	return &this
}

// GetVersion returns the Version field value
func (o *Version) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Version) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Version) SetVersion(v string) {
	o.Version = v
}

// GetVersionDate returns the VersionDate field value if set, zero value otherwise.
func (o *Version) GetVersionDate() time.Time {
	if o == nil || IsNil(o.VersionDate) {
		var ret time.Time
		return ret
	}
	return *o.VersionDate
}

// GetVersionDateOk returns a tuple with the VersionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Version) GetVersionDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.VersionDate) {
		return nil, false
	}
	return o.VersionDate, true
}

// HasVersionDate returns a boolean if a field has been set.
func (o *Version) HasVersionDate() bool {
	if o != nil && !IsNil(o.VersionDate) {
		return true
	}

	return false
}

// SetVersionDate gets a reference to the given time.Time and assigns it to the VersionDate field.
func (o *Version) SetVersionDate(v time.Time) {
	o.VersionDate = &v
}

// GetVersionBuild returns the VersionBuild field value if set, zero value otherwise.
func (o *Version) GetVersionBuild() string {
	if o == nil || IsNil(o.VersionBuild) {
		var ret string
		return ret
	}
	return *o.VersionBuild
}

// GetVersionBuildOk returns a tuple with the VersionBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Version) GetVersionBuildOk() (*string, bool) {
	if o == nil || IsNil(o.VersionBuild) {
		return nil, false
	}
	return o.VersionBuild, true
}

// HasVersionBuild returns a boolean if a field has been set.
func (o *Version) HasVersionBuild() bool {
	if o != nil && !IsNil(o.VersionBuild) {
		return true
	}

	return false
}

// SetVersionBuild gets a reference to the given string and assigns it to the VersionBuild field.
func (o *Version) SetVersionBuild(v string) {
	o.VersionBuild = &v
}

func (o Version) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Version) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	if !IsNil(o.VersionDate) {
		toSerialize["versionDate"] = o.VersionDate
	}
	if !IsNil(o.VersionBuild) {
		toSerialize["versionBuild"] = o.VersionBuild
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Version) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersion := _Version{}

	err = json.Unmarshal(data, &varVersion)

	if err != nil {
		return err
	}

	*o = Version(varVersion)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "version")
		delete(additionalProperties, "versionDate")
		delete(additionalProperties, "versionBuild")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVersion struct {
	value *Version
	isSet bool
}

func (v NullableVersion) Get() *Version {
	return v.value
}

func (v *NullableVersion) Set(val *Version) {
	v.value = val
	v.isSet = true
}

func (v NullableVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersion(val *Version) *NullableVersion {
	return &NullableVersion{value: val, isSet: true}
}

func (v NullableVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


