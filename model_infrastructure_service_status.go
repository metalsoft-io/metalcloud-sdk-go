/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InfrastructureServiceStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureServiceStatus{}

// InfrastructureServiceStatus struct for InfrastructureServiceStatus
type InfrastructureServiceStatus struct {
	// Count of active infrastructures
	Active float32 `json:"active"`
	// Count of ordered infrastructures
	Ordered float32 `json:"ordered"`
	// Count of deleted infrastructures
	Deleted float32 `json:"deleted"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureServiceStatus InfrastructureServiceStatus

// NewInfrastructureServiceStatus instantiates a new InfrastructureServiceStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureServiceStatus(active float32, ordered float32, deleted float32) *InfrastructureServiceStatus {
	this := InfrastructureServiceStatus{}
	this.Active = active
	this.Ordered = ordered
	this.Deleted = deleted
	return &this
}

// NewInfrastructureServiceStatusWithDefaults instantiates a new InfrastructureServiceStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureServiceStatusWithDefaults() *InfrastructureServiceStatus {
	this := InfrastructureServiceStatus{}
	return &this
}

// GetActive returns the Active field value
func (o *InfrastructureServiceStatus) GetActive() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *InfrastructureServiceStatus) GetActiveOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *InfrastructureServiceStatus) SetActive(v float32) {
	o.Active = v
}

// GetOrdered returns the Ordered field value
func (o *InfrastructureServiceStatus) GetOrdered() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Ordered
}

// GetOrderedOk returns a tuple with the Ordered field value
// and a boolean to check if the value has been set.
func (o *InfrastructureServiceStatus) GetOrderedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ordered, true
}

// SetOrdered sets field value
func (o *InfrastructureServiceStatus) SetOrdered(v float32) {
	o.Ordered = v
}

// GetDeleted returns the Deleted field value
func (o *InfrastructureServiceStatus) GetDeleted() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *InfrastructureServiceStatus) GetDeletedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *InfrastructureServiceStatus) SetDeleted(v float32) {
	o.Deleted = v
}

func (o InfrastructureServiceStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureServiceStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["ordered"] = o.Ordered
	toSerialize["deleted"] = o.Deleted

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureServiceStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"ordered",
		"deleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfrastructureServiceStatus := _InfrastructureServiceStatus{}

	err = json.Unmarshal(data, &varInfrastructureServiceStatus)

	if err != nil {
		return err
	}

	*o = InfrastructureServiceStatus(varInfrastructureServiceStatus)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "active")
		delete(additionalProperties, "ordered")
		delete(additionalProperties, "deleted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureServiceStatus struct {
	value *InfrastructureServiceStatus
	isSet bool
}

func (v NullableInfrastructureServiceStatus) Get() *InfrastructureServiceStatus {
	return v.value
}

func (v *NullableInfrastructureServiceStatus) Set(val *InfrastructureServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureServiceStatus(val *InfrastructureServiceStatus) *NullableInfrastructureServiceStatus {
	return &NullableInfrastructureServiceStatus{value: val, isSet: true}
}

func (v NullableInfrastructureServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


