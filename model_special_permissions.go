/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SpecialPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecialPermissions{}

// SpecialPermissions struct for SpecialPermissions
type SpecialPermissions struct {
	CreateVerifiedUser *bool `json:"create_verified_user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpecialPermissions SpecialPermissions

// NewSpecialPermissions instantiates a new SpecialPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialPermissions() *SpecialPermissions {
	this := SpecialPermissions{}
	return &this
}

// NewSpecialPermissionsWithDefaults instantiates a new SpecialPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialPermissionsWithDefaults() *SpecialPermissions {
	this := SpecialPermissions{}
	return &this
}

// GetCreateVerifiedUser returns the CreateVerifiedUser field value if set, zero value otherwise.
func (o *SpecialPermissions) GetCreateVerifiedUser() bool {
	if o == nil || IsNil(o.CreateVerifiedUser) {
		var ret bool
		return ret
	}
	return *o.CreateVerifiedUser
}

// GetCreateVerifiedUserOk returns a tuple with the CreateVerifiedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialPermissions) GetCreateVerifiedUserOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateVerifiedUser) {
		return nil, false
	}
	return o.CreateVerifiedUser, true
}

// HasCreateVerifiedUser returns a boolean if a field has been set.
func (o *SpecialPermissions) HasCreateVerifiedUser() bool {
	if o != nil && !IsNil(o.CreateVerifiedUser) {
		return true
	}

	return false
}

// SetCreateVerifiedUser gets a reference to the given bool and assigns it to the CreateVerifiedUser field.
func (o *SpecialPermissions) SetCreateVerifiedUser(v bool) {
	o.CreateVerifiedUser = &v
}

func (o SpecialPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecialPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreateVerifiedUser) {
		toSerialize["create_verified_user"] = o.CreateVerifiedUser
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpecialPermissions) UnmarshalJSON(data []byte) (err error) {
	varSpecialPermissions := _SpecialPermissions{}

	err = json.Unmarshal(data, &varSpecialPermissions)

	if err != nil {
		return err
	}

	*o = SpecialPermissions(varSpecialPermissions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "create_verified_user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpecialPermissions struct {
	value *SpecialPermissions
	isSet bool
}

func (v NullableSpecialPermissions) Get() *SpecialPermissions {
	return v.value
}

func (v *NullableSpecialPermissions) Set(val *SpecialPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialPermissions(val *SpecialPermissions) *NullableSpecialPermissions {
	return &NullableSpecialPermissions{value: val, isSet: true}
}

func (v NullableSpecialPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


