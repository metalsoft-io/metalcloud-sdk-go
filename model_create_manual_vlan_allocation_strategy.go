/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateManualVlanAllocationStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateManualVlanAllocationStrategy{}

// CreateManualVlanAllocationStrategy struct for CreateManualVlanAllocationStrategy
type CreateManualVlanAllocationStrategy struct {
	Kind AllocationStrategyKind `json:"kind"`
	Scope CreateResourceScope `json:"scope"`
	GranularityLevel NullableVlanAllocationGranularityLevel `json:"granularityLevel,omitempty"`
	VlanId int32 `json:"vlanId"`
	AdditionalProperties map[string]interface{}
}

type _CreateManualVlanAllocationStrategy CreateManualVlanAllocationStrategy

// NewCreateManualVlanAllocationStrategy instantiates a new CreateManualVlanAllocationStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateManualVlanAllocationStrategy(kind AllocationStrategyKind, scope CreateResourceScope, vlanId int32) *CreateManualVlanAllocationStrategy {
	this := CreateManualVlanAllocationStrategy{}
	this.Kind = kind
	this.Scope = scope
	this.VlanId = vlanId
	return &this
}

// NewCreateManualVlanAllocationStrategyWithDefaults instantiates a new CreateManualVlanAllocationStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateManualVlanAllocationStrategyWithDefaults() *CreateManualVlanAllocationStrategy {
	this := CreateManualVlanAllocationStrategy{}
	return &this
}

// GetKind returns the Kind field value
func (o *CreateManualVlanAllocationStrategy) GetKind() AllocationStrategyKind {
	if o == nil {
		var ret AllocationStrategyKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CreateManualVlanAllocationStrategy) GetKindOk() (*AllocationStrategyKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CreateManualVlanAllocationStrategy) SetKind(v AllocationStrategyKind) {
	o.Kind = v
}

// GetScope returns the Scope field value
func (o *CreateManualVlanAllocationStrategy) GetScope() CreateResourceScope {
	if o == nil {
		var ret CreateResourceScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *CreateManualVlanAllocationStrategy) GetScopeOk() (*CreateResourceScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *CreateManualVlanAllocationStrategy) SetScope(v CreateResourceScope) {
	o.Scope = v
}

// GetGranularityLevel returns the GranularityLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateManualVlanAllocationStrategy) GetGranularityLevel() VlanAllocationGranularityLevel {
	if o == nil || IsNil(o.GranularityLevel.Get()) {
		var ret VlanAllocationGranularityLevel
		return ret
	}
	return *o.GranularityLevel.Get()
}

// GetGranularityLevelOk returns a tuple with the GranularityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateManualVlanAllocationStrategy) GetGranularityLevelOk() (*VlanAllocationGranularityLevel, bool) {
	if o == nil {
		return nil, false
	}
	return o.GranularityLevel.Get(), o.GranularityLevel.IsSet()
}

// HasGranularityLevel returns a boolean if a field has been set.
func (o *CreateManualVlanAllocationStrategy) HasGranularityLevel() bool {
	if o != nil && o.GranularityLevel.IsSet() {
		return true
	}

	return false
}

// SetGranularityLevel gets a reference to the given NullableVlanAllocationGranularityLevel and assigns it to the GranularityLevel field.
func (o *CreateManualVlanAllocationStrategy) SetGranularityLevel(v VlanAllocationGranularityLevel) {
	o.GranularityLevel.Set(&v)
}
// SetGranularityLevelNil sets the value for GranularityLevel to be an explicit nil
func (o *CreateManualVlanAllocationStrategy) SetGranularityLevelNil() {
	o.GranularityLevel.Set(nil)
}

// UnsetGranularityLevel ensures that no value is present for GranularityLevel, not even an explicit nil
func (o *CreateManualVlanAllocationStrategy) UnsetGranularityLevel() {
	o.GranularityLevel.Unset()
}

// GetVlanId returns the VlanId field value
func (o *CreateManualVlanAllocationStrategy) GetVlanId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value
// and a boolean to check if the value has been set.
func (o *CreateManualVlanAllocationStrategy) GetVlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanId, true
}

// SetVlanId sets field value
func (o *CreateManualVlanAllocationStrategy) SetVlanId(v int32) {
	o.VlanId = v
}

func (o CreateManualVlanAllocationStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateManualVlanAllocationStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["scope"] = o.Scope
	if o.GranularityLevel.IsSet() {
		toSerialize["granularityLevel"] = o.GranularityLevel.Get()
	}
	toSerialize["vlanId"] = o.VlanId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateManualVlanAllocationStrategy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"scope",
		"vlanId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateManualVlanAllocationStrategy := _CreateManualVlanAllocationStrategy{}

	err = json.Unmarshal(data, &varCreateManualVlanAllocationStrategy)

	if err != nil {
		return err
	}

	*o = CreateManualVlanAllocationStrategy(varCreateManualVlanAllocationStrategy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kind")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "granularityLevel")
		delete(additionalProperties, "vlanId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateManualVlanAllocationStrategy struct {
	value *CreateManualVlanAllocationStrategy
	isSet bool
}

func (v NullableCreateManualVlanAllocationStrategy) Get() *CreateManualVlanAllocationStrategy {
	return v.value
}

func (v *NullableCreateManualVlanAllocationStrategy) Set(val *CreateManualVlanAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateManualVlanAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateManualVlanAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateManualVlanAllocationStrategy(val *CreateManualVlanAllocationStrategy) *NullableCreateManualVlanAllocationStrategy {
	return &NullableCreateManualVlanAllocationStrategy{value: val, isSet: true}
}

func (v NullableCreateManualVlanAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateManualVlanAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


