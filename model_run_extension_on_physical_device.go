/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the RunExtensionOnPhysicalDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunExtensionOnPhysicalDevice{}

// RunExtensionOnPhysicalDevice struct for RunExtensionOnPhysicalDevice
type RunExtensionOnPhysicalDevice struct {
	// The physical device ID
	ExtensionId float32 `json:"extensionId"`
	// Input arguments
	InputArguments map[string]interface{} `json:"inputArguments"`
	AdditionalProperties map[string]interface{}
}

type _RunExtensionOnPhysicalDevice RunExtensionOnPhysicalDevice

// NewRunExtensionOnPhysicalDevice instantiates a new RunExtensionOnPhysicalDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunExtensionOnPhysicalDevice(extensionId float32, inputArguments map[string]interface{}) *RunExtensionOnPhysicalDevice {
	this := RunExtensionOnPhysicalDevice{}
	this.ExtensionId = extensionId
	this.InputArguments = inputArguments
	return &this
}

// NewRunExtensionOnPhysicalDeviceWithDefaults instantiates a new RunExtensionOnPhysicalDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunExtensionOnPhysicalDeviceWithDefaults() *RunExtensionOnPhysicalDevice {
	this := RunExtensionOnPhysicalDevice{}
	return &this
}

// GetExtensionId returns the ExtensionId field value
func (o *RunExtensionOnPhysicalDevice) GetExtensionId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExtensionId
}

// GetExtensionIdOk returns a tuple with the ExtensionId field value
// and a boolean to check if the value has been set.
func (o *RunExtensionOnPhysicalDevice) GetExtensionIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtensionId, true
}

// SetExtensionId sets field value
func (o *RunExtensionOnPhysicalDevice) SetExtensionId(v float32) {
	o.ExtensionId = v
}

// GetInputArguments returns the InputArguments field value
func (o *RunExtensionOnPhysicalDevice) GetInputArguments() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.InputArguments
}

// GetInputArgumentsOk returns a tuple with the InputArguments field value
// and a boolean to check if the value has been set.
func (o *RunExtensionOnPhysicalDevice) GetInputArgumentsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.InputArguments, true
}

// SetInputArguments sets field value
func (o *RunExtensionOnPhysicalDevice) SetInputArguments(v map[string]interface{}) {
	o.InputArguments = v
}

func (o RunExtensionOnPhysicalDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunExtensionOnPhysicalDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extensionId"] = o.ExtensionId
	toSerialize["inputArguments"] = o.InputArguments

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RunExtensionOnPhysicalDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extensionId",
		"inputArguments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunExtensionOnPhysicalDevice := _RunExtensionOnPhysicalDevice{}

	err = json.Unmarshal(data, &varRunExtensionOnPhysicalDevice)

	if err != nil {
		return err
	}

	*o = RunExtensionOnPhysicalDevice(varRunExtensionOnPhysicalDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "extensionId")
		delete(additionalProperties, "inputArguments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRunExtensionOnPhysicalDevice struct {
	value *RunExtensionOnPhysicalDevice
	isSet bool
}

func (v NullableRunExtensionOnPhysicalDevice) Get() *RunExtensionOnPhysicalDevice {
	return v.value
}

func (v *NullableRunExtensionOnPhysicalDevice) Set(val *RunExtensionOnPhysicalDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableRunExtensionOnPhysicalDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableRunExtensionOnPhysicalDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunExtensionOnPhysicalDevice(val *RunExtensionOnPhysicalDevice) *NullableRunExtensionOnPhysicalDevice {
	return &NullableRunExtensionOnPhysicalDevice{value: val, isSet: true}
}

func (v NullableRunExtensionOnPhysicalDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunExtensionOnPhysicalDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


