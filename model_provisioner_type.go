/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ProvisionerType the model 'ProvisionerType'
type ProvisionerType string

// List of ProvisionerType
const (
	VPLS ProvisionerType = "vpls"
	VXLAN ProvisionerType = "vxlan"
	VLAN ProvisionerType = "vlan"
	SDN ProvisionerType = "sdn"
	LAN ProvisionerType = "lan"
	EVPNVXLANL2 ProvisionerType = "evpnvxlanl2"
)

// All allowed values of ProvisionerType enum
var AllowedProvisionerTypeEnumValues = []ProvisionerType{
	"vpls",
	"vxlan",
	"vlan",
	"sdn",
	"lan",
	"evpnvxlanl2",
}

func (v *ProvisionerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProvisionerType(value)
	for _, existing := range AllowedProvisionerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProvisionerType", value)
}

// NewProvisionerTypeFromValue returns a pointer to a valid ProvisionerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisionerTypeFromValue(v string) (*ProvisionerType, error) {
	ev := ProvisionerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisionerType: valid values are %v", v, AllowedProvisionerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisionerType) IsValid() bool {
	for _, existing := range AllowedProvisionerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisionerType value
func (v ProvisionerType) Ptr() *ProvisionerType {
	return &v
}

type NullableProvisionerType struct {
	value *ProvisionerType
	isSet bool
}

func (v NullableProvisionerType) Get() *ProvisionerType {
	return v.value
}

func (v *NullableProvisionerType) Set(val *ProvisionerType) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisionerType) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisionerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisionerType(val *ProvisionerType) *NullableProvisionerType {
	return &NullableProvisionerType{value: val, isSet: true}
}

func (v NullableProvisionerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisionerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

