/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SharedDriveHostType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedDriveHostType{}

// SharedDriveHostType struct for SharedDriveHostType
type SharedDriveHostType struct {
	// Drive Host Ids that will be connected.
	WillBeConnected []string `json:"willBeConnected"`
	// Drive Host Ids that are connected.
	Connected []string `json:"connected"`
	// Drive Host Ids that will be disconnected.
	WillBeDisconnected []string `json:"willBeDisconnected"`
	// Drive Host Ids that are disconnected.
	Disconnected []string `json:"disconnected"`
	AdditionalProperties map[string]interface{}
}

type _SharedDriveHostType SharedDriveHostType

// NewSharedDriveHostType instantiates a new SharedDriveHostType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedDriveHostType(willBeConnected []string, connected []string, willBeDisconnected []string, disconnected []string) *SharedDriveHostType {
	this := SharedDriveHostType{}
	this.WillBeConnected = willBeConnected
	this.Connected = connected
	this.WillBeDisconnected = willBeDisconnected
	this.Disconnected = disconnected
	return &this
}

// NewSharedDriveHostTypeWithDefaults instantiates a new SharedDriveHostType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedDriveHostTypeWithDefaults() *SharedDriveHostType {
	this := SharedDriveHostType{}
	return &this
}

// GetWillBeConnected returns the WillBeConnected field value
func (o *SharedDriveHostType) GetWillBeConnected() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.WillBeConnected
}

// GetWillBeConnectedOk returns a tuple with the WillBeConnected field value
// and a boolean to check if the value has been set.
func (o *SharedDriveHostType) GetWillBeConnectedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WillBeConnected, true
}

// SetWillBeConnected sets field value
func (o *SharedDriveHostType) SetWillBeConnected(v []string) {
	o.WillBeConnected = v
}

// GetConnected returns the Connected field value
func (o *SharedDriveHostType) GetConnected() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value
// and a boolean to check if the value has been set.
func (o *SharedDriveHostType) GetConnectedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Connected, true
}

// SetConnected sets field value
func (o *SharedDriveHostType) SetConnected(v []string) {
	o.Connected = v
}

// GetWillBeDisconnected returns the WillBeDisconnected field value
func (o *SharedDriveHostType) GetWillBeDisconnected() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.WillBeDisconnected
}

// GetWillBeDisconnectedOk returns a tuple with the WillBeDisconnected field value
// and a boolean to check if the value has been set.
func (o *SharedDriveHostType) GetWillBeDisconnectedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WillBeDisconnected, true
}

// SetWillBeDisconnected sets field value
func (o *SharedDriveHostType) SetWillBeDisconnected(v []string) {
	o.WillBeDisconnected = v
}

// GetDisconnected returns the Disconnected field value
func (o *SharedDriveHostType) GetDisconnected() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Disconnected
}

// GetDisconnectedOk returns a tuple with the Disconnected field value
// and a boolean to check if the value has been set.
func (o *SharedDriveHostType) GetDisconnectedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disconnected, true
}

// SetDisconnected sets field value
func (o *SharedDriveHostType) SetDisconnected(v []string) {
	o.Disconnected = v
}

func (o SharedDriveHostType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedDriveHostType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["willBeConnected"] = o.WillBeConnected
	toSerialize["connected"] = o.Connected
	toSerialize["willBeDisconnected"] = o.WillBeDisconnected
	toSerialize["disconnected"] = o.Disconnected

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SharedDriveHostType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"willBeConnected",
		"connected",
		"willBeDisconnected",
		"disconnected",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedDriveHostType := _SharedDriveHostType{}

	err = json.Unmarshal(data, &varSharedDriveHostType)

	if err != nil {
		return err
	}

	*o = SharedDriveHostType(varSharedDriveHostType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "willBeConnected")
		delete(additionalProperties, "connected")
		delete(additionalProperties, "willBeDisconnected")
		delete(additionalProperties, "disconnected")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSharedDriveHostType struct {
	value *SharedDriveHostType
	isSet bool
}

func (v NullableSharedDriveHostType) Get() *SharedDriveHostType {
	return v.value
}

func (v *NullableSharedDriveHostType) Set(val *SharedDriveHostType) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedDriveHostType) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedDriveHostType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedDriveHostType(val *SharedDriveHostType) *NullableSharedDriveHostType {
	return &NullableSharedDriveHostType{value: val, isSet: true}
}

func (v NullableSharedDriveHostType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedDriveHostType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


