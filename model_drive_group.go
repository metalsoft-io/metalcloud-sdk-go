/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the DriveGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DriveGroup{}

// DriveGroup struct for DriveGroup
type DriveGroup struct {
	// Label of the Drive Group.
	Label string `json:"label"`
	// Infrastructure id of the Drive Group
	InfrastructureId float32 `json:"infrastructureId"`
	// Template Id
	TemplateId *float32 `json:"templateId,omitempty"`
	// Number of drives in the Drive Group
	DriveCount float32 `json:"driveCount"`
	// Default disk size in MB for new Drives in the Drive Group
	DriveSizeMbDefault float32 `json:"driveSizeMbDefault"`
	InstanceArrayId *float32 `json:"instanceArrayId,omitempty"`
	ContainerArrayId *float32 `json:"containerArrayId,omitempty"`
	// Flag to determine whether the Drive Group should be expanded with an Instance Array by adding one drive for each instance
	ExpandWithInstanceArray float32 `json:"expandWithInstanceArray"`
	// The IO limit policy of the Drive Group.
	IoLimitPolicy *string `json:"ioLimitPolicy,omitempty"`
	// Service status of the Drive Group
	StorageType string `json:"storageType"`
	// Filesystem information of the Drive Group.
	FilesystemInfo map[string]interface{} `json:"filesystemInfo,omitempty"`
	// Subdomain of the Drive Group.
	Subdomain *string `json:"subdomain,omitempty"`
	// Timestamp of the Drive Group last update.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Id of the Drive Group
	Id float32 `json:"id"`
	// Revision of the Drive Group State
	Revision float32 `json:"revision"`
	ClusterId *float32 `json:"clusterId,omitempty"`
	ContainerClusterId *float32 `json:"containerClusterId,omitempty"`
	// Cluster Role Group of the Drive Group, if part of a cluster
	ClusterRoleGroup string `json:"clusterRoleGroup"`
	// Service status of the Drive Group
	ServiceStatus string `json:"serviceStatus"`
	// Subdomain permanent of the Drive Group.
	SubdomainPermanent *string `json:"subdomainPermanent,omitempty"`
	// Id of the DNS subdomain for the Drive Group.
	DnsSubdomainId *float32 `json:"dnsSubdomainId,omitempty"`
	// Id of the permanent DNS subdomain for the Drive Group.
	DnsSubdomainPermanentId *float32 `json:"dnsSubdomainPermanentId,omitempty"`
	// Allocation affinity of the Drive Group
	AllocationAffinity string `json:"allocationAffinity"`
	// Tags for the Drive Group.
	Tags []string `json:"tags,omitempty"`
	GuiSettings *GenericGUISettings `json:"guiSettings,omitempty"`
	// The current changes to be deployed for the Drive Group.
	Config DriveGroupConfiguration `json:"config"`
	// Timestamp of the Drive Group creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	AdditionalProperties map[string]interface{}
}

type _DriveGroup DriveGroup

// NewDriveGroup instantiates a new DriveGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriveGroup(label string, infrastructureId float32, driveCount float32, driveSizeMbDefault float32, expandWithInstanceArray float32, storageType string, updatedTimestamp string, id float32, revision float32, clusterRoleGroup string, serviceStatus string, allocationAffinity string, config DriveGroupConfiguration, createdTimestamp string) *DriveGroup {
	this := DriveGroup{}
	this.Label = label
	this.InfrastructureId = infrastructureId
	this.DriveCount = driveCount
	this.DriveSizeMbDefault = driveSizeMbDefault
	this.ExpandWithInstanceArray = expandWithInstanceArray
	this.StorageType = storageType
	this.UpdatedTimestamp = updatedTimestamp
	this.Id = id
	this.Revision = revision
	this.ClusterRoleGroup = clusterRoleGroup
	this.ServiceStatus = serviceStatus
	this.AllocationAffinity = allocationAffinity
	this.Config = config
	this.CreatedTimestamp = createdTimestamp
	return &this
}

// NewDriveGroupWithDefaults instantiates a new DriveGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriveGroupWithDefaults() *DriveGroup {
	this := DriveGroup{}
	var storageType string = "iscsi_ssd"
	this.StorageType = storageType
	var clusterRoleGroup string = "none"
	this.ClusterRoleGroup = clusterRoleGroup
	return &this
}

// GetLabel returns the Label field value
func (o *DriveGroup) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *DriveGroup) SetLabel(v string) {
	o.Label = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *DriveGroup) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *DriveGroup) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *DriveGroup) GetTemplateId() float32 {
	if o == nil || IsNil(o.TemplateId) {
		var ret float32
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetTemplateIdOk() (*float32, bool) {
	if o == nil || IsNil(o.TemplateId) {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *DriveGroup) HasTemplateId() bool {
	if o != nil && !IsNil(o.TemplateId) {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given float32 and assigns it to the TemplateId field.
func (o *DriveGroup) SetTemplateId(v float32) {
	o.TemplateId = &v
}

// GetDriveCount returns the DriveCount field value
func (o *DriveGroup) GetDriveCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DriveCount
}

// GetDriveCountOk returns a tuple with the DriveCount field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetDriveCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DriveCount, true
}

// SetDriveCount sets field value
func (o *DriveGroup) SetDriveCount(v float32) {
	o.DriveCount = v
}

// GetDriveSizeMbDefault returns the DriveSizeMbDefault field value
func (o *DriveGroup) GetDriveSizeMbDefault() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DriveSizeMbDefault
}

// GetDriveSizeMbDefaultOk returns a tuple with the DriveSizeMbDefault field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetDriveSizeMbDefaultOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DriveSizeMbDefault, true
}

// SetDriveSizeMbDefault sets field value
func (o *DriveGroup) SetDriveSizeMbDefault(v float32) {
	o.DriveSizeMbDefault = v
}

// GetInstanceArrayId returns the InstanceArrayId field value if set, zero value otherwise.
func (o *DriveGroup) GetInstanceArrayId() float32 {
	if o == nil || IsNil(o.InstanceArrayId) {
		var ret float32
		return ret
	}
	return *o.InstanceArrayId
}

// GetInstanceArrayIdOk returns a tuple with the InstanceArrayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetInstanceArrayIdOk() (*float32, bool) {
	if o == nil || IsNil(o.InstanceArrayId) {
		return nil, false
	}
	return o.InstanceArrayId, true
}

// HasInstanceArrayId returns a boolean if a field has been set.
func (o *DriveGroup) HasInstanceArrayId() bool {
	if o != nil && !IsNil(o.InstanceArrayId) {
		return true
	}

	return false
}

// SetInstanceArrayId gets a reference to the given float32 and assigns it to the InstanceArrayId field.
func (o *DriveGroup) SetInstanceArrayId(v float32) {
	o.InstanceArrayId = &v
}

// GetContainerArrayId returns the ContainerArrayId field value if set, zero value otherwise.
func (o *DriveGroup) GetContainerArrayId() float32 {
	if o == nil || IsNil(o.ContainerArrayId) {
		var ret float32
		return ret
	}
	return *o.ContainerArrayId
}

// GetContainerArrayIdOk returns a tuple with the ContainerArrayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetContainerArrayIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ContainerArrayId) {
		return nil, false
	}
	return o.ContainerArrayId, true
}

// HasContainerArrayId returns a boolean if a field has been set.
func (o *DriveGroup) HasContainerArrayId() bool {
	if o != nil && !IsNil(o.ContainerArrayId) {
		return true
	}

	return false
}

// SetContainerArrayId gets a reference to the given float32 and assigns it to the ContainerArrayId field.
func (o *DriveGroup) SetContainerArrayId(v float32) {
	o.ContainerArrayId = &v
}

// GetExpandWithInstanceArray returns the ExpandWithInstanceArray field value
func (o *DriveGroup) GetExpandWithInstanceArray() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExpandWithInstanceArray
}

// GetExpandWithInstanceArrayOk returns a tuple with the ExpandWithInstanceArray field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetExpandWithInstanceArrayOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpandWithInstanceArray, true
}

// SetExpandWithInstanceArray sets field value
func (o *DriveGroup) SetExpandWithInstanceArray(v float32) {
	o.ExpandWithInstanceArray = v
}

// GetIoLimitPolicy returns the IoLimitPolicy field value if set, zero value otherwise.
func (o *DriveGroup) GetIoLimitPolicy() string {
	if o == nil || IsNil(o.IoLimitPolicy) {
		var ret string
		return ret
	}
	return *o.IoLimitPolicy
}

// GetIoLimitPolicyOk returns a tuple with the IoLimitPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetIoLimitPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.IoLimitPolicy) {
		return nil, false
	}
	return o.IoLimitPolicy, true
}

// HasIoLimitPolicy returns a boolean if a field has been set.
func (o *DriveGroup) HasIoLimitPolicy() bool {
	if o != nil && !IsNil(o.IoLimitPolicy) {
		return true
	}

	return false
}

// SetIoLimitPolicy gets a reference to the given string and assigns it to the IoLimitPolicy field.
func (o *DriveGroup) SetIoLimitPolicy(v string) {
	o.IoLimitPolicy = &v
}

// GetStorageType returns the StorageType field value
func (o *DriveGroup) GetStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageType, true
}

// SetStorageType sets field value
func (o *DriveGroup) SetStorageType(v string) {
	o.StorageType = v
}

// GetFilesystemInfo returns the FilesystemInfo field value if set, zero value otherwise.
func (o *DriveGroup) GetFilesystemInfo() map[string]interface{} {
	if o == nil || IsNil(o.FilesystemInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.FilesystemInfo
}

// GetFilesystemInfoOk returns a tuple with the FilesystemInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetFilesystemInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FilesystemInfo) {
		return map[string]interface{}{}, false
	}
	return o.FilesystemInfo, true
}

// HasFilesystemInfo returns a boolean if a field has been set.
func (o *DriveGroup) HasFilesystemInfo() bool {
	if o != nil && !IsNil(o.FilesystemInfo) {
		return true
	}

	return false
}

// SetFilesystemInfo gets a reference to the given map[string]interface{} and assigns it to the FilesystemInfo field.
func (o *DriveGroup) SetFilesystemInfo(v map[string]interface{}) {
	o.FilesystemInfo = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *DriveGroup) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *DriveGroup) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *DriveGroup) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *DriveGroup) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *DriveGroup) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetId returns the Id field value
func (o *DriveGroup) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DriveGroup) SetId(v float32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *DriveGroup) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *DriveGroup) SetRevision(v float32) {
	o.Revision = v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *DriveGroup) GetClusterId() float32 {
	if o == nil || IsNil(o.ClusterId) {
		var ret float32
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetClusterIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *DriveGroup) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given float32 and assigns it to the ClusterId field.
func (o *DriveGroup) SetClusterId(v float32) {
	o.ClusterId = &v
}

// GetContainerClusterId returns the ContainerClusterId field value if set, zero value otherwise.
func (o *DriveGroup) GetContainerClusterId() float32 {
	if o == nil || IsNil(o.ContainerClusterId) {
		var ret float32
		return ret
	}
	return *o.ContainerClusterId
}

// GetContainerClusterIdOk returns a tuple with the ContainerClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetContainerClusterIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ContainerClusterId) {
		return nil, false
	}
	return o.ContainerClusterId, true
}

// HasContainerClusterId returns a boolean if a field has been set.
func (o *DriveGroup) HasContainerClusterId() bool {
	if o != nil && !IsNil(o.ContainerClusterId) {
		return true
	}

	return false
}

// SetContainerClusterId gets a reference to the given float32 and assigns it to the ContainerClusterId field.
func (o *DriveGroup) SetContainerClusterId(v float32) {
	o.ContainerClusterId = &v
}

// GetClusterRoleGroup returns the ClusterRoleGroup field value
func (o *DriveGroup) GetClusterRoleGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterRoleGroup
}

// GetClusterRoleGroupOk returns a tuple with the ClusterRoleGroup field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetClusterRoleGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterRoleGroup, true
}

// SetClusterRoleGroup sets field value
func (o *DriveGroup) SetClusterRoleGroup(v string) {
	o.ClusterRoleGroup = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *DriveGroup) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *DriveGroup) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value if set, zero value otherwise.
func (o *DriveGroup) GetSubdomainPermanent() string {
	if o == nil || IsNil(o.SubdomainPermanent) {
		var ret string
		return ret
	}
	return *o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil || IsNil(o.SubdomainPermanent) {
		return nil, false
	}
	return o.SubdomainPermanent, true
}

// HasSubdomainPermanent returns a boolean if a field has been set.
func (o *DriveGroup) HasSubdomainPermanent() bool {
	if o != nil && !IsNil(o.SubdomainPermanent) {
		return true
	}

	return false
}

// SetSubdomainPermanent gets a reference to the given string and assigns it to the SubdomainPermanent field.
func (o *DriveGroup) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = &v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value if set, zero value otherwise.
func (o *DriveGroup) GetDnsSubdomainId() float32 {
	if o == nil || IsNil(o.DnsSubdomainId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetDnsSubdomainIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainId) {
		return nil, false
	}
	return o.DnsSubdomainId, true
}

// HasDnsSubdomainId returns a boolean if a field has been set.
func (o *DriveGroup) HasDnsSubdomainId() bool {
	if o != nil && !IsNil(o.DnsSubdomainId) {
		return true
	}

	return false
}

// SetDnsSubdomainId gets a reference to the given float32 and assigns it to the DnsSubdomainId field.
func (o *DriveGroup) SetDnsSubdomainId(v float32) {
	o.DnsSubdomainId = &v
}

// GetDnsSubdomainPermanentId returns the DnsSubdomainPermanentId field value if set, zero value otherwise.
func (o *DriveGroup) GetDnsSubdomainPermanentId() float32 {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainPermanentId
}

// GetDnsSubdomainPermanentIdOk returns a tuple with the DnsSubdomainPermanentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetDnsSubdomainPermanentIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		return nil, false
	}
	return o.DnsSubdomainPermanentId, true
}

// HasDnsSubdomainPermanentId returns a boolean if a field has been set.
func (o *DriveGroup) HasDnsSubdomainPermanentId() bool {
	if o != nil && !IsNil(o.DnsSubdomainPermanentId) {
		return true
	}

	return false
}

// SetDnsSubdomainPermanentId gets a reference to the given float32 and assigns it to the DnsSubdomainPermanentId field.
func (o *DriveGroup) SetDnsSubdomainPermanentId(v float32) {
	o.DnsSubdomainPermanentId = &v
}

// GetAllocationAffinity returns the AllocationAffinity field value
func (o *DriveGroup) GetAllocationAffinity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AllocationAffinity
}

// GetAllocationAffinityOk returns a tuple with the AllocationAffinity field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetAllocationAffinityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocationAffinity, true
}

// SetAllocationAffinity sets field value
func (o *DriveGroup) SetAllocationAffinity(v string) {
	o.AllocationAffinity = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DriveGroup) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DriveGroup) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DriveGroup) SetTags(v []string) {
	o.Tags = v
}

// GetGuiSettings returns the GuiSettings field value if set, zero value otherwise.
func (o *DriveGroup) GetGuiSettings() GenericGUISettings {
	if o == nil || IsNil(o.GuiSettings) {
		var ret GenericGUISettings
		return ret
	}
	return *o.GuiSettings
}

// GetGuiSettingsOk returns a tuple with the GuiSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetGuiSettingsOk() (*GenericGUISettings, bool) {
	if o == nil || IsNil(o.GuiSettings) {
		return nil, false
	}
	return o.GuiSettings, true
}

// HasGuiSettings returns a boolean if a field has been set.
func (o *DriveGroup) HasGuiSettings() bool {
	if o != nil && !IsNil(o.GuiSettings) {
		return true
	}

	return false
}

// SetGuiSettings gets a reference to the given GenericGUISettings and assigns it to the GuiSettings field.
func (o *DriveGroup) SetGuiSettings(v GenericGUISettings) {
	o.GuiSettings = &v
}

// GetConfig returns the Config field value
func (o *DriveGroup) GetConfig() DriveGroupConfiguration {
	if o == nil {
		var ret DriveGroupConfiguration
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetConfigOk() (*DriveGroupConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *DriveGroup) SetConfig(v DriveGroupConfiguration) {
	o.Config = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *DriveGroup) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *DriveGroup) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *DriveGroup) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

func (o DriveGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DriveGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["infrastructureId"] = o.InfrastructureId
	if !IsNil(o.TemplateId) {
		toSerialize["templateId"] = o.TemplateId
	}
	toSerialize["driveCount"] = o.DriveCount
	toSerialize["driveSizeMbDefault"] = o.DriveSizeMbDefault
	if !IsNil(o.InstanceArrayId) {
		toSerialize["instanceArrayId"] = o.InstanceArrayId
	}
	if !IsNil(o.ContainerArrayId) {
		toSerialize["containerArrayId"] = o.ContainerArrayId
	}
	toSerialize["expandWithInstanceArray"] = o.ExpandWithInstanceArray
	if !IsNil(o.IoLimitPolicy) {
		toSerialize["ioLimitPolicy"] = o.IoLimitPolicy
	}
	toSerialize["storageType"] = o.StorageType
	if !IsNil(o.FilesystemInfo) {
		toSerialize["filesystemInfo"] = o.FilesystemInfo
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if !IsNil(o.ContainerClusterId) {
		toSerialize["containerClusterId"] = o.ContainerClusterId
	}
	toSerialize["clusterRoleGroup"] = o.ClusterRoleGroup
	toSerialize["serviceStatus"] = o.ServiceStatus
	if !IsNil(o.SubdomainPermanent) {
		toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	}
	if !IsNil(o.DnsSubdomainId) {
		toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	}
	if !IsNil(o.DnsSubdomainPermanentId) {
		toSerialize["dnsSubdomainPermanentId"] = o.DnsSubdomainPermanentId
	}
	toSerialize["allocationAffinity"] = o.AllocationAffinity
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.GuiSettings) {
		toSerialize["guiSettings"] = o.GuiSettings
	}
	toSerialize["config"] = o.Config
	toSerialize["createdTimestamp"] = o.CreatedTimestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DriveGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"infrastructureId",
		"driveCount",
		"driveSizeMbDefault",
		"expandWithInstanceArray",
		"storageType",
		"updatedTimestamp",
		"id",
		"revision",
		"clusterRoleGroup",
		"serviceStatus",
		"allocationAffinity",
		"config",
		"createdTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDriveGroup := _DriveGroup{}

	err = json.Unmarshal(data, &varDriveGroup)

	if err != nil {
		return err
	}

	*o = DriveGroup(varDriveGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "templateId")
		delete(additionalProperties, "driveCount")
		delete(additionalProperties, "driveSizeMbDefault")
		delete(additionalProperties, "instanceArrayId")
		delete(additionalProperties, "containerArrayId")
		delete(additionalProperties, "expandWithInstanceArray")
		delete(additionalProperties, "ioLimitPolicy")
		delete(additionalProperties, "storageType")
		delete(additionalProperties, "filesystemInfo")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "clusterId")
		delete(additionalProperties, "containerClusterId")
		delete(additionalProperties, "clusterRoleGroup")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "dnsSubdomainId")
		delete(additionalProperties, "dnsSubdomainPermanentId")
		delete(additionalProperties, "allocationAffinity")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "guiSettings")
		delete(additionalProperties, "config")
		delete(additionalProperties, "createdTimestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDriveGroup struct {
	value *DriveGroup
	isSet bool
}

func (v NullableDriveGroup) Get() *DriveGroup {
	return v.value
}

func (v *NullableDriveGroup) Set(val *DriveGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDriveGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDriveGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriveGroup(val *DriveGroup) *NullableDriveGroup {
	return &NullableDriveGroup{value: val, isSet: true}
}

func (v NullableDriveGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriveGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


