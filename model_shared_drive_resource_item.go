/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SharedDriveResourceItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedDriveResourceItem{}

// SharedDriveResourceItem struct for SharedDriveResourceItem
type SharedDriveResourceItem struct {
	Id float32 `json:"id"`
	Label string `json:"label"`
	StartTimestamp string `json:"startTimestamp"`
	EndTimestamp string `json:"endTimestamp"`
	MeasurementPeriod float32 `json:"measurementPeriod"`
	MeasurementUnit string `json:"measurementUnit"`
	Quantity float32 `json:"quantity"`
	SharedDriveSizeMbytes float32 `json:"sharedDriveSizeMbytes"`
	SharedDriveStorageType string `json:"sharedDriveStorageType"`
	AdditionalProperties map[string]interface{}
}

type _SharedDriveResourceItem SharedDriveResourceItem

// NewSharedDriveResourceItem instantiates a new SharedDriveResourceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedDriveResourceItem(id float32, label string, startTimestamp string, endTimestamp string, measurementPeriod float32, measurementUnit string, quantity float32, sharedDriveSizeMbytes float32, sharedDriveStorageType string) *SharedDriveResourceItem {
	this := SharedDriveResourceItem{}
	this.Id = id
	this.Label = label
	this.StartTimestamp = startTimestamp
	this.EndTimestamp = endTimestamp
	this.MeasurementPeriod = measurementPeriod
	this.MeasurementUnit = measurementUnit
	this.Quantity = quantity
	this.SharedDriveSizeMbytes = sharedDriveSizeMbytes
	this.SharedDriveStorageType = sharedDriveStorageType
	return &this
}

// NewSharedDriveResourceItemWithDefaults instantiates a new SharedDriveResourceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedDriveResourceItemWithDefaults() *SharedDriveResourceItem {
	this := SharedDriveResourceItem{}
	return &this
}

// GetId returns the Id field value
func (o *SharedDriveResourceItem) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SharedDriveResourceItem) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SharedDriveResourceItem) SetId(v float32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *SharedDriveResourceItem) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *SharedDriveResourceItem) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *SharedDriveResourceItem) SetLabel(v string) {
	o.Label = v
}

// GetStartTimestamp returns the StartTimestamp field value
func (o *SharedDriveResourceItem) GetStartTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value
// and a boolean to check if the value has been set.
func (o *SharedDriveResourceItem) GetStartTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTimestamp, true
}

// SetStartTimestamp sets field value
func (o *SharedDriveResourceItem) SetStartTimestamp(v string) {
	o.StartTimestamp = v
}

// GetEndTimestamp returns the EndTimestamp field value
func (o *SharedDriveResourceItem) GetEndTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value
// and a boolean to check if the value has been set.
func (o *SharedDriveResourceItem) GetEndTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTimestamp, true
}

// SetEndTimestamp sets field value
func (o *SharedDriveResourceItem) SetEndTimestamp(v string) {
	o.EndTimestamp = v
}

// GetMeasurementPeriod returns the MeasurementPeriod field value
func (o *SharedDriveResourceItem) GetMeasurementPeriod() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MeasurementPeriod
}

// GetMeasurementPeriodOk returns a tuple with the MeasurementPeriod field value
// and a boolean to check if the value has been set.
func (o *SharedDriveResourceItem) GetMeasurementPeriodOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementPeriod, true
}

// SetMeasurementPeriod sets field value
func (o *SharedDriveResourceItem) SetMeasurementPeriod(v float32) {
	o.MeasurementPeriod = v
}

// GetMeasurementUnit returns the MeasurementUnit field value
func (o *SharedDriveResourceItem) GetMeasurementUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeasurementUnit
}

// GetMeasurementUnitOk returns a tuple with the MeasurementUnit field value
// and a boolean to check if the value has been set.
func (o *SharedDriveResourceItem) GetMeasurementUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementUnit, true
}

// SetMeasurementUnit sets field value
func (o *SharedDriveResourceItem) SetMeasurementUnit(v string) {
	o.MeasurementUnit = v
}

// GetQuantity returns the Quantity field value
func (o *SharedDriveResourceItem) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *SharedDriveResourceItem) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *SharedDriveResourceItem) SetQuantity(v float32) {
	o.Quantity = v
}

// GetSharedDriveSizeMbytes returns the SharedDriveSizeMbytes field value
func (o *SharedDriveResourceItem) GetSharedDriveSizeMbytes() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SharedDriveSizeMbytes
}

// GetSharedDriveSizeMbytesOk returns a tuple with the SharedDriveSizeMbytes field value
// and a boolean to check if the value has been set.
func (o *SharedDriveResourceItem) GetSharedDriveSizeMbytesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SharedDriveSizeMbytes, true
}

// SetSharedDriveSizeMbytes sets field value
func (o *SharedDriveResourceItem) SetSharedDriveSizeMbytes(v float32) {
	o.SharedDriveSizeMbytes = v
}

// GetSharedDriveStorageType returns the SharedDriveStorageType field value
func (o *SharedDriveResourceItem) GetSharedDriveStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SharedDriveStorageType
}

// GetSharedDriveStorageTypeOk returns a tuple with the SharedDriveStorageType field value
// and a boolean to check if the value has been set.
func (o *SharedDriveResourceItem) GetSharedDriveStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SharedDriveStorageType, true
}

// SetSharedDriveStorageType sets field value
func (o *SharedDriveResourceItem) SetSharedDriveStorageType(v string) {
	o.SharedDriveStorageType = v
}

func (o SharedDriveResourceItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedDriveResourceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["startTimestamp"] = o.StartTimestamp
	toSerialize["endTimestamp"] = o.EndTimestamp
	toSerialize["measurementPeriod"] = o.MeasurementPeriod
	toSerialize["measurementUnit"] = o.MeasurementUnit
	toSerialize["quantity"] = o.Quantity
	toSerialize["sharedDriveSizeMbytes"] = o.SharedDriveSizeMbytes
	toSerialize["sharedDriveStorageType"] = o.SharedDriveStorageType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SharedDriveResourceItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"startTimestamp",
		"endTimestamp",
		"measurementPeriod",
		"measurementUnit",
		"quantity",
		"sharedDriveSizeMbytes",
		"sharedDriveStorageType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedDriveResourceItem := _SharedDriveResourceItem{}

	err = json.Unmarshal(data, &varSharedDriveResourceItem)

	if err != nil {
		return err
	}

	*o = SharedDriveResourceItem(varSharedDriveResourceItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "startTimestamp")
		delete(additionalProperties, "endTimestamp")
		delete(additionalProperties, "measurementPeriod")
		delete(additionalProperties, "measurementUnit")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "sharedDriveSizeMbytes")
		delete(additionalProperties, "sharedDriveStorageType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSharedDriveResourceItem struct {
	value *SharedDriveResourceItem
	isSet bool
}

func (v NullableSharedDriveResourceItem) Get() *SharedDriveResourceItem {
	return v.value
}

func (v *NullableSharedDriveResourceItem) Set(val *SharedDriveResourceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedDriveResourceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedDriveResourceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedDriveResourceItem(val *SharedDriveResourceItem) *NullableSharedDriveResourceItem {
	return &NullableSharedDriveResourceItem{value: val, isSet: true}
}

func (v NullableSharedDriveResourceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedDriveResourceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


