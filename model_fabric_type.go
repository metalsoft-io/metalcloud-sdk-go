/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// FabricType The type of network fabric
type FabricType string

// List of FabricType
const (
	FABRICTYPE_ETHERNET FabricType = "ethernet"
	FABRICTYPE_FIBRE_CHANNEL FabricType = "fibre_channel"
)

// All allowed values of FabricType enum
var AllowedFabricTypeEnumValues = []FabricType{
	"ethernet",
	"fibre_channel",
}

func (v *FabricType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FabricType(value)
	for _, existing := range AllowedFabricTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FabricType", value)
}

// NewFabricTypeFromValue returns a pointer to a valid FabricType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFabricTypeFromValue(v string) (*FabricType, error) {
	ev := FabricType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FabricType: valid values are %v", v, AllowedFabricTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FabricType) IsValid() bool {
	for _, existing := range AllowedFabricTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FabricType value
func (v FabricType) Ptr() *FabricType {
	return &v
}

type NullableFabricType struct {
	value *FabricType
	isSet bool
}

func (v NullableFabricType) Get() *FabricType {
	return v.value
}

func (v *NullableFabricType) Set(val *FabricType) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricType) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricType(val *FabricType) *NullableFabricType {
	return &NullableFabricType{value: val, isSet: true}
}

func (v NullableFabricType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

