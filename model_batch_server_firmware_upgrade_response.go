/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the BatchServerFirmwareUpgradeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchServerFirmwareUpgradeResponse{}

// BatchServerFirmwareUpgradeResponse struct for BatchServerFirmwareUpgradeResponse
type BatchServerFirmwareUpgradeResponse struct {
	// The job information for the successful firmware upgrade of a server.
	Successful map[string]JobInfo `json:"successful"`
	// The error message for the failed firmware upgrade of a server.
	Failed map[string]interface{} `json:"failed"`
	AdditionalProperties map[string]interface{}
}

type _BatchServerFirmwareUpgradeResponse BatchServerFirmwareUpgradeResponse

// NewBatchServerFirmwareUpgradeResponse instantiates a new BatchServerFirmwareUpgradeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchServerFirmwareUpgradeResponse(successful map[string]JobInfo, failed map[string]interface{}) *BatchServerFirmwareUpgradeResponse {
	this := BatchServerFirmwareUpgradeResponse{}
	this.Successful = successful
	this.Failed = failed
	return &this
}

// NewBatchServerFirmwareUpgradeResponseWithDefaults instantiates a new BatchServerFirmwareUpgradeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchServerFirmwareUpgradeResponseWithDefaults() *BatchServerFirmwareUpgradeResponse {
	this := BatchServerFirmwareUpgradeResponse{}
	return &this
}

// GetSuccessful returns the Successful field value
func (o *BatchServerFirmwareUpgradeResponse) GetSuccessful() map[string]JobInfo {
	if o == nil {
		var ret map[string]JobInfo
		return ret
	}

	return o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value
// and a boolean to check if the value has been set.
func (o *BatchServerFirmwareUpgradeResponse) GetSuccessfulOk() (*map[string]JobInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Successful, true
}

// SetSuccessful sets field value
func (o *BatchServerFirmwareUpgradeResponse) SetSuccessful(v map[string]JobInfo) {
	o.Successful = v
}

// GetFailed returns the Failed field value
func (o *BatchServerFirmwareUpgradeResponse) GetFailed() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value
// and a boolean to check if the value has been set.
func (o *BatchServerFirmwareUpgradeResponse) GetFailedOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Failed, true
}

// SetFailed sets field value
func (o *BatchServerFirmwareUpgradeResponse) SetFailed(v map[string]interface{}) {
	o.Failed = v
}

func (o BatchServerFirmwareUpgradeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchServerFirmwareUpgradeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["successful"] = o.Successful
	toSerialize["failed"] = o.Failed

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BatchServerFirmwareUpgradeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"successful",
		"failed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchServerFirmwareUpgradeResponse := _BatchServerFirmwareUpgradeResponse{}

	err = json.Unmarshal(data, &varBatchServerFirmwareUpgradeResponse)

	if err != nil {
		return err
	}

	*o = BatchServerFirmwareUpgradeResponse(varBatchServerFirmwareUpgradeResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "successful")
		delete(additionalProperties, "failed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBatchServerFirmwareUpgradeResponse struct {
	value *BatchServerFirmwareUpgradeResponse
	isSet bool
}

func (v NullableBatchServerFirmwareUpgradeResponse) Get() *BatchServerFirmwareUpgradeResponse {
	return v.value
}

func (v *NullableBatchServerFirmwareUpgradeResponse) Set(val *BatchServerFirmwareUpgradeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchServerFirmwareUpgradeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchServerFirmwareUpgradeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchServerFirmwareUpgradeResponse(val *BatchServerFirmwareUpgradeResponse) *NullableBatchServerFirmwareUpgradeResponse {
	return &NullableBatchServerFirmwareUpgradeResponse{value: val, isSet: true}
}

func (v NullableBatchServerFirmwareUpgradeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchServerFirmwareUpgradeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


