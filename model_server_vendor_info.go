/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ServerVendorInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerVendorInfo{}

// ServerVendorInfo struct for ServerVendorInfo
type ServerVendorInfo struct {
	Management *string `json:"management,omitempty"`
	// The version of the server vendor.
	Version *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerVendorInfo ServerVendorInfo

// NewServerVendorInfo instantiates a new ServerVendorInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerVendorInfo() *ServerVendorInfo {
	this := ServerVendorInfo{}
	return &this
}

// NewServerVendorInfoWithDefaults instantiates a new ServerVendorInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerVendorInfoWithDefaults() *ServerVendorInfo {
	this := ServerVendorInfo{}
	return &this
}

// GetManagement returns the Management field value if set, zero value otherwise.
func (o *ServerVendorInfo) GetManagement() string {
	if o == nil || IsNil(o.Management) {
		var ret string
		return ret
	}
	return *o.Management
}

// GetManagementOk returns a tuple with the Management field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerVendorInfo) GetManagementOk() (*string, bool) {
	if o == nil || IsNil(o.Management) {
		return nil, false
	}
	return o.Management, true
}

// HasManagement returns a boolean if a field has been set.
func (o *ServerVendorInfo) HasManagement() bool {
	if o != nil && !IsNil(o.Management) {
		return true
	}

	return false
}

// SetManagement gets a reference to the given string and assigns it to the Management field.
func (o *ServerVendorInfo) SetManagement(v string) {
	o.Management = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ServerVendorInfo) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerVendorInfo) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ServerVendorInfo) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ServerVendorInfo) SetVersion(v string) {
	o.Version = &v
}

func (o ServerVendorInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerVendorInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Management) {
		toSerialize["management"] = o.Management
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerVendorInfo) UnmarshalJSON(data []byte) (err error) {
	varServerVendorInfo := _ServerVendorInfo{}

	err = json.Unmarshal(data, &varServerVendorInfo)

	if err != nil {
		return err
	}

	*o = ServerVendorInfo(varServerVendorInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "management")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerVendorInfo struct {
	value *ServerVendorInfo
	isSet bool
}

func (v NullableServerVendorInfo) Get() *ServerVendorInfo {
	return v.value
}

func (v *NullableServerVendorInfo) Set(val *ServerVendorInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerVendorInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerVendorInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerVendorInfo(val *ServerVendorInfo) *NullableServerVendorInfo {
	return &NullableServerVendorInfo{value: val, isSet: true}
}

func (v NullableServerVendorInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerVendorInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


