/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkDeviceDefaultSecrets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDeviceDefaultSecrets{}

// NetworkDeviceDefaultSecrets struct for NetworkDeviceDefaultSecrets
type NetworkDeviceDefaultSecrets struct {
	// The ID of the network device default secrets
	Id float32 `json:"id"`
	// The site ID of the network device default secrets
	SiteId float32 `json:"siteId"`
	// The MAC address or serial number of the network device
	MacAddressOrSerialNumber string `json:"macAddressOrSerialNumber"`
	// The name of the secret
	SecretName string `json:"secretName"`
	// The encrypted value of the secret
	SecretValueEncrypted string `json:"secretValueEncrypted"`
	// The timestamp when the secret was created
	CreatedTimestamp string `json:"createdTimestamp"`
	// The timestamp when the secret was updated
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkDeviceDefaultSecrets NetworkDeviceDefaultSecrets

// NewNetworkDeviceDefaultSecrets instantiates a new NetworkDeviceDefaultSecrets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDeviceDefaultSecrets(id float32, siteId float32, macAddressOrSerialNumber string, secretName string, secretValueEncrypted string, createdTimestamp string, updatedTimestamp string) *NetworkDeviceDefaultSecrets {
	this := NetworkDeviceDefaultSecrets{}
	this.Id = id
	this.SiteId = siteId
	this.MacAddressOrSerialNumber = macAddressOrSerialNumber
	this.SecretName = secretName
	this.SecretValueEncrypted = secretValueEncrypted
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	return &this
}

// NewNetworkDeviceDefaultSecretsWithDefaults instantiates a new NetworkDeviceDefaultSecrets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDeviceDefaultSecretsWithDefaults() *NetworkDeviceDefaultSecrets {
	this := NetworkDeviceDefaultSecrets{}
	return &this
}

// GetId returns the Id field value
func (o *NetworkDeviceDefaultSecrets) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceDefaultSecrets) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NetworkDeviceDefaultSecrets) SetId(v float32) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *NetworkDeviceDefaultSecrets) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceDefaultSecrets) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *NetworkDeviceDefaultSecrets) SetSiteId(v float32) {
	o.SiteId = v
}

// GetMacAddressOrSerialNumber returns the MacAddressOrSerialNumber field value
func (o *NetworkDeviceDefaultSecrets) GetMacAddressOrSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MacAddressOrSerialNumber
}

// GetMacAddressOrSerialNumberOk returns a tuple with the MacAddressOrSerialNumber field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceDefaultSecrets) GetMacAddressOrSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MacAddressOrSerialNumber, true
}

// SetMacAddressOrSerialNumber sets field value
func (o *NetworkDeviceDefaultSecrets) SetMacAddressOrSerialNumber(v string) {
	o.MacAddressOrSerialNumber = v
}

// GetSecretName returns the SecretName field value
func (o *NetworkDeviceDefaultSecrets) GetSecretName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretName
}

// GetSecretNameOk returns a tuple with the SecretName field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceDefaultSecrets) GetSecretNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretName, true
}

// SetSecretName sets field value
func (o *NetworkDeviceDefaultSecrets) SetSecretName(v string) {
	o.SecretName = v
}

// GetSecretValueEncrypted returns the SecretValueEncrypted field value
func (o *NetworkDeviceDefaultSecrets) GetSecretValueEncrypted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretValueEncrypted
}

// GetSecretValueEncryptedOk returns a tuple with the SecretValueEncrypted field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceDefaultSecrets) GetSecretValueEncryptedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretValueEncrypted, true
}

// SetSecretValueEncrypted sets field value
func (o *NetworkDeviceDefaultSecrets) SetSecretValueEncrypted(v string) {
	o.SecretValueEncrypted = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *NetworkDeviceDefaultSecrets) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceDefaultSecrets) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *NetworkDeviceDefaultSecrets) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *NetworkDeviceDefaultSecrets) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceDefaultSecrets) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *NetworkDeviceDefaultSecrets) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NetworkDeviceDefaultSecrets) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceDefaultSecrets) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NetworkDeviceDefaultSecrets) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *NetworkDeviceDefaultSecrets) SetLinks(v []Link) {
	o.Links = v
}

func (o NetworkDeviceDefaultSecrets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDeviceDefaultSecrets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["siteId"] = o.SiteId
	toSerialize["macAddressOrSerialNumber"] = o.MacAddressOrSerialNumber
	toSerialize["secretName"] = o.SecretName
	toSerialize["secretValueEncrypted"] = o.SecretValueEncrypted
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkDeviceDefaultSecrets) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"siteId",
		"macAddressOrSerialNumber",
		"secretName",
		"secretValueEncrypted",
		"createdTimestamp",
		"updatedTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkDeviceDefaultSecrets := _NetworkDeviceDefaultSecrets{}

	err = json.Unmarshal(data, &varNetworkDeviceDefaultSecrets)

	if err != nil {
		return err
	}

	*o = NetworkDeviceDefaultSecrets(varNetworkDeviceDefaultSecrets)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "macAddressOrSerialNumber")
		delete(additionalProperties, "secretName")
		delete(additionalProperties, "secretValueEncrypted")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkDeviceDefaultSecrets struct {
	value *NetworkDeviceDefaultSecrets
	isSet bool
}

func (v NullableNetworkDeviceDefaultSecrets) Get() *NetworkDeviceDefaultSecrets {
	return v.value
}

func (v *NullableNetworkDeviceDefaultSecrets) Set(val *NetworkDeviceDefaultSecrets) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDeviceDefaultSecrets) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDeviceDefaultSecrets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDeviceDefaultSecrets(val *NetworkDeviceDefaultSecrets) *NullableNetworkDeviceDefaultSecrets {
	return &NullableNetworkDeviceDefaultSecrets{value: val, isSet: true}
}

func (v NullableNetworkDeviceDefaultSecrets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDeviceDefaultSecrets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


