/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateVMType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVMType{}

// UpdateVMType struct for UpdateVMType
type UpdateVMType struct {
	// Display name of the VM Pool type
	DisplayName *string `json:"displayName,omitempty"`
	// Label of the VM Pool type
	Label *string `json:"label,omitempty"`
	// Flag to indicate if the VM Pool is experimental. 1 for true, 0 for false. Default is 0.
	IsExperimental *float32 `json:"isExperimental,omitempty"`
	// Tags for the VM Type.
	Tags []string `json:"tags,omitempty"`
	// Flag to indicate if the VM Pool is for unmanaged VMs only. 1 for true, 0 for false. Default is 0.
	ForUnmanagedVMsOnly *float32 `json:"forUnmanagedVMsOnly,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateVMType UpdateVMType

// NewUpdateVMType instantiates a new UpdateVMType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVMType() *UpdateVMType {
	this := UpdateVMType{}
	return &this
}

// NewUpdateVMTypeWithDefaults instantiates a new UpdateVMType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVMTypeWithDefaults() *UpdateVMType {
	this := UpdateVMType{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UpdateVMType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UpdateVMType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UpdateVMType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateVMType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateVMType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateVMType) SetLabel(v string) {
	o.Label = &v
}

// GetIsExperimental returns the IsExperimental field value if set, zero value otherwise.
func (o *UpdateVMType) GetIsExperimental() float32 {
	if o == nil || IsNil(o.IsExperimental) {
		var ret float32
		return ret
	}
	return *o.IsExperimental
}

// GetIsExperimentalOk returns a tuple with the IsExperimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMType) GetIsExperimentalOk() (*float32, bool) {
	if o == nil || IsNil(o.IsExperimental) {
		return nil, false
	}
	return o.IsExperimental, true
}

// HasIsExperimental returns a boolean if a field has been set.
func (o *UpdateVMType) HasIsExperimental() bool {
	if o != nil && !IsNil(o.IsExperimental) {
		return true
	}

	return false
}

// SetIsExperimental gets a reference to the given float32 and assigns it to the IsExperimental field.
func (o *UpdateVMType) SetIsExperimental(v float32) {
	o.IsExperimental = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateVMType) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMType) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateVMType) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateVMType) SetTags(v []string) {
	o.Tags = v
}

// GetForUnmanagedVMsOnly returns the ForUnmanagedVMsOnly field value if set, zero value otherwise.
func (o *UpdateVMType) GetForUnmanagedVMsOnly() float32 {
	if o == nil || IsNil(o.ForUnmanagedVMsOnly) {
		var ret float32
		return ret
	}
	return *o.ForUnmanagedVMsOnly
}

// GetForUnmanagedVMsOnlyOk returns a tuple with the ForUnmanagedVMsOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMType) GetForUnmanagedVMsOnlyOk() (*float32, bool) {
	if o == nil || IsNil(o.ForUnmanagedVMsOnly) {
		return nil, false
	}
	return o.ForUnmanagedVMsOnly, true
}

// HasForUnmanagedVMsOnly returns a boolean if a field has been set.
func (o *UpdateVMType) HasForUnmanagedVMsOnly() bool {
	if o != nil && !IsNil(o.ForUnmanagedVMsOnly) {
		return true
	}

	return false
}

// SetForUnmanagedVMsOnly gets a reference to the given float32 and assigns it to the ForUnmanagedVMsOnly field.
func (o *UpdateVMType) SetForUnmanagedVMsOnly(v float32) {
	o.ForUnmanagedVMsOnly = &v
}

func (o UpdateVMType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVMType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.IsExperimental) {
		toSerialize["isExperimental"] = o.IsExperimental
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ForUnmanagedVMsOnly) {
		toSerialize["forUnmanagedVMsOnly"] = o.ForUnmanagedVMsOnly
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateVMType) UnmarshalJSON(data []byte) (err error) {
	varUpdateVMType := _UpdateVMType{}

	err = json.Unmarshal(data, &varUpdateVMType)

	if err != nil {
		return err
	}

	*o = UpdateVMType(varUpdateVMType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "label")
		delete(additionalProperties, "isExperimental")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "forUnmanagedVMsOnly")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateVMType struct {
	value *UpdateVMType
	isSet bool
}

func (v NullableUpdateVMType) Get() *UpdateVMType {
	return v.value
}

func (v *NullableUpdateVMType) Set(val *UpdateVMType) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVMType) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVMType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVMType(val *UpdateVMType) *NullableUpdateVMType {
	return &NullableUpdateVMType{value: val, isSet: true}
}

func (v NullableUpdateVMType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVMType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


