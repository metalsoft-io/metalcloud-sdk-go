/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// LogicalNetworkProfile1DataItem - struct for LogicalNetworkProfile1DataItem
type LogicalNetworkProfile1DataItem struct {
	VlanLogicalNetworkProfile *VlanLogicalNetworkProfile
	VxlanLogicalNetworkProfile *VxlanLogicalNetworkProfile
}

// VlanLogicalNetworkProfileAsLogicalNetworkProfile1DataItem is a convenience function that returns VlanLogicalNetworkProfile wrapped in LogicalNetworkProfile1DataItem
func VlanLogicalNetworkProfileAsLogicalNetworkProfile1DataItem(v *VlanLogicalNetworkProfile) LogicalNetworkProfile1DataItem {
	return LogicalNetworkProfile1DataItem{
		VlanLogicalNetworkProfile: v,
	}
}

// VxlanLogicalNetworkProfileAsLogicalNetworkProfile1DataItem is a convenience function that returns VxlanLogicalNetworkProfile wrapped in LogicalNetworkProfile1DataItem
func VxlanLogicalNetworkProfileAsLogicalNetworkProfile1DataItem(v *VxlanLogicalNetworkProfile) LogicalNetworkProfile1DataItem {
	return LogicalNetworkProfile1DataItem{
		VxlanLogicalNetworkProfile: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LogicalNetworkProfile1DataItem) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'vlan'
	if jsonDict["kind"] == "vlan" {
		// try to unmarshal JSON data into VlanLogicalNetworkProfile
		err = json.Unmarshal(data, &dst.VlanLogicalNetworkProfile)
		if err == nil {
			return nil // data stored in dst.VlanLogicalNetworkProfile, return on the first match
		} else {
			dst.VlanLogicalNetworkProfile = nil
			return fmt.Errorf("failed to unmarshal LogicalNetworkProfile1DataItem as VlanLogicalNetworkProfile: %s", err.Error())
		}
	}

	// check if the discriminator value is 'vxlan'
	if jsonDict["kind"] == "vxlan" {
		// try to unmarshal JSON data into VxlanLogicalNetworkProfile
		err = json.Unmarshal(data, &dst.VxlanLogicalNetworkProfile)
		if err == nil {
			return nil // data stored in dst.VxlanLogicalNetworkProfile, return on the first match
		} else {
			dst.VxlanLogicalNetworkProfile = nil
			return fmt.Errorf("failed to unmarshal LogicalNetworkProfile1DataItem as VxlanLogicalNetworkProfile: %s", err.Error())
		}
	}

	// check if the discriminator value is 'VlanLogicalNetworkProfile'
	if jsonDict["kind"] == "VlanLogicalNetworkProfile" {
		// try to unmarshal JSON data into VlanLogicalNetworkProfile
		err = json.Unmarshal(data, &dst.VlanLogicalNetworkProfile)
		if err == nil {
			return nil // data stored in dst.VlanLogicalNetworkProfile, return on the first match
		} else {
			dst.VlanLogicalNetworkProfile = nil
			return fmt.Errorf("failed to unmarshal LogicalNetworkProfile1DataItem as VlanLogicalNetworkProfile: %s", err.Error())
		}
	}

	// check if the discriminator value is 'VxlanLogicalNetworkProfile'
	if jsonDict["kind"] == "VxlanLogicalNetworkProfile" {
		// try to unmarshal JSON data into VxlanLogicalNetworkProfile
		err = json.Unmarshal(data, &dst.VxlanLogicalNetworkProfile)
		if err == nil {
			return nil // data stored in dst.VxlanLogicalNetworkProfile, return on the first match
		} else {
			dst.VxlanLogicalNetworkProfile = nil
			return fmt.Errorf("failed to unmarshal LogicalNetworkProfile1DataItem as VxlanLogicalNetworkProfile: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LogicalNetworkProfile1DataItem) MarshalJSON() ([]byte, error) {
	if src.VlanLogicalNetworkProfile != nil {
		return json.Marshal(&src.VlanLogicalNetworkProfile)
	}

	if src.VxlanLogicalNetworkProfile != nil {
		return json.Marshal(&src.VxlanLogicalNetworkProfile)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LogicalNetworkProfile1DataItem) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VlanLogicalNetworkProfile != nil {
		return obj.VlanLogicalNetworkProfile
	}

	if obj.VxlanLogicalNetworkProfile != nil {
		return obj.VxlanLogicalNetworkProfile
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj LogicalNetworkProfile1DataItem) GetActualInstanceValue() (interface{}) {
	if obj.VlanLogicalNetworkProfile != nil {
		return *obj.VlanLogicalNetworkProfile
	}

	if obj.VxlanLogicalNetworkProfile != nil {
		return *obj.VxlanLogicalNetworkProfile
	}

	// all schemas are nil
	return nil
}

type NullableLogicalNetworkProfile1DataItem struct {
	value *LogicalNetworkProfile1DataItem
	isSet bool
}

func (v NullableLogicalNetworkProfile1DataItem) Get() *LogicalNetworkProfile1DataItem {
	return v.value
}

func (v *NullableLogicalNetworkProfile1DataItem) Set(val *LogicalNetworkProfile1DataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalNetworkProfile1DataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalNetworkProfile1DataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalNetworkProfile1DataItem(val *LogicalNetworkProfile1DataItem) *NullableLogicalNetworkProfile1DataItem {
	return &NullableLogicalNetworkProfile1DataItem{value: val, isSet: true}
}

func (v NullableLogicalNetworkProfile1DataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalNetworkProfile1DataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


