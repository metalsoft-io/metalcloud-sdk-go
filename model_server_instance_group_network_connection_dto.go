/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceGroupNetworkConnectionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceGroupNetworkConnectionDto{}

// ServerInstanceGroupNetworkConnectionDto struct for ServerInstanceGroupNetworkConnectionDto
type ServerInstanceGroupNetworkConnectionDto struct {
	// Whether the logical network is tagged.
	Tagged bool `json:"tagged"`
	// The access mode of the network endpoint group
	AccessMode string `json:"accessMode"`
	// The redundancy configuration
	Redundancy NullableRedundancyConfig `json:"redundancy,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	// The network connection ID.
	Id string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceGroupNetworkConnectionDto ServerInstanceGroupNetworkConnectionDto

// NewServerInstanceGroupNetworkConnectionDto instantiates a new ServerInstanceGroupNetworkConnectionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceGroupNetworkConnectionDto(tagged bool, accessMode string, id string) *ServerInstanceGroupNetworkConnectionDto {
	this := ServerInstanceGroupNetworkConnectionDto{}
	this.Tagged = tagged
	this.AccessMode = accessMode
	this.Id = id
	return &this
}

// NewServerInstanceGroupNetworkConnectionDtoWithDefaults instantiates a new ServerInstanceGroupNetworkConnectionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceGroupNetworkConnectionDtoWithDefaults() *ServerInstanceGroupNetworkConnectionDto {
	this := ServerInstanceGroupNetworkConnectionDto{}
	return &this
}

// GetTagged returns the Tagged field value
func (o *ServerInstanceGroupNetworkConnectionDto) GetTagged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Tagged
}

// GetTaggedOk returns a tuple with the Tagged field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupNetworkConnectionDto) GetTaggedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tagged, true
}

// SetTagged sets field value
func (o *ServerInstanceGroupNetworkConnectionDto) SetTagged(v bool) {
	o.Tagged = v
}

// GetAccessMode returns the AccessMode field value
func (o *ServerInstanceGroupNetworkConnectionDto) GetAccessMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessMode
}

// GetAccessModeOk returns a tuple with the AccessMode field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupNetworkConnectionDto) GetAccessModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessMode, true
}

// SetAccessMode sets field value
func (o *ServerInstanceGroupNetworkConnectionDto) SetAccessMode(v string) {
	o.AccessMode = v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerInstanceGroupNetworkConnectionDto) GetRedundancy() RedundancyConfig {
	if o == nil || IsNil(o.Redundancy.Get()) {
		var ret RedundancyConfig
		return ret
	}
	return *o.Redundancy.Get()
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerInstanceGroupNetworkConnectionDto) GetRedundancyOk() (*RedundancyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Redundancy.Get(), o.Redundancy.IsSet()
}

// HasRedundancy returns a boolean if a field has been set.
func (o *ServerInstanceGroupNetworkConnectionDto) HasRedundancy() bool {
	if o != nil && o.Redundancy.IsSet() {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given NullableRedundancyConfig and assigns it to the Redundancy field.
func (o *ServerInstanceGroupNetworkConnectionDto) SetRedundancy(v RedundancyConfig) {
	o.Redundancy.Set(&v)
}
// SetRedundancyNil sets the value for Redundancy to be an explicit nil
func (o *ServerInstanceGroupNetworkConnectionDto) SetRedundancyNil() {
	o.Redundancy.Set(nil)
}

// UnsetRedundancy ensures that no value is present for Redundancy, not even an explicit nil
func (o *ServerInstanceGroupNetworkConnectionDto) UnsetRedundancy() {
	o.Redundancy.Unset()
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ServerInstanceGroupNetworkConnectionDto) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupNetworkConnectionDto) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ServerInstanceGroupNetworkConnectionDto) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ServerInstanceGroupNetworkConnectionDto) SetLinks(v []Link) {
	o.Links = v
}

// GetId returns the Id field value
func (o *ServerInstanceGroupNetworkConnectionDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupNetworkConnectionDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerInstanceGroupNetworkConnectionDto) SetId(v string) {
	o.Id = v
}

func (o ServerInstanceGroupNetworkConnectionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceGroupNetworkConnectionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tagged"] = o.Tagged
	toSerialize["accessMode"] = o.AccessMode
	if o.Redundancy.IsSet() {
		toSerialize["redundancy"] = o.Redundancy.Get()
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceGroupNetworkConnectionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tagged",
		"accessMode",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceGroupNetworkConnectionDto := _ServerInstanceGroupNetworkConnectionDto{}

	err = json.Unmarshal(data, &varServerInstanceGroupNetworkConnectionDto)

	if err != nil {
		return err
	}

	*o = ServerInstanceGroupNetworkConnectionDto(varServerInstanceGroupNetworkConnectionDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tagged")
		delete(additionalProperties, "accessMode")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "links")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceGroupNetworkConnectionDto struct {
	value *ServerInstanceGroupNetworkConnectionDto
	isSet bool
}

func (v NullableServerInstanceGroupNetworkConnectionDto) Get() *ServerInstanceGroupNetworkConnectionDto {
	return v.value
}

func (v *NullableServerInstanceGroupNetworkConnectionDto) Set(val *ServerInstanceGroupNetworkConnectionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceGroupNetworkConnectionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceGroupNetworkConnectionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceGroupNetworkConnectionDto(val *ServerInstanceGroupNetworkConnectionDto) *NullableServerInstanceGroupNetworkConnectionDto {
	return &NullableServerInstanceGroupNetworkConnectionDto{value: val, isSet: true}
}

func (v NullableServerInstanceGroupNetworkConnectionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceGroupNetworkConnectionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


