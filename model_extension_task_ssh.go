/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtensionTaskSsh type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionTaskSsh{}

// ExtensionTaskSsh struct for ExtensionTaskSsh
type ExtensionTaskSsh struct {
	// Host to execute the SSH command on.
	Host string `json:"host"`
	// Port to connect to the host via SSH.
	Port int32 `json:"port"`
	// Username for SSH connection.
	Username *string `json:"username,omitempty"`
	// Password for SSH connection.
	Password *string `json:"password,omitempty"`
	// Timeout for the SSH command execution in seconds.
	Timeout int32 `json:"timeout"`
	// Command template to execute via SSH.
	CommandTemplate string `json:"commandTemplate"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionTaskSsh ExtensionTaskSsh

// NewExtensionTaskSsh instantiates a new ExtensionTaskSsh object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionTaskSsh(host string, port int32, timeout int32, commandTemplate string) *ExtensionTaskSsh {
	this := ExtensionTaskSsh{}
	this.Host = host
	this.Port = port
	this.Timeout = timeout
	this.CommandTemplate = commandTemplate
	return &this
}

// NewExtensionTaskSshWithDefaults instantiates a new ExtensionTaskSsh object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionTaskSshWithDefaults() *ExtensionTaskSsh {
	this := ExtensionTaskSsh{}
	return &this
}

// GetHost returns the Host field value
func (o *ExtensionTaskSsh) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *ExtensionTaskSsh) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *ExtensionTaskSsh) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *ExtensionTaskSsh) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *ExtensionTaskSsh) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *ExtensionTaskSsh) SetPort(v int32) {
	o.Port = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ExtensionTaskSsh) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionTaskSsh) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ExtensionTaskSsh) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ExtensionTaskSsh) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ExtensionTaskSsh) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionTaskSsh) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ExtensionTaskSsh) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ExtensionTaskSsh) SetPassword(v string) {
	o.Password = &v
}

// GetTimeout returns the Timeout field value
func (o *ExtensionTaskSsh) GetTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *ExtensionTaskSsh) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *ExtensionTaskSsh) SetTimeout(v int32) {
	o.Timeout = v
}

// GetCommandTemplate returns the CommandTemplate field value
func (o *ExtensionTaskSsh) GetCommandTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommandTemplate
}

// GetCommandTemplateOk returns a tuple with the CommandTemplate field value
// and a boolean to check if the value has been set.
func (o *ExtensionTaskSsh) GetCommandTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandTemplate, true
}

// SetCommandTemplate sets field value
func (o *ExtensionTaskSsh) SetCommandTemplate(v string) {
	o.CommandTemplate = v
}

func (o ExtensionTaskSsh) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionTaskSsh) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["timeout"] = o.Timeout
	toSerialize["commandTemplate"] = o.CommandTemplate

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionTaskSsh) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"port",
		"timeout",
		"commandTemplate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionTaskSsh := _ExtensionTaskSsh{}

	err = json.Unmarshal(data, &varExtensionTaskSsh)

	if err != nil {
		return err
	}

	*o = ExtensionTaskSsh(varExtensionTaskSsh)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "host")
		delete(additionalProperties, "port")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "commandTemplate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionTaskSsh struct {
	value *ExtensionTaskSsh
	isSet bool
}

func (v NullableExtensionTaskSsh) Get() *ExtensionTaskSsh {
	return v.value
}

func (v *NullableExtensionTaskSsh) Set(val *ExtensionTaskSsh) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionTaskSsh) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionTaskSsh) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionTaskSsh(val *ExtensionTaskSsh) *NullableExtensionTaskSsh {
	return &NullableExtensionTaskSsh{value: val, isSet: true}
}

func (v NullableExtensionTaskSsh) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionTaskSsh) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


