/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtensionSharedDrive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionSharedDrive{}

// ExtensionSharedDrive struct for ExtensionSharedDrive
type ExtensionSharedDrive struct {
	// Label of the shared drive array.
	Label string `json:"label"`
	// Size of the shared drive array in GB..
	SizeGb float32 `json:"sizeGb"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionSharedDrive ExtensionSharedDrive

// NewExtensionSharedDrive instantiates a new ExtensionSharedDrive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionSharedDrive(label string, sizeGb float32) *ExtensionSharedDrive {
	this := ExtensionSharedDrive{}
	this.Label = label
	this.SizeGb = sizeGb
	return &this
}

// NewExtensionSharedDriveWithDefaults instantiates a new ExtensionSharedDrive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionSharedDriveWithDefaults() *ExtensionSharedDrive {
	this := ExtensionSharedDrive{}
	return &this
}

// GetLabel returns the Label field value
func (o *ExtensionSharedDrive) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ExtensionSharedDrive) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ExtensionSharedDrive) SetLabel(v string) {
	o.Label = v
}

// GetSizeGb returns the SizeGb field value
func (o *ExtensionSharedDrive) GetSizeGb() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SizeGb
}

// GetSizeGbOk returns a tuple with the SizeGb field value
// and a boolean to check if the value has been set.
func (o *ExtensionSharedDrive) GetSizeGbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeGb, true
}

// SetSizeGb sets field value
func (o *ExtensionSharedDrive) SetSizeGb(v float32) {
	o.SizeGb = v
}

func (o ExtensionSharedDrive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionSharedDrive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["sizeGb"] = o.SizeGb

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionSharedDrive) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"sizeGb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionSharedDrive := _ExtensionSharedDrive{}

	err = json.Unmarshal(data, &varExtensionSharedDrive)

	if err != nil {
		return err
	}

	*o = ExtensionSharedDrive(varExtensionSharedDrive)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "sizeGb")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionSharedDrive struct {
	value *ExtensionSharedDrive
	isSet bool
}

func (v NullableExtensionSharedDrive) Get() *ExtensionSharedDrive {
	return v.value
}

func (v *NullableExtensionSharedDrive) Set(val *ExtensionSharedDrive) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionSharedDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionSharedDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionSharedDrive(val *ExtensionSharedDrive) *NullableExtensionSharedDrive {
	return &NullableExtensionSharedDrive{value: val, isSet: true}
}

func (v NullableExtensionSharedDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionSharedDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


