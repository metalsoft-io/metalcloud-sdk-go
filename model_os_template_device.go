/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the OSTemplateDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSTemplateDevice{}

// OSTemplateDevice struct for OSTemplateDevice
type OSTemplateDevice struct {
	// The OS template device type
	Type string `json:"type"`
	// The hardware boot mode supported by the OS template
	BootMode string `json:"bootMode"`
	// The hardware architecture supported by the OS template
	Architecture string `json:"architecture"`
	AdditionalProperties map[string]interface{}
}

type _OSTemplateDevice OSTemplateDevice

// NewOSTemplateDevice instantiates a new OSTemplateDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSTemplateDevice(type_ string, bootMode string, architecture string) *OSTemplateDevice {
	this := OSTemplateDevice{}
	this.Type = type_
	this.BootMode = bootMode
	this.Architecture = architecture
	return &this
}

// NewOSTemplateDeviceWithDefaults instantiates a new OSTemplateDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSTemplateDeviceWithDefaults() *OSTemplateDevice {
	this := OSTemplateDevice{}
	return &this
}

// GetType returns the Type field value
func (o *OSTemplateDevice) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OSTemplateDevice) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OSTemplateDevice) SetType(v string) {
	o.Type = v
}

// GetBootMode returns the BootMode field value
func (o *OSTemplateDevice) GetBootMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BootMode
}

// GetBootModeOk returns a tuple with the BootMode field value
// and a boolean to check if the value has been set.
func (o *OSTemplateDevice) GetBootModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BootMode, true
}

// SetBootMode sets field value
func (o *OSTemplateDevice) SetBootMode(v string) {
	o.BootMode = v
}

// GetArchitecture returns the Architecture field value
func (o *OSTemplateDevice) GetArchitecture() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value
// and a boolean to check if the value has been set.
func (o *OSTemplateDevice) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Architecture, true
}

// SetArchitecture sets field value
func (o *OSTemplateDevice) SetArchitecture(v string) {
	o.Architecture = v
}

func (o OSTemplateDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSTemplateDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["bootMode"] = o.BootMode
	toSerialize["architecture"] = o.Architecture

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OSTemplateDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"bootMode",
		"architecture",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSTemplateDevice := _OSTemplateDevice{}

	err = json.Unmarshal(data, &varOSTemplateDevice)

	if err != nil {
		return err
	}

	*o = OSTemplateDevice(varOSTemplateDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "bootMode")
		delete(additionalProperties, "architecture")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOSTemplateDevice struct {
	value *OSTemplateDevice
	isSet bool
}

func (v NullableOSTemplateDevice) Get() *OSTemplateDevice {
	return v.value
}

func (v *NullableOSTemplateDevice) Set(val *OSTemplateDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableOSTemplateDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableOSTemplateDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSTemplateDevice(val *OSTemplateDevice) *NullableOSTemplateDevice {
	return &NullableOSTemplateDevice{value: val, isSet: true}
}

func (v NullableOSTemplateDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSTemplateDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


