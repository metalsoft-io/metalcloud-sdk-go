/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response - struct for CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response
type CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response struct {
	AutoIpv6SubnetAllocationStrategy *AutoIpv6SubnetAllocationStrategy
	ManualIpv6SubnetAllocationStrategy *ManualIpv6SubnetAllocationStrategy
}

// AutoIpv6SubnetAllocationStrategyAsCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response is a convenience function that returns AutoIpv6SubnetAllocationStrategy wrapped in CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response
func AutoIpv6SubnetAllocationStrategyAsCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response(v *AutoIpv6SubnetAllocationStrategy) CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response {
	return CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response{
		AutoIpv6SubnetAllocationStrategy: v,
	}
}

// ManualIpv6SubnetAllocationStrategyAsCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response is a convenience function that returns ManualIpv6SubnetAllocationStrategy wrapped in CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response
func ManualIpv6SubnetAllocationStrategyAsCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response(v *ManualIpv6SubnetAllocationStrategy) CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response {
	return CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response{
		ManualIpv6SubnetAllocationStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'AutoIpv6SubnetAllocationStrategy'
	if jsonDict["kind"] == "AutoIpv6SubnetAllocationStrategy" {
		// try to unmarshal JSON data into AutoIpv6SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.AutoIpv6SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.AutoIpv6SubnetAllocationStrategy, return on the first match
		} else {
			dst.AutoIpv6SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response as AutoIpv6SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ManualIpv6SubnetAllocationStrategy'
	if jsonDict["kind"] == "ManualIpv6SubnetAllocationStrategy" {
		// try to unmarshal JSON data into ManualIpv6SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.ManualIpv6SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.ManualIpv6SubnetAllocationStrategy, return on the first match
		} else {
			dst.ManualIpv6SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response as ManualIpv6SubnetAllocationStrategy: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) MarshalJSON() ([]byte, error) {
	if src.AutoIpv6SubnetAllocationStrategy != nil {
		return json.Marshal(&src.AutoIpv6SubnetAllocationStrategy)
	}

	if src.ManualIpv6SubnetAllocationStrategy != nil {
		return json.Marshal(&src.ManualIpv6SubnetAllocationStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AutoIpv6SubnetAllocationStrategy != nil {
		return obj.AutoIpv6SubnetAllocationStrategy
	}

	if obj.ManualIpv6SubnetAllocationStrategy != nil {
		return obj.ManualIpv6SubnetAllocationStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) GetActualInstanceValue() (interface{}) {
	if obj.AutoIpv6SubnetAllocationStrategy != nil {
		return *obj.AutoIpv6SubnetAllocationStrategy
	}

	if obj.ManualIpv6SubnetAllocationStrategy != nil {
		return *obj.ManualIpv6SubnetAllocationStrategy
	}

	// all schemas are nil
	return nil
}

type NullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response struct {
	value *CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response
	isSet bool
}

func (v NullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) Get() *CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response {
	return v.value
}

func (v *NullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) Set(val *CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response(val *CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) *NullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response {
	return &NullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response{value: val, isSet: true}
}

func (v NullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLogicalNetworkProfileIpv6SubnetAllocationStrategy201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


