/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMPoolImportVMs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMPoolImportVMs{}

// VMPoolImportVMs struct for VMPoolImportVMs
type VMPoolImportVMs struct {
	// List of VM names to import
	VmNames []string `json:"vmNames"`
	// If provided, the VMs will be added into this infrastructure
	InfrastructureId *float32 `json:"infrastructureId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VMPoolImportVMs VMPoolImportVMs

// NewVMPoolImportVMs instantiates a new VMPoolImportVMs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMPoolImportVMs(vmNames []string) *VMPoolImportVMs {
	this := VMPoolImportVMs{}
	this.VmNames = vmNames
	return &this
}

// NewVMPoolImportVMsWithDefaults instantiates a new VMPoolImportVMs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMPoolImportVMsWithDefaults() *VMPoolImportVMs {
	this := VMPoolImportVMs{}
	return &this
}

// GetVmNames returns the VmNames field value
func (o *VMPoolImportVMs) GetVmNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.VmNames
}

// GetVmNamesOk returns a tuple with the VmNames field value
// and a boolean to check if the value has been set.
func (o *VMPoolImportVMs) GetVmNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmNames, true
}

// SetVmNames sets field value
func (o *VMPoolImportVMs) SetVmNames(v []string) {
	o.VmNames = v
}

// GetInfrastructureId returns the InfrastructureId field value if set, zero value otherwise.
func (o *VMPoolImportVMs) GetInfrastructureId() float32 {
	if o == nil || IsNil(o.InfrastructureId) {
		var ret float32
		return ret
	}
	return *o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPoolImportVMs) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureId) {
		return nil, false
	}
	return o.InfrastructureId, true
}

// HasInfrastructureId returns a boolean if a field has been set.
func (o *VMPoolImportVMs) HasInfrastructureId() bool {
	if o != nil && !IsNil(o.InfrastructureId) {
		return true
	}

	return false
}

// SetInfrastructureId gets a reference to the given float32 and assigns it to the InfrastructureId field.
func (o *VMPoolImportVMs) SetInfrastructureId(v float32) {
	o.InfrastructureId = &v
}

func (o VMPoolImportVMs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMPoolImportVMs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vmNames"] = o.VmNames
	if !IsNil(o.InfrastructureId) {
		toSerialize["infrastructureId"] = o.InfrastructureId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMPoolImportVMs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vmNames",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMPoolImportVMs := _VMPoolImportVMs{}

	err = json.Unmarshal(data, &varVMPoolImportVMs)

	if err != nil {
		return err
	}

	*o = VMPoolImportVMs(varVMPoolImportVMs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vmNames")
		delete(additionalProperties, "infrastructureId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMPoolImportVMs struct {
	value *VMPoolImportVMs
	isSet bool
}

func (v NullableVMPoolImportVMs) Get() *VMPoolImportVMs {
	return v.value
}

func (v *NullableVMPoolImportVMs) Set(val *VMPoolImportVMs) {
	v.value = val
	v.isSet = true
}

func (v NullableVMPoolImportVMs) IsSet() bool {
	return v.isSet
}

func (v *NullableVMPoolImportVMs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMPoolImportVMs(val *VMPoolImportVMs) *NullableVMPoolImportVMs {
	return &NullableVMPoolImportVMs{value: val, isSet: true}
}

func (v NullableVMPoolImportVMs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMPoolImportVMs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


