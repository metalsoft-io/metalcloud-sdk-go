/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateDrive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDrive{}

// UpdateDrive struct for UpdateDrive
type UpdateDrive struct {
	// Label of the Drive.
	Label *string `json:"label,omitempty"`
	// Disk size in MB for Drive
	SizeMb *float32 `json:"sizeMb,omitempty"`
	// The IO limit policy of the Drive.
	IoLimitPolicy *string `json:"ioLimitPolicy,omitempty"`
	// Id of the Logical Network for the Drive.
	LogicalNetworkId *float32 `json:"logicalNetworkId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateDrive UpdateDrive

// NewUpdateDrive instantiates a new UpdateDrive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDrive() *UpdateDrive {
	this := UpdateDrive{}
	return &this
}

// NewUpdateDriveWithDefaults instantiates a new UpdateDrive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDriveWithDefaults() *UpdateDrive {
	this := UpdateDrive{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateDrive) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDrive) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateDrive) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateDrive) SetLabel(v string) {
	o.Label = &v
}

// GetSizeMb returns the SizeMb field value if set, zero value otherwise.
func (o *UpdateDrive) GetSizeMb() float32 {
	if o == nil || IsNil(o.SizeMb) {
		var ret float32
		return ret
	}
	return *o.SizeMb
}

// GetSizeMbOk returns a tuple with the SizeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDrive) GetSizeMbOk() (*float32, bool) {
	if o == nil || IsNil(o.SizeMb) {
		return nil, false
	}
	return o.SizeMb, true
}

// HasSizeMb returns a boolean if a field has been set.
func (o *UpdateDrive) HasSizeMb() bool {
	if o != nil && !IsNil(o.SizeMb) {
		return true
	}

	return false
}

// SetSizeMb gets a reference to the given float32 and assigns it to the SizeMb field.
func (o *UpdateDrive) SetSizeMb(v float32) {
	o.SizeMb = &v
}

// GetIoLimitPolicy returns the IoLimitPolicy field value if set, zero value otherwise.
func (o *UpdateDrive) GetIoLimitPolicy() string {
	if o == nil || IsNil(o.IoLimitPolicy) {
		var ret string
		return ret
	}
	return *o.IoLimitPolicy
}

// GetIoLimitPolicyOk returns a tuple with the IoLimitPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDrive) GetIoLimitPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.IoLimitPolicy) {
		return nil, false
	}
	return o.IoLimitPolicy, true
}

// HasIoLimitPolicy returns a boolean if a field has been set.
func (o *UpdateDrive) HasIoLimitPolicy() bool {
	if o != nil && !IsNil(o.IoLimitPolicy) {
		return true
	}

	return false
}

// SetIoLimitPolicy gets a reference to the given string and assigns it to the IoLimitPolicy field.
func (o *UpdateDrive) SetIoLimitPolicy(v string) {
	o.IoLimitPolicy = &v
}

// GetLogicalNetworkId returns the LogicalNetworkId field value if set, zero value otherwise.
func (o *UpdateDrive) GetLogicalNetworkId() float32 {
	if o == nil || IsNil(o.LogicalNetworkId) {
		var ret float32
		return ret
	}
	return *o.LogicalNetworkId
}

// GetLogicalNetworkIdOk returns a tuple with the LogicalNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDrive) GetLogicalNetworkIdOk() (*float32, bool) {
	if o == nil || IsNil(o.LogicalNetworkId) {
		return nil, false
	}
	return o.LogicalNetworkId, true
}

// HasLogicalNetworkId returns a boolean if a field has been set.
func (o *UpdateDrive) HasLogicalNetworkId() bool {
	if o != nil && !IsNil(o.LogicalNetworkId) {
		return true
	}

	return false
}

// SetLogicalNetworkId gets a reference to the given float32 and assigns it to the LogicalNetworkId field.
func (o *UpdateDrive) SetLogicalNetworkId(v float32) {
	o.LogicalNetworkId = &v
}

func (o UpdateDrive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDrive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.SizeMb) {
		toSerialize["sizeMb"] = o.SizeMb
	}
	if !IsNil(o.IoLimitPolicy) {
		toSerialize["ioLimitPolicy"] = o.IoLimitPolicy
	}
	if !IsNil(o.LogicalNetworkId) {
		toSerialize["logicalNetworkId"] = o.LogicalNetworkId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateDrive) UnmarshalJSON(data []byte) (err error) {
	varUpdateDrive := _UpdateDrive{}

	err = json.Unmarshal(data, &varUpdateDrive)

	if err != nil {
		return err
	}

	*o = UpdateDrive(varUpdateDrive)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "sizeMb")
		delete(additionalProperties, "ioLimitPolicy")
		delete(additionalProperties, "logicalNetworkId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateDrive struct {
	value *UpdateDrive
	isSet bool
}

func (v NullableUpdateDrive) Get() *UpdateDrive {
	return v.value
}

func (v *NullableUpdateDrive) Set(val *UpdateDrive) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDrive(val *UpdateDrive) *NullableUpdateDrive {
	return &NullableUpdateDrive{value: val, isSet: true}
}

func (v NullableUpdateDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


