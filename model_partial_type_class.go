/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the PartialTypeClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartialTypeClass{}

// PartialTypeClass struct for PartialTypeClass
type PartialTypeClass struct {
	// Address of the site
	Address *string `json:"address,omitempty"`
	// Latitude of the site
	Latitude *float32 `json:"latitude,omitempty"`
	// Longitude of the site
	Longitude *float32 `json:"longitude,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PartialTypeClass PartialTypeClass

// NewPartialTypeClass instantiates a new PartialTypeClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialTypeClass() *PartialTypeClass {
	this := PartialTypeClass{}
	return &this
}

// NewPartialTypeClassWithDefaults instantiates a new PartialTypeClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialTypeClassWithDefaults() *PartialTypeClass {
	this := PartialTypeClass{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *PartialTypeClass) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialTypeClass) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *PartialTypeClass) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *PartialTypeClass) SetAddress(v string) {
	o.Address = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *PartialTypeClass) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialTypeClass) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *PartialTypeClass) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *PartialTypeClass) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *PartialTypeClass) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialTypeClass) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *PartialTypeClass) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *PartialTypeClass) SetLongitude(v float32) {
	o.Longitude = &v
}

func (o PartialTypeClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartialTypeClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PartialTypeClass) UnmarshalJSON(data []byte) (err error) {
	varPartialTypeClass := _PartialTypeClass{}

	err = json.Unmarshal(data, &varPartialTypeClass)

	if err != nil {
		return err
	}

	*o = PartialTypeClass(varPartialTypeClass)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address")
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePartialTypeClass struct {
	value *PartialTypeClass
	isSet bool
}

func (v NullablePartialTypeClass) Get() *PartialTypeClass {
	return v.value
}

func (v *NullablePartialTypeClass) Set(val *PartialTypeClass) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialTypeClass) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialTypeClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialTypeClass(val *PartialTypeClass) *NullablePartialTypeClass {
	return &NullablePartialTypeClass{value: val, isSet: true}
}

func (v NullablePartialTypeClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialTypeClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


