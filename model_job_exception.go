/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the JobException type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobException{}

// JobException struct for JobException
type JobException struct {
	// Job exception Id
	ExceptionId int32 `json:"exceptionId"`
	// Job archive Id
	ArchiveId *int32 `json:"archiveId,omitempty"`
	// Job Id
	JobId *int32 `json:"jobId,omitempty"`
	// The exception that was thrown by the function
	Exception map[string]interface{} `json:"exception,omitempty"`
	// The timestamp when the exception was created
	CreatedTimestamp string `json:"createdTimestamp"`
	// Links to other resources
	Links map[string]interface{} `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _JobException JobException

// NewJobException instantiates a new JobException object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobException(exceptionId int32, createdTimestamp string, links map[string]interface{}) *JobException {
	this := JobException{}
	this.ExceptionId = exceptionId
	this.CreatedTimestamp = createdTimestamp
	this.Links = links
	return &this
}

// NewJobExceptionWithDefaults instantiates a new JobException object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobExceptionWithDefaults() *JobException {
	this := JobException{}
	return &this
}

// GetExceptionId returns the ExceptionId field value
func (o *JobException) GetExceptionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExceptionId
}

// GetExceptionIdOk returns a tuple with the ExceptionId field value
// and a boolean to check if the value has been set.
func (o *JobException) GetExceptionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExceptionId, true
}

// SetExceptionId sets field value
func (o *JobException) SetExceptionId(v int32) {
	o.ExceptionId = v
}

// GetArchiveId returns the ArchiveId field value if set, zero value otherwise.
func (o *JobException) GetArchiveId() int32 {
	if o == nil || IsNil(o.ArchiveId) {
		var ret int32
		return ret
	}
	return *o.ArchiveId
}

// GetArchiveIdOk returns a tuple with the ArchiveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobException) GetArchiveIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ArchiveId) {
		return nil, false
	}
	return o.ArchiveId, true
}

// HasArchiveId returns a boolean if a field has been set.
func (o *JobException) HasArchiveId() bool {
	if o != nil && !IsNil(o.ArchiveId) {
		return true
	}

	return false
}

// SetArchiveId gets a reference to the given int32 and assigns it to the ArchiveId field.
func (o *JobException) SetArchiveId(v int32) {
	o.ArchiveId = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *JobException) GetJobId() int32 {
	if o == nil || IsNil(o.JobId) {
		var ret int32
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobException) GetJobIdOk() (*int32, bool) {
	if o == nil || IsNil(o.JobId) {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *JobException) HasJobId() bool {
	if o != nil && !IsNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given int32 and assigns it to the JobId field.
func (o *JobException) SetJobId(v int32) {
	o.JobId = &v
}

// GetException returns the Exception field value if set, zero value otherwise.
func (o *JobException) GetException() map[string]interface{} {
	if o == nil || IsNil(o.Exception) {
		var ret map[string]interface{}
		return ret
	}
	return o.Exception
}

// GetExceptionOk returns a tuple with the Exception field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobException) GetExceptionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Exception) {
		return map[string]interface{}{}, false
	}
	return o.Exception, true
}

// HasException returns a boolean if a field has been set.
func (o *JobException) HasException() bool {
	if o != nil && !IsNil(o.Exception) {
		return true
	}

	return false
}

// SetException gets a reference to the given map[string]interface{} and assigns it to the Exception field.
func (o *JobException) SetException(v map[string]interface{}) {
	o.Exception = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *JobException) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *JobException) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *JobException) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetLinks returns the Links field value
func (o *JobException) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *JobException) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *JobException) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o JobException) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobException) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exceptionId"] = o.ExceptionId
	if !IsNil(o.ArchiveId) {
		toSerialize["archiveId"] = o.ArchiveId
	}
	if !IsNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !IsNil(o.Exception) {
		toSerialize["exception"] = o.Exception
	}
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobException) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"exceptionId",
		"createdTimestamp",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobException := _JobException{}

	err = json.Unmarshal(data, &varJobException)

	if err != nil {
		return err
	}

	*o = JobException(varJobException)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "exceptionId")
		delete(additionalProperties, "archiveId")
		delete(additionalProperties, "jobId")
		delete(additionalProperties, "exception")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobException struct {
	value *JobException
	isSet bool
}

func (v NullableJobException) Get() *JobException {
	return v.value
}

func (v *NullableJobException) Set(val *JobException) {
	v.value = val
	v.isSet = true
}

func (v NullableJobException) IsSet() bool {
	return v.isSet
}

func (v *NullableJobException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobException(val *JobException) *NullableJobException {
	return &NullableJobException{value: val, isSet: true}
}

func (v NullableJobException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


