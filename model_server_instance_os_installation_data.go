/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceOSInstallationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceOSInstallationData{}

// ServerInstanceOSInstallationData struct for ServerInstanceOSInstallationData
type ServerInstanceOSInstallationData struct {
	// The Product Instance ID.
	Id int32 `json:"id"`
	// The Product Instance label. Will be automatically generated if not provided.
	Label string `json:"label"`
	// Fully Qualified Domain Name (FQDN) for the Instance.
	Fqdn *string `json:"fqdn,omitempty"`
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// RAID profile for the Instance Interface.
	CustomStorageProfile *ServerInstanceStorageProfile `json:"customStorageProfile,omitempty"`
	// Flag to indicate if this is a VM instance
	IsVmInstance int32 `json:"isVmInstance"`
	// Flag to indicate if this is an Endpoint Instance
	IsEndpointInstance int32 `json:"isEndpointInstance"`
	// Whether to provision the DNS records for the server instance.
	ProvisionInstanceDnsRecords bool `json:"provisionInstanceDnsRecords"`
	// Custom hostname(subdomain) part of the fully qualified domain name (FQDN). If set, this will be used as the subdomain record part of the DNS record name instead of the default \"instance\". The hostname must be a valid DNS subdomain and can only contain alphanumeric characters and hyphens. This will only take effect if the property \"provisionInstanceDnsRecords\" is true. 
	Hostname *string `json:"hostname,omitempty"`
	OsCredentials *ServerInstanceOsCredentialInstallationData `json:"osCredentials,omitempty"`
	// NVMe Initiator NQN for the Instance.
	InitiatorNqn *string `json:"initiatorNqn,omitempty"`
	// iSCSI Initiator IQN for the Instance Interface.
	IscsiInitiatorIqn *string `json:"iscsiInitiatorIqn,omitempty"`
	// iSCSI Initiator Username for the Instance Interface.
	IscsiInitiatorUsername *string `json:"iscsiInitiatorUsername,omitempty"`
	// iSCSI Initiator Password for the Instance Interface.
	IscsiInitiatorPasswordEncrypted *string `json:"iscsiInitiatorPasswordEncrypted,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceOSInstallationData ServerInstanceOSInstallationData

// NewServerInstanceOSInstallationData instantiates a new ServerInstanceOSInstallationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceOSInstallationData(id int32, label string, isVmInstance int32, isEndpointInstance int32, provisionInstanceDnsRecords bool) *ServerInstanceOSInstallationData {
	this := ServerInstanceOSInstallationData{}
	this.Id = id
	this.Label = label
	this.IsVmInstance = isVmInstance
	this.IsEndpointInstance = isEndpointInstance
	this.ProvisionInstanceDnsRecords = provisionInstanceDnsRecords
	return &this
}

// NewServerInstanceOSInstallationDataWithDefaults instantiates a new ServerInstanceOSInstallationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceOSInstallationDataWithDefaults() *ServerInstanceOSInstallationData {
	this := ServerInstanceOSInstallationData{}
	return &this
}

// GetId returns the Id field value
func (o *ServerInstanceOSInstallationData) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerInstanceOSInstallationData) SetId(v int32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *ServerInstanceOSInstallationData) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ServerInstanceOSInstallationData) SetLabel(v string) {
	o.Label = v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *ServerInstanceOSInstallationData) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *ServerInstanceOSInstallationData) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *ServerInstanceOSInstallationData) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *ServerInstanceOSInstallationData) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *ServerInstanceOSInstallationData) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *ServerInstanceOSInstallationData) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetCustomStorageProfile returns the CustomStorageProfile field value if set, zero value otherwise.
func (o *ServerInstanceOSInstallationData) GetCustomStorageProfile() ServerInstanceStorageProfile {
	if o == nil || IsNil(o.CustomStorageProfile) {
		var ret ServerInstanceStorageProfile
		return ret
	}
	return *o.CustomStorageProfile
}

// GetCustomStorageProfileOk returns a tuple with the CustomStorageProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetCustomStorageProfileOk() (*ServerInstanceStorageProfile, bool) {
	if o == nil || IsNil(o.CustomStorageProfile) {
		return nil, false
	}
	return o.CustomStorageProfile, true
}

// HasCustomStorageProfile returns a boolean if a field has been set.
func (o *ServerInstanceOSInstallationData) HasCustomStorageProfile() bool {
	if o != nil && !IsNil(o.CustomStorageProfile) {
		return true
	}

	return false
}

// SetCustomStorageProfile gets a reference to the given ServerInstanceStorageProfile and assigns it to the CustomStorageProfile field.
func (o *ServerInstanceOSInstallationData) SetCustomStorageProfile(v ServerInstanceStorageProfile) {
	o.CustomStorageProfile = &v
}

// GetIsVmInstance returns the IsVmInstance field value
func (o *ServerInstanceOSInstallationData) GetIsVmInstance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IsVmInstance
}

// GetIsVmInstanceOk returns a tuple with the IsVmInstance field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetIsVmInstanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsVmInstance, true
}

// SetIsVmInstance sets field value
func (o *ServerInstanceOSInstallationData) SetIsVmInstance(v int32) {
	o.IsVmInstance = v
}

// GetIsEndpointInstance returns the IsEndpointInstance field value
func (o *ServerInstanceOSInstallationData) GetIsEndpointInstance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IsEndpointInstance
}

// GetIsEndpointInstanceOk returns a tuple with the IsEndpointInstance field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetIsEndpointInstanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEndpointInstance, true
}

// SetIsEndpointInstance sets field value
func (o *ServerInstanceOSInstallationData) SetIsEndpointInstance(v int32) {
	o.IsEndpointInstance = v
}

// GetProvisionInstanceDnsRecords returns the ProvisionInstanceDnsRecords field value
func (o *ServerInstanceOSInstallationData) GetProvisionInstanceDnsRecords() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ProvisionInstanceDnsRecords
}

// GetProvisionInstanceDnsRecordsOk returns a tuple with the ProvisionInstanceDnsRecords field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetProvisionInstanceDnsRecordsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProvisionInstanceDnsRecords, true
}

// SetProvisionInstanceDnsRecords sets field value
func (o *ServerInstanceOSInstallationData) SetProvisionInstanceDnsRecords(v bool) {
	o.ProvisionInstanceDnsRecords = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ServerInstanceOSInstallationData) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ServerInstanceOSInstallationData) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ServerInstanceOSInstallationData) SetHostname(v string) {
	o.Hostname = &v
}

// GetOsCredentials returns the OsCredentials field value if set, zero value otherwise.
func (o *ServerInstanceOSInstallationData) GetOsCredentials() ServerInstanceOsCredentialInstallationData {
	if o == nil || IsNil(o.OsCredentials) {
		var ret ServerInstanceOsCredentialInstallationData
		return ret
	}
	return *o.OsCredentials
}

// GetOsCredentialsOk returns a tuple with the OsCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetOsCredentialsOk() (*ServerInstanceOsCredentialInstallationData, bool) {
	if o == nil || IsNil(o.OsCredentials) {
		return nil, false
	}
	return o.OsCredentials, true
}

// HasOsCredentials returns a boolean if a field has been set.
func (o *ServerInstanceOSInstallationData) HasOsCredentials() bool {
	if o != nil && !IsNil(o.OsCredentials) {
		return true
	}

	return false
}

// SetOsCredentials gets a reference to the given ServerInstanceOsCredentialInstallationData and assigns it to the OsCredentials field.
func (o *ServerInstanceOSInstallationData) SetOsCredentials(v ServerInstanceOsCredentialInstallationData) {
	o.OsCredentials = &v
}

// GetInitiatorNqn returns the InitiatorNqn field value if set, zero value otherwise.
func (o *ServerInstanceOSInstallationData) GetInitiatorNqn() string {
	if o == nil || IsNil(o.InitiatorNqn) {
		var ret string
		return ret
	}
	return *o.InitiatorNqn
}

// GetInitiatorNqnOk returns a tuple with the InitiatorNqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetInitiatorNqnOk() (*string, bool) {
	if o == nil || IsNil(o.InitiatorNqn) {
		return nil, false
	}
	return o.InitiatorNqn, true
}

// HasInitiatorNqn returns a boolean if a field has been set.
func (o *ServerInstanceOSInstallationData) HasInitiatorNqn() bool {
	if o != nil && !IsNil(o.InitiatorNqn) {
		return true
	}

	return false
}

// SetInitiatorNqn gets a reference to the given string and assigns it to the InitiatorNqn field.
func (o *ServerInstanceOSInstallationData) SetInitiatorNqn(v string) {
	o.InitiatorNqn = &v
}

// GetIscsiInitiatorIqn returns the IscsiInitiatorIqn field value if set, zero value otherwise.
func (o *ServerInstanceOSInstallationData) GetIscsiInitiatorIqn() string {
	if o == nil || IsNil(o.IscsiInitiatorIqn) {
		var ret string
		return ret
	}
	return *o.IscsiInitiatorIqn
}

// GetIscsiInitiatorIqnOk returns a tuple with the IscsiInitiatorIqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetIscsiInitiatorIqnOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiInitiatorIqn) {
		return nil, false
	}
	return o.IscsiInitiatorIqn, true
}

// HasIscsiInitiatorIqn returns a boolean if a field has been set.
func (o *ServerInstanceOSInstallationData) HasIscsiInitiatorIqn() bool {
	if o != nil && !IsNil(o.IscsiInitiatorIqn) {
		return true
	}

	return false
}

// SetIscsiInitiatorIqn gets a reference to the given string and assigns it to the IscsiInitiatorIqn field.
func (o *ServerInstanceOSInstallationData) SetIscsiInitiatorIqn(v string) {
	o.IscsiInitiatorIqn = &v
}

// GetIscsiInitiatorUsername returns the IscsiInitiatorUsername field value if set, zero value otherwise.
func (o *ServerInstanceOSInstallationData) GetIscsiInitiatorUsername() string {
	if o == nil || IsNil(o.IscsiInitiatorUsername) {
		var ret string
		return ret
	}
	return *o.IscsiInitiatorUsername
}

// GetIscsiInitiatorUsernameOk returns a tuple with the IscsiInitiatorUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetIscsiInitiatorUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiInitiatorUsername) {
		return nil, false
	}
	return o.IscsiInitiatorUsername, true
}

// HasIscsiInitiatorUsername returns a boolean if a field has been set.
func (o *ServerInstanceOSInstallationData) HasIscsiInitiatorUsername() bool {
	if o != nil && !IsNil(o.IscsiInitiatorUsername) {
		return true
	}

	return false
}

// SetIscsiInitiatorUsername gets a reference to the given string and assigns it to the IscsiInitiatorUsername field.
func (o *ServerInstanceOSInstallationData) SetIscsiInitiatorUsername(v string) {
	o.IscsiInitiatorUsername = &v
}

// GetIscsiInitiatorPasswordEncrypted returns the IscsiInitiatorPasswordEncrypted field value if set, zero value otherwise.
func (o *ServerInstanceOSInstallationData) GetIscsiInitiatorPasswordEncrypted() string {
	if o == nil || IsNil(o.IscsiInitiatorPasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.IscsiInitiatorPasswordEncrypted
}

// GetIscsiInitiatorPasswordEncryptedOk returns a tuple with the IscsiInitiatorPasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceOSInstallationData) GetIscsiInitiatorPasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiInitiatorPasswordEncrypted) {
		return nil, false
	}
	return o.IscsiInitiatorPasswordEncrypted, true
}

// HasIscsiInitiatorPasswordEncrypted returns a boolean if a field has been set.
func (o *ServerInstanceOSInstallationData) HasIscsiInitiatorPasswordEncrypted() bool {
	if o != nil && !IsNil(o.IscsiInitiatorPasswordEncrypted) {
		return true
	}

	return false
}

// SetIscsiInitiatorPasswordEncrypted gets a reference to the given string and assigns it to the IscsiInitiatorPasswordEncrypted field.
func (o *ServerInstanceOSInstallationData) SetIscsiInitiatorPasswordEncrypted(v string) {
	o.IscsiInitiatorPasswordEncrypted = &v
}

func (o ServerInstanceOSInstallationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceOSInstallationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	if !IsNil(o.CustomStorageProfile) {
		toSerialize["customStorageProfile"] = o.CustomStorageProfile
	}
	toSerialize["isVmInstance"] = o.IsVmInstance
	toSerialize["isEndpointInstance"] = o.IsEndpointInstance
	toSerialize["provisionInstanceDnsRecords"] = o.ProvisionInstanceDnsRecords
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.OsCredentials) {
		toSerialize["osCredentials"] = o.OsCredentials
	}
	if !IsNil(o.InitiatorNqn) {
		toSerialize["initiatorNqn"] = o.InitiatorNqn
	}
	if !IsNil(o.IscsiInitiatorIqn) {
		toSerialize["iscsiInitiatorIqn"] = o.IscsiInitiatorIqn
	}
	if !IsNil(o.IscsiInitiatorUsername) {
		toSerialize["iscsiInitiatorUsername"] = o.IscsiInitiatorUsername
	}
	if !IsNil(o.IscsiInitiatorPasswordEncrypted) {
		toSerialize["iscsiInitiatorPasswordEncrypted"] = o.IscsiInitiatorPasswordEncrypted
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceOSInstallationData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"isVmInstance",
		"isEndpointInstance",
		"provisionInstanceDnsRecords",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceOSInstallationData := _ServerInstanceOSInstallationData{}

	err = json.Unmarshal(data, &varServerInstanceOSInstallationData)

	if err != nil {
		return err
	}

	*o = ServerInstanceOSInstallationData(varServerInstanceOSInstallationData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "fqdn")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "customStorageProfile")
		delete(additionalProperties, "isVmInstance")
		delete(additionalProperties, "isEndpointInstance")
		delete(additionalProperties, "provisionInstanceDnsRecords")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "osCredentials")
		delete(additionalProperties, "initiatorNqn")
		delete(additionalProperties, "iscsiInitiatorIqn")
		delete(additionalProperties, "iscsiInitiatorUsername")
		delete(additionalProperties, "iscsiInitiatorPasswordEncrypted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceOSInstallationData struct {
	value *ServerInstanceOSInstallationData
	isSet bool
}

func (v NullableServerInstanceOSInstallationData) Get() *ServerInstanceOSInstallationData {
	return v.value
}

func (v *NullableServerInstanceOSInstallationData) Set(val *ServerInstanceOSInstallationData) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceOSInstallationData) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceOSInstallationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceOSInstallationData(val *ServerInstanceOSInstallationData) *NullableServerInstanceOSInstallationData {
	return &NullableServerInstanceOSInstallationData{value: val, isSet: true}
}

func (v NullableServerInstanceOSInstallationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceOSInstallationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


