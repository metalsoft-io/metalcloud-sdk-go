/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerAllocationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerAllocationInfo{}

// ServerAllocationInfo struct for ServerAllocationInfo
type ServerAllocationInfo struct {
	// The id of the instance.
	InstanceId float32 `json:"instanceId"`
	// The id of the extension instance.
	ExtensionInstanceId *float32 `json:"extensionInstanceId,omitempty"`
	// The infrastructure of the instance.
	Infrastructure map[string]interface{} `json:"infrastructure"`
	// The id of the os template used by the instance.
	OsTemplateId *float32 `json:"osTemplateId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerAllocationInfo ServerAllocationInfo

// NewServerAllocationInfo instantiates a new ServerAllocationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerAllocationInfo(instanceId float32, infrastructure map[string]interface{}) *ServerAllocationInfo {
	this := ServerAllocationInfo{}
	this.InstanceId = instanceId
	this.Infrastructure = infrastructure
	return &this
}

// NewServerAllocationInfoWithDefaults instantiates a new ServerAllocationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerAllocationInfoWithDefaults() *ServerAllocationInfo {
	this := ServerAllocationInfo{}
	return &this
}

// GetInstanceId returns the InstanceId field value
func (o *ServerAllocationInfo) GetInstanceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *ServerAllocationInfo) GetInstanceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *ServerAllocationInfo) SetInstanceId(v float32) {
	o.InstanceId = v
}

// GetExtensionInstanceId returns the ExtensionInstanceId field value if set, zero value otherwise.
func (o *ServerAllocationInfo) GetExtensionInstanceId() float32 {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		var ret float32
		return ret
	}
	return *o.ExtensionInstanceId
}

// GetExtensionInstanceIdOk returns a tuple with the ExtensionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerAllocationInfo) GetExtensionInstanceIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		return nil, false
	}
	return o.ExtensionInstanceId, true
}

// HasExtensionInstanceId returns a boolean if a field has been set.
func (o *ServerAllocationInfo) HasExtensionInstanceId() bool {
	if o != nil && !IsNil(o.ExtensionInstanceId) {
		return true
	}

	return false
}

// SetExtensionInstanceId gets a reference to the given float32 and assigns it to the ExtensionInstanceId field.
func (o *ServerAllocationInfo) SetExtensionInstanceId(v float32) {
	o.ExtensionInstanceId = &v
}

// GetInfrastructure returns the Infrastructure field value
func (o *ServerAllocationInfo) GetInfrastructure() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Infrastructure
}

// GetInfrastructureOk returns a tuple with the Infrastructure field value
// and a boolean to check if the value has been set.
func (o *ServerAllocationInfo) GetInfrastructureOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Infrastructure, true
}

// SetInfrastructure sets field value
func (o *ServerAllocationInfo) SetInfrastructure(v map[string]interface{}) {
	o.Infrastructure = v
}

// GetOsTemplateId returns the OsTemplateId field value if set, zero value otherwise.
func (o *ServerAllocationInfo) GetOsTemplateId() float32 {
	if o == nil || IsNil(o.OsTemplateId) {
		var ret float32
		return ret
	}
	return *o.OsTemplateId
}

// GetOsTemplateIdOk returns a tuple with the OsTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerAllocationInfo) GetOsTemplateIdOk() (*float32, bool) {
	if o == nil || IsNil(o.OsTemplateId) {
		return nil, false
	}
	return o.OsTemplateId, true
}

// HasOsTemplateId returns a boolean if a field has been set.
func (o *ServerAllocationInfo) HasOsTemplateId() bool {
	if o != nil && !IsNil(o.OsTemplateId) {
		return true
	}

	return false
}

// SetOsTemplateId gets a reference to the given float32 and assigns it to the OsTemplateId field.
func (o *ServerAllocationInfo) SetOsTemplateId(v float32) {
	o.OsTemplateId = &v
}

func (o ServerAllocationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerAllocationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instanceId"] = o.InstanceId
	if !IsNil(o.ExtensionInstanceId) {
		toSerialize["extensionInstanceId"] = o.ExtensionInstanceId
	}
	toSerialize["infrastructure"] = o.Infrastructure
	if !IsNil(o.OsTemplateId) {
		toSerialize["osTemplateId"] = o.OsTemplateId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerAllocationInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instanceId",
		"infrastructure",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerAllocationInfo := _ServerAllocationInfo{}

	err = json.Unmarshal(data, &varServerAllocationInfo)

	if err != nil {
		return err
	}

	*o = ServerAllocationInfo(varServerAllocationInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "extensionInstanceId")
		delete(additionalProperties, "infrastructure")
		delete(additionalProperties, "osTemplateId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerAllocationInfo struct {
	value *ServerAllocationInfo
	isSet bool
}

func (v NullableServerAllocationInfo) Get() *ServerAllocationInfo {
	return v.value
}

func (v *NullableServerAllocationInfo) Set(val *ServerAllocationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerAllocationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerAllocationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerAllocationInfo(val *ServerAllocationInfo) *NullableServerAllocationInfo {
	return &NullableServerAllocationInfo{value: val, isSet: true}
}

func (v NullableServerAllocationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerAllocationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


