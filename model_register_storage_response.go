/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the RegisterStorageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterStorageResponse{}

// RegisterStorageResponse struct for RegisterStorageResponse
type RegisterStorageResponse struct {
	// Id of the Storage
	Id float32 `json:"id"`
	// Job info
	JobInfo *JobInfo `json:"jobInfo,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RegisterStorageResponse RegisterStorageResponse

// NewRegisterStorageResponse instantiates a new RegisterStorageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterStorageResponse(id float32) *RegisterStorageResponse {
	this := RegisterStorageResponse{}
	this.Id = id
	return &this
}

// NewRegisterStorageResponseWithDefaults instantiates a new RegisterStorageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterStorageResponseWithDefaults() *RegisterStorageResponse {
	this := RegisterStorageResponse{}
	return &this
}

// GetId returns the Id field value
func (o *RegisterStorageResponse) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RegisterStorageResponse) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RegisterStorageResponse) SetId(v float32) {
	o.Id = v
}

// GetJobInfo returns the JobInfo field value if set, zero value otherwise.
func (o *RegisterStorageResponse) GetJobInfo() JobInfo {
	if o == nil || IsNil(o.JobInfo) {
		var ret JobInfo
		return ret
	}
	return *o.JobInfo
}

// GetJobInfoOk returns a tuple with the JobInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterStorageResponse) GetJobInfoOk() (*JobInfo, bool) {
	if o == nil || IsNil(o.JobInfo) {
		return nil, false
	}
	return o.JobInfo, true
}

// HasJobInfo returns a boolean if a field has been set.
func (o *RegisterStorageResponse) HasJobInfo() bool {
	if o != nil && !IsNil(o.JobInfo) {
		return true
	}

	return false
}

// SetJobInfo gets a reference to the given JobInfo and assigns it to the JobInfo field.
func (o *RegisterStorageResponse) SetJobInfo(v JobInfo) {
	o.JobInfo = &v
}

func (o RegisterStorageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterStorageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.JobInfo) {
		toSerialize["jobInfo"] = o.JobInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RegisterStorageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterStorageResponse := _RegisterStorageResponse{}

	err = json.Unmarshal(data, &varRegisterStorageResponse)

	if err != nil {
		return err
	}

	*o = RegisterStorageResponse(varRegisterStorageResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "jobInfo")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRegisterStorageResponse struct {
	value *RegisterStorageResponse
	isSet bool
}

func (v NullableRegisterStorageResponse) Get() *RegisterStorageResponse {
	return v.value
}

func (v *NullableRegisterStorageResponse) Set(val *RegisterStorageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterStorageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterStorageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterStorageResponse(val *RegisterStorageResponse) *NullableRegisterStorageResponse {
	return &NullableRegisterStorageResponse{value: val, isSet: true}
}

func (v NullableRegisterStorageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterStorageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


