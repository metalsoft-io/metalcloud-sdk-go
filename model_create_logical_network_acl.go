/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateLogicalNetworkACL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLogicalNetworkACL{}

// CreateLogicalNetworkACL struct for CreateLogicalNetworkACL
type CreateLogicalNetworkACL struct {
	// The type of the rule such as ipv4, ipv6, mac
	RuleType ACLType `json:"ruleType"`
	// The direction of the rule such as in, out
	Direction ACLDirection `json:"direction"`
	// The sequence number of the rule important for the order evaluation of the rules
	Sequence int32 `json:"sequence"`
	// The forwarding action of the rule
	ForwardingAction ACLForwardingAction `json:"forwardingAction"`
	// The network protocol of the ACL rule
	NetworkProtocol *string `json:"networkProtocol,omitempty"`
	// The source address of the rule if the rule type is IPv4, IPv6
	SourceAddress *string `json:"sourceAddress,omitempty"`
	// The destination address of the rule if the rule type is IPv4, IPv6
	DestinationAddress *string `json:"destinationAddress,omitempty"`
	// The source port of the rule if the rule type is IPv4, IPv6, TCP or UDP
	SourcePort *string `json:"sourcePort,omitempty"`
	// The destination port of the rule if the rule type is IPv4, IPv6
	DestinationPort *string `json:"destinationPort,omitempty"`
	// The source MAC address of the rule if the rule type is MAC
	SourceMac *string `json:"sourceMac,omitempty"`
	// The destination MAC address of the rule if the rule type is MAC
	DestinationMac *string `json:"destinationMac,omitempty"`
	// The enforcement point of the rule
	EnforcementPoint ACLEnforcementPoint `json:"enforcementPoint"`
	AdditionalProperties map[string]interface{}
}

type _CreateLogicalNetworkACL CreateLogicalNetworkACL

// NewCreateLogicalNetworkACL instantiates a new CreateLogicalNetworkACL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLogicalNetworkACL(ruleType ACLType, direction ACLDirection, sequence int32, forwardingAction ACLForwardingAction, enforcementPoint ACLEnforcementPoint) *CreateLogicalNetworkACL {
	this := CreateLogicalNetworkACL{}
	this.RuleType = ruleType
	this.Direction = direction
	this.Sequence = sequence
	this.ForwardingAction = forwardingAction
	this.EnforcementPoint = enforcementPoint
	return &this
}

// NewCreateLogicalNetworkACLWithDefaults instantiates a new CreateLogicalNetworkACL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLogicalNetworkACLWithDefaults() *CreateLogicalNetworkACL {
	this := CreateLogicalNetworkACL{}
	return &this
}

// GetRuleType returns the RuleType field value
func (o *CreateLogicalNetworkACL) GetRuleType() ACLType {
	if o == nil {
		var ret ACLType
		return ret
	}

	return o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetRuleTypeOk() (*ACLType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleType, true
}

// SetRuleType sets field value
func (o *CreateLogicalNetworkACL) SetRuleType(v ACLType) {
	o.RuleType = v
}

// GetDirection returns the Direction field value
func (o *CreateLogicalNetworkACL) GetDirection() ACLDirection {
	if o == nil {
		var ret ACLDirection
		return ret
	}

	return o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetDirectionOk() (*ACLDirection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Direction, true
}

// SetDirection sets field value
func (o *CreateLogicalNetworkACL) SetDirection(v ACLDirection) {
	o.Direction = v
}

// GetSequence returns the Sequence field value
func (o *CreateLogicalNetworkACL) GetSequence() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetSequenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sequence, true
}

// SetSequence sets field value
func (o *CreateLogicalNetworkACL) SetSequence(v int32) {
	o.Sequence = v
}

// GetForwardingAction returns the ForwardingAction field value
func (o *CreateLogicalNetworkACL) GetForwardingAction() ACLForwardingAction {
	if o == nil {
		var ret ACLForwardingAction
		return ret
	}

	return o.ForwardingAction
}

// GetForwardingActionOk returns a tuple with the ForwardingAction field value
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetForwardingActionOk() (*ACLForwardingAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForwardingAction, true
}

// SetForwardingAction sets field value
func (o *CreateLogicalNetworkACL) SetForwardingAction(v ACLForwardingAction) {
	o.ForwardingAction = v
}

// GetNetworkProtocol returns the NetworkProtocol field value if set, zero value otherwise.
func (o *CreateLogicalNetworkACL) GetNetworkProtocol() string {
	if o == nil || IsNil(o.NetworkProtocol) {
		var ret string
		return ret
	}
	return *o.NetworkProtocol
}

// GetNetworkProtocolOk returns a tuple with the NetworkProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetNetworkProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkProtocol) {
		return nil, false
	}
	return o.NetworkProtocol, true
}

// HasNetworkProtocol returns a boolean if a field has been set.
func (o *CreateLogicalNetworkACL) HasNetworkProtocol() bool {
	if o != nil && !IsNil(o.NetworkProtocol) {
		return true
	}

	return false
}

// SetNetworkProtocol gets a reference to the given string and assigns it to the NetworkProtocol field.
func (o *CreateLogicalNetworkACL) SetNetworkProtocol(v string) {
	o.NetworkProtocol = &v
}

// GetSourceAddress returns the SourceAddress field value if set, zero value otherwise.
func (o *CreateLogicalNetworkACL) GetSourceAddress() string {
	if o == nil || IsNil(o.SourceAddress) {
		var ret string
		return ret
	}
	return *o.SourceAddress
}

// GetSourceAddressOk returns a tuple with the SourceAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetSourceAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SourceAddress) {
		return nil, false
	}
	return o.SourceAddress, true
}

// HasSourceAddress returns a boolean if a field has been set.
func (o *CreateLogicalNetworkACL) HasSourceAddress() bool {
	if o != nil && !IsNil(o.SourceAddress) {
		return true
	}

	return false
}

// SetSourceAddress gets a reference to the given string and assigns it to the SourceAddress field.
func (o *CreateLogicalNetworkACL) SetSourceAddress(v string) {
	o.SourceAddress = &v
}

// GetDestinationAddress returns the DestinationAddress field value if set, zero value otherwise.
func (o *CreateLogicalNetworkACL) GetDestinationAddress() string {
	if o == nil || IsNil(o.DestinationAddress) {
		var ret string
		return ret
	}
	return *o.DestinationAddress
}

// GetDestinationAddressOk returns a tuple with the DestinationAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetDestinationAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationAddress) {
		return nil, false
	}
	return o.DestinationAddress, true
}

// HasDestinationAddress returns a boolean if a field has been set.
func (o *CreateLogicalNetworkACL) HasDestinationAddress() bool {
	if o != nil && !IsNil(o.DestinationAddress) {
		return true
	}

	return false
}

// SetDestinationAddress gets a reference to the given string and assigns it to the DestinationAddress field.
func (o *CreateLogicalNetworkACL) SetDestinationAddress(v string) {
	o.DestinationAddress = &v
}

// GetSourcePort returns the SourcePort field value if set, zero value otherwise.
func (o *CreateLogicalNetworkACL) GetSourcePort() string {
	if o == nil || IsNil(o.SourcePort) {
		var ret string
		return ret
	}
	return *o.SourcePort
}

// GetSourcePortOk returns a tuple with the SourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetSourcePortOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePort) {
		return nil, false
	}
	return o.SourcePort, true
}

// HasSourcePort returns a boolean if a field has been set.
func (o *CreateLogicalNetworkACL) HasSourcePort() bool {
	if o != nil && !IsNil(o.SourcePort) {
		return true
	}

	return false
}

// SetSourcePort gets a reference to the given string and assigns it to the SourcePort field.
func (o *CreateLogicalNetworkACL) SetSourcePort(v string) {
	o.SourcePort = &v
}

// GetDestinationPort returns the DestinationPort field value if set, zero value otherwise.
func (o *CreateLogicalNetworkACL) GetDestinationPort() string {
	if o == nil || IsNil(o.DestinationPort) {
		var ret string
		return ret
	}
	return *o.DestinationPort
}

// GetDestinationPortOk returns a tuple with the DestinationPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetDestinationPortOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationPort) {
		return nil, false
	}
	return o.DestinationPort, true
}

// HasDestinationPort returns a boolean if a field has been set.
func (o *CreateLogicalNetworkACL) HasDestinationPort() bool {
	if o != nil && !IsNil(o.DestinationPort) {
		return true
	}

	return false
}

// SetDestinationPort gets a reference to the given string and assigns it to the DestinationPort field.
func (o *CreateLogicalNetworkACL) SetDestinationPort(v string) {
	o.DestinationPort = &v
}

// GetSourceMac returns the SourceMac field value if set, zero value otherwise.
func (o *CreateLogicalNetworkACL) GetSourceMac() string {
	if o == nil || IsNil(o.SourceMac) {
		var ret string
		return ret
	}
	return *o.SourceMac
}

// GetSourceMacOk returns a tuple with the SourceMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetSourceMacOk() (*string, bool) {
	if o == nil || IsNil(o.SourceMac) {
		return nil, false
	}
	return o.SourceMac, true
}

// HasSourceMac returns a boolean if a field has been set.
func (o *CreateLogicalNetworkACL) HasSourceMac() bool {
	if o != nil && !IsNil(o.SourceMac) {
		return true
	}

	return false
}

// SetSourceMac gets a reference to the given string and assigns it to the SourceMac field.
func (o *CreateLogicalNetworkACL) SetSourceMac(v string) {
	o.SourceMac = &v
}

// GetDestinationMac returns the DestinationMac field value if set, zero value otherwise.
func (o *CreateLogicalNetworkACL) GetDestinationMac() string {
	if o == nil || IsNil(o.DestinationMac) {
		var ret string
		return ret
	}
	return *o.DestinationMac
}

// GetDestinationMacOk returns a tuple with the DestinationMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetDestinationMacOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationMac) {
		return nil, false
	}
	return o.DestinationMac, true
}

// HasDestinationMac returns a boolean if a field has been set.
func (o *CreateLogicalNetworkACL) HasDestinationMac() bool {
	if o != nil && !IsNil(o.DestinationMac) {
		return true
	}

	return false
}

// SetDestinationMac gets a reference to the given string and assigns it to the DestinationMac field.
func (o *CreateLogicalNetworkACL) SetDestinationMac(v string) {
	o.DestinationMac = &v
}

// GetEnforcementPoint returns the EnforcementPoint field value
func (o *CreateLogicalNetworkACL) GetEnforcementPoint() ACLEnforcementPoint {
	if o == nil {
		var ret ACLEnforcementPoint
		return ret
	}

	return o.EnforcementPoint
}

// GetEnforcementPointOk returns a tuple with the EnforcementPoint field value
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkACL) GetEnforcementPointOk() (*ACLEnforcementPoint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnforcementPoint, true
}

// SetEnforcementPoint sets field value
func (o *CreateLogicalNetworkACL) SetEnforcementPoint(v ACLEnforcementPoint) {
	o.EnforcementPoint = v
}

func (o CreateLogicalNetworkACL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLogicalNetworkACL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ruleType"] = o.RuleType
	toSerialize["direction"] = o.Direction
	toSerialize["sequence"] = o.Sequence
	toSerialize["forwardingAction"] = o.ForwardingAction
	if !IsNil(o.NetworkProtocol) {
		toSerialize["networkProtocol"] = o.NetworkProtocol
	}
	if !IsNil(o.SourceAddress) {
		toSerialize["sourceAddress"] = o.SourceAddress
	}
	if !IsNil(o.DestinationAddress) {
		toSerialize["destinationAddress"] = o.DestinationAddress
	}
	if !IsNil(o.SourcePort) {
		toSerialize["sourcePort"] = o.SourcePort
	}
	if !IsNil(o.DestinationPort) {
		toSerialize["destinationPort"] = o.DestinationPort
	}
	if !IsNil(o.SourceMac) {
		toSerialize["sourceMac"] = o.SourceMac
	}
	if !IsNil(o.DestinationMac) {
		toSerialize["destinationMac"] = o.DestinationMac
	}
	toSerialize["enforcementPoint"] = o.EnforcementPoint

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateLogicalNetworkACL) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ruleType",
		"direction",
		"sequence",
		"forwardingAction",
		"enforcementPoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateLogicalNetworkACL := _CreateLogicalNetworkACL{}

	err = json.Unmarshal(data, &varCreateLogicalNetworkACL)

	if err != nil {
		return err
	}

	*o = CreateLogicalNetworkACL(varCreateLogicalNetworkACL)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ruleType")
		delete(additionalProperties, "direction")
		delete(additionalProperties, "sequence")
		delete(additionalProperties, "forwardingAction")
		delete(additionalProperties, "networkProtocol")
		delete(additionalProperties, "sourceAddress")
		delete(additionalProperties, "destinationAddress")
		delete(additionalProperties, "sourcePort")
		delete(additionalProperties, "destinationPort")
		delete(additionalProperties, "sourceMac")
		delete(additionalProperties, "destinationMac")
		delete(additionalProperties, "enforcementPoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateLogicalNetworkACL struct {
	value *CreateLogicalNetworkACL
	isSet bool
}

func (v NullableCreateLogicalNetworkACL) Get() *CreateLogicalNetworkACL {
	return v.value
}

func (v *NullableCreateLogicalNetworkACL) Set(val *CreateLogicalNetworkACL) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLogicalNetworkACL) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLogicalNetworkACL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLogicalNetworkACL(val *CreateLogicalNetworkACL) *NullableCreateLogicalNetworkACL {
	return &NullableCreateLogicalNetworkACL{value: val, isSet: true}
}

func (v NullableCreateLogicalNetworkACL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLogicalNetworkACL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


