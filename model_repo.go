/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the Repo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Repo{}

// Repo struct for Repo
type Repo struct {
	// Root URL of the repository
	RootUrl string `json:"rootUrl"`
	AdditionalProperties map[string]interface{}
}

type _Repo Repo

// NewRepo instantiates a new Repo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepo(rootUrl string) *Repo {
	this := Repo{}
	this.RootUrl = rootUrl
	return &this
}

// NewRepoWithDefaults instantiates a new Repo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepoWithDefaults() *Repo {
	this := Repo{}
	return &this
}

// GetRootUrl returns the RootUrl field value
func (o *Repo) GetRootUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootUrl
}

// GetRootUrlOk returns a tuple with the RootUrl field value
// and a boolean to check if the value has been set.
func (o *Repo) GetRootUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootUrl, true
}

// SetRootUrl sets field value
func (o *Repo) SetRootUrl(v string) {
	o.RootUrl = v
}

func (o Repo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Repo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rootUrl"] = o.RootUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Repo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rootUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRepo := _Repo{}

	err = json.Unmarshal(data, &varRepo)

	if err != nil {
		return err
	}

	*o = Repo(varRepo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rootUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepo struct {
	value *Repo
	isSet bool
}

func (v NullableRepo) Get() *Repo {
	return v.value
}

func (v *NullableRepo) Set(val *Repo) {
	v.value = val
	v.isSet = true
}

func (v NullableRepo) IsSet() bool {
	return v.isSet
}

func (v *NullableRepo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepo(val *Repo) *NullableRepo {
	return &NullableRepo{value: val, isSet: true}
}

func (v NullableRepo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


