/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InfrastructureCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureCreateDto{}

// InfrastructureCreateDto struct for InfrastructureCreateDto
type InfrastructureCreateDto struct {
	// Label of the Infrastructure.
	Label string `json:"label"`
	// The ID of the site where the Infrastructure is located.
	SiteId float32 `json:"siteId"`
	// Custom variables in JSON format.
	CustomVariables *string `json:"customVariables,omitempty"`
	// User ID of the owner of the Infrastructure.
	UserIdOwner *float32 `json:"userIdOwner,omitempty"`
	// Description of the infrastructure.
	Description *string `json:"description,omitempty"`
	Meta *GenericGUISettings `json:"meta,omitempty"`
	// tags of the infrastructure
	Tags []string `json:"tags"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureCreateDto InfrastructureCreateDto

// NewInfrastructureCreateDto instantiates a new InfrastructureCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureCreateDto(label string, siteId float32, tags []string) *InfrastructureCreateDto {
	this := InfrastructureCreateDto{}
	this.Label = label
	this.SiteId = siteId
	this.Tags = tags
	return &this
}

// NewInfrastructureCreateDtoWithDefaults instantiates a new InfrastructureCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureCreateDtoWithDefaults() *InfrastructureCreateDto {
	this := InfrastructureCreateDto{}
	return &this
}

// GetLabel returns the Label field value
func (o *InfrastructureCreateDto) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *InfrastructureCreateDto) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *InfrastructureCreateDto) SetLabel(v string) {
	o.Label = v
}

// GetSiteId returns the SiteId field value
func (o *InfrastructureCreateDto) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *InfrastructureCreateDto) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *InfrastructureCreateDto) SetSiteId(v float32) {
	o.SiteId = v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *InfrastructureCreateDto) GetCustomVariables() string {
	if o == nil || IsNil(o.CustomVariables) {
		var ret string
		return ret
	}
	return *o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureCreateDto) GetCustomVariablesOk() (*string, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return nil, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *InfrastructureCreateDto) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given string and assigns it to the CustomVariables field.
func (o *InfrastructureCreateDto) SetCustomVariables(v string) {
	o.CustomVariables = &v
}

// GetUserIdOwner returns the UserIdOwner field value if set, zero value otherwise.
func (o *InfrastructureCreateDto) GetUserIdOwner() float32 {
	if o == nil || IsNil(o.UserIdOwner) {
		var ret float32
		return ret
	}
	return *o.UserIdOwner
}

// GetUserIdOwnerOk returns a tuple with the UserIdOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureCreateDto) GetUserIdOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.UserIdOwner) {
		return nil, false
	}
	return o.UserIdOwner, true
}

// HasUserIdOwner returns a boolean if a field has been set.
func (o *InfrastructureCreateDto) HasUserIdOwner() bool {
	if o != nil && !IsNil(o.UserIdOwner) {
		return true
	}

	return false
}

// SetUserIdOwner gets a reference to the given float32 and assigns it to the UserIdOwner field.
func (o *InfrastructureCreateDto) SetUserIdOwner(v float32) {
	o.UserIdOwner = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InfrastructureCreateDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureCreateDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InfrastructureCreateDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InfrastructureCreateDto) SetDescription(v string) {
	o.Description = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *InfrastructureCreateDto) GetMeta() GenericGUISettings {
	if o == nil || IsNil(o.Meta) {
		var ret GenericGUISettings
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureCreateDto) GetMetaOk() (*GenericGUISettings, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *InfrastructureCreateDto) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given GenericGUISettings and assigns it to the Meta field.
func (o *InfrastructureCreateDto) SetMeta(v GenericGUISettings) {
	o.Meta = &v
}

// GetTags returns the Tags field value
func (o *InfrastructureCreateDto) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *InfrastructureCreateDto) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *InfrastructureCreateDto) SetTags(v []string) {
	o.Tags = v
}

func (o InfrastructureCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["siteId"] = o.SiteId
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	if !IsNil(o.UserIdOwner) {
		toSerialize["userIdOwner"] = o.UserIdOwner
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	toSerialize["tags"] = o.Tags

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureCreateDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"siteId",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfrastructureCreateDto := _InfrastructureCreateDto{}

	err = json.Unmarshal(data, &varInfrastructureCreateDto)

	if err != nil {
		return err
	}

	*o = InfrastructureCreateDto(varInfrastructureCreateDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "userIdOwner")
		delete(additionalProperties, "description")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureCreateDto struct {
	value *InfrastructureCreateDto
	isSet bool
}

func (v NullableInfrastructureCreateDto) Get() *InfrastructureCreateDto {
	return v.value
}

func (v *NullableInfrastructureCreateDto) Set(val *InfrastructureCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureCreateDto(val *InfrastructureCreateDto) *NullableInfrastructureCreateDto {
	return &NullableInfrastructureCreateDto{value: val, isSet: true}
}

func (v NullableInfrastructureCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


