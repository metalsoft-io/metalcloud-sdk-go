/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthenticationProviderUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationProviderUpdate{}

// AuthenticationProviderUpdate struct for AuthenticationProviderUpdate
type AuthenticationProviderUpdate struct {
	// True if the provider is enabled
	Enabled bool `json:"enabled"`
	// Permitted domains
	Domains []string `json:"domains"`
	AdditionalProperties map[string]interface{}
}

type _AuthenticationProviderUpdate AuthenticationProviderUpdate

// NewAuthenticationProviderUpdate instantiates a new AuthenticationProviderUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationProviderUpdate(enabled bool, domains []string) *AuthenticationProviderUpdate {
	this := AuthenticationProviderUpdate{}
	this.Enabled = enabled
	this.Domains = domains
	return &this
}

// NewAuthenticationProviderUpdateWithDefaults instantiates a new AuthenticationProviderUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationProviderUpdateWithDefaults() *AuthenticationProviderUpdate {
	this := AuthenticationProviderUpdate{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *AuthenticationProviderUpdate) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProviderUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AuthenticationProviderUpdate) SetEnabled(v bool) {
	o.Enabled = v
}

// GetDomains returns the Domains field value
func (o *AuthenticationProviderUpdate) GetDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProviderUpdate) GetDomainsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domains, true
}

// SetDomains sets field value
func (o *AuthenticationProviderUpdate) SetDomains(v []string) {
	o.Domains = v
}

func (o AuthenticationProviderUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationProviderUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["domains"] = o.Domains

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthenticationProviderUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"domains",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthenticationProviderUpdate := _AuthenticationProviderUpdate{}

	err = json.Unmarshal(data, &varAuthenticationProviderUpdate)

	if err != nil {
		return err
	}

	*o = AuthenticationProviderUpdate(varAuthenticationProviderUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "domains")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthenticationProviderUpdate struct {
	value *AuthenticationProviderUpdate
	isSet bool
}

func (v NullableAuthenticationProviderUpdate) Get() *AuthenticationProviderUpdate {
	return v.value
}

func (v *NullableAuthenticationProviderUpdate) Set(val *AuthenticationProviderUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationProviderUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationProviderUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationProviderUpdate(val *AuthenticationProviderUpdate) *NullableAuthenticationProviderUpdate {
	return &NullableAuthenticationProviderUpdate{value: val, isSet: true}
}

func (v NullableAuthenticationProviderUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationProviderUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


