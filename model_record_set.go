/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the RecordSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordSet{}

// RecordSet struct for RecordSet
type RecordSet struct {
	// The server data.
	Server *Server `json:"server,omitempty"`
	// The network device.
	NetworkDevice *NetworkDevice `json:"networkDevice,omitempty"`
	// The BGP template record set.
	BgpTemplateRecordSet *BgpTemplateRecordSet `json:"bgpTemplateRecordSet,omitempty"`
	// The Instance Array DNS record set
	ServerInstanceGroupDNSRecordSet map[string]interface{} `json:"serverInstanceGroupDNSRecordSet,omitempty"`
	// The Instance DNS record set
	ServerInstanceDNSRecordSet map[string]interface{} `json:"serverInstanceDNSRecordSet,omitempty"`
	// The extension instance.
	ExtensionInstanceRecordSet map[string]interface{} `json:"extensionInstanceRecordSet,omitempty"`
	// The server DNS record set.
	ServerDNSRecordSet *ServerDNSRecordSetDto `json:"serverDNSRecordSet,omitempty"`
	// The switch DNS record set.
	SwitchDNSRecordSet *SwitchDNSRecordSet `json:"switchDNSRecordSet,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RecordSet RecordSet

// NewRecordSet instantiates a new RecordSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordSet() *RecordSet {
	this := RecordSet{}
	return &this
}

// NewRecordSetWithDefaults instantiates a new RecordSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordSetWithDefaults() *RecordSet {
	this := RecordSet{}
	return &this
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *RecordSet) GetServer() Server {
	if o == nil || IsNil(o.Server) {
		var ret Server
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSet) GetServerOk() (*Server, bool) {
	if o == nil || IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *RecordSet) HasServer() bool {
	if o != nil && !IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given Server and assigns it to the Server field.
func (o *RecordSet) SetServer(v Server) {
	o.Server = &v
}

// GetNetworkDevice returns the NetworkDevice field value if set, zero value otherwise.
func (o *RecordSet) GetNetworkDevice() NetworkDevice {
	if o == nil || IsNil(o.NetworkDevice) {
		var ret NetworkDevice
		return ret
	}
	return *o.NetworkDevice
}

// GetNetworkDeviceOk returns a tuple with the NetworkDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSet) GetNetworkDeviceOk() (*NetworkDevice, bool) {
	if o == nil || IsNil(o.NetworkDevice) {
		return nil, false
	}
	return o.NetworkDevice, true
}

// HasNetworkDevice returns a boolean if a field has been set.
func (o *RecordSet) HasNetworkDevice() bool {
	if o != nil && !IsNil(o.NetworkDevice) {
		return true
	}

	return false
}

// SetNetworkDevice gets a reference to the given NetworkDevice and assigns it to the NetworkDevice field.
func (o *RecordSet) SetNetworkDevice(v NetworkDevice) {
	o.NetworkDevice = &v
}

// GetBgpTemplateRecordSet returns the BgpTemplateRecordSet field value if set, zero value otherwise.
func (o *RecordSet) GetBgpTemplateRecordSet() BgpTemplateRecordSet {
	if o == nil || IsNil(o.BgpTemplateRecordSet) {
		var ret BgpTemplateRecordSet
		return ret
	}
	return *o.BgpTemplateRecordSet
}

// GetBgpTemplateRecordSetOk returns a tuple with the BgpTemplateRecordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSet) GetBgpTemplateRecordSetOk() (*BgpTemplateRecordSet, bool) {
	if o == nil || IsNil(o.BgpTemplateRecordSet) {
		return nil, false
	}
	return o.BgpTemplateRecordSet, true
}

// HasBgpTemplateRecordSet returns a boolean if a field has been set.
func (o *RecordSet) HasBgpTemplateRecordSet() bool {
	if o != nil && !IsNil(o.BgpTemplateRecordSet) {
		return true
	}

	return false
}

// SetBgpTemplateRecordSet gets a reference to the given BgpTemplateRecordSet and assigns it to the BgpTemplateRecordSet field.
func (o *RecordSet) SetBgpTemplateRecordSet(v BgpTemplateRecordSet) {
	o.BgpTemplateRecordSet = &v
}

// GetServerInstanceGroupDNSRecordSet returns the ServerInstanceGroupDNSRecordSet field value if set, zero value otherwise.
func (o *RecordSet) GetServerInstanceGroupDNSRecordSet() map[string]interface{} {
	if o == nil || IsNil(o.ServerInstanceGroupDNSRecordSet) {
		var ret map[string]interface{}
		return ret
	}
	return o.ServerInstanceGroupDNSRecordSet
}

// GetServerInstanceGroupDNSRecordSetOk returns a tuple with the ServerInstanceGroupDNSRecordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSet) GetServerInstanceGroupDNSRecordSetOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ServerInstanceGroupDNSRecordSet) {
		return map[string]interface{}{}, false
	}
	return o.ServerInstanceGroupDNSRecordSet, true
}

// HasServerInstanceGroupDNSRecordSet returns a boolean if a field has been set.
func (o *RecordSet) HasServerInstanceGroupDNSRecordSet() bool {
	if o != nil && !IsNil(o.ServerInstanceGroupDNSRecordSet) {
		return true
	}

	return false
}

// SetServerInstanceGroupDNSRecordSet gets a reference to the given map[string]interface{} and assigns it to the ServerInstanceGroupDNSRecordSet field.
func (o *RecordSet) SetServerInstanceGroupDNSRecordSet(v map[string]interface{}) {
	o.ServerInstanceGroupDNSRecordSet = v
}

// GetServerInstanceDNSRecordSet returns the ServerInstanceDNSRecordSet field value if set, zero value otherwise.
func (o *RecordSet) GetServerInstanceDNSRecordSet() map[string]interface{} {
	if o == nil || IsNil(o.ServerInstanceDNSRecordSet) {
		var ret map[string]interface{}
		return ret
	}
	return o.ServerInstanceDNSRecordSet
}

// GetServerInstanceDNSRecordSetOk returns a tuple with the ServerInstanceDNSRecordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSet) GetServerInstanceDNSRecordSetOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ServerInstanceDNSRecordSet) {
		return map[string]interface{}{}, false
	}
	return o.ServerInstanceDNSRecordSet, true
}

// HasServerInstanceDNSRecordSet returns a boolean if a field has been set.
func (o *RecordSet) HasServerInstanceDNSRecordSet() bool {
	if o != nil && !IsNil(o.ServerInstanceDNSRecordSet) {
		return true
	}

	return false
}

// SetServerInstanceDNSRecordSet gets a reference to the given map[string]interface{} and assigns it to the ServerInstanceDNSRecordSet field.
func (o *RecordSet) SetServerInstanceDNSRecordSet(v map[string]interface{}) {
	o.ServerInstanceDNSRecordSet = v
}

// GetExtensionInstanceRecordSet returns the ExtensionInstanceRecordSet field value if set, zero value otherwise.
func (o *RecordSet) GetExtensionInstanceRecordSet() map[string]interface{} {
	if o == nil || IsNil(o.ExtensionInstanceRecordSet) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtensionInstanceRecordSet
}

// GetExtensionInstanceRecordSetOk returns a tuple with the ExtensionInstanceRecordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSet) GetExtensionInstanceRecordSetOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtensionInstanceRecordSet) {
		return map[string]interface{}{}, false
	}
	return o.ExtensionInstanceRecordSet, true
}

// HasExtensionInstanceRecordSet returns a boolean if a field has been set.
func (o *RecordSet) HasExtensionInstanceRecordSet() bool {
	if o != nil && !IsNil(o.ExtensionInstanceRecordSet) {
		return true
	}

	return false
}

// SetExtensionInstanceRecordSet gets a reference to the given map[string]interface{} and assigns it to the ExtensionInstanceRecordSet field.
func (o *RecordSet) SetExtensionInstanceRecordSet(v map[string]interface{}) {
	o.ExtensionInstanceRecordSet = v
}

// GetServerDNSRecordSet returns the ServerDNSRecordSet field value if set, zero value otherwise.
func (o *RecordSet) GetServerDNSRecordSet() ServerDNSRecordSetDto {
	if o == nil || IsNil(o.ServerDNSRecordSet) {
		var ret ServerDNSRecordSetDto
		return ret
	}
	return *o.ServerDNSRecordSet
}

// GetServerDNSRecordSetOk returns a tuple with the ServerDNSRecordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSet) GetServerDNSRecordSetOk() (*ServerDNSRecordSetDto, bool) {
	if o == nil || IsNil(o.ServerDNSRecordSet) {
		return nil, false
	}
	return o.ServerDNSRecordSet, true
}

// HasServerDNSRecordSet returns a boolean if a field has been set.
func (o *RecordSet) HasServerDNSRecordSet() bool {
	if o != nil && !IsNil(o.ServerDNSRecordSet) {
		return true
	}

	return false
}

// SetServerDNSRecordSet gets a reference to the given ServerDNSRecordSetDto and assigns it to the ServerDNSRecordSet field.
func (o *RecordSet) SetServerDNSRecordSet(v ServerDNSRecordSetDto) {
	o.ServerDNSRecordSet = &v
}

// GetSwitchDNSRecordSet returns the SwitchDNSRecordSet field value if set, zero value otherwise.
func (o *RecordSet) GetSwitchDNSRecordSet() SwitchDNSRecordSet {
	if o == nil || IsNil(o.SwitchDNSRecordSet) {
		var ret SwitchDNSRecordSet
		return ret
	}
	return *o.SwitchDNSRecordSet
}

// GetSwitchDNSRecordSetOk returns a tuple with the SwitchDNSRecordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordSet) GetSwitchDNSRecordSetOk() (*SwitchDNSRecordSet, bool) {
	if o == nil || IsNil(o.SwitchDNSRecordSet) {
		return nil, false
	}
	return o.SwitchDNSRecordSet, true
}

// HasSwitchDNSRecordSet returns a boolean if a field has been set.
func (o *RecordSet) HasSwitchDNSRecordSet() bool {
	if o != nil && !IsNil(o.SwitchDNSRecordSet) {
		return true
	}

	return false
}

// SetSwitchDNSRecordSet gets a reference to the given SwitchDNSRecordSet and assigns it to the SwitchDNSRecordSet field.
func (o *RecordSet) SetSwitchDNSRecordSet(v SwitchDNSRecordSet) {
	o.SwitchDNSRecordSet = &v
}

func (o RecordSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !IsNil(o.NetworkDevice) {
		toSerialize["networkDevice"] = o.NetworkDevice
	}
	if !IsNil(o.BgpTemplateRecordSet) {
		toSerialize["bgpTemplateRecordSet"] = o.BgpTemplateRecordSet
	}
	if !IsNil(o.ServerInstanceGroupDNSRecordSet) {
		toSerialize["serverInstanceGroupDNSRecordSet"] = o.ServerInstanceGroupDNSRecordSet
	}
	if !IsNil(o.ServerInstanceDNSRecordSet) {
		toSerialize["serverInstanceDNSRecordSet"] = o.ServerInstanceDNSRecordSet
	}
	if !IsNil(o.ExtensionInstanceRecordSet) {
		toSerialize["extensionInstanceRecordSet"] = o.ExtensionInstanceRecordSet
	}
	if !IsNil(o.ServerDNSRecordSet) {
		toSerialize["serverDNSRecordSet"] = o.ServerDNSRecordSet
	}
	if !IsNil(o.SwitchDNSRecordSet) {
		toSerialize["switchDNSRecordSet"] = o.SwitchDNSRecordSet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RecordSet) UnmarshalJSON(data []byte) (err error) {
	varRecordSet := _RecordSet{}

	err = json.Unmarshal(data, &varRecordSet)

	if err != nil {
		return err
	}

	*o = RecordSet(varRecordSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "server")
		delete(additionalProperties, "networkDevice")
		delete(additionalProperties, "bgpTemplateRecordSet")
		delete(additionalProperties, "serverInstanceGroupDNSRecordSet")
		delete(additionalProperties, "serverInstanceDNSRecordSet")
		delete(additionalProperties, "extensionInstanceRecordSet")
		delete(additionalProperties, "serverDNSRecordSet")
		delete(additionalProperties, "switchDNSRecordSet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecordSet struct {
	value *RecordSet
	isSet bool
}

func (v NullableRecordSet) Get() *RecordSet {
	return v.value
}

func (v *NullableRecordSet) Set(val *RecordSet) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordSet) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordSet(val *RecordSet) *NullableRecordSet {
	return &NullableRecordSet{value: val, isSet: true}
}

func (v NullableRecordSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


