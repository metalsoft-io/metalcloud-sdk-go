/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// FirmwarePolicyAPIService FirmwarePolicyAPI service
type FirmwarePolicyAPIService service

type FirmwarePolicyAPIApplyFirmwarePoliciesWithInstanceArraysRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
}

func (r FirmwarePolicyAPIApplyFirmwarePoliciesWithInstanceArraysRequest) Execute() (*ServerFirmwareUpgradePolicyApplyResult, *http.Response, error) {
	return r.ApiService.ApplyFirmwarePoliciesWithInstanceArraysExecute(r)
}

/*
ApplyFirmwarePoliciesWithInstanceArrays Applies all Firmware Policies linked to instance arrays

Applies all Firmware Policies linked to instance arrays

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwarePolicyAPIApplyFirmwarePoliciesWithInstanceArraysRequest
*/
func (a *FirmwarePolicyAPIService) ApplyFirmwarePoliciesWithInstanceArrays(ctx context.Context) FirmwarePolicyAPIApplyFirmwarePoliciesWithInstanceArraysRequest {
	return FirmwarePolicyAPIApplyFirmwarePoliciesWithInstanceArraysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerFirmwareUpgradePolicyApplyResult
func (a *FirmwarePolicyAPIService) ApplyFirmwarePoliciesWithInstanceArraysExecute(r FirmwarePolicyAPIApplyFirmwarePoliciesWithInstanceArraysRequest) (*ServerFirmwareUpgradePolicyApplyResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerFirmwareUpgradePolicyApplyResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.ApplyFirmwarePoliciesWithInstanceArrays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/policies/actions/apply-with-instance-arrays"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwarePolicyAPIApplyFirmwarePoliciesWithoutInstanceArraysRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
}

func (r FirmwarePolicyAPIApplyFirmwarePoliciesWithoutInstanceArraysRequest) Execute() (*ServerFirmwareUpgradePolicyApplyResult, *http.Response, error) {
	return r.ApiService.ApplyFirmwarePoliciesWithoutInstanceArraysExecute(r)
}

/*
ApplyFirmwarePoliciesWithoutInstanceArrays Applies all Firmware Policies not linked to instance arrays

Applies all Firmware Policies not linked to instance arrays

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwarePolicyAPIApplyFirmwarePoliciesWithoutInstanceArraysRequest
*/
func (a *FirmwarePolicyAPIService) ApplyFirmwarePoliciesWithoutInstanceArrays(ctx context.Context) FirmwarePolicyAPIApplyFirmwarePoliciesWithoutInstanceArraysRequest {
	return FirmwarePolicyAPIApplyFirmwarePoliciesWithoutInstanceArraysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerFirmwareUpgradePolicyApplyResult
func (a *FirmwarePolicyAPIService) ApplyFirmwarePoliciesWithoutInstanceArraysExecute(r FirmwarePolicyAPIApplyFirmwarePoliciesWithoutInstanceArraysRequest) (*ServerFirmwareUpgradePolicyApplyResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerFirmwareUpgradePolicyApplyResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.ApplyFirmwarePoliciesWithoutInstanceArrays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/policies/actions/apply-without-instance-arrays"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwarePolicyAPICreateFirmwarePolicyRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
	createServerFirmwareUpgradePolicy *CreateServerFirmwareUpgradePolicy
}

// The Firmware Policy create object
func (r FirmwarePolicyAPICreateFirmwarePolicyRequest) CreateServerFirmwareUpgradePolicy(createServerFirmwareUpgradePolicy CreateServerFirmwareUpgradePolicy) FirmwarePolicyAPICreateFirmwarePolicyRequest {
	r.createServerFirmwareUpgradePolicy = &createServerFirmwareUpgradePolicy
	return r
}

func (r FirmwarePolicyAPICreateFirmwarePolicyRequest) Execute() (*ServerFirmwareUpgradePolicy, *http.Response, error) {
	return r.ApiService.CreateFirmwarePolicyExecute(r)
}

/*
CreateFirmwarePolicy Creates a Firmware Policy

Creates a Firmware Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwarePolicyAPICreateFirmwarePolicyRequest
*/
func (a *FirmwarePolicyAPIService) CreateFirmwarePolicy(ctx context.Context) FirmwarePolicyAPICreateFirmwarePolicyRequest {
	return FirmwarePolicyAPICreateFirmwarePolicyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerFirmwareUpgradePolicy
func (a *FirmwarePolicyAPIService) CreateFirmwarePolicyExecute(r FirmwarePolicyAPICreateFirmwarePolicyRequest) (*ServerFirmwareUpgradePolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerFirmwareUpgradePolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.CreateFirmwarePolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createServerFirmwareUpgradePolicy == nil {
		return localVarReturnValue, nil, reportError("createServerFirmwareUpgradePolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createServerFirmwareUpgradePolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwarePolicyAPIDeleteFirmwarePolicyRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
	firmwarePolicyId float32
}

func (r FirmwarePolicyAPIDeleteFirmwarePolicyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFirmwarePolicyExecute(r)
}

/*
DeleteFirmwarePolicy Deletes a Firmware Policy

Deletes a Firmware Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwarePolicyId
 @return FirmwarePolicyAPIDeleteFirmwarePolicyRequest
*/
func (a *FirmwarePolicyAPIService) DeleteFirmwarePolicy(ctx context.Context, firmwarePolicyId float32) FirmwarePolicyAPIDeleteFirmwarePolicyRequest {
	return FirmwarePolicyAPIDeleteFirmwarePolicyRequest{
		ApiService: a,
		ctx: ctx,
		firmwarePolicyId: firmwarePolicyId,
	}
}

// Execute executes the request
func (a *FirmwarePolicyAPIService) DeleteFirmwarePolicyExecute(r FirmwarePolicyAPIDeleteFirmwarePolicyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.DeleteFirmwarePolicy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/policies/{firmwarePolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwarePolicyId"+"}", url.PathEscape(parameterValueToString(r.firmwarePolicyId, "firmwarePolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FirmwarePolicyAPIGenerateFirmwarePolicyAuditRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
	firmwarePolicyId float32
}

func (r FirmwarePolicyAPIGenerateFirmwarePolicyAuditRequest) Execute() (*ServerFirmwareUpgradePolicyAudit, *http.Response, error) {
	return r.ApiService.GenerateFirmwarePolicyAuditExecute(r)
}

/*
GenerateFirmwarePolicyAudit Returns the server components ids that match this policy

Returns the server components ids that match this policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwarePolicyId
 @return FirmwarePolicyAPIGenerateFirmwarePolicyAuditRequest
*/
func (a *FirmwarePolicyAPIService) GenerateFirmwarePolicyAudit(ctx context.Context, firmwarePolicyId float32) FirmwarePolicyAPIGenerateFirmwarePolicyAuditRequest {
	return FirmwarePolicyAPIGenerateFirmwarePolicyAuditRequest{
		ApiService: a,
		ctx: ctx,
		firmwarePolicyId: firmwarePolicyId,
	}
}

// Execute executes the request
//  @return ServerFirmwareUpgradePolicyAudit
func (a *FirmwarePolicyAPIService) GenerateFirmwarePolicyAuditExecute(r FirmwarePolicyAPIGenerateFirmwarePolicyAuditRequest) (*ServerFirmwareUpgradePolicyAudit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerFirmwareUpgradePolicyAudit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.GenerateFirmwarePolicyAudit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/policies/{firmwarePolicyId}/actions/generate-audit"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwarePolicyId"+"}", url.PathEscape(parameterValueToString(r.firmwarePolicyId, "firmwarePolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwarePolicyAPIGetFirmwarePoliciesRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
	page *float32
	limit *float32
	filterId *[]string
	filterLabel *[]string
	filterStatus *[]string
	filterAction *[]string
	filterServerInstanceGroupIds *[]string
	filterUserIdOwner *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) Page(page float32) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) Limit(limit float32) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.limit = &limit
	return r
}

// Filter by id query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.id&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.id&#x3D;$not:$like:John Doe&amp;filter.id&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) FilterId(filterId []string) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.filterId = &filterId
	return r
}

// Filter by label query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.label&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.label&#x3D;$not:$like:John Doe&amp;filter.label&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) FilterLabel(filterLabel []string) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.filterLabel = &filterLabel
	return r
}

// Filter by status query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.status&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.status&#x3D;$not:$like:John Doe&amp;filter.status&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) FilterStatus(filterStatus []string) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter by action query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.action&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.action&#x3D;$not:$like:John Doe&amp;filter.action&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) FilterAction(filterAction []string) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.filterAction = &filterAction
	return r
}

// Filter by serverInstanceGroupIds query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverInstanceGroupIds&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverInstanceGroupIds&#x3D;$not:$like:John Doe&amp;filter.serverInstanceGroupIds&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) FilterServerInstanceGroupIds(filterServerInstanceGroupIds []string) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.filterServerInstanceGroupIds = &filterServerInstanceGroupIds
	return r
}

// Filter by userIdOwner query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.userIdOwner&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.userIdOwner&#x3D;$not:$like:John Doe&amp;filter.userIdOwner&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) FilterUserIdOwner(filterUserIdOwner []string) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.filterUserIdOwner = &filterUserIdOwner
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;label&lt;/li&gt; &lt;li&gt;status&lt;/li&gt; &lt;li&gt;action&lt;/li&gt; &lt;li&gt;userIdOwner&lt;/li&gt;&lt;/ul&gt;       
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) SortBy(sortBy []string) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) Search(search string) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; id,label,status,action,userIdOwner           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;label&lt;/li&gt; &lt;li&gt;status&lt;/li&gt; &lt;li&gt;action&lt;/li&gt; &lt;li&gt;userIdOwner&lt;/li&gt; &lt;li&gt;serverInstanceGroupIds&lt;/li&gt;&lt;/ul&gt;         
func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) SearchBy(searchBy []string) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	r.searchBy = &searchBy
	return r
}

func (r FirmwarePolicyAPIGetFirmwarePoliciesRequest) Execute() (*ServerFirmwareUpgradePolicyPaginatedList, *http.Response, error) {
	return r.ApiService.GetFirmwarePoliciesExecute(r)
}

/*
GetFirmwarePolicies Get a list of Firmware Policies

Returns a list of Firmware Policies

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwarePolicyAPIGetFirmwarePoliciesRequest
*/
func (a *FirmwarePolicyAPIService) GetFirmwarePolicies(ctx context.Context) FirmwarePolicyAPIGetFirmwarePoliciesRequest {
	return FirmwarePolicyAPIGetFirmwarePoliciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerFirmwareUpgradePolicyPaginatedList
func (a *FirmwarePolicyAPIService) GetFirmwarePoliciesExecute(r FirmwarePolicyAPIGetFirmwarePoliciesRequest) (*ServerFirmwareUpgradePolicyPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerFirmwareUpgradePolicyPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.GetFirmwarePolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterId != nil {
		t := *r.filterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.id", t, "form", "multi")
		}
	}
	if r.filterLabel != nil {
		t := *r.filterLabel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", t, "form", "multi")
		}
	}
	if r.filterStatus != nil {
		t := *r.filterStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.status", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.status", t, "form", "multi")
		}
	}
	if r.filterAction != nil {
		t := *r.filterAction
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.action", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.action", t, "form", "multi")
		}
	}
	if r.filterServerInstanceGroupIds != nil {
		t := *r.filterServerInstanceGroupIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverInstanceGroupIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverInstanceGroupIds", t, "form", "multi")
		}
	}
	if r.filterUserIdOwner != nil {
		t := *r.filterUserIdOwner
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.userIdOwner", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.userIdOwner", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwarePolicyAPIGetFirmwarePolicyInfoRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
	firmwarePolicyId float32
}

func (r FirmwarePolicyAPIGetFirmwarePolicyInfoRequest) Execute() (*ServerFirmwareUpgradePolicy, *http.Response, error) {
	return r.ApiService.GetFirmwarePolicyInfoExecute(r)
}

/*
GetFirmwarePolicyInfo Get Firmware Policy information

Returns Firmware Policy information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwarePolicyId
 @return FirmwarePolicyAPIGetFirmwarePolicyInfoRequest
*/
func (a *FirmwarePolicyAPIService) GetFirmwarePolicyInfo(ctx context.Context, firmwarePolicyId float32) FirmwarePolicyAPIGetFirmwarePolicyInfoRequest {
	return FirmwarePolicyAPIGetFirmwarePolicyInfoRequest{
		ApiService: a,
		ctx: ctx,
		firmwarePolicyId: firmwarePolicyId,
	}
}

// Execute executes the request
//  @return ServerFirmwareUpgradePolicy
func (a *FirmwarePolicyAPIService) GetFirmwarePolicyInfoExecute(r FirmwarePolicyAPIGetFirmwarePolicyInfoRequest) (*ServerFirmwareUpgradePolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerFirmwareUpgradePolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.GetFirmwarePolicyInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/policies/{firmwarePolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwarePolicyId"+"}", url.PathEscape(parameterValueToString(r.firmwarePolicyId, "firmwarePolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwarePolicyAPIGetGlobalFirmwareConfigurationRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
}

func (r FirmwarePolicyAPIGetGlobalFirmwareConfigurationRequest) Execute() (*GlobalFirmwareUpgradeConfiguration, *http.Response, error) {
	return r.ApiService.GetGlobalFirmwareConfigurationExecute(r)
}

/*
GetGlobalFirmwareConfiguration Get Global Firmware Configuration

Returns Global Firmware Configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwarePolicyAPIGetGlobalFirmwareConfigurationRequest
*/
func (a *FirmwarePolicyAPIService) GetGlobalFirmwareConfiguration(ctx context.Context) FirmwarePolicyAPIGetGlobalFirmwareConfigurationRequest {
	return FirmwarePolicyAPIGetGlobalFirmwareConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GlobalFirmwareUpgradeConfiguration
func (a *FirmwarePolicyAPIService) GetGlobalFirmwareConfigurationExecute(r FirmwarePolicyAPIGetGlobalFirmwareConfigurationRequest) (*GlobalFirmwareUpgradeConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GlobalFirmwareUpgradeConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.GetGlobalFirmwareConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/configuration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwarePolicyAPIUpdateFirmwarePolicyRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
	firmwarePolicyId float32
	updateServerFirmwareUpgradePolicy *UpdateServerFirmwareUpgradePolicy
}

// The Firmware Policy update object
func (r FirmwarePolicyAPIUpdateFirmwarePolicyRequest) UpdateServerFirmwareUpgradePolicy(updateServerFirmwareUpgradePolicy UpdateServerFirmwareUpgradePolicy) FirmwarePolicyAPIUpdateFirmwarePolicyRequest {
	r.updateServerFirmwareUpgradePolicy = &updateServerFirmwareUpgradePolicy
	return r
}

func (r FirmwarePolicyAPIUpdateFirmwarePolicyRequest) Execute() (*ServerFirmwareUpgradePolicy, *http.Response, error) {
	return r.ApiService.UpdateFirmwarePolicyExecute(r)
}

/*
UpdateFirmwarePolicy Updates a Firmware Policy

Updates aFirmware Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwarePolicyId
 @return FirmwarePolicyAPIUpdateFirmwarePolicyRequest
*/
func (a *FirmwarePolicyAPIService) UpdateFirmwarePolicy(ctx context.Context, firmwarePolicyId float32) FirmwarePolicyAPIUpdateFirmwarePolicyRequest {
	return FirmwarePolicyAPIUpdateFirmwarePolicyRequest{
		ApiService: a,
		ctx: ctx,
		firmwarePolicyId: firmwarePolicyId,
	}
}

// Execute executes the request
//  @return ServerFirmwareUpgradePolicy
func (a *FirmwarePolicyAPIService) UpdateFirmwarePolicyExecute(r FirmwarePolicyAPIUpdateFirmwarePolicyRequest) (*ServerFirmwareUpgradePolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerFirmwareUpgradePolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.UpdateFirmwarePolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/policies/{firmwarePolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwarePolicyId"+"}", url.PathEscape(parameterValueToString(r.firmwarePolicyId, "firmwarePolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateServerFirmwareUpgradePolicy == nil {
		return localVarReturnValue, nil, reportError("updateServerFirmwareUpgradePolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateServerFirmwareUpgradePolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwarePolicyAPIUpdateGlobalFirmwareConfigurationRequest struct {
	ctx context.Context
	ApiService *FirmwarePolicyAPIService
	updateGlobalFirmwareUpgradeConfiguration *UpdateGlobalFirmwareUpgradeConfiguration
}

// The Global Firmware Policy update object
func (r FirmwarePolicyAPIUpdateGlobalFirmwareConfigurationRequest) UpdateGlobalFirmwareUpgradeConfiguration(updateGlobalFirmwareUpgradeConfiguration UpdateGlobalFirmwareUpgradeConfiguration) FirmwarePolicyAPIUpdateGlobalFirmwareConfigurationRequest {
	r.updateGlobalFirmwareUpgradeConfiguration = &updateGlobalFirmwareUpgradeConfiguration
	return r
}

func (r FirmwarePolicyAPIUpdateGlobalFirmwareConfigurationRequest) Execute() (*GlobalFirmwareUpgradeConfiguration, *http.Response, error) {
	return r.ApiService.UpdateGlobalFirmwareConfigurationExecute(r)
}

/*
UpdateGlobalFirmwareConfiguration Updates Global Firmware Policy Configuration

Updates Global Firmware Policy Configuration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwarePolicyAPIUpdateGlobalFirmwareConfigurationRequest
*/
func (a *FirmwarePolicyAPIService) UpdateGlobalFirmwareConfiguration(ctx context.Context) FirmwarePolicyAPIUpdateGlobalFirmwareConfigurationRequest {
	return FirmwarePolicyAPIUpdateGlobalFirmwareConfigurationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GlobalFirmwareUpgradeConfiguration
func (a *FirmwarePolicyAPIService) UpdateGlobalFirmwareConfigurationExecute(r FirmwarePolicyAPIUpdateGlobalFirmwareConfigurationRequest) (*GlobalFirmwareUpgradeConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GlobalFirmwareUpgradeConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwarePolicyAPIService.UpdateGlobalFirmwareConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/configuration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateGlobalFirmwareUpgradeConfiguration == nil {
		return localVarReturnValue, nil, reportError("updateGlobalFirmwareUpgradeConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateGlobalFirmwareUpgradeConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
