/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceGroupConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceGroupConfiguration{}

// ServerInstanceGroupConfiguration struct for ServerInstanceGroupConfiguration
type ServerInstanceGroupConfiguration struct {
	// Revision number
	Revision int32 `json:"revision"`
	// The Product Instance label. Will be automatically generated if not provided.
	Label string `json:"label"`
	// Timestamp of the latest update of the Product Instance.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Subdomain of the Product Instance.
	Subdomain *string `json:"subdomain,omitempty"`
	ServerGroupName *string `json:"serverGroupName,omitempty"`
	// The number of instances to be created on the Instance Group.
	InstanceCount int32 `json:"instanceCount"`
	// The server type ID that will be assigned to newly created instances.
	DefaultServerTypeId int32 `json:"defaultServerTypeId"`
	// Automatically allocate IP addresses to child Instance`s Instance Interface elements.
	IpAllocateAuto int32 `json:"ipAllocateAuto"`
	// Automatically create or expand Subnet elements until the necessary IPv4 addresses are allocated.
	Ipv4SubnetCreateAuto int32 `json:"ipv4SubnetCreateAuto"`
	// Array of firmware policy ids containing associated firmware policies.
	FirmwarePolicyIds []float32 `json:"firmwarePolicyIds,omitempty"`
	// The volume template ID (or name) to use if the servers in the Instance Group have local disks.
	OsTemplateId *int32 `json:"osTemplateId,omitempty"`
	// Object containing custom variables and variable overrides.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// The CPU count on each instance.
	ProcessorCount int32 `json:"processorCount"`
	// The minimum cores of a CPU.
	ProcessorCoreCount int32 `json:"processorCoreCount"`
	// The minimum clock speed of a CPU.
	ProcessorCoreMhz int32 `json:"processorCoreMhz"`
	// The minimum RAM capacity of each instance.
	RamGbytes *int32 `json:"ramGbytes,omitempty"`
	// The minimum number of physical disks.
	DiskCount int32 `json:"diskCount"`
	// The minimum size of a single disk.
	DiskSizeMbytes int32 `json:"diskSizeMbytes"`
	// The types of physical disks.
	DiskTypes []string `json:"diskTypes"`
	// Enable virtual interfaces
	VirtualInterfacesEnabled int32 `json:"virtualInterfacesEnabled"`
	// Contains info about additional ips to be assigned to the WAN interfaces.
	AdditionalWanIpv4Json map[string]interface{} `json:"additionalWanIpv4Json,omitempty"`
	NetworkProfileGroupId *int32 `json:"networkProfileGroupId,omitempty"`
	// The ipv4 vlan that should override the default from the WAN Network for the primary ip.
	OverrideIpv4WanVlanId *int32 `json:"overrideIpv4WanVlanId,omitempty"`
	// ID of a ipv4 WAN subnet-pool from which to force the subnet allocation for the Instance Interfaces associated with this Instance Group.
	NetworkEquipmentForceSubnetPoolIpv4WanId *int32 `json:"networkEquipmentForceSubnetPoolIpv4WanId,omitempty"`
	// Id of the DNS subdomain for the Product Instance
	DnsSubdomainChangeId *int32 `json:"dnsSubdomainChangeId,omitempty"`
	// Id of the deployment for the Product Instance
	InfrastructureDeployId *int32 `json:"infrastructureDeployId,omitempty"`
	// Number of empty edits
	EmptyEdit *int32 `json:"emptyEdit,omitempty"`
	// Product Instance deploy type
	DeployType string `json:"deployType"`
	// Product Instance deploy status
	DeployStatus string `json:"deployStatus"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceGroupConfiguration ServerInstanceGroupConfiguration

// NewServerInstanceGroupConfiguration instantiates a new ServerInstanceGroupConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceGroupConfiguration(revision int32, label string, updatedTimestamp string, instanceCount int32, defaultServerTypeId int32, ipAllocateAuto int32, ipv4SubnetCreateAuto int32, processorCount int32, processorCoreCount int32, processorCoreMhz int32, diskCount int32, diskSizeMbytes int32, diskTypes []string, virtualInterfacesEnabled int32, deployType string, deployStatus string) *ServerInstanceGroupConfiguration {
	this := ServerInstanceGroupConfiguration{}
	this.Revision = revision
	this.Label = label
	this.UpdatedTimestamp = updatedTimestamp
	this.InstanceCount = instanceCount
	this.DefaultServerTypeId = defaultServerTypeId
	this.IpAllocateAuto = ipAllocateAuto
	this.Ipv4SubnetCreateAuto = ipv4SubnetCreateAuto
	this.ProcessorCount = processorCount
	this.ProcessorCoreCount = processorCoreCount
	this.ProcessorCoreMhz = processorCoreMhz
	var ramGbytes int32 = 1
	this.RamGbytes = &ramGbytes
	this.DiskCount = diskCount
	this.DiskSizeMbytes = diskSizeMbytes
	this.DiskTypes = diskTypes
	this.VirtualInterfacesEnabled = virtualInterfacesEnabled
	this.DeployType = deployType
	this.DeployStatus = deployStatus
	return &this
}

// NewServerInstanceGroupConfigurationWithDefaults instantiates a new ServerInstanceGroupConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceGroupConfigurationWithDefaults() *ServerInstanceGroupConfiguration {
	this := ServerInstanceGroupConfiguration{}
	var instanceCount int32 = 1
	this.InstanceCount = instanceCount
	var ipAllocateAuto int32 = 1
	this.IpAllocateAuto = ipAllocateAuto
	var ipv4SubnetCreateAuto int32 = 1
	this.Ipv4SubnetCreateAuto = ipv4SubnetCreateAuto
	var processorCount int32 = 1
	this.ProcessorCount = processorCount
	var processorCoreCount int32 = 1
	this.ProcessorCoreCount = processorCoreCount
	var processorCoreMhz int32 = 1000
	this.ProcessorCoreMhz = processorCoreMhz
	var ramGbytes int32 = 1
	this.RamGbytes = &ramGbytes
	var diskCount int32 = 0
	this.DiskCount = diskCount
	var diskSizeMbytes int32 = 0
	this.DiskSizeMbytes = diskSizeMbytes
	var virtualInterfacesEnabled int32 = 0
	this.VirtualInterfacesEnabled = virtualInterfacesEnabled
	var deployType string = "create"
	this.DeployType = deployType
	var deployStatus string = "not_started"
	this.DeployStatus = deployStatus
	return &this
}

// GetRevision returns the Revision field value
func (o *ServerInstanceGroupConfiguration) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *ServerInstanceGroupConfiguration) SetRevision(v int32) {
	o.Revision = v
}

// GetLabel returns the Label field value
func (o *ServerInstanceGroupConfiguration) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ServerInstanceGroupConfiguration) SetLabel(v string) {
	o.Label = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *ServerInstanceGroupConfiguration) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *ServerInstanceGroupConfiguration) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *ServerInstanceGroupConfiguration) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetServerGroupName returns the ServerGroupName field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetServerGroupName() string {
	if o == nil || IsNil(o.ServerGroupName) {
		var ret string
		return ret
	}
	return *o.ServerGroupName
}

// GetServerGroupNameOk returns a tuple with the ServerGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetServerGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerGroupName) {
		return nil, false
	}
	return o.ServerGroupName, true
}

// HasServerGroupName returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasServerGroupName() bool {
	if o != nil && !IsNil(o.ServerGroupName) {
		return true
	}

	return false
}

// SetServerGroupName gets a reference to the given string and assigns it to the ServerGroupName field.
func (o *ServerInstanceGroupConfiguration) SetServerGroupName(v string) {
	o.ServerGroupName = &v
}

// GetInstanceCount returns the InstanceCount field value
func (o *ServerInstanceGroupConfiguration) GetInstanceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetInstanceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceCount, true
}

// SetInstanceCount sets field value
func (o *ServerInstanceGroupConfiguration) SetInstanceCount(v int32) {
	o.InstanceCount = v
}

// GetDefaultServerTypeId returns the DefaultServerTypeId field value
func (o *ServerInstanceGroupConfiguration) GetDefaultServerTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DefaultServerTypeId
}

// GetDefaultServerTypeIdOk returns a tuple with the DefaultServerTypeId field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetDefaultServerTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultServerTypeId, true
}

// SetDefaultServerTypeId sets field value
func (o *ServerInstanceGroupConfiguration) SetDefaultServerTypeId(v int32) {
	o.DefaultServerTypeId = v
}

// GetIpAllocateAuto returns the IpAllocateAuto field value
func (o *ServerInstanceGroupConfiguration) GetIpAllocateAuto() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IpAllocateAuto
}

// GetIpAllocateAutoOk returns a tuple with the IpAllocateAuto field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetIpAllocateAutoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAllocateAuto, true
}

// SetIpAllocateAuto sets field value
func (o *ServerInstanceGroupConfiguration) SetIpAllocateAuto(v int32) {
	o.IpAllocateAuto = v
}

// GetIpv4SubnetCreateAuto returns the Ipv4SubnetCreateAuto field value
func (o *ServerInstanceGroupConfiguration) GetIpv4SubnetCreateAuto() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ipv4SubnetCreateAuto
}

// GetIpv4SubnetCreateAutoOk returns a tuple with the Ipv4SubnetCreateAuto field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetIpv4SubnetCreateAutoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv4SubnetCreateAuto, true
}

// SetIpv4SubnetCreateAuto sets field value
func (o *ServerInstanceGroupConfiguration) SetIpv4SubnetCreateAuto(v int32) {
	o.Ipv4SubnetCreateAuto = v
}

// GetFirmwarePolicyIds returns the FirmwarePolicyIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerInstanceGroupConfiguration) GetFirmwarePolicyIds() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}
	return o.FirmwarePolicyIds
}

// GetFirmwarePolicyIdsOk returns a tuple with the FirmwarePolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerInstanceGroupConfiguration) GetFirmwarePolicyIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.FirmwarePolicyIds) {
		return nil, false
	}
	return o.FirmwarePolicyIds, true
}

// HasFirmwarePolicyIds returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasFirmwarePolicyIds() bool {
	if o != nil && !IsNil(o.FirmwarePolicyIds) {
		return true
	}

	return false
}

// SetFirmwarePolicyIds gets a reference to the given []float32 and assigns it to the FirmwarePolicyIds field.
func (o *ServerInstanceGroupConfiguration) SetFirmwarePolicyIds(v []float32) {
	o.FirmwarePolicyIds = v
}

// GetOsTemplateId returns the OsTemplateId field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetOsTemplateId() int32 {
	if o == nil || IsNil(o.OsTemplateId) {
		var ret int32
		return ret
	}
	return *o.OsTemplateId
}

// GetOsTemplateIdOk returns a tuple with the OsTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetOsTemplateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OsTemplateId) {
		return nil, false
	}
	return o.OsTemplateId, true
}

// HasOsTemplateId returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasOsTemplateId() bool {
	if o != nil && !IsNil(o.OsTemplateId) {
		return true
	}

	return false
}

// SetOsTemplateId gets a reference to the given int32 and assigns it to the OsTemplateId field.
func (o *ServerInstanceGroupConfiguration) SetOsTemplateId(v int32) {
	o.OsTemplateId = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *ServerInstanceGroupConfiguration) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetProcessorCount returns the ProcessorCount field value
func (o *ServerInstanceGroupConfiguration) GetProcessorCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessorCount
}

// GetProcessorCountOk returns a tuple with the ProcessorCount field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetProcessorCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorCount, true
}

// SetProcessorCount sets field value
func (o *ServerInstanceGroupConfiguration) SetProcessorCount(v int32) {
	o.ProcessorCount = v
}

// GetProcessorCoreCount returns the ProcessorCoreCount field value
func (o *ServerInstanceGroupConfiguration) GetProcessorCoreCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessorCoreCount
}

// GetProcessorCoreCountOk returns a tuple with the ProcessorCoreCount field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetProcessorCoreCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorCoreCount, true
}

// SetProcessorCoreCount sets field value
func (o *ServerInstanceGroupConfiguration) SetProcessorCoreCount(v int32) {
	o.ProcessorCoreCount = v
}

// GetProcessorCoreMhz returns the ProcessorCoreMhz field value
func (o *ServerInstanceGroupConfiguration) GetProcessorCoreMhz() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessorCoreMhz
}

// GetProcessorCoreMhzOk returns a tuple with the ProcessorCoreMhz field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetProcessorCoreMhzOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorCoreMhz, true
}

// SetProcessorCoreMhz sets field value
func (o *ServerInstanceGroupConfiguration) SetProcessorCoreMhz(v int32) {
	o.ProcessorCoreMhz = v
}

// GetRamGbytes returns the RamGbytes field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetRamGbytes() int32 {
	if o == nil || IsNil(o.RamGbytes) {
		var ret int32
		return ret
	}
	return *o.RamGbytes
}

// GetRamGbytesOk returns a tuple with the RamGbytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetRamGbytesOk() (*int32, bool) {
	if o == nil || IsNil(o.RamGbytes) {
		return nil, false
	}
	return o.RamGbytes, true
}

// HasRamGbytes returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasRamGbytes() bool {
	if o != nil && !IsNil(o.RamGbytes) {
		return true
	}

	return false
}

// SetRamGbytes gets a reference to the given int32 and assigns it to the RamGbytes field.
func (o *ServerInstanceGroupConfiguration) SetRamGbytes(v int32) {
	o.RamGbytes = &v
}

// GetDiskCount returns the DiskCount field value
func (o *ServerInstanceGroupConfiguration) GetDiskCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskCount
}

// GetDiskCountOk returns a tuple with the DiskCount field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetDiskCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskCount, true
}

// SetDiskCount sets field value
func (o *ServerInstanceGroupConfiguration) SetDiskCount(v int32) {
	o.DiskCount = v
}

// GetDiskSizeMbytes returns the DiskSizeMbytes field value
func (o *ServerInstanceGroupConfiguration) GetDiskSizeMbytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskSizeMbytes
}

// GetDiskSizeMbytesOk returns a tuple with the DiskSizeMbytes field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetDiskSizeMbytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSizeMbytes, true
}

// SetDiskSizeMbytes sets field value
func (o *ServerInstanceGroupConfiguration) SetDiskSizeMbytes(v int32) {
	o.DiskSizeMbytes = v
}

// GetDiskTypes returns the DiskTypes field value
func (o *ServerInstanceGroupConfiguration) GetDiskTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DiskTypes
}

// GetDiskTypesOk returns a tuple with the DiskTypes field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetDiskTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskTypes, true
}

// SetDiskTypes sets field value
func (o *ServerInstanceGroupConfiguration) SetDiskTypes(v []string) {
	o.DiskTypes = v
}

// GetVirtualInterfacesEnabled returns the VirtualInterfacesEnabled field value
func (o *ServerInstanceGroupConfiguration) GetVirtualInterfacesEnabled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VirtualInterfacesEnabled
}

// GetVirtualInterfacesEnabledOk returns a tuple with the VirtualInterfacesEnabled field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetVirtualInterfacesEnabledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualInterfacesEnabled, true
}

// SetVirtualInterfacesEnabled sets field value
func (o *ServerInstanceGroupConfiguration) SetVirtualInterfacesEnabled(v int32) {
	o.VirtualInterfacesEnabled = v
}

// GetAdditionalWanIpv4Json returns the AdditionalWanIpv4Json field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetAdditionalWanIpv4Json() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalWanIpv4Json) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalWanIpv4Json
}

// GetAdditionalWanIpv4JsonOk returns a tuple with the AdditionalWanIpv4Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetAdditionalWanIpv4JsonOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalWanIpv4Json) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalWanIpv4Json, true
}

// HasAdditionalWanIpv4Json returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasAdditionalWanIpv4Json() bool {
	if o != nil && !IsNil(o.AdditionalWanIpv4Json) {
		return true
	}

	return false
}

// SetAdditionalWanIpv4Json gets a reference to the given map[string]interface{} and assigns it to the AdditionalWanIpv4Json field.
func (o *ServerInstanceGroupConfiguration) SetAdditionalWanIpv4Json(v map[string]interface{}) {
	o.AdditionalWanIpv4Json = v
}

// GetNetworkProfileGroupId returns the NetworkProfileGroupId field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetNetworkProfileGroupId() int32 {
	if o == nil || IsNil(o.NetworkProfileGroupId) {
		var ret int32
		return ret
	}
	return *o.NetworkProfileGroupId
}

// GetNetworkProfileGroupIdOk returns a tuple with the NetworkProfileGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetNetworkProfileGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkProfileGroupId) {
		return nil, false
	}
	return o.NetworkProfileGroupId, true
}

// HasNetworkProfileGroupId returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasNetworkProfileGroupId() bool {
	if o != nil && !IsNil(o.NetworkProfileGroupId) {
		return true
	}

	return false
}

// SetNetworkProfileGroupId gets a reference to the given int32 and assigns it to the NetworkProfileGroupId field.
func (o *ServerInstanceGroupConfiguration) SetNetworkProfileGroupId(v int32) {
	o.NetworkProfileGroupId = &v
}

// GetOverrideIpv4WanVlanId returns the OverrideIpv4WanVlanId field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetOverrideIpv4WanVlanId() int32 {
	if o == nil || IsNil(o.OverrideIpv4WanVlanId) {
		var ret int32
		return ret
	}
	return *o.OverrideIpv4WanVlanId
}

// GetOverrideIpv4WanVlanIdOk returns a tuple with the OverrideIpv4WanVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetOverrideIpv4WanVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OverrideIpv4WanVlanId) {
		return nil, false
	}
	return o.OverrideIpv4WanVlanId, true
}

// HasOverrideIpv4WanVlanId returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasOverrideIpv4WanVlanId() bool {
	if o != nil && !IsNil(o.OverrideIpv4WanVlanId) {
		return true
	}

	return false
}

// SetOverrideIpv4WanVlanId gets a reference to the given int32 and assigns it to the OverrideIpv4WanVlanId field.
func (o *ServerInstanceGroupConfiguration) SetOverrideIpv4WanVlanId(v int32) {
	o.OverrideIpv4WanVlanId = &v
}

// GetNetworkEquipmentForceSubnetPoolIpv4WanId returns the NetworkEquipmentForceSubnetPoolIpv4WanId field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetNetworkEquipmentForceSubnetPoolIpv4WanId() int32 {
	if o == nil || IsNil(o.NetworkEquipmentForceSubnetPoolIpv4WanId) {
		var ret int32
		return ret
	}
	return *o.NetworkEquipmentForceSubnetPoolIpv4WanId
}

// GetNetworkEquipmentForceSubnetPoolIpv4WanIdOk returns a tuple with the NetworkEquipmentForceSubnetPoolIpv4WanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetNetworkEquipmentForceSubnetPoolIpv4WanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkEquipmentForceSubnetPoolIpv4WanId) {
		return nil, false
	}
	return o.NetworkEquipmentForceSubnetPoolIpv4WanId, true
}

// HasNetworkEquipmentForceSubnetPoolIpv4WanId returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasNetworkEquipmentForceSubnetPoolIpv4WanId() bool {
	if o != nil && !IsNil(o.NetworkEquipmentForceSubnetPoolIpv4WanId) {
		return true
	}

	return false
}

// SetNetworkEquipmentForceSubnetPoolIpv4WanId gets a reference to the given int32 and assigns it to the NetworkEquipmentForceSubnetPoolIpv4WanId field.
func (o *ServerInstanceGroupConfiguration) SetNetworkEquipmentForceSubnetPoolIpv4WanId(v int32) {
	o.NetworkEquipmentForceSubnetPoolIpv4WanId = &v
}

// GetDnsSubdomainChangeId returns the DnsSubdomainChangeId field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetDnsSubdomainChangeId() int32 {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainChangeId
}

// GetDnsSubdomainChangeIdOk returns a tuple with the DnsSubdomainChangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetDnsSubdomainChangeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		return nil, false
	}
	return o.DnsSubdomainChangeId, true
}

// HasDnsSubdomainChangeId returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasDnsSubdomainChangeId() bool {
	if o != nil && !IsNil(o.DnsSubdomainChangeId) {
		return true
	}

	return false
}

// SetDnsSubdomainChangeId gets a reference to the given int32 and assigns it to the DnsSubdomainChangeId field.
func (o *ServerInstanceGroupConfiguration) SetDnsSubdomainChangeId(v int32) {
	o.DnsSubdomainChangeId = &v
}

// GetInfrastructureDeployId returns the InfrastructureDeployId field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetInfrastructureDeployId() int32 {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		var ret int32
		return ret
	}
	return *o.InfrastructureDeployId
}

// GetInfrastructureDeployIdOk returns a tuple with the InfrastructureDeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetInfrastructureDeployIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		return nil, false
	}
	return o.InfrastructureDeployId, true
}

// HasInfrastructureDeployId returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasInfrastructureDeployId() bool {
	if o != nil && !IsNil(o.InfrastructureDeployId) {
		return true
	}

	return false
}

// SetInfrastructureDeployId gets a reference to the given int32 and assigns it to the InfrastructureDeployId field.
func (o *ServerInstanceGroupConfiguration) SetInfrastructureDeployId(v int32) {
	o.InfrastructureDeployId = &v
}

// GetEmptyEdit returns the EmptyEdit field value if set, zero value otherwise.
func (o *ServerInstanceGroupConfiguration) GetEmptyEdit() int32 {
	if o == nil || IsNil(o.EmptyEdit) {
		var ret int32
		return ret
	}
	return *o.EmptyEdit
}

// GetEmptyEditOk returns a tuple with the EmptyEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetEmptyEditOk() (*int32, bool) {
	if o == nil || IsNil(o.EmptyEdit) {
		return nil, false
	}
	return o.EmptyEdit, true
}

// HasEmptyEdit returns a boolean if a field has been set.
func (o *ServerInstanceGroupConfiguration) HasEmptyEdit() bool {
	if o != nil && !IsNil(o.EmptyEdit) {
		return true
	}

	return false
}

// SetEmptyEdit gets a reference to the given int32 and assigns it to the EmptyEdit field.
func (o *ServerInstanceGroupConfiguration) SetEmptyEdit(v int32) {
	o.EmptyEdit = &v
}

// GetDeployType returns the DeployType field value
func (o *ServerInstanceGroupConfiguration) GetDeployType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetDeployTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployType, true
}

// SetDeployType sets field value
func (o *ServerInstanceGroupConfiguration) SetDeployType(v string) {
	o.DeployType = v
}

// GetDeployStatus returns the DeployStatus field value
func (o *ServerInstanceGroupConfiguration) GetDeployStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployStatus
}

// GetDeployStatusOk returns a tuple with the DeployStatus field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupConfiguration) GetDeployStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployStatus, true
}

// SetDeployStatus sets field value
func (o *ServerInstanceGroupConfiguration) SetDeployStatus(v string) {
	o.DeployStatus = v
}

func (o ServerInstanceGroupConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceGroupConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revision"] = o.Revision
	toSerialize["label"] = o.Label
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.ServerGroupName) {
		toSerialize["serverGroupName"] = o.ServerGroupName
	}
	toSerialize["instanceCount"] = o.InstanceCount
	toSerialize["defaultServerTypeId"] = o.DefaultServerTypeId
	toSerialize["ipAllocateAuto"] = o.IpAllocateAuto
	toSerialize["ipv4SubnetCreateAuto"] = o.Ipv4SubnetCreateAuto
	if o.FirmwarePolicyIds != nil {
		toSerialize["firmwarePolicyIds"] = o.FirmwarePolicyIds
	}
	if !IsNil(o.OsTemplateId) {
		toSerialize["osTemplateId"] = o.OsTemplateId
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	toSerialize["processorCount"] = o.ProcessorCount
	toSerialize["processorCoreCount"] = o.ProcessorCoreCount
	toSerialize["processorCoreMhz"] = o.ProcessorCoreMhz
	if !IsNil(o.RamGbytes) {
		toSerialize["ramGbytes"] = o.RamGbytes
	}
	toSerialize["diskCount"] = o.DiskCount
	toSerialize["diskSizeMbytes"] = o.DiskSizeMbytes
	toSerialize["diskTypes"] = o.DiskTypes
	toSerialize["virtualInterfacesEnabled"] = o.VirtualInterfacesEnabled
	if !IsNil(o.AdditionalWanIpv4Json) {
		toSerialize["additionalWanIpv4Json"] = o.AdditionalWanIpv4Json
	}
	if !IsNil(o.NetworkProfileGroupId) {
		toSerialize["networkProfileGroupId"] = o.NetworkProfileGroupId
	}
	if !IsNil(o.OverrideIpv4WanVlanId) {
		toSerialize["overrideIpv4WanVlanId"] = o.OverrideIpv4WanVlanId
	}
	if !IsNil(o.NetworkEquipmentForceSubnetPoolIpv4WanId) {
		toSerialize["networkEquipmentForceSubnetPoolIpv4WanId"] = o.NetworkEquipmentForceSubnetPoolIpv4WanId
	}
	if !IsNil(o.DnsSubdomainChangeId) {
		toSerialize["dnsSubdomainChangeId"] = o.DnsSubdomainChangeId
	}
	if !IsNil(o.InfrastructureDeployId) {
		toSerialize["infrastructureDeployId"] = o.InfrastructureDeployId
	}
	if !IsNil(o.EmptyEdit) {
		toSerialize["emptyEdit"] = o.EmptyEdit
	}
	toSerialize["deployType"] = o.DeployType
	toSerialize["deployStatus"] = o.DeployStatus

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceGroupConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revision",
		"label",
		"updatedTimestamp",
		"instanceCount",
		"defaultServerTypeId",
		"ipAllocateAuto",
		"ipv4SubnetCreateAuto",
		"processorCount",
		"processorCoreCount",
		"processorCoreMhz",
		"diskCount",
		"diskSizeMbytes",
		"diskTypes",
		"virtualInterfacesEnabled",
		"deployType",
		"deployStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceGroupConfiguration := _ServerInstanceGroupConfiguration{}

	err = json.Unmarshal(data, &varServerInstanceGroupConfiguration)

	if err != nil {
		return err
	}

	*o = ServerInstanceGroupConfiguration(varServerInstanceGroupConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "serverGroupName")
		delete(additionalProperties, "instanceCount")
		delete(additionalProperties, "defaultServerTypeId")
		delete(additionalProperties, "ipAllocateAuto")
		delete(additionalProperties, "ipv4SubnetCreateAuto")
		delete(additionalProperties, "firmwarePolicyIds")
		delete(additionalProperties, "osTemplateId")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "processorCount")
		delete(additionalProperties, "processorCoreCount")
		delete(additionalProperties, "processorCoreMhz")
		delete(additionalProperties, "ramGbytes")
		delete(additionalProperties, "diskCount")
		delete(additionalProperties, "diskSizeMbytes")
		delete(additionalProperties, "diskTypes")
		delete(additionalProperties, "virtualInterfacesEnabled")
		delete(additionalProperties, "additionalWanIpv4Json")
		delete(additionalProperties, "networkProfileGroupId")
		delete(additionalProperties, "overrideIpv4WanVlanId")
		delete(additionalProperties, "networkEquipmentForceSubnetPoolIpv4WanId")
		delete(additionalProperties, "dnsSubdomainChangeId")
		delete(additionalProperties, "infrastructureDeployId")
		delete(additionalProperties, "emptyEdit")
		delete(additionalProperties, "deployType")
		delete(additionalProperties, "deployStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceGroupConfiguration struct {
	value *ServerInstanceGroupConfiguration
	isSet bool
}

func (v NullableServerInstanceGroupConfiguration) Get() *ServerInstanceGroupConfiguration {
	return v.value
}

func (v *NullableServerInstanceGroupConfiguration) Set(val *ServerInstanceGroupConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceGroupConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceGroupConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceGroupConfiguration(val *ServerInstanceGroupConfiguration) *NullableServerInstanceGroupConfiguration {
	return &NullableServerInstanceGroupConfiguration{value: val, isSet: true}
}

func (v NullableServerInstanceGroupConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceGroupConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


