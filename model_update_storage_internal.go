/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateStorageInternal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStorageInternal{}

// UpdateStorageInternal struct for UpdateStorageInternal
type UpdateStorageInternal struct {
	// Specifies if the storage is in maintenance
	InMaintenance *float32 `json:"inMaintenance,omitempty"`
	// Specifies if the storage is experimental
	IsExperimental *float32 `json:"isExperimental,omitempty"`
	// Specifies the drive priority
	DrivePriority *float32 `json:"drivePriority,omitempty"`
	// Specifies the shared drive priority
	SharedDrivePriority *float32 `json:"sharedDrivePriority,omitempty"`
	// Tags
	Tags []string `json:"tags,omitempty"`
	// Default IO limit policy
	DefaultIoLimitPolicy *string `json:"defaultIoLimitPolicy,omitempty"`
	// The password to use.
	Password *string `json:"password,omitempty"`
	// Options for the storage
	Options *StorageOptions `json:"options,omitempty"`
	// The extension execution info of the storage.
	ExtensionInfo *ExtensionExecutionInfo `json:"extensionInfo,omitempty"`
	// Storage status
	Status *string `json:"status,omitempty"`
	// Total capacity in MB
	TotalCapacity *float32 `json:"totalCapacity,omitempty"`
	// Usable capacity in MB
	UsableCapacity *float32 `json:"usableCapacity,omitempty"`
	// Free capacity in MB
	FreeCapacity *float32 `json:"freeCapacity,omitempty"`
	// Virtual used capacity in MB
	VirtualUsedCapacity *float32 `json:"virtualUsedCapacity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateStorageInternal UpdateStorageInternal

// NewUpdateStorageInternal instantiates a new UpdateStorageInternal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStorageInternal() *UpdateStorageInternal {
	this := UpdateStorageInternal{}
	return &this
}

// NewUpdateStorageInternalWithDefaults instantiates a new UpdateStorageInternal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStorageInternalWithDefaults() *UpdateStorageInternal {
	this := UpdateStorageInternal{}
	return &this
}

// GetInMaintenance returns the InMaintenance field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetInMaintenance() float32 {
	if o == nil || IsNil(o.InMaintenance) {
		var ret float32
		return ret
	}
	return *o.InMaintenance
}

// GetInMaintenanceOk returns a tuple with the InMaintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetInMaintenanceOk() (*float32, bool) {
	if o == nil || IsNil(o.InMaintenance) {
		return nil, false
	}
	return o.InMaintenance, true
}

// HasInMaintenance returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasInMaintenance() bool {
	if o != nil && !IsNil(o.InMaintenance) {
		return true
	}

	return false
}

// SetInMaintenance gets a reference to the given float32 and assigns it to the InMaintenance field.
func (o *UpdateStorageInternal) SetInMaintenance(v float32) {
	o.InMaintenance = &v
}

// GetIsExperimental returns the IsExperimental field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetIsExperimental() float32 {
	if o == nil || IsNil(o.IsExperimental) {
		var ret float32
		return ret
	}
	return *o.IsExperimental
}

// GetIsExperimentalOk returns a tuple with the IsExperimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetIsExperimentalOk() (*float32, bool) {
	if o == nil || IsNil(o.IsExperimental) {
		return nil, false
	}
	return o.IsExperimental, true
}

// HasIsExperimental returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasIsExperimental() bool {
	if o != nil && !IsNil(o.IsExperimental) {
		return true
	}

	return false
}

// SetIsExperimental gets a reference to the given float32 and assigns it to the IsExperimental field.
func (o *UpdateStorageInternal) SetIsExperimental(v float32) {
	o.IsExperimental = &v
}

// GetDrivePriority returns the DrivePriority field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetDrivePriority() float32 {
	if o == nil || IsNil(o.DrivePriority) {
		var ret float32
		return ret
	}
	return *o.DrivePriority
}

// GetDrivePriorityOk returns a tuple with the DrivePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetDrivePriorityOk() (*float32, bool) {
	if o == nil || IsNil(o.DrivePriority) {
		return nil, false
	}
	return o.DrivePriority, true
}

// HasDrivePriority returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasDrivePriority() bool {
	if o != nil && !IsNil(o.DrivePriority) {
		return true
	}

	return false
}

// SetDrivePriority gets a reference to the given float32 and assigns it to the DrivePriority field.
func (o *UpdateStorageInternal) SetDrivePriority(v float32) {
	o.DrivePriority = &v
}

// GetSharedDrivePriority returns the SharedDrivePriority field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetSharedDrivePriority() float32 {
	if o == nil || IsNil(o.SharedDrivePriority) {
		var ret float32
		return ret
	}
	return *o.SharedDrivePriority
}

// GetSharedDrivePriorityOk returns a tuple with the SharedDrivePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetSharedDrivePriorityOk() (*float32, bool) {
	if o == nil || IsNil(o.SharedDrivePriority) {
		return nil, false
	}
	return o.SharedDrivePriority, true
}

// HasSharedDrivePriority returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasSharedDrivePriority() bool {
	if o != nil && !IsNil(o.SharedDrivePriority) {
		return true
	}

	return false
}

// SetSharedDrivePriority gets a reference to the given float32 and assigns it to the SharedDrivePriority field.
func (o *UpdateStorageInternal) SetSharedDrivePriority(v float32) {
	o.SharedDrivePriority = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateStorageInternal) SetTags(v []string) {
	o.Tags = v
}

// GetDefaultIoLimitPolicy returns the DefaultIoLimitPolicy field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetDefaultIoLimitPolicy() string {
	if o == nil || IsNil(o.DefaultIoLimitPolicy) {
		var ret string
		return ret
	}
	return *o.DefaultIoLimitPolicy
}

// GetDefaultIoLimitPolicyOk returns a tuple with the DefaultIoLimitPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetDefaultIoLimitPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultIoLimitPolicy) {
		return nil, false
	}
	return o.DefaultIoLimitPolicy, true
}

// HasDefaultIoLimitPolicy returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasDefaultIoLimitPolicy() bool {
	if o != nil && !IsNil(o.DefaultIoLimitPolicy) {
		return true
	}

	return false
}

// SetDefaultIoLimitPolicy gets a reference to the given string and assigns it to the DefaultIoLimitPolicy field.
func (o *UpdateStorageInternal) SetDefaultIoLimitPolicy(v string) {
	o.DefaultIoLimitPolicy = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateStorageInternal) SetPassword(v string) {
	o.Password = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetOptions() StorageOptions {
	if o == nil || IsNil(o.Options) {
		var ret StorageOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetOptionsOk() (*StorageOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given StorageOptions and assigns it to the Options field.
func (o *UpdateStorageInternal) SetOptions(v StorageOptions) {
	o.Options = &v
}

// GetExtensionInfo returns the ExtensionInfo field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetExtensionInfo() ExtensionExecutionInfo {
	if o == nil || IsNil(o.ExtensionInfo) {
		var ret ExtensionExecutionInfo
		return ret
	}
	return *o.ExtensionInfo
}

// GetExtensionInfoOk returns a tuple with the ExtensionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetExtensionInfoOk() (*ExtensionExecutionInfo, bool) {
	if o == nil || IsNil(o.ExtensionInfo) {
		return nil, false
	}
	return o.ExtensionInfo, true
}

// HasExtensionInfo returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasExtensionInfo() bool {
	if o != nil && !IsNil(o.ExtensionInfo) {
		return true
	}

	return false
}

// SetExtensionInfo gets a reference to the given ExtensionExecutionInfo and assigns it to the ExtensionInfo field.
func (o *UpdateStorageInternal) SetExtensionInfo(v ExtensionExecutionInfo) {
	o.ExtensionInfo = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UpdateStorageInternal) SetStatus(v string) {
	o.Status = &v
}

// GetTotalCapacity returns the TotalCapacity field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetTotalCapacity() float32 {
	if o == nil || IsNil(o.TotalCapacity) {
		var ret float32
		return ret
	}
	return *o.TotalCapacity
}

// GetTotalCapacityOk returns a tuple with the TotalCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetTotalCapacityOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCapacity) {
		return nil, false
	}
	return o.TotalCapacity, true
}

// HasTotalCapacity returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasTotalCapacity() bool {
	if o != nil && !IsNil(o.TotalCapacity) {
		return true
	}

	return false
}

// SetTotalCapacity gets a reference to the given float32 and assigns it to the TotalCapacity field.
func (o *UpdateStorageInternal) SetTotalCapacity(v float32) {
	o.TotalCapacity = &v
}

// GetUsableCapacity returns the UsableCapacity field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetUsableCapacity() float32 {
	if o == nil || IsNil(o.UsableCapacity) {
		var ret float32
		return ret
	}
	return *o.UsableCapacity
}

// GetUsableCapacityOk returns a tuple with the UsableCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetUsableCapacityOk() (*float32, bool) {
	if o == nil || IsNil(o.UsableCapacity) {
		return nil, false
	}
	return o.UsableCapacity, true
}

// HasUsableCapacity returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasUsableCapacity() bool {
	if o != nil && !IsNil(o.UsableCapacity) {
		return true
	}

	return false
}

// SetUsableCapacity gets a reference to the given float32 and assigns it to the UsableCapacity field.
func (o *UpdateStorageInternal) SetUsableCapacity(v float32) {
	o.UsableCapacity = &v
}

// GetFreeCapacity returns the FreeCapacity field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetFreeCapacity() float32 {
	if o == nil || IsNil(o.FreeCapacity) {
		var ret float32
		return ret
	}
	return *o.FreeCapacity
}

// GetFreeCapacityOk returns a tuple with the FreeCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetFreeCapacityOk() (*float32, bool) {
	if o == nil || IsNil(o.FreeCapacity) {
		return nil, false
	}
	return o.FreeCapacity, true
}

// HasFreeCapacity returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasFreeCapacity() bool {
	if o != nil && !IsNil(o.FreeCapacity) {
		return true
	}

	return false
}

// SetFreeCapacity gets a reference to the given float32 and assigns it to the FreeCapacity field.
func (o *UpdateStorageInternal) SetFreeCapacity(v float32) {
	o.FreeCapacity = &v
}

// GetVirtualUsedCapacity returns the VirtualUsedCapacity field value if set, zero value otherwise.
func (o *UpdateStorageInternal) GetVirtualUsedCapacity() float32 {
	if o == nil || IsNil(o.VirtualUsedCapacity) {
		var ret float32
		return ret
	}
	return *o.VirtualUsedCapacity
}

// GetVirtualUsedCapacityOk returns a tuple with the VirtualUsedCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageInternal) GetVirtualUsedCapacityOk() (*float32, bool) {
	if o == nil || IsNil(o.VirtualUsedCapacity) {
		return nil, false
	}
	return o.VirtualUsedCapacity, true
}

// HasVirtualUsedCapacity returns a boolean if a field has been set.
func (o *UpdateStorageInternal) HasVirtualUsedCapacity() bool {
	if o != nil && !IsNil(o.VirtualUsedCapacity) {
		return true
	}

	return false
}

// SetVirtualUsedCapacity gets a reference to the given float32 and assigns it to the VirtualUsedCapacity field.
func (o *UpdateStorageInternal) SetVirtualUsedCapacity(v float32) {
	o.VirtualUsedCapacity = &v
}

func (o UpdateStorageInternal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStorageInternal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InMaintenance) {
		toSerialize["inMaintenance"] = o.InMaintenance
	}
	if !IsNil(o.IsExperimental) {
		toSerialize["isExperimental"] = o.IsExperimental
	}
	if !IsNil(o.DrivePriority) {
		toSerialize["drivePriority"] = o.DrivePriority
	}
	if !IsNil(o.SharedDrivePriority) {
		toSerialize["sharedDrivePriority"] = o.SharedDrivePriority
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.DefaultIoLimitPolicy) {
		toSerialize["defaultIoLimitPolicy"] = o.DefaultIoLimitPolicy
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ExtensionInfo) {
		toSerialize["extensionInfo"] = o.ExtensionInfo
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TotalCapacity) {
		toSerialize["totalCapacity"] = o.TotalCapacity
	}
	if !IsNil(o.UsableCapacity) {
		toSerialize["usableCapacity"] = o.UsableCapacity
	}
	if !IsNil(o.FreeCapacity) {
		toSerialize["freeCapacity"] = o.FreeCapacity
	}
	if !IsNil(o.VirtualUsedCapacity) {
		toSerialize["virtualUsedCapacity"] = o.VirtualUsedCapacity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateStorageInternal) UnmarshalJSON(data []byte) (err error) {
	varUpdateStorageInternal := _UpdateStorageInternal{}

	err = json.Unmarshal(data, &varUpdateStorageInternal)

	if err != nil {
		return err
	}

	*o = UpdateStorageInternal(varUpdateStorageInternal)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "inMaintenance")
		delete(additionalProperties, "isExperimental")
		delete(additionalProperties, "drivePriority")
		delete(additionalProperties, "sharedDrivePriority")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "defaultIoLimitPolicy")
		delete(additionalProperties, "password")
		delete(additionalProperties, "options")
		delete(additionalProperties, "extensionInfo")
		delete(additionalProperties, "status")
		delete(additionalProperties, "totalCapacity")
		delete(additionalProperties, "usableCapacity")
		delete(additionalProperties, "freeCapacity")
		delete(additionalProperties, "virtualUsedCapacity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateStorageInternal struct {
	value *UpdateStorageInternal
	isSet bool
}

func (v NullableUpdateStorageInternal) Get() *UpdateStorageInternal {
	return v.value
}

func (v *NullableUpdateStorageInternal) Set(val *UpdateStorageInternal) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStorageInternal) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStorageInternal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStorageInternal(val *UpdateStorageInternal) *NullableUpdateStorageInternal {
	return &NullableUpdateStorageInternal{value: val, isSet: true}
}

func (v NullableUpdateStorageInternal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStorageInternal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


