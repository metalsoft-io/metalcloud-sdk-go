/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ExtensionInputType the model 'ExtensionInputType'
type ExtensionInputType string

// List of ExtensionInputType
const (
	EXTENSIONINPUTTYPE_EXTENSION_INPUT_STRING ExtensionInputType = "ExtensionInputString"
	EXTENSIONINPUTTYPE_EXTENSION_INPUT_INTEGER ExtensionInputType = "ExtensionInputInteger"
	EXTENSIONINPUTTYPE_EXTENSION_INPUT_BOOLEAN ExtensionInputType = "ExtensionInputBoolean"
	EXTENSIONINPUTTYPE_EXTENSION_INPUT_SERVER_TYPE ExtensionInputType = "ExtensionInputServerType"
	EXTENSIONINPUTTYPE_EXTENSION_INPUT_OS_TEMPLATE ExtensionInputType = "ExtensionInputOsTemplate"
	EXTENSIONINPUTTYPE_EXTENSION_INPUT_NETWORK_PROFILE ExtensionInputType = "ExtensionInputNetworkProfile"
)

// All allowed values of ExtensionInputType enum
var AllowedExtensionInputTypeEnumValues = []ExtensionInputType{
	"ExtensionInputString",
	"ExtensionInputInteger",
	"ExtensionInputBoolean",
	"ExtensionInputServerType",
	"ExtensionInputOsTemplate",
	"ExtensionInputNetworkProfile",
}

func (v *ExtensionInputType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExtensionInputType(value)
	for _, existing := range AllowedExtensionInputTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExtensionInputType", value)
}

// NewExtensionInputTypeFromValue returns a pointer to a valid ExtensionInputType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExtensionInputTypeFromValue(v string) (*ExtensionInputType, error) {
	ev := ExtensionInputType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExtensionInputType: valid values are %v", v, AllowedExtensionInputTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExtensionInputType) IsValid() bool {
	for _, existing := range AllowedExtensionInputTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExtensionInputType value
func (v ExtensionInputType) Ptr() *ExtensionInputType {
	return &v
}

type NullableExtensionInputType struct {
	value *ExtensionInputType
	isSet bool
}

func (v NullableExtensionInputType) Get() *ExtensionInputType {
	return v.value
}

func (v *NullableExtensionInputType) Set(val *ExtensionInputType) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionInputType) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionInputType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionInputType(val *ExtensionInputType) *NullableExtensionInputType {
	return &NullableExtensionInputType{value: val, isSet: true}
}

func (v NullableExtensionInputType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionInputType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

