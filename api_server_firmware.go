/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ServerFirmwareAPIService ServerFirmwareAPI service
type ServerFirmwareAPIService service

type ServerFirmwareAPIFetchAndUpdateServerFirmwareAvailableVersionsRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	serverId float32
}

func (r ServerFirmwareAPIFetchAndUpdateServerFirmwareAvailableVersionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.FetchAndUpdateServerFirmwareAvailableVersionsExecute(r)
}

/*
FetchAndUpdateServerFirmwareAvailableVersions Fetches and updates the available firmware versions for the specified Server

Fetches and updates the available firmware versions for the specified Server

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId
 @return ServerFirmwareAPIFetchAndUpdateServerFirmwareAvailableVersionsRequest
*/
func (a *ServerFirmwareAPIService) FetchAndUpdateServerFirmwareAvailableVersions(ctx context.Context, serverId float32) ServerFirmwareAPIFetchAndUpdateServerFirmwareAvailableVersionsRequest {
	return ServerFirmwareAPIFetchAndUpdateServerFirmwareAvailableVersionsRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
	}
}

// Execute executes the request
func (a *ServerFirmwareAPIService) FetchAndUpdateServerFirmwareAvailableVersionsExecute(r ServerFirmwareAPIFetchAndUpdateServerFirmwareAvailableVersionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.FetchAndUpdateServerFirmwareAvailableVersions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/{serverId}/firmware/actions/fetch-and-update-available-versions"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ServerFirmwareAPIGenerateServersFirmwareUpgradeAuditRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	generateFirmwareUpgradeAudit *GenerateFirmwareUpgradeAudit
}

// The Firmware Upgrade Audit options
func (r ServerFirmwareAPIGenerateServersFirmwareUpgradeAuditRequest) GenerateFirmwareUpgradeAudit(generateFirmwareUpgradeAudit GenerateFirmwareUpgradeAudit) ServerFirmwareAPIGenerateServersFirmwareUpgradeAuditRequest {
	r.generateFirmwareUpgradeAudit = &generateFirmwareUpgradeAudit
	return r
}

func (r ServerFirmwareAPIGenerateServersFirmwareUpgradeAuditRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GenerateServersFirmwareUpgradeAuditExecute(r)
}

/*
GenerateServersFirmwareUpgradeAudit Generates a Firmware Upgrade Audit for the specified Servers

Generates a Firmware Upgrade Audit for the specified Servers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerFirmwareAPIGenerateServersFirmwareUpgradeAuditRequest
*/
func (a *ServerFirmwareAPIService) GenerateServersFirmwareUpgradeAudit(ctx context.Context) ServerFirmwareAPIGenerateServersFirmwareUpgradeAuditRequest {
	return ServerFirmwareAPIGenerateServersFirmwareUpgradeAuditRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ServerFirmwareAPIService) GenerateServersFirmwareUpgradeAuditExecute(r ServerFirmwareAPIGenerateServersFirmwareUpgradeAuditRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.GenerateServersFirmwareUpgradeAudit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/firmware/actions/generate-upgrade-audit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.generateFirmwareUpgradeAudit == nil {
		return localVarReturnValue, nil, reportError("generateFirmwareUpgradeAudit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generateFirmwareUpgradeAudit
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerFirmwareAPIGetServerComponentInfoRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	serverId float32
	componentId float32
}

func (r ServerFirmwareAPIGetServerComponentInfoRequest) Execute() (*ServerComponent, *http.Response, error) {
	return r.ApiService.GetServerComponentInfoExecute(r)
}

/*
GetServerComponentInfo Get Server component information

Returns Server component information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId
 @param componentId
 @return ServerFirmwareAPIGetServerComponentInfoRequest
*/
func (a *ServerFirmwareAPIService) GetServerComponentInfo(ctx context.Context, serverId float32, componentId float32) ServerFirmwareAPIGetServerComponentInfoRequest {
	return ServerFirmwareAPIGetServerComponentInfoRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
		componentId: componentId,
	}
}

// Execute executes the request
//  @return ServerComponent
func (a *ServerFirmwareAPIService) GetServerComponentInfoExecute(r ServerFirmwareAPIGetServerComponentInfoRequest) (*ServerComponent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.GetServerComponentInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/{serverId}/firmware/components/{componentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"componentId"+"}", url.PathEscape(parameterValueToString(r.componentId, "componentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerFirmwareAPIGetServerComponentsRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	serverId float32
	page *float32
	limit *float32
	filterId *[]string
	filterExternalId *[]string
	filterServerId *[]string
	filterName *[]string
	filterFirmwareTargetVersion *[]string
	filterFirmwareVersion *[]string
	filterFirmwareUpdateTimestamp *[]string
	filterFirmwareScheduledTimestamp *[]string
	filterFirmwareStatus *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r ServerFirmwareAPIGetServerComponentsRequest) Page(page float32) ServerFirmwareAPIGetServerComponentsRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r ServerFirmwareAPIGetServerComponentsRequest) Limit(limit float32) ServerFirmwareAPIGetServerComponentsRequest {
	r.limit = &limit
	return r
}

// Filter by id query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.id&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.id&#x3D;$not:$like:John Doe&amp;filter.id&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerFirmwareAPIGetServerComponentsRequest) FilterId(filterId []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.filterId = &filterId
	return r
}

// Filter by externalId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.externalId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.externalId&#x3D;$not:$like:John Doe&amp;filter.externalId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerFirmwareAPIGetServerComponentsRequest) FilterExternalId(filterExternalId []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.filterExternalId = &filterExternalId
	return r
}

// Filter by serverId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverId&#x3D;$not:$like:John Doe&amp;filter.serverId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerFirmwareAPIGetServerComponentsRequest) FilterServerId(filterServerId []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.filterServerId = &filterServerId
	return r
}

// Filter by name query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.name&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.name&#x3D;$not:$like:John Doe&amp;filter.name&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerFirmwareAPIGetServerComponentsRequest) FilterName(filterName []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.filterName = &filterName
	return r
}

// Filter by firmwareTargetVersion query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.firmwareTargetVersion&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.firmwareTargetVersion&#x3D;$not:$like:John Doe&amp;filter.firmwareTargetVersion&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerFirmwareAPIGetServerComponentsRequest) FilterFirmwareTargetVersion(filterFirmwareTargetVersion []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.filterFirmwareTargetVersion = &filterFirmwareTargetVersion
	return r
}

// Filter by firmwareVersion query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.firmwareVersion&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.firmwareVersion&#x3D;$not:$like:John Doe&amp;filter.firmwareVersion&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerFirmwareAPIGetServerComponentsRequest) FilterFirmwareVersion(filterFirmwareVersion []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.filterFirmwareVersion = &filterFirmwareVersion
	return r
}

// Filter by firmwareUpdateTimestamp query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.firmwareUpdateTimestamp&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.firmwareUpdateTimestamp&#x3D;$not:$like:John Doe&amp;filter.firmwareUpdateTimestamp&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerFirmwareAPIGetServerComponentsRequest) FilterFirmwareUpdateTimestamp(filterFirmwareUpdateTimestamp []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.filterFirmwareUpdateTimestamp = &filterFirmwareUpdateTimestamp
	return r
}

// Filter by firmwareScheduledTimestamp query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.firmwareScheduledTimestamp&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.firmwareScheduledTimestamp&#x3D;$not:$like:John Doe&amp;filter.firmwareScheduledTimestamp&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerFirmwareAPIGetServerComponentsRequest) FilterFirmwareScheduledTimestamp(filterFirmwareScheduledTimestamp []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.filterFirmwareScheduledTimestamp = &filterFirmwareScheduledTimestamp
	return r
}

// Filter by firmwareStatus query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.firmwareStatus&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.firmwareStatus&#x3D;$not:$like:John Doe&amp;filter.firmwareStatus&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerFirmwareAPIGetServerComponentsRequest) FilterFirmwareStatus(filterFirmwareStatus []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.filterFirmwareStatus = &filterFirmwareStatus
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:ASC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;externalId&lt;/li&gt; &lt;li&gt;serverId&lt;/li&gt; &lt;li&gt;name&lt;/li&gt; &lt;li&gt;firmwareVersion&lt;/li&gt; &lt;li&gt;firmwareScheduledTimestamp&lt;/li&gt; &lt;li&gt;firmwareStatus&lt;/li&gt;&lt;/ul&gt;       
func (r ServerFirmwareAPIGetServerComponentsRequest) SortBy(sortBy []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r ServerFirmwareAPIGetServerComponentsRequest) Search(search string) ServerFirmwareAPIGetServerComponentsRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; id,externalId,serverId,name,firmwareVersion           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;externalId&lt;/li&gt; &lt;li&gt;serverId&lt;/li&gt; &lt;li&gt;name&lt;/li&gt; &lt;li&gt;firmwareVersion&lt;/li&gt; &lt;li&gt;firmwareScheduledTimestamp&lt;/li&gt; &lt;li&gt;firmwareStatus&lt;/li&gt;&lt;/ul&gt;         
func (r ServerFirmwareAPIGetServerComponentsRequest) SearchBy(searchBy []string) ServerFirmwareAPIGetServerComponentsRequest {
	r.searchBy = &searchBy
	return r
}

func (r ServerFirmwareAPIGetServerComponentsRequest) Execute() (*ServerComponentPaginatedList, *http.Response, error) {
	return r.ApiService.GetServerComponentsExecute(r)
}

/*
GetServerComponents Get a list of Server Components

Returns a list of Server Components

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId
 @return ServerFirmwareAPIGetServerComponentsRequest
*/
func (a *ServerFirmwareAPIService) GetServerComponents(ctx context.Context, serverId float32) ServerFirmwareAPIGetServerComponentsRequest {
	return ServerFirmwareAPIGetServerComponentsRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
	}
}

// Execute executes the request
//  @return ServerComponentPaginatedList
func (a *ServerFirmwareAPIService) GetServerComponentsExecute(r ServerFirmwareAPIGetServerComponentsRequest) (*ServerComponentPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerComponentPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.GetServerComponents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/{serverId}/firmware/components"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterId != nil {
		t := *r.filterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.id", t, "form", "multi")
		}
	}
	if r.filterExternalId != nil {
		t := *r.filterExternalId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.externalId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.externalId", t, "form", "multi")
		}
	}
	if r.filterServerId != nil {
		t := *r.filterServerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverId", t, "form", "multi")
		}
	}
	if r.filterName != nil {
		t := *r.filterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.name", t, "form", "multi")
		}
	}
	if r.filterFirmwareTargetVersion != nil {
		t := *r.filterFirmwareTargetVersion
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareTargetVersion", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareTargetVersion", t, "form", "multi")
		}
	}
	if r.filterFirmwareVersion != nil {
		t := *r.filterFirmwareVersion
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareVersion", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareVersion", t, "form", "multi")
		}
	}
	if r.filterFirmwareUpdateTimestamp != nil {
		t := *r.filterFirmwareUpdateTimestamp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareUpdateTimestamp", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareUpdateTimestamp", t, "form", "multi")
		}
	}
	if r.filterFirmwareScheduledTimestamp != nil {
		t := *r.filterFirmwareScheduledTimestamp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareScheduledTimestamp", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareScheduledTimestamp", t, "form", "multi")
		}
	}
	if r.filterFirmwareStatus != nil {
		t := *r.filterFirmwareStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareStatus", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.firmwareStatus", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerFirmwareAPIGetServerFirmwareInventoryRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	serverId float32
}

func (r ServerFirmwareAPIGetServerFirmwareInventoryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetServerFirmwareInventoryExecute(r)
}

/*
GetServerFirmwareInventory Retrieves server firmware inventory from redfish

Retrieves server firmware inventory from redfish

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId
 @return ServerFirmwareAPIGetServerFirmwareInventoryRequest
*/
func (a *ServerFirmwareAPIService) GetServerFirmwareInventory(ctx context.Context, serverId float32) ServerFirmwareAPIGetServerFirmwareInventoryRequest {
	return ServerFirmwareAPIGetServerFirmwareInventoryRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ServerFirmwareAPIService) GetServerFirmwareInventoryExecute(r ServerFirmwareAPIGetServerFirmwareInventoryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.GetServerFirmwareInventory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/{serverId}/firmware/inventory"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerFirmwareAPIScheduleServerFirmwareUpgradeRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	serverId float32
	scheduleFirmwareUpgrade *ScheduleFirmwareUpgrade
}

// The Schedule Firmware Upgrade object
func (r ServerFirmwareAPIScheduleServerFirmwareUpgradeRequest) ScheduleFirmwareUpgrade(scheduleFirmwareUpgrade ScheduleFirmwareUpgrade) ServerFirmwareAPIScheduleServerFirmwareUpgradeRequest {
	r.scheduleFirmwareUpgrade = &scheduleFirmwareUpgrade
	return r
}

func (r ServerFirmwareAPIScheduleServerFirmwareUpgradeRequest) Execute() (*http.Response, error) {
	return r.ApiService.ScheduleServerFirmwareUpgradeExecute(r)
}

/*
ScheduleServerFirmwareUpgrade Schedules a firmware upgrade for the specified Server

Schedules a firmware upgrade for the specified Server

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId
 @return ServerFirmwareAPIScheduleServerFirmwareUpgradeRequest
*/
func (a *ServerFirmwareAPIService) ScheduleServerFirmwareUpgrade(ctx context.Context, serverId float32) ServerFirmwareAPIScheduleServerFirmwareUpgradeRequest {
	return ServerFirmwareAPIScheduleServerFirmwareUpgradeRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
	}
}

// Execute executes the request
func (a *ServerFirmwareAPIService) ScheduleServerFirmwareUpgradeExecute(r ServerFirmwareAPIScheduleServerFirmwareUpgradeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.ScheduleServerFirmwareUpgrade")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/{serverId}/firmware/actions/schedule-upgrade"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scheduleFirmwareUpgrade == nil {
		return nil, reportError("scheduleFirmwareUpgrade is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.scheduleFirmwareUpgrade
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ServerFirmwareAPIUpdateServerComponentRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	serverId float32
	componentId float32
	updateServerComponent *UpdateServerComponent
}

// The Server Component update object
func (r ServerFirmwareAPIUpdateServerComponentRequest) UpdateServerComponent(updateServerComponent UpdateServerComponent) ServerFirmwareAPIUpdateServerComponentRequest {
	r.updateServerComponent = &updateServerComponent
	return r
}

func (r ServerFirmwareAPIUpdateServerComponentRequest) Execute() (*ServerComponent, *http.Response, error) {
	return r.ApiService.UpdateServerComponentExecute(r)
}

/*
UpdateServerComponent Updates a Server Component

Updates a Server Component

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId
 @param componentId
 @return ServerFirmwareAPIUpdateServerComponentRequest
*/
func (a *ServerFirmwareAPIService) UpdateServerComponent(ctx context.Context, serverId float32, componentId float32) ServerFirmwareAPIUpdateServerComponentRequest {
	return ServerFirmwareAPIUpdateServerComponentRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
		componentId: componentId,
	}
}

// Execute executes the request
//  @return ServerComponent
func (a *ServerFirmwareAPIService) UpdateServerComponentExecute(r ServerFirmwareAPIUpdateServerComponentRequest) (*ServerComponent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.UpdateServerComponent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/{serverId}/firmware/components/{componentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"componentId"+"}", url.PathEscape(parameterValueToString(r.componentId, "componentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateServerComponent == nil {
		return localVarReturnValue, nil, reportError("updateServerComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateServerComponent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerFirmwareAPIUpdateServerFirmwareInfoRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	serverId float32
}

func (r ServerFirmwareAPIUpdateServerFirmwareInfoRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateServerFirmwareInfoExecute(r)
}

/*
UpdateServerFirmwareInfo Updates the firmware information of the Server Components

Updates the firmware information of the Server Components

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId
 @return ServerFirmwareAPIUpdateServerFirmwareInfoRequest
*/
func (a *ServerFirmwareAPIService) UpdateServerFirmwareInfo(ctx context.Context, serverId float32) ServerFirmwareAPIUpdateServerFirmwareInfoRequest {
	return ServerFirmwareAPIUpdateServerFirmwareInfoRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
	}
}

// Execute executes the request
func (a *ServerFirmwareAPIService) UpdateServerFirmwareInfoExecute(r ServerFirmwareAPIUpdateServerFirmwareInfoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.UpdateServerFirmwareInfo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/{serverId}/firmware/actions/update-info"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ServerFirmwareAPIUpgradeFirmwareOfServerRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	serverId float32
}

func (r ServerFirmwareAPIUpgradeFirmwareOfServerRequest) Execute() (*JobInfo, *http.Response, error) {
	return r.ApiService.UpgradeFirmwareOfServerExecute(r)
}

/*
UpgradeFirmwareOfServer Upgrades the firmware of all updatable components on Server

Upgrades the firmware of all updatable components on Server

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId
 @return ServerFirmwareAPIUpgradeFirmwareOfServerRequest
*/
func (a *ServerFirmwareAPIService) UpgradeFirmwareOfServer(ctx context.Context, serverId float32) ServerFirmwareAPIUpgradeFirmwareOfServerRequest {
	return ServerFirmwareAPIUpgradeFirmwareOfServerRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
	}
}

// Execute executes the request
//  @return JobInfo
func (a *ServerFirmwareAPIService) UpgradeFirmwareOfServerExecute(r ServerFirmwareAPIUpgradeFirmwareOfServerRequest) (*JobInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.UpgradeFirmwareOfServer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/{serverId}/firmware/actions/upgrade"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerFirmwareAPIUpgradeFirmwareOfServerComponentRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	serverId float32
	serverComponentId float32
	firmwareUpgrade *FirmwareUpgrade
}

// The Firmware Upgrade object
func (r ServerFirmwareAPIUpgradeFirmwareOfServerComponentRequest) FirmwareUpgrade(firmwareUpgrade FirmwareUpgrade) ServerFirmwareAPIUpgradeFirmwareOfServerComponentRequest {
	r.firmwareUpgrade = &firmwareUpgrade
	return r
}

func (r ServerFirmwareAPIUpgradeFirmwareOfServerComponentRequest) Execute() (*JobInfo, *http.Response, error) {
	return r.ApiService.UpgradeFirmwareOfServerComponentExecute(r)
}

/*
UpgradeFirmwareOfServerComponent Upgrades the firmware of the specified component on Server

Upgrades the firmware of the specified component on Server

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverId
 @param serverComponentId
 @return ServerFirmwareAPIUpgradeFirmwareOfServerComponentRequest
*/
func (a *ServerFirmwareAPIService) UpgradeFirmwareOfServerComponent(ctx context.Context, serverId float32, serverComponentId float32) ServerFirmwareAPIUpgradeFirmwareOfServerComponentRequest {
	return ServerFirmwareAPIUpgradeFirmwareOfServerComponentRequest{
		ApiService: a,
		ctx: ctx,
		serverId: serverId,
		serverComponentId: serverComponentId,
	}
}

// Execute executes the request
//  @return JobInfo
func (a *ServerFirmwareAPIService) UpgradeFirmwareOfServerComponentExecute(r ServerFirmwareAPIUpgradeFirmwareOfServerComponentRequest) (*JobInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.UpgradeFirmwareOfServerComponent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/{serverId}/firmware/components/{serverComponentId}/actions/upgrade"
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serverComponentId"+"}", url.PathEscape(parameterValueToString(r.serverComponentId, "serverComponentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.firmwareUpgrade == nil {
		return localVarReturnValue, nil, reportError("firmwareUpgrade is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.firmwareUpgrade
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerFirmwareAPIUpgradeFirmwareOfServersBatchRequest struct {
	ctx context.Context
	ApiService *ServerFirmwareAPIService
	batchServerFirmwareUpgrade *BatchServerFirmwareUpgrade
}

// The Firmware Upgrade object
func (r ServerFirmwareAPIUpgradeFirmwareOfServersBatchRequest) BatchServerFirmwareUpgrade(batchServerFirmwareUpgrade BatchServerFirmwareUpgrade) ServerFirmwareAPIUpgradeFirmwareOfServersBatchRequest {
	r.batchServerFirmwareUpgrade = &batchServerFirmwareUpgrade
	return r
}

func (r ServerFirmwareAPIUpgradeFirmwareOfServersBatchRequest) Execute() (*BatchServerFirmwareUpgradeResponse, *http.Response, error) {
	return r.ApiService.UpgradeFirmwareOfServersBatchExecute(r)
}

/*
UpgradeFirmwareOfServersBatch Upgrades the firmware of all updatable components on the specified Servers

Upgrades the firmware of all updatable components on specified Servers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerFirmwareAPIUpgradeFirmwareOfServersBatchRequest
*/
func (a *ServerFirmwareAPIService) UpgradeFirmwareOfServersBatch(ctx context.Context) ServerFirmwareAPIUpgradeFirmwareOfServersBatchRequest {
	return ServerFirmwareAPIUpgradeFirmwareOfServersBatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchServerFirmwareUpgradeResponse
func (a *ServerFirmwareAPIService) UpgradeFirmwareOfServersBatchExecute(r ServerFirmwareAPIUpgradeFirmwareOfServersBatchRequest) (*BatchServerFirmwareUpgradeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchServerFirmwareUpgradeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerFirmwareAPIService.UpgradeFirmwareOfServersBatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/firmware/actions/batch-upgrade"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchServerFirmwareUpgrade == nil {
		return localVarReturnValue, nil, reportError("batchServerFirmwareUpgrade is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchServerFirmwareUpgrade
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
