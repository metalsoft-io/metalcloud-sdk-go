/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the JobOptionsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobOptionsDto{}

// JobOptionsDto struct for JobOptionsDto
type JobOptionsDto struct {
	// Whether the job can be retried if it was successful
	CanBeRetriedIfSuccessful *bool `json:"canBeRetriedIfSuccessful,omitempty"`
	// Whether the job can be skipped
	CanBeSkipped *bool `json:"canBeSkipped,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobOptionsDto JobOptionsDto

// NewJobOptionsDto instantiates a new JobOptionsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobOptionsDto() *JobOptionsDto {
	this := JobOptionsDto{}
	var canBeRetriedIfSuccessful bool = true
	this.CanBeRetriedIfSuccessful = &canBeRetriedIfSuccessful
	var canBeSkipped bool = true
	this.CanBeSkipped = &canBeSkipped
	return &this
}

// NewJobOptionsDtoWithDefaults instantiates a new JobOptionsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobOptionsDtoWithDefaults() *JobOptionsDto {
	this := JobOptionsDto{}
	var canBeRetriedIfSuccessful bool = true
	this.CanBeRetriedIfSuccessful = &canBeRetriedIfSuccessful
	var canBeSkipped bool = true
	this.CanBeSkipped = &canBeSkipped
	return &this
}

// GetCanBeRetriedIfSuccessful returns the CanBeRetriedIfSuccessful field value if set, zero value otherwise.
func (o *JobOptionsDto) GetCanBeRetriedIfSuccessful() bool {
	if o == nil || IsNil(o.CanBeRetriedIfSuccessful) {
		var ret bool
		return ret
	}
	return *o.CanBeRetriedIfSuccessful
}

// GetCanBeRetriedIfSuccessfulOk returns a tuple with the CanBeRetriedIfSuccessful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobOptionsDto) GetCanBeRetriedIfSuccessfulOk() (*bool, bool) {
	if o == nil || IsNil(o.CanBeRetriedIfSuccessful) {
		return nil, false
	}
	return o.CanBeRetriedIfSuccessful, true
}

// HasCanBeRetriedIfSuccessful returns a boolean if a field has been set.
func (o *JobOptionsDto) HasCanBeRetriedIfSuccessful() bool {
	if o != nil && !IsNil(o.CanBeRetriedIfSuccessful) {
		return true
	}

	return false
}

// SetCanBeRetriedIfSuccessful gets a reference to the given bool and assigns it to the CanBeRetriedIfSuccessful field.
func (o *JobOptionsDto) SetCanBeRetriedIfSuccessful(v bool) {
	o.CanBeRetriedIfSuccessful = &v
}

// GetCanBeSkipped returns the CanBeSkipped field value if set, zero value otherwise.
func (o *JobOptionsDto) GetCanBeSkipped() bool {
	if o == nil || IsNil(o.CanBeSkipped) {
		var ret bool
		return ret
	}
	return *o.CanBeSkipped
}

// GetCanBeSkippedOk returns a tuple with the CanBeSkipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobOptionsDto) GetCanBeSkippedOk() (*bool, bool) {
	if o == nil || IsNil(o.CanBeSkipped) {
		return nil, false
	}
	return o.CanBeSkipped, true
}

// HasCanBeSkipped returns a boolean if a field has been set.
func (o *JobOptionsDto) HasCanBeSkipped() bool {
	if o != nil && !IsNil(o.CanBeSkipped) {
		return true
	}

	return false
}

// SetCanBeSkipped gets a reference to the given bool and assigns it to the CanBeSkipped field.
func (o *JobOptionsDto) SetCanBeSkipped(v bool) {
	o.CanBeSkipped = &v
}

func (o JobOptionsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobOptionsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanBeRetriedIfSuccessful) {
		toSerialize["canBeRetriedIfSuccessful"] = o.CanBeRetriedIfSuccessful
	}
	if !IsNil(o.CanBeSkipped) {
		toSerialize["canBeSkipped"] = o.CanBeSkipped
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobOptionsDto) UnmarshalJSON(data []byte) (err error) {
	varJobOptionsDto := _JobOptionsDto{}

	err = json.Unmarshal(data, &varJobOptionsDto)

	if err != nil {
		return err
	}

	*o = JobOptionsDto(varJobOptionsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "canBeRetriedIfSuccessful")
		delete(additionalProperties, "canBeSkipped")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobOptionsDto struct {
	value *JobOptionsDto
	isSet bool
}

func (v NullableJobOptionsDto) Get() *JobOptionsDto {
	return v.value
}

func (v *NullableJobOptionsDto) Set(val *JobOptionsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableJobOptionsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableJobOptionsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobOptionsDto(val *JobOptionsDto) *NullableJobOptionsDto {
	return &NullableJobOptionsDto{value: val, isSet: true}
}

func (v NullableJobOptionsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobOptionsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


