/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the VMPoolCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMPoolCredentials{}

// VMPoolCredentials struct for VMPoolCredentials
type VMPoolCredentials struct {
	// Certificate of the VM Pool
	Certificate *string `json:"certificate,omitempty"`
	// Private key of the VM Pool
	PrivateKey *string `json:"privateKey,omitempty"`
	// Username of the VM Pool
	Username *string `json:"username,omitempty"`
	// Password of the VM Pool
	Password *string `json:"password,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VMPoolCredentials VMPoolCredentials

// NewVMPoolCredentials instantiates a new VMPoolCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMPoolCredentials() *VMPoolCredentials {
	this := VMPoolCredentials{}
	return &this
}

// NewVMPoolCredentialsWithDefaults instantiates a new VMPoolCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMPoolCredentialsWithDefaults() *VMPoolCredentials {
	this := VMPoolCredentials{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *VMPoolCredentials) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPoolCredentials) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *VMPoolCredentials) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *VMPoolCredentials) SetCertificate(v string) {
	o.Certificate = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *VMPoolCredentials) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPoolCredentials) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *VMPoolCredentials) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *VMPoolCredentials) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *VMPoolCredentials) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPoolCredentials) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *VMPoolCredentials) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *VMPoolCredentials) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *VMPoolCredentials) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPoolCredentials) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *VMPoolCredentials) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *VMPoolCredentials) SetPassword(v string) {
	o.Password = &v
}

func (o VMPoolCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMPoolCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMPoolCredentials) UnmarshalJSON(data []byte) (err error) {
	varVMPoolCredentials := _VMPoolCredentials{}

	err = json.Unmarshal(data, &varVMPoolCredentials)

	if err != nil {
		return err
	}

	*o = VMPoolCredentials(varVMPoolCredentials)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "privateKey")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMPoolCredentials struct {
	value *VMPoolCredentials
	isSet bool
}

func (v NullableVMPoolCredentials) Get() *VMPoolCredentials {
	return v.value
}

func (v *NullableVMPoolCredentials) Set(val *VMPoolCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableVMPoolCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableVMPoolCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMPoolCredentials(val *VMPoolCredentials) *NullableVMPoolCredentials {
	return &NullableVMPoolCredentials{value: val, isSet: true}
}

func (v NullableVMPoolCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMPoolCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


