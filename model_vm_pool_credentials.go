/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMPoolCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMPoolCredentials{}

// VMPoolCredentials struct for VMPoolCredentials
type VMPoolCredentials struct {
	// Certificate of the VM Pool
	Certificate string `json:"certificate"`
	// Private key of the VM Pool
	PrivateKey string `json:"privateKey"`
	AdditionalProperties map[string]interface{}
}

type _VMPoolCredentials VMPoolCredentials

// NewVMPoolCredentials instantiates a new VMPoolCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMPoolCredentials(certificate string, privateKey string) *VMPoolCredentials {
	this := VMPoolCredentials{}
	this.Certificate = certificate
	this.PrivateKey = privateKey
	return &this
}

// NewVMPoolCredentialsWithDefaults instantiates a new VMPoolCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMPoolCredentialsWithDefaults() *VMPoolCredentials {
	this := VMPoolCredentials{}
	return &this
}

// GetCertificate returns the Certificate field value
func (o *VMPoolCredentials) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *VMPoolCredentials) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *VMPoolCredentials) SetCertificate(v string) {
	o.Certificate = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *VMPoolCredentials) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *VMPoolCredentials) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *VMPoolCredentials) SetPrivateKey(v string) {
	o.PrivateKey = v
}

func (o VMPoolCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMPoolCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate
	toSerialize["privateKey"] = o.PrivateKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMPoolCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate",
		"privateKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMPoolCredentials := _VMPoolCredentials{}

	err = json.Unmarshal(data, &varVMPoolCredentials)

	if err != nil {
		return err
	}

	*o = VMPoolCredentials(varVMPoolCredentials)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "privateKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMPoolCredentials struct {
	value *VMPoolCredentials
	isSet bool
}

func (v NullableVMPoolCredentials) Get() *VMPoolCredentials {
	return v.value
}

func (v *NullableVMPoolCredentials) Set(val *VMPoolCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableVMPoolCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableVMPoolCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMPoolCredentials(val *VMPoolCredentials) *NullableVMPoolCredentials {
	return &NullableVMPoolCredentials{value: val, isSet: true}
}

func (v NullableVMPoolCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMPoolCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


