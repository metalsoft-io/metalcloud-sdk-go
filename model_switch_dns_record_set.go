/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SwitchDNSRecordSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SwitchDNSRecordSet{}

// SwitchDNSRecordSet struct for SwitchDNSRecordSet
type SwitchDNSRecordSet struct {
	// The id of the switch.
	SwitchId float32 `json:"switchId"`
	// The DNS zone information.
	Zone GenericDNSZoneInformation `json:"zone"`
	// The management address of the switch.
	ManagementAddress string `json:"managementAddress"`
	// The hostname of the switch DNS record.
	Hostname string `json:"hostname"`
	// The hostname of the switch DNS record.
	Fqdn string `json:"fqdn"`
	// The IP address of the switch.
	Ip map[string]interface{} `json:"ip"`
	// The operation to perform for the DNS record. Either \"create\" or \"delete\".
	Operation string `json:"operation"`
	AdditionalProperties map[string]interface{}
}

type _SwitchDNSRecordSet SwitchDNSRecordSet

// NewSwitchDNSRecordSet instantiates a new SwitchDNSRecordSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwitchDNSRecordSet(switchId float32, zone GenericDNSZoneInformation, managementAddress string, hostname string, fqdn string, ip map[string]interface{}, operation string) *SwitchDNSRecordSet {
	this := SwitchDNSRecordSet{}
	this.SwitchId = switchId
	this.Zone = zone
	this.ManagementAddress = managementAddress
	this.Hostname = hostname
	this.Fqdn = fqdn
	this.Ip = ip
	this.Operation = operation
	return &this
}

// NewSwitchDNSRecordSetWithDefaults instantiates a new SwitchDNSRecordSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwitchDNSRecordSetWithDefaults() *SwitchDNSRecordSet {
	this := SwitchDNSRecordSet{}
	return &this
}

// GetSwitchId returns the SwitchId field value
func (o *SwitchDNSRecordSet) GetSwitchId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value
// and a boolean to check if the value has been set.
func (o *SwitchDNSRecordSet) GetSwitchIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SwitchId, true
}

// SetSwitchId sets field value
func (o *SwitchDNSRecordSet) SetSwitchId(v float32) {
	o.SwitchId = v
}

// GetZone returns the Zone field value
func (o *SwitchDNSRecordSet) GetZone() GenericDNSZoneInformation {
	if o == nil {
		var ret GenericDNSZoneInformation
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *SwitchDNSRecordSet) GetZoneOk() (*GenericDNSZoneInformation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *SwitchDNSRecordSet) SetZone(v GenericDNSZoneInformation) {
	o.Zone = v
}

// GetManagementAddress returns the ManagementAddress field value
func (o *SwitchDNSRecordSet) GetManagementAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value
// and a boolean to check if the value has been set.
func (o *SwitchDNSRecordSet) GetManagementAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementAddress, true
}

// SetManagementAddress sets field value
func (o *SwitchDNSRecordSet) SetManagementAddress(v string) {
	o.ManagementAddress = v
}

// GetHostname returns the Hostname field value
func (o *SwitchDNSRecordSet) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *SwitchDNSRecordSet) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *SwitchDNSRecordSet) SetHostname(v string) {
	o.Hostname = v
}

// GetFqdn returns the Fqdn field value
func (o *SwitchDNSRecordSet) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *SwitchDNSRecordSet) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *SwitchDNSRecordSet) SetFqdn(v string) {
	o.Fqdn = v
}

// GetIp returns the Ip field value
func (o *SwitchDNSRecordSet) GetIp() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *SwitchDNSRecordSet) GetIpOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Ip, true
}

// SetIp sets field value
func (o *SwitchDNSRecordSet) SetIp(v map[string]interface{}) {
	o.Ip = v
}

// GetOperation returns the Operation field value
func (o *SwitchDNSRecordSet) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *SwitchDNSRecordSet) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *SwitchDNSRecordSet) SetOperation(v string) {
	o.Operation = v
}

func (o SwitchDNSRecordSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SwitchDNSRecordSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["switchId"] = o.SwitchId
	toSerialize["zone"] = o.Zone
	toSerialize["managementAddress"] = o.ManagementAddress
	toSerialize["hostname"] = o.Hostname
	toSerialize["fqdn"] = o.Fqdn
	toSerialize["ip"] = o.Ip
	toSerialize["operation"] = o.Operation

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SwitchDNSRecordSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"switchId",
		"zone",
		"managementAddress",
		"hostname",
		"fqdn",
		"ip",
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSwitchDNSRecordSet := _SwitchDNSRecordSet{}

	err = json.Unmarshal(data, &varSwitchDNSRecordSet)

	if err != nil {
		return err
	}

	*o = SwitchDNSRecordSet(varSwitchDNSRecordSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "switchId")
		delete(additionalProperties, "zone")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "fqdn")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "operation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSwitchDNSRecordSet struct {
	value *SwitchDNSRecordSet
	isSet bool
}

func (v NullableSwitchDNSRecordSet) Get() *SwitchDNSRecordSet {
	return v.value
}

func (v *NullableSwitchDNSRecordSet) Set(val *SwitchDNSRecordSet) {
	v.value = val
	v.isSet = true
}

func (v NullableSwitchDNSRecordSet) IsSet() bool {
	return v.isSet
}

func (v *NullableSwitchDNSRecordSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwitchDNSRecordSet(val *SwitchDNSRecordSet) *NullableSwitchDNSRecordSet {
	return &NullableSwitchDNSRecordSet{value: val, isSet: true}
}

func (v NullableSwitchDNSRecordSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwitchDNSRecordSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


