/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the DnsRecordSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsRecordSet{}

// DnsRecordSet struct for DnsRecordSet
type DnsRecordSet struct {
	// The DNS Resource Record Set (RRSet) ID
	Id int32 `json:"id"`
	// The site ID
	SiteId int32 `json:"siteId"`
	// The infrastructure ID
	InfrastructureId int32 `json:"infrastructureId"`
	// The ID of the DNS zone
	ZoneId int32 `json:"zoneId"`
	// The name of the DNS zone (without a terminating dot)
	ZoneName string `json:"zoneName"`
	// DNS Name for the RecordSet
	Name string `json:"name"`
	// The type of DNS record (e.g., A, AAAA, CNAME, NS, PTR, TXT, SOA)
	Type string `json:"type"`
	// TTL (Time to Live) for the DNS Record Set.
	Ttl *int32 `json:"ttl,omitempty"`
	// The record data for this DNS record set
	Records []string `json:"records"`
	// The tags associated with the DNS Record Set
	Tags []string `json:"tags,omitempty"`
	// The revision number of the DNS Record Set
	Revision int32 `json:"revision"`
	// The user ID of the user who created the DNS Record Set
	CreatedBy int32 `json:"createdBy"`
	// The user ID of the user who last modified the DNS Record Set
	UpdatedBy *int32 `json:"updatedBy,omitempty"`
	// The date and time the DNS Record Set was created
	CreatedAt time.Time `json:"createdAt"`
	// The date and time the DNS Record Set was last updated
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DnsRecordSet DnsRecordSet

// NewDnsRecordSet instantiates a new DnsRecordSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsRecordSet(id int32, siteId int32, infrastructureId int32, zoneId int32, zoneName string, name string, type_ string, records []string, revision int32, createdBy int32, createdAt time.Time) *DnsRecordSet {
	this := DnsRecordSet{}
	this.Id = id
	this.SiteId = siteId
	this.InfrastructureId = infrastructureId
	this.ZoneId = zoneId
	this.ZoneName = zoneName
	this.Name = name
	this.Type = type_
	var ttl int32 = 3600
	this.Ttl = &ttl
	this.Records = records
	this.Revision = revision
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	return &this
}

// NewDnsRecordSetWithDefaults instantiates a new DnsRecordSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsRecordSetWithDefaults() *DnsRecordSet {
	this := DnsRecordSet{}
	var ttl int32 = 3600
	this.Ttl = &ttl
	return &this
}

// GetId returns the Id field value
func (o *DnsRecordSet) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DnsRecordSet) SetId(v int32) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *DnsRecordSet) GetSiteId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetSiteIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *DnsRecordSet) SetSiteId(v int32) {
	o.SiteId = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *DnsRecordSet) GetInfrastructureId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetInfrastructureIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *DnsRecordSet) SetInfrastructureId(v int32) {
	o.InfrastructureId = v
}

// GetZoneId returns the ZoneId field value
func (o *DnsRecordSet) GetZoneId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetZoneIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *DnsRecordSet) SetZoneId(v int32) {
	o.ZoneId = v
}

// GetZoneName returns the ZoneName field value
func (o *DnsRecordSet) GetZoneName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetZoneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneName, true
}

// SetZoneName sets field value
func (o *DnsRecordSet) SetZoneName(v string) {
	o.ZoneName = v
}

// GetName returns the Name field value
func (o *DnsRecordSet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DnsRecordSet) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *DnsRecordSet) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DnsRecordSet) SetType(v string) {
	o.Type = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *DnsRecordSet) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *DnsRecordSet) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *DnsRecordSet) SetTtl(v int32) {
	o.Ttl = &v
}

// GetRecords returns the Records field value
func (o *DnsRecordSet) GetRecords() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetRecordsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *DnsRecordSet) SetRecords(v []string) {
	o.Records = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DnsRecordSet) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DnsRecordSet) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DnsRecordSet) SetTags(v []string) {
	o.Tags = v
}

// GetRevision returns the Revision field value
func (o *DnsRecordSet) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *DnsRecordSet) SetRevision(v int32) {
	o.Revision = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *DnsRecordSet) GetCreatedBy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetCreatedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *DnsRecordSet) SetCreatedBy(v int32) {
	o.CreatedBy = v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DnsRecordSet) GetUpdatedBy() int32 {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret int32
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetUpdatedByOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DnsRecordSet) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given int32 and assigns it to the UpdatedBy field.
func (o *DnsRecordSet) SetUpdatedBy(v int32) {
	o.UpdatedBy = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DnsRecordSet) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DnsRecordSet) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DnsRecordSet) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DnsRecordSet) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DnsRecordSet) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DnsRecordSet) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRecordSet) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DnsRecordSet) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *DnsRecordSet) SetLinks(v []Link) {
	o.Links = v
}

func (o DnsRecordSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsRecordSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["siteId"] = o.SiteId
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["zoneId"] = o.ZoneId
	toSerialize["zoneName"] = o.ZoneName
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	toSerialize["records"] = o.Records
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["revision"] = o.Revision
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsRecordSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"siteId",
		"infrastructureId",
		"zoneId",
		"zoneName",
		"name",
		"type",
		"records",
		"revision",
		"createdBy",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsRecordSet := _DnsRecordSet{}

	err = json.Unmarshal(data, &varDnsRecordSet)

	if err != nil {
		return err
	}

	*o = DnsRecordSet(varDnsRecordSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "zoneId")
		delete(additionalProperties, "zoneName")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "records")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "updatedBy")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsRecordSet struct {
	value *DnsRecordSet
	isSet bool
}

func (v NullableDnsRecordSet) Get() *DnsRecordSet {
	return v.value
}

func (v *NullableDnsRecordSet) Set(val *DnsRecordSet) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsRecordSet) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsRecordSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsRecordSet(val *DnsRecordSet) *NullableDnsRecordSet {
	return &NullableDnsRecordSet{value: val, isSet: true}
}

func (v NullableDnsRecordSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsRecordSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


