/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNetwork{}

// CreateNetwork struct for CreateNetwork
type CreateNetwork struct {
	// Name of the Network.
	Label string `json:"label"`
	AdditionalProperties map[string]interface{}
}

type _CreateNetwork CreateNetwork

// NewCreateNetwork instantiates a new CreateNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNetwork(label string) *CreateNetwork {
	this := CreateNetwork{}
	this.Label = label
	return &this
}

// NewCreateNetworkWithDefaults instantiates a new CreateNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNetworkWithDefaults() *CreateNetwork {
	this := CreateNetwork{}
	return &this
}

// GetLabel returns the Label field value
func (o *CreateNetwork) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CreateNetwork) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CreateNetwork) SetLabel(v string) {
	o.Label = v
}

func (o CreateNetwork) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateNetwork) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNetwork := _CreateNetwork{}

	err = json.Unmarshal(data, &varCreateNetwork)

	if err != nil {
		return err
	}

	*o = CreateNetwork(varCreateNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNetwork struct {
	value *CreateNetwork
	isSet bool
}

func (v NullableCreateNetwork) Get() *CreateNetwork {
	return v.value
}

func (v *NullableCreateNetwork) Set(val *CreateNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetwork(val *CreateNetwork) *NullableCreateNetwork {
	return &NullableCreateNetwork{value: val, isSet: true}
}

func (v NullableCreateNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


