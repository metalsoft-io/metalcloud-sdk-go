/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SiteStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteStatistics{}

// SiteStatistics struct for SiteStatistics
type SiteStatistics struct {
	// Status of site controllers categorized by their alive status
	SiteControllerSeenAliveStatus SiteControllerSeenAliveStatus `json:"siteControllerSeenAliveStatus"`
	// Total count of sites
	SitesTotalCount float32 `json:"sitesTotalCount"`
	// Count of active sites
	SitesActiveCount float32 `json:"sitesActiveCount"`
	// List of resources counts for sites
	SitesResourceCount []SiteControllerSeenAliveStatus `json:"sitesResourceCount"`
	AdditionalProperties map[string]interface{}
}

type _SiteStatistics SiteStatistics

// NewSiteStatistics instantiates a new SiteStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteStatistics(siteControllerSeenAliveStatus SiteControllerSeenAliveStatus, sitesTotalCount float32, sitesActiveCount float32, sitesResourceCount []SiteControllerSeenAliveStatus) *SiteStatistics {
	this := SiteStatistics{}
	this.SiteControllerSeenAliveStatus = siteControllerSeenAliveStatus
	this.SitesTotalCount = sitesTotalCount
	this.SitesActiveCount = sitesActiveCount
	this.SitesResourceCount = sitesResourceCount
	return &this
}

// NewSiteStatisticsWithDefaults instantiates a new SiteStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteStatisticsWithDefaults() *SiteStatistics {
	this := SiteStatistics{}
	return &this
}

// GetSiteControllerSeenAliveStatus returns the SiteControllerSeenAliveStatus field value
func (o *SiteStatistics) GetSiteControllerSeenAliveStatus() SiteControllerSeenAliveStatus {
	if o == nil {
		var ret SiteControllerSeenAliveStatus
		return ret
	}

	return o.SiteControllerSeenAliveStatus
}

// GetSiteControllerSeenAliveStatusOk returns a tuple with the SiteControllerSeenAliveStatus field value
// and a boolean to check if the value has been set.
func (o *SiteStatistics) GetSiteControllerSeenAliveStatusOk() (*SiteControllerSeenAliveStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteControllerSeenAliveStatus, true
}

// SetSiteControllerSeenAliveStatus sets field value
func (o *SiteStatistics) SetSiteControllerSeenAliveStatus(v SiteControllerSeenAliveStatus) {
	o.SiteControllerSeenAliveStatus = v
}

// GetSitesTotalCount returns the SitesTotalCount field value
func (o *SiteStatistics) GetSitesTotalCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SitesTotalCount
}

// GetSitesTotalCountOk returns a tuple with the SitesTotalCount field value
// and a boolean to check if the value has been set.
func (o *SiteStatistics) GetSitesTotalCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SitesTotalCount, true
}

// SetSitesTotalCount sets field value
func (o *SiteStatistics) SetSitesTotalCount(v float32) {
	o.SitesTotalCount = v
}

// GetSitesActiveCount returns the SitesActiveCount field value
func (o *SiteStatistics) GetSitesActiveCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SitesActiveCount
}

// GetSitesActiveCountOk returns a tuple with the SitesActiveCount field value
// and a boolean to check if the value has been set.
func (o *SiteStatistics) GetSitesActiveCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SitesActiveCount, true
}

// SetSitesActiveCount sets field value
func (o *SiteStatistics) SetSitesActiveCount(v float32) {
	o.SitesActiveCount = v
}

// GetSitesResourceCount returns the SitesResourceCount field value
func (o *SiteStatistics) GetSitesResourceCount() []SiteControllerSeenAliveStatus {
	if o == nil {
		var ret []SiteControllerSeenAliveStatus
		return ret
	}

	return o.SitesResourceCount
}

// GetSitesResourceCountOk returns a tuple with the SitesResourceCount field value
// and a boolean to check if the value has been set.
func (o *SiteStatistics) GetSitesResourceCountOk() ([]SiteControllerSeenAliveStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.SitesResourceCount, true
}

// SetSitesResourceCount sets field value
func (o *SiteStatistics) SetSitesResourceCount(v []SiteControllerSeenAliveStatus) {
	o.SitesResourceCount = v
}

func (o SiteStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["siteControllerSeenAliveStatus"] = o.SiteControllerSeenAliveStatus
	toSerialize["sitesTotalCount"] = o.SitesTotalCount
	toSerialize["sitesActiveCount"] = o.SitesActiveCount
	toSerialize["sitesResourceCount"] = o.SitesResourceCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"siteControllerSeenAliveStatus",
		"sitesTotalCount",
		"sitesActiveCount",
		"sitesResourceCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSiteStatistics := _SiteStatistics{}

	err = json.Unmarshal(data, &varSiteStatistics)

	if err != nil {
		return err
	}

	*o = SiteStatistics(varSiteStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteControllerSeenAliveStatus")
		delete(additionalProperties, "sitesTotalCount")
		delete(additionalProperties, "sitesActiveCount")
		delete(additionalProperties, "sitesResourceCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteStatistics struct {
	value *SiteStatistics
	isSet bool
}

func (v NullableSiteStatistics) Get() *SiteStatistics {
	return v.value
}

func (v *NullableSiteStatistics) Set(val *SiteStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteStatistics(val *SiteStatistics) *NullableSiteStatistics {
	return &NullableSiteStatistics{value: val, isSet: true}
}

func (v NullableSiteStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


