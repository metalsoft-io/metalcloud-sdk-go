/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ExtensionInputBoolean type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionInputBoolean{}

// ExtensionInputBoolean struct for ExtensionInputBoolean
type ExtensionInputBoolean struct {
	// Default value.
	DefaultValue *bool `json:"defaultValue,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionInputBoolean ExtensionInputBoolean

// NewExtensionInputBoolean instantiates a new ExtensionInputBoolean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionInputBoolean() *ExtensionInputBoolean {
	this := ExtensionInputBoolean{}
	return &this
}

// NewExtensionInputBooleanWithDefaults instantiates a new ExtensionInputBoolean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionInputBooleanWithDefaults() *ExtensionInputBoolean {
	this := ExtensionInputBoolean{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *ExtensionInputBoolean) GetDefaultValue() bool {
	if o == nil || IsNil(o.DefaultValue) {
		var ret bool
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInputBoolean) GetDefaultValueOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ExtensionInputBoolean) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given bool and assigns it to the DefaultValue field.
func (o *ExtensionInputBoolean) SetDefaultValue(v bool) {
	o.DefaultValue = &v
}

func (o ExtensionInputBoolean) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionInputBoolean) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionInputBoolean) UnmarshalJSON(data []byte) (err error) {
	varExtensionInputBoolean := _ExtensionInputBoolean{}

	err = json.Unmarshal(data, &varExtensionInputBoolean)

	if err != nil {
		return err
	}

	*o = ExtensionInputBoolean(varExtensionInputBoolean)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "defaultValue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionInputBoolean struct {
	value *ExtensionInputBoolean
	isSet bool
}

func (v NullableExtensionInputBoolean) Get() *ExtensionInputBoolean {
	return v.value
}

func (v *NullableExtensionInputBoolean) Set(val *ExtensionInputBoolean) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionInputBoolean) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionInputBoolean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionInputBoolean(val *ExtensionInputBoolean) *NullableExtensionInputBoolean {
	return &NullableExtensionInputBoolean{value: val, isSet: true}
}

func (v NullableExtensionInputBoolean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionInputBoolean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


