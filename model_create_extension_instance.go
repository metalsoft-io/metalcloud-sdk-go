/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the CreateExtensionInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateExtensionInstance{}

// CreateExtensionInstance struct for CreateExtensionInstance
type CreateExtensionInstance struct {
	// The extension ID.
	ExtensionId *float32 `json:"extensionId,omitempty"`
	// The extension instance label. Will be automatically generated if not provided.
	Label *string `json:"label,omitempty"`
	// Input variables values.
	InputVariables []ExtensionVariable `json:"inputVariables,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateExtensionInstance CreateExtensionInstance

// NewCreateExtensionInstance instantiates a new CreateExtensionInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateExtensionInstance() *CreateExtensionInstance {
	this := CreateExtensionInstance{}
	return &this
}

// NewCreateExtensionInstanceWithDefaults instantiates a new CreateExtensionInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateExtensionInstanceWithDefaults() *CreateExtensionInstance {
	this := CreateExtensionInstance{}
	return &this
}

// GetExtensionId returns the ExtensionId field value if set, zero value otherwise.
func (o *CreateExtensionInstance) GetExtensionId() float32 {
	if o == nil || IsNil(o.ExtensionId) {
		var ret float32
		return ret
	}
	return *o.ExtensionId
}

// GetExtensionIdOk returns a tuple with the ExtensionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExtensionInstance) GetExtensionIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtensionId) {
		return nil, false
	}
	return o.ExtensionId, true
}

// HasExtensionId returns a boolean if a field has been set.
func (o *CreateExtensionInstance) HasExtensionId() bool {
	if o != nil && !IsNil(o.ExtensionId) {
		return true
	}

	return false
}

// SetExtensionId gets a reference to the given float32 and assigns it to the ExtensionId field.
func (o *CreateExtensionInstance) SetExtensionId(v float32) {
	o.ExtensionId = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CreateExtensionInstance) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExtensionInstance) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CreateExtensionInstance) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CreateExtensionInstance) SetLabel(v string) {
	o.Label = &v
}

// GetInputVariables returns the InputVariables field value if set, zero value otherwise.
func (o *CreateExtensionInstance) GetInputVariables() []ExtensionVariable {
	if o == nil || IsNil(o.InputVariables) {
		var ret []ExtensionVariable
		return ret
	}
	return o.InputVariables
}

// GetInputVariablesOk returns a tuple with the InputVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateExtensionInstance) GetInputVariablesOk() ([]ExtensionVariable, bool) {
	if o == nil || IsNil(o.InputVariables) {
		return nil, false
	}
	return o.InputVariables, true
}

// HasInputVariables returns a boolean if a field has been set.
func (o *CreateExtensionInstance) HasInputVariables() bool {
	if o != nil && !IsNil(o.InputVariables) {
		return true
	}

	return false
}

// SetInputVariables gets a reference to the given []ExtensionVariable and assigns it to the InputVariables field.
func (o *CreateExtensionInstance) SetInputVariables(v []ExtensionVariable) {
	o.InputVariables = v
}

func (o CreateExtensionInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateExtensionInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExtensionId) {
		toSerialize["extensionId"] = o.ExtensionId
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.InputVariables) {
		toSerialize["inputVariables"] = o.InputVariables
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateExtensionInstance) UnmarshalJSON(data []byte) (err error) {
	varCreateExtensionInstance := _CreateExtensionInstance{}

	err = json.Unmarshal(data, &varCreateExtensionInstance)

	if err != nil {
		return err
	}

	*o = CreateExtensionInstance(varCreateExtensionInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "extensionId")
		delete(additionalProperties, "label")
		delete(additionalProperties, "inputVariables")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateExtensionInstance struct {
	value *CreateExtensionInstance
	isSet bool
}

func (v NullableCreateExtensionInstance) Get() *CreateExtensionInstance {
	return v.value
}

func (v *NullableCreateExtensionInstance) Set(val *CreateExtensionInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateExtensionInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateExtensionInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateExtensionInstance(val *CreateExtensionInstance) *NullableCreateExtensionInstance {
	return &NullableCreateExtensionInstance{value: val, isSet: true}
}

func (v NullableCreateExtensionInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateExtensionInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


