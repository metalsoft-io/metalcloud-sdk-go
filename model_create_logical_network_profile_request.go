/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// CreateLogicalNetworkProfileRequest - struct for CreateLogicalNetworkProfileRequest
type CreateLogicalNetworkProfileRequest struct {
	CreateVlanLogicalNetworkProfile *CreateVlanLogicalNetworkProfile
	CreateVxlanLogicalNetworkProfile *CreateVxlanLogicalNetworkProfile
}

// CreateVlanLogicalNetworkProfileAsCreateLogicalNetworkProfileRequest is a convenience function that returns CreateVlanLogicalNetworkProfile wrapped in CreateLogicalNetworkProfileRequest
func CreateVlanLogicalNetworkProfileAsCreateLogicalNetworkProfileRequest(v *CreateVlanLogicalNetworkProfile) CreateLogicalNetworkProfileRequest {
	return CreateLogicalNetworkProfileRequest{
		CreateVlanLogicalNetworkProfile: v,
	}
}

// CreateVxlanLogicalNetworkProfileAsCreateLogicalNetworkProfileRequest is a convenience function that returns CreateVxlanLogicalNetworkProfile wrapped in CreateLogicalNetworkProfileRequest
func CreateVxlanLogicalNetworkProfileAsCreateLogicalNetworkProfileRequest(v *CreateVxlanLogicalNetworkProfile) CreateLogicalNetworkProfileRequest {
	return CreateLogicalNetworkProfileRequest{
		CreateVxlanLogicalNetworkProfile: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateLogicalNetworkProfileRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'vlan'
	if jsonDict["kind"] == "vlan" {
		// try to unmarshal JSON data into CreateVlanLogicalNetworkProfile
		err = json.Unmarshal(data, &dst.CreateVlanLogicalNetworkProfile)
		if err == nil {
			return nil // data stored in dst.CreateVlanLogicalNetworkProfile, return on the first match
		} else {
			dst.CreateVlanLogicalNetworkProfile = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileRequest as CreateVlanLogicalNetworkProfile: %s", err.Error())
		}
	}

	// check if the discriminator value is 'vxlan'
	if jsonDict["kind"] == "vxlan" {
		// try to unmarshal JSON data into CreateVxlanLogicalNetworkProfile
		err = json.Unmarshal(data, &dst.CreateVxlanLogicalNetworkProfile)
		if err == nil {
			return nil // data stored in dst.CreateVxlanLogicalNetworkProfile, return on the first match
		} else {
			dst.CreateVxlanLogicalNetworkProfile = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileRequest as CreateVxlanLogicalNetworkProfile: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateVlanLogicalNetworkProfile'
	if jsonDict["kind"] == "CreateVlanLogicalNetworkProfile" {
		// try to unmarshal JSON data into CreateVlanLogicalNetworkProfile
		err = json.Unmarshal(data, &dst.CreateVlanLogicalNetworkProfile)
		if err == nil {
			return nil // data stored in dst.CreateVlanLogicalNetworkProfile, return on the first match
		} else {
			dst.CreateVlanLogicalNetworkProfile = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileRequest as CreateVlanLogicalNetworkProfile: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateVxlanLogicalNetworkProfile'
	if jsonDict["kind"] == "CreateVxlanLogicalNetworkProfile" {
		// try to unmarshal JSON data into CreateVxlanLogicalNetworkProfile
		err = json.Unmarshal(data, &dst.CreateVxlanLogicalNetworkProfile)
		if err == nil {
			return nil // data stored in dst.CreateVxlanLogicalNetworkProfile, return on the first match
		} else {
			dst.CreateVxlanLogicalNetworkProfile = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileRequest as CreateVxlanLogicalNetworkProfile: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateLogicalNetworkProfileRequest) MarshalJSON() ([]byte, error) {
	if src.CreateVlanLogicalNetworkProfile != nil {
		return json.Marshal(&src.CreateVlanLogicalNetworkProfile)
	}

	if src.CreateVxlanLogicalNetworkProfile != nil {
		return json.Marshal(&src.CreateVxlanLogicalNetworkProfile)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateLogicalNetworkProfileRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateVlanLogicalNetworkProfile != nil {
		return obj.CreateVlanLogicalNetworkProfile
	}

	if obj.CreateVxlanLogicalNetworkProfile != nil {
		return obj.CreateVxlanLogicalNetworkProfile
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateLogicalNetworkProfileRequest) GetActualInstanceValue() (interface{}) {
	if obj.CreateVlanLogicalNetworkProfile != nil {
		return *obj.CreateVlanLogicalNetworkProfile
	}

	if obj.CreateVxlanLogicalNetworkProfile != nil {
		return *obj.CreateVxlanLogicalNetworkProfile
	}

	// all schemas are nil
	return nil
}

type NullableCreateLogicalNetworkProfileRequest struct {
	value *CreateLogicalNetworkProfileRequest
	isSet bool
}

func (v NullableCreateLogicalNetworkProfileRequest) Get() *CreateLogicalNetworkProfileRequest {
	return v.value
}

func (v *NullableCreateLogicalNetworkProfileRequest) Set(val *CreateLogicalNetworkProfileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLogicalNetworkProfileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLogicalNetworkProfileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLogicalNetworkProfileRequest(val *CreateLogicalNetworkProfileRequest) *NullableCreateLogicalNetworkProfileRequest {
	return &NullableCreateLogicalNetworkProfileRequest{value: val, isSet: true}
}

func (v NullableCreateLogicalNetworkProfileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLogicalNetworkProfileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


