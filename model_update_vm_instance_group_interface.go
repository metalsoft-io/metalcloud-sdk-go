/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateVMInstanceGroupInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVMInstanceGroupInterface{}

// UpdateVMInstanceGroupInterface struct for UpdateVMInstanceGroupInterface
type UpdateVMInstanceGroupInterface struct {
	// Interface ID
	Id float32 `json:"id"`
	// Network ID for the interface. Can be null if the interface is not connected to any network
	NetworkId *float32 `json:"networkId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateVMInstanceGroupInterface UpdateVMInstanceGroupInterface

// NewUpdateVMInstanceGroupInterface instantiates a new UpdateVMInstanceGroupInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVMInstanceGroupInterface(id float32) *UpdateVMInstanceGroupInterface {
	this := UpdateVMInstanceGroupInterface{}
	this.Id = id
	return &this
}

// NewUpdateVMInstanceGroupInterfaceWithDefaults instantiates a new UpdateVMInstanceGroupInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVMInstanceGroupInterfaceWithDefaults() *UpdateVMInstanceGroupInterface {
	this := UpdateVMInstanceGroupInterface{}
	return &this
}

// GetId returns the Id field value
func (o *UpdateVMInstanceGroupInterface) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateVMInstanceGroupInterface) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateVMInstanceGroupInterface) SetId(v float32) {
	o.Id = v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *UpdateVMInstanceGroupInterface) GetNetworkId() float32 {
	if o == nil || IsNil(o.NetworkId) {
		var ret float32
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMInstanceGroupInterface) GetNetworkIdOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkId) {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *UpdateVMInstanceGroupInterface) HasNetworkId() bool {
	if o != nil && !IsNil(o.NetworkId) {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given float32 and assigns it to the NetworkId field.
func (o *UpdateVMInstanceGroupInterface) SetNetworkId(v float32) {
	o.NetworkId = &v
}

func (o UpdateVMInstanceGroupInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVMInstanceGroupInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.NetworkId) {
		toSerialize["networkId"] = o.NetworkId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateVMInstanceGroupInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateVMInstanceGroupInterface := _UpdateVMInstanceGroupInterface{}

	err = json.Unmarshal(data, &varUpdateVMInstanceGroupInterface)

	if err != nil {
		return err
	}

	*o = UpdateVMInstanceGroupInterface(varUpdateVMInstanceGroupInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "networkId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateVMInstanceGroupInterface struct {
	value *UpdateVMInstanceGroupInterface
	isSet bool
}

func (v NullableUpdateVMInstanceGroupInterface) Get() *UpdateVMInstanceGroupInterface {
	return v.value
}

func (v *NullableUpdateVMInstanceGroupInterface) Set(val *UpdateVMInstanceGroupInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVMInstanceGroupInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVMInstanceGroupInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVMInstanceGroupInterface(val *UpdateVMInstanceGroupInterface) *NullableUpdateVMInstanceGroupInterface {
	return &NullableUpdateVMInstanceGroupInterface{value: val, isSet: true}
}

func (v NullableUpdateVMInstanceGroupInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVMInstanceGroupInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


