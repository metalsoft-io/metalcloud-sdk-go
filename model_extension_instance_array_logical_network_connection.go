/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtensionInstanceArrayLogicalNetworkConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionInstanceArrayLogicalNetworkConnection{}

// ExtensionInstanceArrayLogicalNetworkConnection struct for ExtensionInstanceArrayLogicalNetworkConnection
type ExtensionInstanceArrayLogicalNetworkConnection struct {
	// Whether the logical network is tagged.
	Tagged bool `json:"tagged"`
	// The access mode of the network endpoint group
	AccessMode NetworkEndpointGroupAllowedAccessMode `json:"accessMode"`
	// The MTU of the logical network
	Mtu *int32 `json:"mtu,omitempty"`
	// Whether the logical network provides a default route
	ProvidesDefaultRoute *bool `json:"providesDefaultRoute,omitempty"`
	// Disable automatic IP allocation for IPv4 addresses on this network connection
	DisableAutoIpAllocation *bool `json:"disableAutoIpAllocation,omitempty"`
	// The redundancy configuration
	Redundancy NullableRedundancyConfig `json:"redundancy,omitempty"`
	// DNS records that are supposed to be provisioned for the server instance group.
	Dns NullableDnsRecordsEndpointGroupLogicalNetwork `json:"dns,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionInstanceArrayLogicalNetworkConnection ExtensionInstanceArrayLogicalNetworkConnection

// NewExtensionInstanceArrayLogicalNetworkConnection instantiates a new ExtensionInstanceArrayLogicalNetworkConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionInstanceArrayLogicalNetworkConnection(tagged bool, accessMode NetworkEndpointGroupAllowedAccessMode) *ExtensionInstanceArrayLogicalNetworkConnection {
	this := ExtensionInstanceArrayLogicalNetworkConnection{}
	this.Tagged = tagged
	this.AccessMode = accessMode
	var providesDefaultRoute bool = false
	this.ProvidesDefaultRoute = &providesDefaultRoute
	var disableAutoIpAllocation bool = false
	this.DisableAutoIpAllocation = &disableAutoIpAllocation
	return &this
}

// NewExtensionInstanceArrayLogicalNetworkConnectionWithDefaults instantiates a new ExtensionInstanceArrayLogicalNetworkConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionInstanceArrayLogicalNetworkConnectionWithDefaults() *ExtensionInstanceArrayLogicalNetworkConnection {
	this := ExtensionInstanceArrayLogicalNetworkConnection{}
	var providesDefaultRoute bool = false
	this.ProvidesDefaultRoute = &providesDefaultRoute
	var disableAutoIpAllocation bool = false
	this.DisableAutoIpAllocation = &disableAutoIpAllocation
	return &this
}

// GetTagged returns the Tagged field value
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetTagged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Tagged
}

// GetTaggedOk returns a tuple with the Tagged field value
// and a boolean to check if the value has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetTaggedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tagged, true
}

// SetTagged sets field value
func (o *ExtensionInstanceArrayLogicalNetworkConnection) SetTagged(v bool) {
	o.Tagged = v
}

// GetAccessMode returns the AccessMode field value
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetAccessMode() NetworkEndpointGroupAllowedAccessMode {
	if o == nil {
		var ret NetworkEndpointGroupAllowedAccessMode
		return ret
	}

	return o.AccessMode
}

// GetAccessModeOk returns a tuple with the AccessMode field value
// and a boolean to check if the value has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetAccessModeOk() (*NetworkEndpointGroupAllowedAccessMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessMode, true
}

// SetAccessMode sets field value
func (o *ExtensionInstanceArrayLogicalNetworkConnection) SetAccessMode(v NetworkEndpointGroupAllowedAccessMode) {
	o.AccessMode = v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) SetMtu(v int32) {
	o.Mtu = &v
}

// GetProvidesDefaultRoute returns the ProvidesDefaultRoute field value if set, zero value otherwise.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetProvidesDefaultRoute() bool {
	if o == nil || IsNil(o.ProvidesDefaultRoute) {
		var ret bool
		return ret
	}
	return *o.ProvidesDefaultRoute
}

// GetProvidesDefaultRouteOk returns a tuple with the ProvidesDefaultRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetProvidesDefaultRouteOk() (*bool, bool) {
	if o == nil || IsNil(o.ProvidesDefaultRoute) {
		return nil, false
	}
	return o.ProvidesDefaultRoute, true
}

// HasProvidesDefaultRoute returns a boolean if a field has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) HasProvidesDefaultRoute() bool {
	if o != nil && !IsNil(o.ProvidesDefaultRoute) {
		return true
	}

	return false
}

// SetProvidesDefaultRoute gets a reference to the given bool and assigns it to the ProvidesDefaultRoute field.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) SetProvidesDefaultRoute(v bool) {
	o.ProvidesDefaultRoute = &v
}

// GetDisableAutoIpAllocation returns the DisableAutoIpAllocation field value if set, zero value otherwise.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetDisableAutoIpAllocation() bool {
	if o == nil || IsNil(o.DisableAutoIpAllocation) {
		var ret bool
		return ret
	}
	return *o.DisableAutoIpAllocation
}

// GetDisableAutoIpAllocationOk returns a tuple with the DisableAutoIpAllocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetDisableAutoIpAllocationOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableAutoIpAllocation) {
		return nil, false
	}
	return o.DisableAutoIpAllocation, true
}

// HasDisableAutoIpAllocation returns a boolean if a field has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) HasDisableAutoIpAllocation() bool {
	if o != nil && !IsNil(o.DisableAutoIpAllocation) {
		return true
	}

	return false
}

// SetDisableAutoIpAllocation gets a reference to the given bool and assigns it to the DisableAutoIpAllocation field.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) SetDisableAutoIpAllocation(v bool) {
	o.DisableAutoIpAllocation = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetRedundancy() RedundancyConfig {
	if o == nil || IsNil(o.Redundancy.Get()) {
		var ret RedundancyConfig
		return ret
	}
	return *o.Redundancy.Get()
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetRedundancyOk() (*RedundancyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Redundancy.Get(), o.Redundancy.IsSet()
}

// HasRedundancy returns a boolean if a field has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) HasRedundancy() bool {
	if o != nil && o.Redundancy.IsSet() {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given NullableRedundancyConfig and assigns it to the Redundancy field.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) SetRedundancy(v RedundancyConfig) {
	o.Redundancy.Set(&v)
}
// SetRedundancyNil sets the value for Redundancy to be an explicit nil
func (o *ExtensionInstanceArrayLogicalNetworkConnection) SetRedundancyNil() {
	o.Redundancy.Set(nil)
}

// UnsetRedundancy ensures that no value is present for Redundancy, not even an explicit nil
func (o *ExtensionInstanceArrayLogicalNetworkConnection) UnsetRedundancy() {
	o.Redundancy.Unset()
}

// GetDns returns the Dns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetDns() DnsRecordsEndpointGroupLogicalNetwork {
	if o == nil || IsNil(o.Dns.Get()) {
		var ret DnsRecordsEndpointGroupLogicalNetwork
		return ret
	}
	return *o.Dns.Get()
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtensionInstanceArrayLogicalNetworkConnection) GetDnsOk() (*DnsRecordsEndpointGroupLogicalNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dns.Get(), o.Dns.IsSet()
}

// HasDns returns a boolean if a field has been set.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) HasDns() bool {
	if o != nil && o.Dns.IsSet() {
		return true
	}

	return false
}

// SetDns gets a reference to the given NullableDnsRecordsEndpointGroupLogicalNetwork and assigns it to the Dns field.
func (o *ExtensionInstanceArrayLogicalNetworkConnection) SetDns(v DnsRecordsEndpointGroupLogicalNetwork) {
	o.Dns.Set(&v)
}
// SetDnsNil sets the value for Dns to be an explicit nil
func (o *ExtensionInstanceArrayLogicalNetworkConnection) SetDnsNil() {
	o.Dns.Set(nil)
}

// UnsetDns ensures that no value is present for Dns, not even an explicit nil
func (o *ExtensionInstanceArrayLogicalNetworkConnection) UnsetDns() {
	o.Dns.Unset()
}

func (o ExtensionInstanceArrayLogicalNetworkConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionInstanceArrayLogicalNetworkConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tagged"] = o.Tagged
	toSerialize["accessMode"] = o.AccessMode
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.ProvidesDefaultRoute) {
		toSerialize["providesDefaultRoute"] = o.ProvidesDefaultRoute
	}
	if !IsNil(o.DisableAutoIpAllocation) {
		toSerialize["disableAutoIpAllocation"] = o.DisableAutoIpAllocation
	}
	if o.Redundancy.IsSet() {
		toSerialize["redundancy"] = o.Redundancy.Get()
	}
	if o.Dns.IsSet() {
		toSerialize["dns"] = o.Dns.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionInstanceArrayLogicalNetworkConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tagged",
		"accessMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionInstanceArrayLogicalNetworkConnection := _ExtensionInstanceArrayLogicalNetworkConnection{}

	err = json.Unmarshal(data, &varExtensionInstanceArrayLogicalNetworkConnection)

	if err != nil {
		return err
	}

	*o = ExtensionInstanceArrayLogicalNetworkConnection(varExtensionInstanceArrayLogicalNetworkConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tagged")
		delete(additionalProperties, "accessMode")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "providesDefaultRoute")
		delete(additionalProperties, "disableAutoIpAllocation")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "dns")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionInstanceArrayLogicalNetworkConnection struct {
	value *ExtensionInstanceArrayLogicalNetworkConnection
	isSet bool
}

func (v NullableExtensionInstanceArrayLogicalNetworkConnection) Get() *ExtensionInstanceArrayLogicalNetworkConnection {
	return v.value
}

func (v *NullableExtensionInstanceArrayLogicalNetworkConnection) Set(val *ExtensionInstanceArrayLogicalNetworkConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionInstanceArrayLogicalNetworkConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionInstanceArrayLogicalNetworkConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionInstanceArrayLogicalNetworkConnection(val *ExtensionInstanceArrayLogicalNetworkConnection) *NullableExtensionInstanceArrayLogicalNetworkConnection {
	return &NullableExtensionInstanceArrayLogicalNetworkConnection{value: val, isSet: true}
}

func (v NullableExtensionInstanceArrayLogicalNetworkConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionInstanceArrayLogicalNetworkConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


