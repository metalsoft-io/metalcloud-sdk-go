/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the PasswordReset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PasswordReset{}

// PasswordReset struct for PasswordReset
type PasswordReset struct {
	// The email address of the user
	Email string `json:"email"`
	// The redirect URL after password recovery
	RedirectUrl *string `json:"redirectUrl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PasswordReset PasswordReset

// NewPasswordReset instantiates a new PasswordReset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordReset(email string) *PasswordReset {
	this := PasswordReset{}
	this.Email = email
	return &this
}

// NewPasswordResetWithDefaults instantiates a new PasswordReset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordResetWithDefaults() *PasswordReset {
	this := PasswordReset{}
	return &this
}

// GetEmail returns the Email field value
func (o *PasswordReset) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *PasswordReset) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *PasswordReset) SetEmail(v string) {
	o.Email = v
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *PasswordReset) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl) {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordReset) GetRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectUrl) {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *PasswordReset) HasRedirectUrl() bool {
	if o != nil && !IsNil(o.RedirectUrl) {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *PasswordReset) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

func (o PasswordReset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PasswordReset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	if !IsNil(o.RedirectUrl) {
		toSerialize["redirectUrl"] = o.RedirectUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PasswordReset) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPasswordReset := _PasswordReset{}

	err = json.Unmarshal(data, &varPasswordReset)

	if err != nil {
		return err
	}

	*o = PasswordReset(varPasswordReset)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "redirectUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePasswordReset struct {
	value *PasswordReset
	isSet bool
}

func (v NullablePasswordReset) Get() *PasswordReset {
	return v.value
}

func (v *NullablePasswordReset) Set(val *PasswordReset) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordReset) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordReset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordReset(val *PasswordReset) *NullablePasswordReset {
	return &NullablePasswordReset{value: val, isSet: true}
}

func (v NullablePasswordReset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordReset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


