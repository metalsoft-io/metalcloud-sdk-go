/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// FabricStatus the model 'FabricStatus'
type FabricStatus string

// List of FabricStatus
const (
	FABRICSTATUS_DRAFT FabricStatus = "draft"
	FABRICSTATUS_ACTIVE FabricStatus = "active"
)

// All allowed values of FabricStatus enum
var AllowedFabricStatusEnumValues = []FabricStatus{
	"draft",
	"active",
}

func (v *FabricStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FabricStatus(value)
	for _, existing := range AllowedFabricStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FabricStatus", value)
}

// NewFabricStatusFromValue returns a pointer to a valid FabricStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFabricStatusFromValue(v string) (*FabricStatus, error) {
	ev := FabricStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FabricStatus: valid values are %v", v, AllowedFabricStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FabricStatus) IsValid() bool {
	for _, existing := range AllowedFabricStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FabricStatus value
func (v FabricStatus) Ptr() *FabricStatus {
	return &v
}

type NullableFabricStatus struct {
	value *FabricStatus
	isSet bool
}

func (v NullableFabricStatus) Get() *FabricStatus {
	return v.value
}

func (v *NullableFabricStatus) Set(val *FabricStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricStatus(val *FabricStatus) *NullableFabricStatus {
	return &NullableFabricStatus{value: val, isSet: true}
}

func (v NullableFabricStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

