/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerTypesForUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTypesForUsage{}

// ServerTypesForUsage struct for ServerTypesForUsage
type ServerTypesForUsage struct {
	// Id of the server type
	Id float32 `json:"id"`
	// Name of the server type
	Name string `json:"name"`
	// Count of servers available for this server type
	ServersAvailable float32 `json:"serversAvailable"`
	AdditionalProperties map[string]interface{}
}

type _ServerTypesForUsage ServerTypesForUsage

// NewServerTypesForUsage instantiates a new ServerTypesForUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTypesForUsage(id float32, name string, serversAvailable float32) *ServerTypesForUsage {
	this := ServerTypesForUsage{}
	this.Id = id
	this.Name = name
	this.ServersAvailable = serversAvailable
	return &this
}

// NewServerTypesForUsageWithDefaults instantiates a new ServerTypesForUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypesForUsageWithDefaults() *ServerTypesForUsage {
	this := ServerTypesForUsage{}
	return &this
}

// GetId returns the Id field value
func (o *ServerTypesForUsage) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerTypesForUsage) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerTypesForUsage) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ServerTypesForUsage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServerTypesForUsage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServerTypesForUsage) SetName(v string) {
	o.Name = v
}

// GetServersAvailable returns the ServersAvailable field value
func (o *ServerTypesForUsage) GetServersAvailable() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServersAvailable
}

// GetServersAvailableOk returns a tuple with the ServersAvailable field value
// and a boolean to check if the value has been set.
func (o *ServerTypesForUsage) GetServersAvailableOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServersAvailable, true
}

// SetServersAvailable sets field value
func (o *ServerTypesForUsage) SetServersAvailable(v float32) {
	o.ServersAvailable = v
}

func (o ServerTypesForUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTypesForUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["serversAvailable"] = o.ServersAvailable

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerTypesForUsage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"serversAvailable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerTypesForUsage := _ServerTypesForUsage{}

	err = json.Unmarshal(data, &varServerTypesForUsage)

	if err != nil {
		return err
	}

	*o = ServerTypesForUsage(varServerTypesForUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "serversAvailable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerTypesForUsage struct {
	value *ServerTypesForUsage
	isSet bool
}

func (v NullableServerTypesForUsage) Get() *ServerTypesForUsage {
	return v.value
}

func (v *NullableServerTypesForUsage) Set(val *ServerTypesForUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTypesForUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTypesForUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTypesForUsage(val *ServerTypesForUsage) *NullableServerTypesForUsage {
	return &NullableServerTypesForUsage{value: val, isSet: true}
}

func (v NullableServerTypesForUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTypesForUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


