/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceRecordSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceRecordSet{}

// ServerInstanceRecordSet struct for ServerInstanceRecordSet
type ServerInstanceRecordSet struct {
	ServiceStatus string `json:"serviceStatus"`
	DeployType string `json:"deployType"`
	DeployStatus string `json:"deployStatus"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceRecordSet ServerInstanceRecordSet

// NewServerInstanceRecordSet instantiates a new ServerInstanceRecordSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceRecordSet(serviceStatus string, deployType string, deployStatus string) *ServerInstanceRecordSet {
	this := ServerInstanceRecordSet{}
	this.ServiceStatus = serviceStatus
	this.DeployType = deployType
	this.DeployStatus = deployStatus
	return &this
}

// NewServerInstanceRecordSetWithDefaults instantiates a new ServerInstanceRecordSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceRecordSetWithDefaults() *ServerInstanceRecordSet {
	this := ServerInstanceRecordSet{}
	return &this
}

// GetServiceStatus returns the ServiceStatus field value
func (o *ServerInstanceRecordSet) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceRecordSet) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *ServerInstanceRecordSet) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetDeployType returns the DeployType field value
func (o *ServerInstanceRecordSet) GetDeployType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceRecordSet) GetDeployTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployType, true
}

// SetDeployType sets field value
func (o *ServerInstanceRecordSet) SetDeployType(v string) {
	o.DeployType = v
}

// GetDeployStatus returns the DeployStatus field value
func (o *ServerInstanceRecordSet) GetDeployStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployStatus
}

// GetDeployStatusOk returns a tuple with the DeployStatus field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceRecordSet) GetDeployStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployStatus, true
}

// SetDeployStatus sets field value
func (o *ServerInstanceRecordSet) SetDeployStatus(v string) {
	o.DeployStatus = v
}

func (o ServerInstanceRecordSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceRecordSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serviceStatus"] = o.ServiceStatus
	toSerialize["deployType"] = o.DeployType
	toSerialize["deployStatus"] = o.DeployStatus

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceRecordSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serviceStatus",
		"deployType",
		"deployStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceRecordSet := _ServerInstanceRecordSet{}

	err = json.Unmarshal(data, &varServerInstanceRecordSet)

	if err != nil {
		return err
	}

	*o = ServerInstanceRecordSet(varServerInstanceRecordSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "deployType")
		delete(additionalProperties, "deployStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceRecordSet struct {
	value *ServerInstanceRecordSet
	isSet bool
}

func (v NullableServerInstanceRecordSet) Get() *ServerInstanceRecordSet {
	return v.value
}

func (v *NullableServerInstanceRecordSet) Set(val *ServerInstanceRecordSet) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceRecordSet) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceRecordSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceRecordSet(val *ServerInstanceRecordSet) *NullableServerInstanceRecordSet {
	return &NullableServerInstanceRecordSet{value: val, isSet: true}
}

func (v NullableServerInstanceRecordSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceRecordSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


