/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceLicenseResourceItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceLicenseResourceItem{}

// InstanceLicenseResourceItem struct for InstanceLicenseResourceItem
type InstanceLicenseResourceItem struct {
	Id float32 `json:"id"`
	Label string `json:"label"`
	StartTimestamp string `json:"startTimestamp"`
	EndTimestamp string `json:"endTimestamp"`
	MeasurementPeriod float32 `json:"measurementPeriod"`
	MeasurementUnit string `json:"measurementUnit"`
	Quantity float32 `json:"quantity"`
	Tags *string `json:"tags,omitempty"`
	LicenseId string `json:"licenseId"`
	LicenseType string `json:"licenseType"`
	LicenseUtilizationType string `json:"licenseUtilizationType"`
	AdditionalProperties map[string]interface{}
}

type _InstanceLicenseResourceItem InstanceLicenseResourceItem

// NewInstanceLicenseResourceItem instantiates a new InstanceLicenseResourceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceLicenseResourceItem(id float32, label string, startTimestamp string, endTimestamp string, measurementPeriod float32, measurementUnit string, quantity float32, licenseId string, licenseType string, licenseUtilizationType string) *InstanceLicenseResourceItem {
	this := InstanceLicenseResourceItem{}
	this.Id = id
	this.Label = label
	this.StartTimestamp = startTimestamp
	this.EndTimestamp = endTimestamp
	this.MeasurementPeriod = measurementPeriod
	this.MeasurementUnit = measurementUnit
	this.Quantity = quantity
	this.LicenseId = licenseId
	this.LicenseType = licenseType
	this.LicenseUtilizationType = licenseUtilizationType
	return &this
}

// NewInstanceLicenseResourceItemWithDefaults instantiates a new InstanceLicenseResourceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceLicenseResourceItemWithDefaults() *InstanceLicenseResourceItem {
	this := InstanceLicenseResourceItem{}
	return &this
}

// GetId returns the Id field value
func (o *InstanceLicenseResourceItem) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InstanceLicenseResourceItem) SetId(v float32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *InstanceLicenseResourceItem) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *InstanceLicenseResourceItem) SetLabel(v string) {
	o.Label = v
}

// GetStartTimestamp returns the StartTimestamp field value
func (o *InstanceLicenseResourceItem) GetStartTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetStartTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTimestamp, true
}

// SetStartTimestamp sets field value
func (o *InstanceLicenseResourceItem) SetStartTimestamp(v string) {
	o.StartTimestamp = v
}

// GetEndTimestamp returns the EndTimestamp field value
func (o *InstanceLicenseResourceItem) GetEndTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetEndTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTimestamp, true
}

// SetEndTimestamp sets field value
func (o *InstanceLicenseResourceItem) SetEndTimestamp(v string) {
	o.EndTimestamp = v
}

// GetMeasurementPeriod returns the MeasurementPeriod field value
func (o *InstanceLicenseResourceItem) GetMeasurementPeriod() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MeasurementPeriod
}

// GetMeasurementPeriodOk returns a tuple with the MeasurementPeriod field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetMeasurementPeriodOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementPeriod, true
}

// SetMeasurementPeriod sets field value
func (o *InstanceLicenseResourceItem) SetMeasurementPeriod(v float32) {
	o.MeasurementPeriod = v
}

// GetMeasurementUnit returns the MeasurementUnit field value
func (o *InstanceLicenseResourceItem) GetMeasurementUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeasurementUnit
}

// GetMeasurementUnitOk returns a tuple with the MeasurementUnit field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetMeasurementUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementUnit, true
}

// SetMeasurementUnit sets field value
func (o *InstanceLicenseResourceItem) SetMeasurementUnit(v string) {
	o.MeasurementUnit = v
}

// GetQuantity returns the Quantity field value
func (o *InstanceLicenseResourceItem) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *InstanceLicenseResourceItem) SetQuantity(v float32) {
	o.Quantity = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *InstanceLicenseResourceItem) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *InstanceLicenseResourceItem) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *InstanceLicenseResourceItem) SetTags(v string) {
	o.Tags = &v
}

// GetLicenseId returns the LicenseId field value
func (o *InstanceLicenseResourceItem) GetLicenseId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetLicenseIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseId, true
}

// SetLicenseId sets field value
func (o *InstanceLicenseResourceItem) SetLicenseId(v string) {
	o.LicenseId = v
}

// GetLicenseType returns the LicenseType field value
func (o *InstanceLicenseResourceItem) GetLicenseType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetLicenseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseType, true
}

// SetLicenseType sets field value
func (o *InstanceLicenseResourceItem) SetLicenseType(v string) {
	o.LicenseType = v
}

// GetLicenseUtilizationType returns the LicenseUtilizationType field value
func (o *InstanceLicenseResourceItem) GetLicenseUtilizationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseUtilizationType
}

// GetLicenseUtilizationTypeOk returns a tuple with the LicenseUtilizationType field value
// and a boolean to check if the value has been set.
func (o *InstanceLicenseResourceItem) GetLicenseUtilizationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseUtilizationType, true
}

// SetLicenseUtilizationType sets field value
func (o *InstanceLicenseResourceItem) SetLicenseUtilizationType(v string) {
	o.LicenseUtilizationType = v
}

func (o InstanceLicenseResourceItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceLicenseResourceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["startTimestamp"] = o.StartTimestamp
	toSerialize["endTimestamp"] = o.EndTimestamp
	toSerialize["measurementPeriod"] = o.MeasurementPeriod
	toSerialize["measurementUnit"] = o.MeasurementUnit
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["licenseId"] = o.LicenseId
	toSerialize["licenseType"] = o.LicenseType
	toSerialize["licenseUtilizationType"] = o.LicenseUtilizationType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceLicenseResourceItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"startTimestamp",
		"endTimestamp",
		"measurementPeriod",
		"measurementUnit",
		"quantity",
		"licenseId",
		"licenseType",
		"licenseUtilizationType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceLicenseResourceItem := _InstanceLicenseResourceItem{}

	err = json.Unmarshal(data, &varInstanceLicenseResourceItem)

	if err != nil {
		return err
	}

	*o = InstanceLicenseResourceItem(varInstanceLicenseResourceItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "startTimestamp")
		delete(additionalProperties, "endTimestamp")
		delete(additionalProperties, "measurementPeriod")
		delete(additionalProperties, "measurementUnit")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "licenseId")
		delete(additionalProperties, "licenseType")
		delete(additionalProperties, "licenseUtilizationType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceLicenseResourceItem struct {
	value *InstanceLicenseResourceItem
	isSet bool
}

func (v NullableInstanceLicenseResourceItem) Get() *InstanceLicenseResourceItem {
	return v.value
}

func (v *NullableInstanceLicenseResourceItem) Set(val *InstanceLicenseResourceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceLicenseResourceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceLicenseResourceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceLicenseResourceItem(val *InstanceLicenseResourceItem) *NullableInstanceLicenseResourceItem {
	return &NullableInstanceLicenseResourceItem{value: val, isSet: true}
}

func (v NullableInstanceLicenseResourceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceLicenseResourceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


