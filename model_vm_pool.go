/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMPool{}

// VMPool struct for VMPool
type VMPool struct {
	// VM Pool ID
	Id float32 `json:"id"`
	// Id of the site for the VM
	SiteId float32 `json:"siteId"`
	// Datacenter of the VM
	DatacenterName string `json:"datacenterName"`
	// Host of the VM Pool
	ManagementHost string `json:"managementHost"`
	// Port of the VM Pool
	ManagementPort float32 `json:"managementPort"`
	// Name of the VM Pool
	Name string `json:"name"`
	// Description of the VM Pool
	Description *string `json:"description,omitempty"`
	// Type of the VM Pool
	Type string `json:"type"`
	// Certificate of the VM Pool
	Certificate *string `json:"certificate,omitempty"`
	// Private key of the VM Pool
	PrivateKeyEncrypted *string `json:"privateKeyEncrypted,omitempty"`
	// Username of the VM Pool
	Username *string `json:"username,omitempty"`
	// Password of the VM Pool
	PasswordEncrypted *string `json:"passwordEncrypted,omitempty"`
	// Status of the VM Pool
	Status string `json:"status"`
	// External identifier of the VM Pool
	ExternalIdentifier *string `json:"externalIdentifier,omitempty"`
	// Flag to indicate if the VM Pool is in maintenance mode. 1 for true, 0 for false. Default is 0.
	InMaintenance *float32 `json:"inMaintenance,omitempty"`
	// Flag to indicate if the VM Pool is experimental. 1 for true, 0 for false. Default is 0.
	IsExperimental *float32 `json:"isExperimental,omitempty"`
	// Timestamp when the VM Pool was created
	CreatedTimestamp string `json:"createdTimestamp"`
	// Timestamp when the VM Pool was updated
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Tags for the VM Pool.
	Tags []string `json:"tags,omitempty"`
	// Options for the vm pool
	Options *VMPoolOptions `json:"options,omitempty"`
	// Links to other resources
	Links map[string]interface{} `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _VMPool VMPool

// NewVMPool instantiates a new VMPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMPool(id float32, siteId float32, datacenterName string, managementHost string, managementPort float32, name string, type_ string, status string, createdTimestamp string, updatedTimestamp string, links map[string]interface{}) *VMPool {
	this := VMPool{}
	this.Id = id
	this.SiteId = siteId
	this.DatacenterName = datacenterName
	this.ManagementHost = managementHost
	this.ManagementPort = managementPort
	this.Name = name
	this.Type = type_
	this.Status = status
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.Links = links
	return &this
}

// NewVMPoolWithDefaults instantiates a new VMPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMPoolWithDefaults() *VMPool {
	this := VMPool{}
	return &this
}

// GetId returns the Id field value
func (o *VMPool) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VMPool) SetId(v float32) {
	o.Id = v
}

// GetSiteId returns the SiteId field value
func (o *VMPool) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *VMPool) SetSiteId(v float32) {
	o.SiteId = v
}

// GetDatacenterName returns the DatacenterName field value
func (o *VMPool) GetDatacenterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetDatacenterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatacenterName, true
}

// SetDatacenterName sets field value
func (o *VMPool) SetDatacenterName(v string) {
	o.DatacenterName = v
}

// GetManagementHost returns the ManagementHost field value
func (o *VMPool) GetManagementHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementHost
}

// GetManagementHostOk returns a tuple with the ManagementHost field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetManagementHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementHost, true
}

// SetManagementHost sets field value
func (o *VMPool) SetManagementHost(v string) {
	o.ManagementHost = v
}

// GetManagementPort returns the ManagementPort field value
func (o *VMPool) GetManagementPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ManagementPort
}

// GetManagementPortOk returns a tuple with the ManagementPort field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetManagementPortOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementPort, true
}

// SetManagementPort sets field value
func (o *VMPool) SetManagementPort(v float32) {
	o.ManagementPort = v
}

// GetName returns the Name field value
func (o *VMPool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VMPool) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VMPool) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VMPool) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VMPool) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *VMPool) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VMPool) SetType(v string) {
	o.Type = v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *VMPool) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *VMPool) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *VMPool) SetCertificate(v string) {
	o.Certificate = &v
}

// GetPrivateKeyEncrypted returns the PrivateKeyEncrypted field value if set, zero value otherwise.
func (o *VMPool) GetPrivateKeyEncrypted() string {
	if o == nil || IsNil(o.PrivateKeyEncrypted) {
		var ret string
		return ret
	}
	return *o.PrivateKeyEncrypted
}

// GetPrivateKeyEncryptedOk returns a tuple with the PrivateKeyEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetPrivateKeyEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKeyEncrypted) {
		return nil, false
	}
	return o.PrivateKeyEncrypted, true
}

// HasPrivateKeyEncrypted returns a boolean if a field has been set.
func (o *VMPool) HasPrivateKeyEncrypted() bool {
	if o != nil && !IsNil(o.PrivateKeyEncrypted) {
		return true
	}

	return false
}

// SetPrivateKeyEncrypted gets a reference to the given string and assigns it to the PrivateKeyEncrypted field.
func (o *VMPool) SetPrivateKeyEncrypted(v string) {
	o.PrivateKeyEncrypted = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *VMPool) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *VMPool) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *VMPool) SetUsername(v string) {
	o.Username = &v
}

// GetPasswordEncrypted returns the PasswordEncrypted field value if set, zero value otherwise.
func (o *VMPool) GetPasswordEncrypted() string {
	if o == nil || IsNil(o.PasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.PasswordEncrypted
}

// GetPasswordEncryptedOk returns a tuple with the PasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetPasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordEncrypted) {
		return nil, false
	}
	return o.PasswordEncrypted, true
}

// HasPasswordEncrypted returns a boolean if a field has been set.
func (o *VMPool) HasPasswordEncrypted() bool {
	if o != nil && !IsNil(o.PasswordEncrypted) {
		return true
	}

	return false
}

// SetPasswordEncrypted gets a reference to the given string and assigns it to the PasswordEncrypted field.
func (o *VMPool) SetPasswordEncrypted(v string) {
	o.PasswordEncrypted = &v
}

// GetStatus returns the Status field value
func (o *VMPool) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VMPool) SetStatus(v string) {
	o.Status = v
}

// GetExternalIdentifier returns the ExternalIdentifier field value if set, zero value otherwise.
func (o *VMPool) GetExternalIdentifier() string {
	if o == nil || IsNil(o.ExternalIdentifier) {
		var ret string
		return ret
	}
	return *o.ExternalIdentifier
}

// GetExternalIdentifierOk returns a tuple with the ExternalIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetExternalIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalIdentifier) {
		return nil, false
	}
	return o.ExternalIdentifier, true
}

// HasExternalIdentifier returns a boolean if a field has been set.
func (o *VMPool) HasExternalIdentifier() bool {
	if o != nil && !IsNil(o.ExternalIdentifier) {
		return true
	}

	return false
}

// SetExternalIdentifier gets a reference to the given string and assigns it to the ExternalIdentifier field.
func (o *VMPool) SetExternalIdentifier(v string) {
	o.ExternalIdentifier = &v
}

// GetInMaintenance returns the InMaintenance field value if set, zero value otherwise.
func (o *VMPool) GetInMaintenance() float32 {
	if o == nil || IsNil(o.InMaintenance) {
		var ret float32
		return ret
	}
	return *o.InMaintenance
}

// GetInMaintenanceOk returns a tuple with the InMaintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetInMaintenanceOk() (*float32, bool) {
	if o == nil || IsNil(o.InMaintenance) {
		return nil, false
	}
	return o.InMaintenance, true
}

// HasInMaintenance returns a boolean if a field has been set.
func (o *VMPool) HasInMaintenance() bool {
	if o != nil && !IsNil(o.InMaintenance) {
		return true
	}

	return false
}

// SetInMaintenance gets a reference to the given float32 and assigns it to the InMaintenance field.
func (o *VMPool) SetInMaintenance(v float32) {
	o.InMaintenance = &v
}

// GetIsExperimental returns the IsExperimental field value if set, zero value otherwise.
func (o *VMPool) GetIsExperimental() float32 {
	if o == nil || IsNil(o.IsExperimental) {
		var ret float32
		return ret
	}
	return *o.IsExperimental
}

// GetIsExperimentalOk returns a tuple with the IsExperimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetIsExperimentalOk() (*float32, bool) {
	if o == nil || IsNil(o.IsExperimental) {
		return nil, false
	}
	return o.IsExperimental, true
}

// HasIsExperimental returns a boolean if a field has been set.
func (o *VMPool) HasIsExperimental() bool {
	if o != nil && !IsNil(o.IsExperimental) {
		return true
	}

	return false
}

// SetIsExperimental gets a reference to the given float32 and assigns it to the IsExperimental field.
func (o *VMPool) SetIsExperimental(v float32) {
	o.IsExperimental = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *VMPool) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *VMPool) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *VMPool) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *VMPool) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VMPool) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VMPool) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VMPool) SetTags(v []string) {
	o.Tags = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *VMPool) GetOptions() VMPoolOptions {
	if o == nil || IsNil(o.Options) {
		var ret VMPoolOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPool) GetOptionsOk() (*VMPoolOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *VMPool) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given VMPoolOptions and assigns it to the Options field.
func (o *VMPool) SetOptions(v VMPoolOptions) {
	o.Options = &v
}

// GetLinks returns the Links field value
func (o *VMPool) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *VMPool) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *VMPool) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o VMPool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["siteId"] = o.SiteId
	toSerialize["datacenterName"] = o.DatacenterName
	toSerialize["managementHost"] = o.ManagementHost
	toSerialize["managementPort"] = o.ManagementPort
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.PrivateKeyEncrypted) {
		toSerialize["privateKeyEncrypted"] = o.PrivateKeyEncrypted
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.PasswordEncrypted) {
		toSerialize["passwordEncrypted"] = o.PasswordEncrypted
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.ExternalIdentifier) {
		toSerialize["externalIdentifier"] = o.ExternalIdentifier
	}
	if !IsNil(o.InMaintenance) {
		toSerialize["inMaintenance"] = o.InMaintenance
	}
	if !IsNil(o.IsExperimental) {
		toSerialize["isExperimental"] = o.IsExperimental
	}
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMPool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"siteId",
		"datacenterName",
		"managementHost",
		"managementPort",
		"name",
		"type",
		"status",
		"createdTimestamp",
		"updatedTimestamp",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMPool := _VMPool{}

	err = json.Unmarshal(data, &varVMPool)

	if err != nil {
		return err
	}

	*o = VMPool(varVMPool)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "datacenterName")
		delete(additionalProperties, "managementHost")
		delete(additionalProperties, "managementPort")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "privateKeyEncrypted")
		delete(additionalProperties, "username")
		delete(additionalProperties, "passwordEncrypted")
		delete(additionalProperties, "status")
		delete(additionalProperties, "externalIdentifier")
		delete(additionalProperties, "inMaintenance")
		delete(additionalProperties, "isExperimental")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "options")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMPool struct {
	value *VMPool
	isSet bool
}

func (v NullableVMPool) Get() *VMPool {
	return v.value
}

func (v *NullableVMPool) Set(val *VMPool) {
	v.value = val
	v.isSet = true
}

func (v NullableVMPool) IsSet() bool {
	return v.isSet
}

func (v *NullableVMPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMPool(val *VMPool) *NullableVMPool {
	return &NullableVMPool{value: val, isSet: true}
}

func (v NullableVMPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


