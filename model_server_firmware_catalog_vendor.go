/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ServerFirmwareCatalogVendor the model 'ServerFirmwareCatalogVendor'
type ServerFirmwareCatalogVendor string

// List of ServerFirmwareCatalogVendor
const (
	SERVERFIRMWARECATALOGVENDOR_DELL ServerFirmwareCatalogVendor = "dell"
	SERVERFIRMWARECATALOGVENDOR_LENOVO ServerFirmwareCatalogVendor = "lenovo"
	SERVERFIRMWARECATALOGVENDOR_HP ServerFirmwareCatalogVendor = "hp"
)

// All allowed values of ServerFirmwareCatalogVendor enum
var AllowedServerFirmwareCatalogVendorEnumValues = []ServerFirmwareCatalogVendor{
	"dell",
	"lenovo",
	"hp",
}

func (v *ServerFirmwareCatalogVendor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServerFirmwareCatalogVendor(value)
	for _, existing := range AllowedServerFirmwareCatalogVendorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServerFirmwareCatalogVendor", value)
}

// NewServerFirmwareCatalogVendorFromValue returns a pointer to a valid ServerFirmwareCatalogVendor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServerFirmwareCatalogVendorFromValue(v string) (*ServerFirmwareCatalogVendor, error) {
	ev := ServerFirmwareCatalogVendor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServerFirmwareCatalogVendor: valid values are %v", v, AllowedServerFirmwareCatalogVendorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServerFirmwareCatalogVendor) IsValid() bool {
	for _, existing := range AllowedServerFirmwareCatalogVendorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServerFirmwareCatalogVendor value
func (v ServerFirmwareCatalogVendor) Ptr() *ServerFirmwareCatalogVendor {
	return &v
}

type NullableServerFirmwareCatalogVendor struct {
	value *ServerFirmwareCatalogVendor
	isSet bool
}

func (v NullableServerFirmwareCatalogVendor) Get() *ServerFirmwareCatalogVendor {
	return v.value
}

func (v *NullableServerFirmwareCatalogVendor) Set(val *ServerFirmwareCatalogVendor) {
	v.value = val
	v.isSet = true
}

func (v NullableServerFirmwareCatalogVendor) IsSet() bool {
	return v.isSet
}

func (v *NullableServerFirmwareCatalogVendor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerFirmwareCatalogVendor(val *ServerFirmwareCatalogVendor) *NullableServerFirmwareCatalogVendor {
	return &NullableServerFirmwareCatalogVendor{value: val, isSet: true}
}

func (v NullableServerFirmwareCatalogVendor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerFirmwareCatalogVendor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

