/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the DellComponentFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DellComponentFilter{}

// DellComponentFilter struct for DellComponentFilter
type DellComponentFilter struct {
	// Discriminator field set to dell
	Vendor string `json:"vendor"`
	// ID of the Dell component filter
	Id float32 `json:"id"`
	// Component ID for Dell
	ComponentId string `json:"componentId"`
	// Server brand for Dell
	ServerBrand string `json:"serverBrand"`
	// Server model for Dell
	ServerModel string `json:"serverModel"`
	AdditionalProperties map[string]interface{}
}

type _DellComponentFilter DellComponentFilter

// NewDellComponentFilter instantiates a new DellComponentFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDellComponentFilter(vendor string, id float32, componentId string, serverBrand string, serverModel string) *DellComponentFilter {
	this := DellComponentFilter{}
	this.Vendor = vendor
	this.Id = id
	this.ComponentId = componentId
	this.ServerBrand = serverBrand
	this.ServerModel = serverModel
	return &this
}

// NewDellComponentFilterWithDefaults instantiates a new DellComponentFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDellComponentFilterWithDefaults() *DellComponentFilter {
	this := DellComponentFilter{}
	return &this
}

// GetVendor returns the Vendor field value
func (o *DellComponentFilter) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *DellComponentFilter) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *DellComponentFilter) SetVendor(v string) {
	o.Vendor = v
}

// GetId returns the Id field value
func (o *DellComponentFilter) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DellComponentFilter) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DellComponentFilter) SetId(v float32) {
	o.Id = v
}

// GetComponentId returns the ComponentId field value
func (o *DellComponentFilter) GetComponentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentId
}

// GetComponentIdOk returns a tuple with the ComponentId field value
// and a boolean to check if the value has been set.
func (o *DellComponentFilter) GetComponentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentId, true
}

// SetComponentId sets field value
func (o *DellComponentFilter) SetComponentId(v string) {
	o.ComponentId = v
}

// GetServerBrand returns the ServerBrand field value
func (o *DellComponentFilter) GetServerBrand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerBrand
}

// GetServerBrandOk returns a tuple with the ServerBrand field value
// and a boolean to check if the value has been set.
func (o *DellComponentFilter) GetServerBrandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerBrand, true
}

// SetServerBrand sets field value
func (o *DellComponentFilter) SetServerBrand(v string) {
	o.ServerBrand = v
}

// GetServerModel returns the ServerModel field value
func (o *DellComponentFilter) GetServerModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerModel
}

// GetServerModelOk returns a tuple with the ServerModel field value
// and a boolean to check if the value has been set.
func (o *DellComponentFilter) GetServerModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerModel, true
}

// SetServerModel sets field value
func (o *DellComponentFilter) SetServerModel(v string) {
	o.ServerModel = v
}

func (o DellComponentFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DellComponentFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vendor"] = o.Vendor
	toSerialize["id"] = o.Id
	toSerialize["componentId"] = o.ComponentId
	toSerialize["serverBrand"] = o.ServerBrand
	toSerialize["serverModel"] = o.ServerModel

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DellComponentFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vendor",
		"id",
		"componentId",
		"serverBrand",
		"serverModel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDellComponentFilter := _DellComponentFilter{}

	err = json.Unmarshal(data, &varDellComponentFilter)

	if err != nil {
		return err
	}

	*o = DellComponentFilter(varDellComponentFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "id")
		delete(additionalProperties, "componentId")
		delete(additionalProperties, "serverBrand")
		delete(additionalProperties, "serverModel")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDellComponentFilter struct {
	value *DellComponentFilter
	isSet bool
}

func (v NullableDellComponentFilter) Get() *DellComponentFilter {
	return v.value
}

func (v *NullableDellComponentFilter) Set(val *DellComponentFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableDellComponentFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableDellComponentFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDellComponentFilter(val *DellComponentFilter) *NullableDellComponentFilter {
	return &NullableDellComponentFilter{value: val, isSet: true}
}

func (v NullableDellComponentFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDellComponentFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


