/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UserPromotion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPromotion{}

// UserPromotion struct for UserPromotion
type UserPromotion struct {
	// The promotion for the user
	Promotion *string `json:"promotion,omitempty"`
	// Whether to remove the promotion
	RemovePromotion *bool `json:"removePromotion,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserPromotion UserPromotion

// NewUserPromotion instantiates a new UserPromotion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPromotion() *UserPromotion {
	this := UserPromotion{}
	var removePromotion bool = false
	this.RemovePromotion = &removePromotion
	return &this
}

// NewUserPromotionWithDefaults instantiates a new UserPromotion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPromotionWithDefaults() *UserPromotion {
	this := UserPromotion{}
	var removePromotion bool = false
	this.RemovePromotion = &removePromotion
	return &this
}

// GetPromotion returns the Promotion field value if set, zero value otherwise.
func (o *UserPromotion) GetPromotion() string {
	if o == nil || IsNil(o.Promotion) {
		var ret string
		return ret
	}
	return *o.Promotion
}

// GetPromotionOk returns a tuple with the Promotion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPromotion) GetPromotionOk() (*string, bool) {
	if o == nil || IsNil(o.Promotion) {
		return nil, false
	}
	return o.Promotion, true
}

// HasPromotion returns a boolean if a field has been set.
func (o *UserPromotion) HasPromotion() bool {
	if o != nil && !IsNil(o.Promotion) {
		return true
	}

	return false
}

// SetPromotion gets a reference to the given string and assigns it to the Promotion field.
func (o *UserPromotion) SetPromotion(v string) {
	o.Promotion = &v
}

// GetRemovePromotion returns the RemovePromotion field value if set, zero value otherwise.
func (o *UserPromotion) GetRemovePromotion() bool {
	if o == nil || IsNil(o.RemovePromotion) {
		var ret bool
		return ret
	}
	return *o.RemovePromotion
}

// GetRemovePromotionOk returns a tuple with the RemovePromotion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPromotion) GetRemovePromotionOk() (*bool, bool) {
	if o == nil || IsNil(o.RemovePromotion) {
		return nil, false
	}
	return o.RemovePromotion, true
}

// HasRemovePromotion returns a boolean if a field has been set.
func (o *UserPromotion) HasRemovePromotion() bool {
	if o != nil && !IsNil(o.RemovePromotion) {
		return true
	}

	return false
}

// SetRemovePromotion gets a reference to the given bool and assigns it to the RemovePromotion field.
func (o *UserPromotion) SetRemovePromotion(v bool) {
	o.RemovePromotion = &v
}

func (o UserPromotion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPromotion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Promotion) {
		toSerialize["promotion"] = o.Promotion
	}
	if !IsNil(o.RemovePromotion) {
		toSerialize["removePromotion"] = o.RemovePromotion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserPromotion) UnmarshalJSON(data []byte) (err error) {
	varUserPromotion := _UserPromotion{}

	err = json.Unmarshal(data, &varUserPromotion)

	if err != nil {
		return err
	}

	*o = UserPromotion(varUserPromotion)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "promotion")
		delete(additionalProperties, "removePromotion")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserPromotion struct {
	value *UserPromotion
	isSet bool
}

func (v NullableUserPromotion) Get() *UserPromotion {
	return v.value
}

func (v *NullableUserPromotion) Set(val *UserPromotion) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPromotion) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPromotion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPromotion(val *UserPromotion) *NullableUserPromotion {
	return &NullableUserPromotion{value: val, isSet: true}
}

func (v NullableUserPromotion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPromotion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


