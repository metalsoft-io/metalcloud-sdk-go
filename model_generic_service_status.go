/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// GenericServiceStatus the model 'GenericServiceStatus'
type GenericServiceStatus string

// List of GenericServiceStatus
const (
	ORDERED GenericServiceStatus = "ordered"
	ACTIVE GenericServiceStatus = "active"
	DELETED GenericServiceStatus = "deleted"
	STOPPED GenericServiceStatus = "stopped"
	SUSPENDED GenericServiceStatus = "suspended"
)

// All allowed values of GenericServiceStatus enum
var AllowedGenericServiceStatusEnumValues = []GenericServiceStatus{
	"ordered",
	"active",
	"deleted",
	"stopped",
	"suspended",
}

func (v *GenericServiceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GenericServiceStatus(value)
	for _, existing := range AllowedGenericServiceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GenericServiceStatus", value)
}

// NewGenericServiceStatusFromValue returns a pointer to a valid GenericServiceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenericServiceStatusFromValue(v string) (*GenericServiceStatus, error) {
	ev := GenericServiceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GenericServiceStatus: valid values are %v", v, AllowedGenericServiceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GenericServiceStatus) IsValid() bool {
	for _, existing := range AllowedGenericServiceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GenericServiceStatus value
func (v GenericServiceStatus) Ptr() *GenericServiceStatus {
	return &v
}

type NullableGenericServiceStatus struct {
	value *GenericServiceStatus
	isSet bool
}

func (v NullableGenericServiceStatus) Get() *GenericServiceStatus {
	return v.value
}

func (v *NullableGenericServiceStatus) Set(val *GenericServiceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericServiceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericServiceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericServiceStatus(val *GenericServiceStatus) *NullableGenericServiceStatus {
	return &NullableGenericServiceStatus{value: val, isSet: true}
}

func (v NullableGenericServiceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericServiceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

