/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerType{}

// ServerType struct for ServerType
type ServerType struct {
	// The id of the server type.
	Id float32 `json:"id"`
	// The RAM GB of the server type.
	RamGbytes float32 `json:"ramGbytes"`
	// The processor count of the server type.
	ProcessorCount float32 `json:"processorCount"`
	// The processor core Mhz of the server type.
	ProcessorCoreMhz float32 `json:"processorCoreMhz"`
	// The processor core count of the server type.
	ProcessorCoreCount float32 `json:"processorCoreCount"`
	// The display name of the server type.
	Name string `json:"name"`
	// The display name of the server type.
	DisplayName *string `json:"displayName,omitempty"`
	// The label of the server type.
	Label *string `json:"label,omitempty"`
	// The total network capacity of the server type.
	NetworkTotalCapacityMbps float32 `json:"networkTotalCapacityMbps"`
	// The number of interfaces of the server type.
	NetworkInterfaceCount float32 `json:"networkInterfaceCount"`
	// The network speeds of each interface of the server type.
	NetworkInterfaceSpeeds []float32 `json:"networkInterfaceSpeeds"`
	// The name of each processor of the server type.
	ProcessorNames []string `json:"processorNames"`
	// The list of allowed SKU ids for the server type.
	AllowedVendorSkuIds []string `json:"allowedVendorSkuIds,omitempty"`
	// The number of disks of the server type.
	DiskCount float32 `json:"diskCount"`
	// Flag specifying if the server type is experimental.
	IsExperimental *float32 `json:"isExperimental,omitempty"`
	// Flag specifying if the server type is only for unmanaged servers.
	ForUnmanagedServersOnly *float32 `json:"forUnmanagedServersOnly,omitempty"`
	// Flag specifying if the server type is only for generic endpoints.
	ForGenericEndpointsOnly *float32 `json:"forGenericEndpointsOnly,omitempty"`
	// Flag specifying if the server type supports OOB provisioning.
	SupportsOobProvisioning *float32 `json:"supportsOobProvisioning,omitempty"`
	// The class of servers allowed for the server type.
	ServerClass string `json:"serverClass"`
	// The server boot type allowed for the server type.
	BootType *string `json:"bootType,omitempty"`
	// The tags for the server type.
	Tags []string `json:"tags,omitempty"`
	// The number of GPUs for the server type.
	GpuCount *float32 `json:"gpuCount,omitempty"`
	// The information for each GPU of the server type.
	GpuInfo []ServerGpuInfo `json:"gpuInfo,omitempty"`
	DiskGroups *ServerTypeDiskGroup `json:"diskGroups,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerType ServerType

// NewServerType instantiates a new ServerType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerType(id float32, ramGbytes float32, processorCount float32, processorCoreMhz float32, processorCoreCount float32, name string, networkTotalCapacityMbps float32, networkInterfaceCount float32, networkInterfaceSpeeds []float32, processorNames []string, diskCount float32, serverClass string) *ServerType {
	this := ServerType{}
	this.Id = id
	this.RamGbytes = ramGbytes
	this.ProcessorCount = processorCount
	this.ProcessorCoreMhz = processorCoreMhz
	this.ProcessorCoreCount = processorCoreCount
	this.Name = name
	this.NetworkTotalCapacityMbps = networkTotalCapacityMbps
	this.NetworkInterfaceCount = networkInterfaceCount
	this.NetworkInterfaceSpeeds = networkInterfaceSpeeds
	this.ProcessorNames = processorNames
	this.DiskCount = diskCount
	var isExperimental float32 = 0
	this.IsExperimental = &isExperimental
	var forUnmanagedServersOnly float32 = 0
	this.ForUnmanagedServersOnly = &forUnmanagedServersOnly
	var forGenericEndpointsOnly float32 = 0
	this.ForGenericEndpointsOnly = &forGenericEndpointsOnly
	var supportsOobProvisioning float32 = 0
	this.SupportsOobProvisioning = &supportsOobProvisioning
	this.ServerClass = serverClass
	var gpuCount float32 = 0
	this.GpuCount = &gpuCount
	return &this
}

// NewServerTypeWithDefaults instantiates a new ServerType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeWithDefaults() *ServerType {
	this := ServerType{}
	var isExperimental float32 = 0
	this.IsExperimental = &isExperimental
	var forUnmanagedServersOnly float32 = 0
	this.ForUnmanagedServersOnly = &forUnmanagedServersOnly
	var forGenericEndpointsOnly float32 = 0
	this.ForGenericEndpointsOnly = &forGenericEndpointsOnly
	var supportsOobProvisioning float32 = 0
	this.SupportsOobProvisioning = &supportsOobProvisioning
	var gpuCount float32 = 0
	this.GpuCount = &gpuCount
	return &this
}

// GetId returns the Id field value
func (o *ServerType) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerType) SetId(v float32) {
	o.Id = v
}

// GetRamGbytes returns the RamGbytes field value
func (o *ServerType) GetRamGbytes() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RamGbytes
}

// GetRamGbytesOk returns a tuple with the RamGbytes field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetRamGbytesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RamGbytes, true
}

// SetRamGbytes sets field value
func (o *ServerType) SetRamGbytes(v float32) {
	o.RamGbytes = v
}

// GetProcessorCount returns the ProcessorCount field value
func (o *ServerType) GetProcessorCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProcessorCount
}

// GetProcessorCountOk returns a tuple with the ProcessorCount field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetProcessorCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorCount, true
}

// SetProcessorCount sets field value
func (o *ServerType) SetProcessorCount(v float32) {
	o.ProcessorCount = v
}

// GetProcessorCoreMhz returns the ProcessorCoreMhz field value
func (o *ServerType) GetProcessorCoreMhz() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProcessorCoreMhz
}

// GetProcessorCoreMhzOk returns a tuple with the ProcessorCoreMhz field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetProcessorCoreMhzOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorCoreMhz, true
}

// SetProcessorCoreMhz sets field value
func (o *ServerType) SetProcessorCoreMhz(v float32) {
	o.ProcessorCoreMhz = v
}

// GetProcessorCoreCount returns the ProcessorCoreCount field value
func (o *ServerType) GetProcessorCoreCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProcessorCoreCount
}

// GetProcessorCoreCountOk returns a tuple with the ProcessorCoreCount field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetProcessorCoreCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorCoreCount, true
}

// SetProcessorCoreCount sets field value
func (o *ServerType) SetProcessorCoreCount(v float32) {
	o.ProcessorCoreCount = v
}

// GetName returns the Name field value
func (o *ServerType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServerType) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ServerType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ServerType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ServerType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ServerType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ServerType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ServerType) SetLabel(v string) {
	o.Label = &v
}

// GetNetworkTotalCapacityMbps returns the NetworkTotalCapacityMbps field value
func (o *ServerType) GetNetworkTotalCapacityMbps() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NetworkTotalCapacityMbps
}

// GetNetworkTotalCapacityMbpsOk returns a tuple with the NetworkTotalCapacityMbps field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetNetworkTotalCapacityMbpsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkTotalCapacityMbps, true
}

// SetNetworkTotalCapacityMbps sets field value
func (o *ServerType) SetNetworkTotalCapacityMbps(v float32) {
	o.NetworkTotalCapacityMbps = v
}

// GetNetworkInterfaceCount returns the NetworkInterfaceCount field value
func (o *ServerType) GetNetworkInterfaceCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NetworkInterfaceCount
}

// GetNetworkInterfaceCountOk returns a tuple with the NetworkInterfaceCount field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetNetworkInterfaceCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkInterfaceCount, true
}

// SetNetworkInterfaceCount sets field value
func (o *ServerType) SetNetworkInterfaceCount(v float32) {
	o.NetworkInterfaceCount = v
}

// GetNetworkInterfaceSpeeds returns the NetworkInterfaceSpeeds field value
func (o *ServerType) GetNetworkInterfaceSpeeds() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.NetworkInterfaceSpeeds
}

// GetNetworkInterfaceSpeedsOk returns a tuple with the NetworkInterfaceSpeeds field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetNetworkInterfaceSpeedsOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkInterfaceSpeeds, true
}

// SetNetworkInterfaceSpeeds sets field value
func (o *ServerType) SetNetworkInterfaceSpeeds(v []float32) {
	o.NetworkInterfaceSpeeds = v
}

// GetProcessorNames returns the ProcessorNames field value
func (o *ServerType) GetProcessorNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProcessorNames
}

// GetProcessorNamesOk returns a tuple with the ProcessorNames field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetProcessorNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessorNames, true
}

// SetProcessorNames sets field value
func (o *ServerType) SetProcessorNames(v []string) {
	o.ProcessorNames = v
}

// GetAllowedVendorSkuIds returns the AllowedVendorSkuIds field value if set, zero value otherwise.
func (o *ServerType) GetAllowedVendorSkuIds() []string {
	if o == nil || IsNil(o.AllowedVendorSkuIds) {
		var ret []string
		return ret
	}
	return o.AllowedVendorSkuIds
}

// GetAllowedVendorSkuIdsOk returns a tuple with the AllowedVendorSkuIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetAllowedVendorSkuIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedVendorSkuIds) {
		return nil, false
	}
	return o.AllowedVendorSkuIds, true
}

// HasAllowedVendorSkuIds returns a boolean if a field has been set.
func (o *ServerType) HasAllowedVendorSkuIds() bool {
	if o != nil && !IsNil(o.AllowedVendorSkuIds) {
		return true
	}

	return false
}

// SetAllowedVendorSkuIds gets a reference to the given []string and assigns it to the AllowedVendorSkuIds field.
func (o *ServerType) SetAllowedVendorSkuIds(v []string) {
	o.AllowedVendorSkuIds = v
}

// GetDiskCount returns the DiskCount field value
func (o *ServerType) GetDiskCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DiskCount
}

// GetDiskCountOk returns a tuple with the DiskCount field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetDiskCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskCount, true
}

// SetDiskCount sets field value
func (o *ServerType) SetDiskCount(v float32) {
	o.DiskCount = v
}

// GetIsExperimental returns the IsExperimental field value if set, zero value otherwise.
func (o *ServerType) GetIsExperimental() float32 {
	if o == nil || IsNil(o.IsExperimental) {
		var ret float32
		return ret
	}
	return *o.IsExperimental
}

// GetIsExperimentalOk returns a tuple with the IsExperimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetIsExperimentalOk() (*float32, bool) {
	if o == nil || IsNil(o.IsExperimental) {
		return nil, false
	}
	return o.IsExperimental, true
}

// HasIsExperimental returns a boolean if a field has been set.
func (o *ServerType) HasIsExperimental() bool {
	if o != nil && !IsNil(o.IsExperimental) {
		return true
	}

	return false
}

// SetIsExperimental gets a reference to the given float32 and assigns it to the IsExperimental field.
func (o *ServerType) SetIsExperimental(v float32) {
	o.IsExperimental = &v
}

// GetForUnmanagedServersOnly returns the ForUnmanagedServersOnly field value if set, zero value otherwise.
func (o *ServerType) GetForUnmanagedServersOnly() float32 {
	if o == nil || IsNil(o.ForUnmanagedServersOnly) {
		var ret float32
		return ret
	}
	return *o.ForUnmanagedServersOnly
}

// GetForUnmanagedServersOnlyOk returns a tuple with the ForUnmanagedServersOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetForUnmanagedServersOnlyOk() (*float32, bool) {
	if o == nil || IsNil(o.ForUnmanagedServersOnly) {
		return nil, false
	}
	return o.ForUnmanagedServersOnly, true
}

// HasForUnmanagedServersOnly returns a boolean if a field has been set.
func (o *ServerType) HasForUnmanagedServersOnly() bool {
	if o != nil && !IsNil(o.ForUnmanagedServersOnly) {
		return true
	}

	return false
}

// SetForUnmanagedServersOnly gets a reference to the given float32 and assigns it to the ForUnmanagedServersOnly field.
func (o *ServerType) SetForUnmanagedServersOnly(v float32) {
	o.ForUnmanagedServersOnly = &v
}

// GetForGenericEndpointsOnly returns the ForGenericEndpointsOnly field value if set, zero value otherwise.
func (o *ServerType) GetForGenericEndpointsOnly() float32 {
	if o == nil || IsNil(o.ForGenericEndpointsOnly) {
		var ret float32
		return ret
	}
	return *o.ForGenericEndpointsOnly
}

// GetForGenericEndpointsOnlyOk returns a tuple with the ForGenericEndpointsOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetForGenericEndpointsOnlyOk() (*float32, bool) {
	if o == nil || IsNil(o.ForGenericEndpointsOnly) {
		return nil, false
	}
	return o.ForGenericEndpointsOnly, true
}

// HasForGenericEndpointsOnly returns a boolean if a field has been set.
func (o *ServerType) HasForGenericEndpointsOnly() bool {
	if o != nil && !IsNil(o.ForGenericEndpointsOnly) {
		return true
	}

	return false
}

// SetForGenericEndpointsOnly gets a reference to the given float32 and assigns it to the ForGenericEndpointsOnly field.
func (o *ServerType) SetForGenericEndpointsOnly(v float32) {
	o.ForGenericEndpointsOnly = &v
}

// GetSupportsOobProvisioning returns the SupportsOobProvisioning field value if set, zero value otherwise.
func (o *ServerType) GetSupportsOobProvisioning() float32 {
	if o == nil || IsNil(o.SupportsOobProvisioning) {
		var ret float32
		return ret
	}
	return *o.SupportsOobProvisioning
}

// GetSupportsOobProvisioningOk returns a tuple with the SupportsOobProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetSupportsOobProvisioningOk() (*float32, bool) {
	if o == nil || IsNil(o.SupportsOobProvisioning) {
		return nil, false
	}
	return o.SupportsOobProvisioning, true
}

// HasSupportsOobProvisioning returns a boolean if a field has been set.
func (o *ServerType) HasSupportsOobProvisioning() bool {
	if o != nil && !IsNil(o.SupportsOobProvisioning) {
		return true
	}

	return false
}

// SetSupportsOobProvisioning gets a reference to the given float32 and assigns it to the SupportsOobProvisioning field.
func (o *ServerType) SetSupportsOobProvisioning(v float32) {
	o.SupportsOobProvisioning = &v
}

// GetServerClass returns the ServerClass field value
func (o *ServerType) GetServerClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerClass
}

// GetServerClassOk returns a tuple with the ServerClass field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetServerClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerClass, true
}

// SetServerClass sets field value
func (o *ServerType) SetServerClass(v string) {
	o.ServerClass = v
}

// GetBootType returns the BootType field value if set, zero value otherwise.
func (o *ServerType) GetBootType() string {
	if o == nil || IsNil(o.BootType) {
		var ret string
		return ret
	}
	return *o.BootType
}

// GetBootTypeOk returns a tuple with the BootType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetBootTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BootType) {
		return nil, false
	}
	return o.BootType, true
}

// HasBootType returns a boolean if a field has been set.
func (o *ServerType) HasBootType() bool {
	if o != nil && !IsNil(o.BootType) {
		return true
	}

	return false
}

// SetBootType gets a reference to the given string and assigns it to the BootType field.
func (o *ServerType) SetBootType(v string) {
	o.BootType = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ServerType) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ServerType) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ServerType) SetTags(v []string) {
	o.Tags = v
}

// GetGpuCount returns the GpuCount field value if set, zero value otherwise.
func (o *ServerType) GetGpuCount() float32 {
	if o == nil || IsNil(o.GpuCount) {
		var ret float32
		return ret
	}
	return *o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetGpuCountOk() (*float32, bool) {
	if o == nil || IsNil(o.GpuCount) {
		return nil, false
	}
	return o.GpuCount, true
}

// HasGpuCount returns a boolean if a field has been set.
func (o *ServerType) HasGpuCount() bool {
	if o != nil && !IsNil(o.GpuCount) {
		return true
	}

	return false
}

// SetGpuCount gets a reference to the given float32 and assigns it to the GpuCount field.
func (o *ServerType) SetGpuCount(v float32) {
	o.GpuCount = &v
}

// GetGpuInfo returns the GpuInfo field value if set, zero value otherwise.
func (o *ServerType) GetGpuInfo() []ServerGpuInfo {
	if o == nil || IsNil(o.GpuInfo) {
		var ret []ServerGpuInfo
		return ret
	}
	return o.GpuInfo
}

// GetGpuInfoOk returns a tuple with the GpuInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetGpuInfoOk() ([]ServerGpuInfo, bool) {
	if o == nil || IsNil(o.GpuInfo) {
		return nil, false
	}
	return o.GpuInfo, true
}

// HasGpuInfo returns a boolean if a field has been set.
func (o *ServerType) HasGpuInfo() bool {
	if o != nil && !IsNil(o.GpuInfo) {
		return true
	}

	return false
}

// SetGpuInfo gets a reference to the given []ServerGpuInfo and assigns it to the GpuInfo field.
func (o *ServerType) SetGpuInfo(v []ServerGpuInfo) {
	o.GpuInfo = v
}

// GetDiskGroups returns the DiskGroups field value if set, zero value otherwise.
func (o *ServerType) GetDiskGroups() ServerTypeDiskGroup {
	if o == nil || IsNil(o.DiskGroups) {
		var ret ServerTypeDiskGroup
		return ret
	}
	return *o.DiskGroups
}

// GetDiskGroupsOk returns a tuple with the DiskGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetDiskGroupsOk() (*ServerTypeDiskGroup, bool) {
	if o == nil || IsNil(o.DiskGroups) {
		return nil, false
	}
	return o.DiskGroups, true
}

// HasDiskGroups returns a boolean if a field has been set.
func (o *ServerType) HasDiskGroups() bool {
	if o != nil && !IsNil(o.DiskGroups) {
		return true
	}

	return false
}

// SetDiskGroups gets a reference to the given ServerTypeDiskGroup and assigns it to the DiskGroups field.
func (o *ServerType) SetDiskGroups(v ServerTypeDiskGroup) {
	o.DiskGroups = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ServerType) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerType) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ServerType) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ServerType) SetLinks(v []Link) {
	o.Links = v
}

func (o ServerType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ramGbytes"] = o.RamGbytes
	toSerialize["processorCount"] = o.ProcessorCount
	toSerialize["processorCoreMhz"] = o.ProcessorCoreMhz
	toSerialize["processorCoreCount"] = o.ProcessorCoreCount
	toSerialize["name"] = o.Name
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["networkTotalCapacityMbps"] = o.NetworkTotalCapacityMbps
	toSerialize["networkInterfaceCount"] = o.NetworkInterfaceCount
	toSerialize["networkInterfaceSpeeds"] = o.NetworkInterfaceSpeeds
	toSerialize["processorNames"] = o.ProcessorNames
	if !IsNil(o.AllowedVendorSkuIds) {
		toSerialize["allowedVendorSkuIds"] = o.AllowedVendorSkuIds
	}
	toSerialize["diskCount"] = o.DiskCount
	if !IsNil(o.IsExperimental) {
		toSerialize["isExperimental"] = o.IsExperimental
	}
	if !IsNil(o.ForUnmanagedServersOnly) {
		toSerialize["forUnmanagedServersOnly"] = o.ForUnmanagedServersOnly
	}
	if !IsNil(o.ForGenericEndpointsOnly) {
		toSerialize["forGenericEndpointsOnly"] = o.ForGenericEndpointsOnly
	}
	if !IsNil(o.SupportsOobProvisioning) {
		toSerialize["supportsOobProvisioning"] = o.SupportsOobProvisioning
	}
	toSerialize["serverClass"] = o.ServerClass
	if !IsNil(o.BootType) {
		toSerialize["bootType"] = o.BootType
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.GpuCount) {
		toSerialize["gpuCount"] = o.GpuCount
	}
	if !IsNil(o.GpuInfo) {
		toSerialize["gpuInfo"] = o.GpuInfo
	}
	if !IsNil(o.DiskGroups) {
		toSerialize["diskGroups"] = o.DiskGroups
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"ramGbytes",
		"processorCount",
		"processorCoreMhz",
		"processorCoreCount",
		"name",
		"networkTotalCapacityMbps",
		"networkInterfaceCount",
		"networkInterfaceSpeeds",
		"processorNames",
		"diskCount",
		"serverClass",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerType := _ServerType{}

	err = json.Unmarshal(data, &varServerType)

	if err != nil {
		return err
	}

	*o = ServerType(varServerType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "ramGbytes")
		delete(additionalProperties, "processorCount")
		delete(additionalProperties, "processorCoreMhz")
		delete(additionalProperties, "processorCoreCount")
		delete(additionalProperties, "name")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "label")
		delete(additionalProperties, "networkTotalCapacityMbps")
		delete(additionalProperties, "networkInterfaceCount")
		delete(additionalProperties, "networkInterfaceSpeeds")
		delete(additionalProperties, "processorNames")
		delete(additionalProperties, "allowedVendorSkuIds")
		delete(additionalProperties, "diskCount")
		delete(additionalProperties, "isExperimental")
		delete(additionalProperties, "forUnmanagedServersOnly")
		delete(additionalProperties, "forGenericEndpointsOnly")
		delete(additionalProperties, "supportsOobProvisioning")
		delete(additionalProperties, "serverClass")
		delete(additionalProperties, "bootType")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "gpuCount")
		delete(additionalProperties, "gpuInfo")
		delete(additionalProperties, "diskGroups")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerType struct {
	value *ServerType
	isSet bool
}

func (v NullableServerType) Get() *ServerType {
	return v.value
}

func (v *NullableServerType) Set(val *ServerType) {
	v.value = val
	v.isSet = true
}

func (v NullableServerType) IsSet() bool {
	return v.isSet
}

func (v *NullableServerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerType(val *ServerType) *NullableServerType {
	return &NullableServerType{value: val, isSet: true}
}

func (v NullableServerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


