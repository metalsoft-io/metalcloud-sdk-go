/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SiteConfigUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteConfigUpdate{}

// SiteConfigUpdate struct for SiteConfigUpdate
type SiteConfigUpdate struct {
	// Location details
	Location *PartialTypeClass `json:"location,omitempty"`
	// Repository details
	Repo *Repo `json:"repo,omitempty"`
	// List of DNS Servers
	DNSServers []string `json:"DNSServers,omitempty"`
	// List of NTP Servers
	NTPServers []string `json:"NTPServers,omitempty"`
	// Network device policies
	NetworkDevicePolicy *PartialTypeClass `json:"networkDevicePolicy,omitempty"`
	// Server policies
	ServerPolicy *ServerPolicyUpdateDto `json:"serverPolicy,omitempty"`
	// Controller policies
	ControllerPolicy *ControllerPolicy `json:"controllerPolicy,omitempty"`
	// Infrastructure policies
	InfrastructurePolicy *InfrastructurePolicy `json:"infrastructurePolicy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteConfigUpdate SiteConfigUpdate

// NewSiteConfigUpdate instantiates a new SiteConfigUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteConfigUpdate() *SiteConfigUpdate {
	this := SiteConfigUpdate{}
	return &this
}

// NewSiteConfigUpdateWithDefaults instantiates a new SiteConfigUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteConfigUpdateWithDefaults() *SiteConfigUpdate {
	this := SiteConfigUpdate{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SiteConfigUpdate) GetLocation() PartialTypeClass {
	if o == nil || IsNil(o.Location) {
		var ret PartialTypeClass
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteConfigUpdate) GetLocationOk() (*PartialTypeClass, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SiteConfigUpdate) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given PartialTypeClass and assigns it to the Location field.
func (o *SiteConfigUpdate) SetLocation(v PartialTypeClass) {
	o.Location = &v
}

// GetRepo returns the Repo field value if set, zero value otherwise.
func (o *SiteConfigUpdate) GetRepo() Repo {
	if o == nil || IsNil(o.Repo) {
		var ret Repo
		return ret
	}
	return *o.Repo
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteConfigUpdate) GetRepoOk() (*Repo, bool) {
	if o == nil || IsNil(o.Repo) {
		return nil, false
	}
	return o.Repo, true
}

// HasRepo returns a boolean if a field has been set.
func (o *SiteConfigUpdate) HasRepo() bool {
	if o != nil && !IsNil(o.Repo) {
		return true
	}

	return false
}

// SetRepo gets a reference to the given Repo and assigns it to the Repo field.
func (o *SiteConfigUpdate) SetRepo(v Repo) {
	o.Repo = &v
}

// GetDNSServers returns the DNSServers field value if set, zero value otherwise.
func (o *SiteConfigUpdate) GetDNSServers() []string {
	if o == nil || IsNil(o.DNSServers) {
		var ret []string
		return ret
	}
	return o.DNSServers
}

// GetDNSServersOk returns a tuple with the DNSServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteConfigUpdate) GetDNSServersOk() ([]string, bool) {
	if o == nil || IsNil(o.DNSServers) {
		return nil, false
	}
	return o.DNSServers, true
}

// HasDNSServers returns a boolean if a field has been set.
func (o *SiteConfigUpdate) HasDNSServers() bool {
	if o != nil && !IsNil(o.DNSServers) {
		return true
	}

	return false
}

// SetDNSServers gets a reference to the given []string and assigns it to the DNSServers field.
func (o *SiteConfigUpdate) SetDNSServers(v []string) {
	o.DNSServers = v
}

// GetNTPServers returns the NTPServers field value if set, zero value otherwise.
func (o *SiteConfigUpdate) GetNTPServers() []string {
	if o == nil || IsNil(o.NTPServers) {
		var ret []string
		return ret
	}
	return o.NTPServers
}

// GetNTPServersOk returns a tuple with the NTPServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteConfigUpdate) GetNTPServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NTPServers) {
		return nil, false
	}
	return o.NTPServers, true
}

// HasNTPServers returns a boolean if a field has been set.
func (o *SiteConfigUpdate) HasNTPServers() bool {
	if o != nil && !IsNil(o.NTPServers) {
		return true
	}

	return false
}

// SetNTPServers gets a reference to the given []string and assigns it to the NTPServers field.
func (o *SiteConfigUpdate) SetNTPServers(v []string) {
	o.NTPServers = v
}

// GetNetworkDevicePolicy returns the NetworkDevicePolicy field value if set, zero value otherwise.
func (o *SiteConfigUpdate) GetNetworkDevicePolicy() PartialTypeClass {
	if o == nil || IsNil(o.NetworkDevicePolicy) {
		var ret PartialTypeClass
		return ret
	}
	return *o.NetworkDevicePolicy
}

// GetNetworkDevicePolicyOk returns a tuple with the NetworkDevicePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteConfigUpdate) GetNetworkDevicePolicyOk() (*PartialTypeClass, bool) {
	if o == nil || IsNil(o.NetworkDevicePolicy) {
		return nil, false
	}
	return o.NetworkDevicePolicy, true
}

// HasNetworkDevicePolicy returns a boolean if a field has been set.
func (o *SiteConfigUpdate) HasNetworkDevicePolicy() bool {
	if o != nil && !IsNil(o.NetworkDevicePolicy) {
		return true
	}

	return false
}

// SetNetworkDevicePolicy gets a reference to the given PartialTypeClass and assigns it to the NetworkDevicePolicy field.
func (o *SiteConfigUpdate) SetNetworkDevicePolicy(v PartialTypeClass) {
	o.NetworkDevicePolicy = &v
}

// GetServerPolicy returns the ServerPolicy field value if set, zero value otherwise.
func (o *SiteConfigUpdate) GetServerPolicy() ServerPolicyUpdateDto {
	if o == nil || IsNil(o.ServerPolicy) {
		var ret ServerPolicyUpdateDto
		return ret
	}
	return *o.ServerPolicy
}

// GetServerPolicyOk returns a tuple with the ServerPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteConfigUpdate) GetServerPolicyOk() (*ServerPolicyUpdateDto, bool) {
	if o == nil || IsNil(o.ServerPolicy) {
		return nil, false
	}
	return o.ServerPolicy, true
}

// HasServerPolicy returns a boolean if a field has been set.
func (o *SiteConfigUpdate) HasServerPolicy() bool {
	if o != nil && !IsNil(o.ServerPolicy) {
		return true
	}

	return false
}

// SetServerPolicy gets a reference to the given ServerPolicyUpdateDto and assigns it to the ServerPolicy field.
func (o *SiteConfigUpdate) SetServerPolicy(v ServerPolicyUpdateDto) {
	o.ServerPolicy = &v
}

// GetControllerPolicy returns the ControllerPolicy field value if set, zero value otherwise.
func (o *SiteConfigUpdate) GetControllerPolicy() ControllerPolicy {
	if o == nil || IsNil(o.ControllerPolicy) {
		var ret ControllerPolicy
		return ret
	}
	return *o.ControllerPolicy
}

// GetControllerPolicyOk returns a tuple with the ControllerPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteConfigUpdate) GetControllerPolicyOk() (*ControllerPolicy, bool) {
	if o == nil || IsNil(o.ControllerPolicy) {
		return nil, false
	}
	return o.ControllerPolicy, true
}

// HasControllerPolicy returns a boolean if a field has been set.
func (o *SiteConfigUpdate) HasControllerPolicy() bool {
	if o != nil && !IsNil(o.ControllerPolicy) {
		return true
	}

	return false
}

// SetControllerPolicy gets a reference to the given ControllerPolicy and assigns it to the ControllerPolicy field.
func (o *SiteConfigUpdate) SetControllerPolicy(v ControllerPolicy) {
	o.ControllerPolicy = &v
}

// GetInfrastructurePolicy returns the InfrastructurePolicy field value if set, zero value otherwise.
func (o *SiteConfigUpdate) GetInfrastructurePolicy() InfrastructurePolicy {
	if o == nil || IsNil(o.InfrastructurePolicy) {
		var ret InfrastructurePolicy
		return ret
	}
	return *o.InfrastructurePolicy
}

// GetInfrastructurePolicyOk returns a tuple with the InfrastructurePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteConfigUpdate) GetInfrastructurePolicyOk() (*InfrastructurePolicy, bool) {
	if o == nil || IsNil(o.InfrastructurePolicy) {
		return nil, false
	}
	return o.InfrastructurePolicy, true
}

// HasInfrastructurePolicy returns a boolean if a field has been set.
func (o *SiteConfigUpdate) HasInfrastructurePolicy() bool {
	if o != nil && !IsNil(o.InfrastructurePolicy) {
		return true
	}

	return false
}

// SetInfrastructurePolicy gets a reference to the given InfrastructurePolicy and assigns it to the InfrastructurePolicy field.
func (o *SiteConfigUpdate) SetInfrastructurePolicy(v InfrastructurePolicy) {
	o.InfrastructurePolicy = &v
}

func (o SiteConfigUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteConfigUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Repo) {
		toSerialize["repo"] = o.Repo
	}
	if !IsNil(o.DNSServers) {
		toSerialize["DNSServers"] = o.DNSServers
	}
	if !IsNil(o.NTPServers) {
		toSerialize["NTPServers"] = o.NTPServers
	}
	if !IsNil(o.NetworkDevicePolicy) {
		toSerialize["networkDevicePolicy"] = o.NetworkDevicePolicy
	}
	if !IsNil(o.ServerPolicy) {
		toSerialize["serverPolicy"] = o.ServerPolicy
	}
	if !IsNil(o.ControllerPolicy) {
		toSerialize["controllerPolicy"] = o.ControllerPolicy
	}
	if !IsNil(o.InfrastructurePolicy) {
		toSerialize["infrastructurePolicy"] = o.InfrastructurePolicy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteConfigUpdate) UnmarshalJSON(data []byte) (err error) {
	varSiteConfigUpdate := _SiteConfigUpdate{}

	err = json.Unmarshal(data, &varSiteConfigUpdate)

	if err != nil {
		return err
	}

	*o = SiteConfigUpdate(varSiteConfigUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "location")
		delete(additionalProperties, "repo")
		delete(additionalProperties, "DNSServers")
		delete(additionalProperties, "NTPServers")
		delete(additionalProperties, "networkDevicePolicy")
		delete(additionalProperties, "serverPolicy")
		delete(additionalProperties, "controllerPolicy")
		delete(additionalProperties, "infrastructurePolicy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteConfigUpdate struct {
	value *SiteConfigUpdate
	isSet bool
}

func (v NullableSiteConfigUpdate) Get() *SiteConfigUpdate {
	return v.value
}

func (v *NullableSiteConfigUpdate) Set(val *SiteConfigUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteConfigUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteConfigUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteConfigUpdate(val *SiteConfigUpdate) *NullableSiteConfigUpdate {
	return &NullableSiteConfigUpdate{value: val, isSet: true}
}

func (v NullableSiteConfigUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteConfigUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


