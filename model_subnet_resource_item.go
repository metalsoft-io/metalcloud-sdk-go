/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SubnetResourceItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubnetResourceItem{}

// SubnetResourceItem struct for SubnetResourceItem
type SubnetResourceItem struct {
	Id float32 `json:"id"`
	Label string `json:"label"`
	StartTimestamp string `json:"startTimestamp"`
	EndTimestamp string `json:"endTimestamp"`
	MeasurementPeriod float32 `json:"measurementPeriod"`
	MeasurementUnit string `json:"measurementUnit"`
	Quantity float32 `json:"quantity"`
	SubnetIpCount string `json:"subnetIpCount"`
	SubnetPrefixSize float32 `json:"subnetPrefixSize"`
	SubnetType string `json:"subnetType"`
	AdditionalProperties map[string]interface{}
}

type _SubnetResourceItem SubnetResourceItem

// NewSubnetResourceItem instantiates a new SubnetResourceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnetResourceItem(id float32, label string, startTimestamp string, endTimestamp string, measurementPeriod float32, measurementUnit string, quantity float32, subnetIpCount string, subnetPrefixSize float32, subnetType string) *SubnetResourceItem {
	this := SubnetResourceItem{}
	this.Id = id
	this.Label = label
	this.StartTimestamp = startTimestamp
	this.EndTimestamp = endTimestamp
	this.MeasurementPeriod = measurementPeriod
	this.MeasurementUnit = measurementUnit
	this.Quantity = quantity
	this.SubnetIpCount = subnetIpCount
	this.SubnetPrefixSize = subnetPrefixSize
	this.SubnetType = subnetType
	return &this
}

// NewSubnetResourceItemWithDefaults instantiates a new SubnetResourceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetResourceItemWithDefaults() *SubnetResourceItem {
	this := SubnetResourceItem{}
	return &this
}

// GetId returns the Id field value
func (o *SubnetResourceItem) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SubnetResourceItem) SetId(v float32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *SubnetResourceItem) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *SubnetResourceItem) SetLabel(v string) {
	o.Label = v
}

// GetStartTimestamp returns the StartTimestamp field value
func (o *SubnetResourceItem) GetStartTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetStartTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTimestamp, true
}

// SetStartTimestamp sets field value
func (o *SubnetResourceItem) SetStartTimestamp(v string) {
	o.StartTimestamp = v
}

// GetEndTimestamp returns the EndTimestamp field value
func (o *SubnetResourceItem) GetEndTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetEndTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTimestamp, true
}

// SetEndTimestamp sets field value
func (o *SubnetResourceItem) SetEndTimestamp(v string) {
	o.EndTimestamp = v
}

// GetMeasurementPeriod returns the MeasurementPeriod field value
func (o *SubnetResourceItem) GetMeasurementPeriod() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MeasurementPeriod
}

// GetMeasurementPeriodOk returns a tuple with the MeasurementPeriod field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetMeasurementPeriodOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementPeriod, true
}

// SetMeasurementPeriod sets field value
func (o *SubnetResourceItem) SetMeasurementPeriod(v float32) {
	o.MeasurementPeriod = v
}

// GetMeasurementUnit returns the MeasurementUnit field value
func (o *SubnetResourceItem) GetMeasurementUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeasurementUnit
}

// GetMeasurementUnitOk returns a tuple with the MeasurementUnit field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetMeasurementUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementUnit, true
}

// SetMeasurementUnit sets field value
func (o *SubnetResourceItem) SetMeasurementUnit(v string) {
	o.MeasurementUnit = v
}

// GetQuantity returns the Quantity field value
func (o *SubnetResourceItem) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *SubnetResourceItem) SetQuantity(v float32) {
	o.Quantity = v
}

// GetSubnetIpCount returns the SubnetIpCount field value
func (o *SubnetResourceItem) GetSubnetIpCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetIpCount
}

// GetSubnetIpCountOk returns a tuple with the SubnetIpCount field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetSubnetIpCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetIpCount, true
}

// SetSubnetIpCount sets field value
func (o *SubnetResourceItem) SetSubnetIpCount(v string) {
	o.SubnetIpCount = v
}

// GetSubnetPrefixSize returns the SubnetPrefixSize field value
func (o *SubnetResourceItem) GetSubnetPrefixSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SubnetPrefixSize
}

// GetSubnetPrefixSizeOk returns a tuple with the SubnetPrefixSize field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetSubnetPrefixSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetPrefixSize, true
}

// SetSubnetPrefixSize sets field value
func (o *SubnetResourceItem) SetSubnetPrefixSize(v float32) {
	o.SubnetPrefixSize = v
}

// GetSubnetType returns the SubnetType field value
func (o *SubnetResourceItem) GetSubnetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetType
}

// GetSubnetTypeOk returns a tuple with the SubnetType field value
// and a boolean to check if the value has been set.
func (o *SubnetResourceItem) GetSubnetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetType, true
}

// SetSubnetType sets field value
func (o *SubnetResourceItem) SetSubnetType(v string) {
	o.SubnetType = v
}

func (o SubnetResourceItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubnetResourceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["startTimestamp"] = o.StartTimestamp
	toSerialize["endTimestamp"] = o.EndTimestamp
	toSerialize["measurementPeriod"] = o.MeasurementPeriod
	toSerialize["measurementUnit"] = o.MeasurementUnit
	toSerialize["quantity"] = o.Quantity
	toSerialize["subnetIpCount"] = o.SubnetIpCount
	toSerialize["subnetPrefixSize"] = o.SubnetPrefixSize
	toSerialize["subnetType"] = o.SubnetType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubnetResourceItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"startTimestamp",
		"endTimestamp",
		"measurementPeriod",
		"measurementUnit",
		"quantity",
		"subnetIpCount",
		"subnetPrefixSize",
		"subnetType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubnetResourceItem := _SubnetResourceItem{}

	err = json.Unmarshal(data, &varSubnetResourceItem)

	if err != nil {
		return err
	}

	*o = SubnetResourceItem(varSubnetResourceItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "startTimestamp")
		delete(additionalProperties, "endTimestamp")
		delete(additionalProperties, "measurementPeriod")
		delete(additionalProperties, "measurementUnit")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "subnetIpCount")
		delete(additionalProperties, "subnetPrefixSize")
		delete(additionalProperties, "subnetType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubnetResourceItem struct {
	value *SubnetResourceItem
	isSet bool
}

func (v NullableSubnetResourceItem) Get() *SubnetResourceItem {
	return v.value
}

func (v *NullableSubnetResourceItem) Set(val *SubnetResourceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetResourceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetResourceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetResourceItem(val *SubnetResourceItem) *NullableSubnetResourceItem {
	return &NullableSubnetResourceItem{value: val, isSet: true}
}

func (v NullableSubnetResourceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetResourceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


