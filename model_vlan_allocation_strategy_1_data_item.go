/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// VlanAllocationStrategy1DataItem - struct for VlanAllocationStrategy1DataItem
type VlanAllocationStrategy1DataItem struct {
	AutoVlanAllocationStrategy *AutoVlanAllocationStrategy
	ManualVlanAllocationStrategy *ManualVlanAllocationStrategy
}

// AutoVlanAllocationStrategyAsVlanAllocationStrategy1DataItem is a convenience function that returns AutoVlanAllocationStrategy wrapped in VlanAllocationStrategy1DataItem
func AutoVlanAllocationStrategyAsVlanAllocationStrategy1DataItem(v *AutoVlanAllocationStrategy) VlanAllocationStrategy1DataItem {
	return VlanAllocationStrategy1DataItem{
		AutoVlanAllocationStrategy: v,
	}
}

// ManualVlanAllocationStrategyAsVlanAllocationStrategy1DataItem is a convenience function that returns ManualVlanAllocationStrategy wrapped in VlanAllocationStrategy1DataItem
func ManualVlanAllocationStrategyAsVlanAllocationStrategy1DataItem(v *ManualVlanAllocationStrategy) VlanAllocationStrategy1DataItem {
	return VlanAllocationStrategy1DataItem{
		ManualVlanAllocationStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *VlanAllocationStrategy1DataItem) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'auto'
	if jsonDict["kind"] == "auto" {
		// try to unmarshal JSON data into AutoVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.AutoVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.AutoVlanAllocationStrategy, return on the first match
		} else {
			dst.AutoVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal VlanAllocationStrategy1DataItem as AutoVlanAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'manual'
	if jsonDict["kind"] == "manual" {
		// try to unmarshal JSON data into ManualVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.ManualVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.ManualVlanAllocationStrategy, return on the first match
		} else {
			dst.ManualVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal VlanAllocationStrategy1DataItem as ManualVlanAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AutoVlanAllocationStrategy'
	if jsonDict["kind"] == "AutoVlanAllocationStrategy" {
		// try to unmarshal JSON data into AutoVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.AutoVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.AutoVlanAllocationStrategy, return on the first match
		} else {
			dst.AutoVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal VlanAllocationStrategy1DataItem as AutoVlanAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ManualVlanAllocationStrategy'
	if jsonDict["kind"] == "ManualVlanAllocationStrategy" {
		// try to unmarshal JSON data into ManualVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.ManualVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.ManualVlanAllocationStrategy, return on the first match
		} else {
			dst.ManualVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal VlanAllocationStrategy1DataItem as ManualVlanAllocationStrategy: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VlanAllocationStrategy1DataItem) MarshalJSON() ([]byte, error) {
	if src.AutoVlanAllocationStrategy != nil {
		return json.Marshal(&src.AutoVlanAllocationStrategy)
	}

	if src.ManualVlanAllocationStrategy != nil {
		return json.Marshal(&src.ManualVlanAllocationStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VlanAllocationStrategy1DataItem) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AutoVlanAllocationStrategy != nil {
		return obj.AutoVlanAllocationStrategy
	}

	if obj.ManualVlanAllocationStrategy != nil {
		return obj.ManualVlanAllocationStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj VlanAllocationStrategy1DataItem) GetActualInstanceValue() (interface{}) {
	if obj.AutoVlanAllocationStrategy != nil {
		return *obj.AutoVlanAllocationStrategy
	}

	if obj.ManualVlanAllocationStrategy != nil {
		return *obj.ManualVlanAllocationStrategy
	}

	// all schemas are nil
	return nil
}

type NullableVlanAllocationStrategy1DataItem struct {
	value *VlanAllocationStrategy1DataItem
	isSet bool
}

func (v NullableVlanAllocationStrategy1DataItem) Get() *VlanAllocationStrategy1DataItem {
	return v.value
}

func (v *NullableVlanAllocationStrategy1DataItem) Set(val *VlanAllocationStrategy1DataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableVlanAllocationStrategy1DataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableVlanAllocationStrategy1DataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVlanAllocationStrategy1DataItem(val *VlanAllocationStrategy1DataItem) *NullableVlanAllocationStrategy1DataItem {
	return &NullableVlanAllocationStrategy1DataItem{value: val, isSet: true}
}

func (v NullableVlanAllocationStrategy1DataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVlanAllocationStrategy1DataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


