/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the BaselineFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaselineFilter{}

// BaselineFilter struct for BaselineFilter
type BaselineFilter struct {
	Datacenter []string `json:"datacenter,omitempty"`
	ServerType []string `json:"serverType,omitempty"`
	OsTemplate []string `json:"osTemplate,omitempty"`
	BaselineId []string `json:"baselineId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BaselineFilter BaselineFilter

// NewBaselineFilter instantiates a new BaselineFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaselineFilter() *BaselineFilter {
	this := BaselineFilter{}
	return &this
}

// NewBaselineFilterWithDefaults instantiates a new BaselineFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaselineFilterWithDefaults() *BaselineFilter {
	this := BaselineFilter{}
	return &this
}

// GetDatacenter returns the Datacenter field value if set, zero value otherwise.
func (o *BaselineFilter) GetDatacenter() []string {
	if o == nil || IsNil(o.Datacenter) {
		var ret []string
		return ret
	}
	return o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaselineFilter) GetDatacenterOk() ([]string, bool) {
	if o == nil || IsNil(o.Datacenter) {
		return nil, false
	}
	return o.Datacenter, true
}

// HasDatacenter returns a boolean if a field has been set.
func (o *BaselineFilter) HasDatacenter() bool {
	if o != nil && !IsNil(o.Datacenter) {
		return true
	}

	return false
}

// SetDatacenter gets a reference to the given []string and assigns it to the Datacenter field.
func (o *BaselineFilter) SetDatacenter(v []string) {
	o.Datacenter = v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *BaselineFilter) GetServerType() []string {
	if o == nil || IsNil(o.ServerType) {
		var ret []string
		return ret
	}
	return o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaselineFilter) GetServerTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *BaselineFilter) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given []string and assigns it to the ServerType field.
func (o *BaselineFilter) SetServerType(v []string) {
	o.ServerType = v
}

// GetOsTemplate returns the OsTemplate field value if set, zero value otherwise.
func (o *BaselineFilter) GetOsTemplate() []string {
	if o == nil || IsNil(o.OsTemplate) {
		var ret []string
		return ret
	}
	return o.OsTemplate
}

// GetOsTemplateOk returns a tuple with the OsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaselineFilter) GetOsTemplateOk() ([]string, bool) {
	if o == nil || IsNil(o.OsTemplate) {
		return nil, false
	}
	return o.OsTemplate, true
}

// HasOsTemplate returns a boolean if a field has been set.
func (o *BaselineFilter) HasOsTemplate() bool {
	if o != nil && !IsNil(o.OsTemplate) {
		return true
	}

	return false
}

// SetOsTemplate gets a reference to the given []string and assigns it to the OsTemplate field.
func (o *BaselineFilter) SetOsTemplate(v []string) {
	o.OsTemplate = v
}

// GetBaselineId returns the BaselineId field value if set, zero value otherwise.
func (o *BaselineFilter) GetBaselineId() []string {
	if o == nil || IsNil(o.BaselineId) {
		var ret []string
		return ret
	}
	return o.BaselineId
}

// GetBaselineIdOk returns a tuple with the BaselineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaselineFilter) GetBaselineIdOk() ([]string, bool) {
	if o == nil || IsNil(o.BaselineId) {
		return nil, false
	}
	return o.BaselineId, true
}

// HasBaselineId returns a boolean if a field has been set.
func (o *BaselineFilter) HasBaselineId() bool {
	if o != nil && !IsNil(o.BaselineId) {
		return true
	}

	return false
}

// SetBaselineId gets a reference to the given []string and assigns it to the BaselineId field.
func (o *BaselineFilter) SetBaselineId(v []string) {
	o.BaselineId = v
}

func (o BaselineFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaselineFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datacenter) {
		toSerialize["datacenter"] = o.Datacenter
	}
	if !IsNil(o.ServerType) {
		toSerialize["serverType"] = o.ServerType
	}
	if !IsNil(o.OsTemplate) {
		toSerialize["osTemplate"] = o.OsTemplate
	}
	if !IsNil(o.BaselineId) {
		toSerialize["baselineId"] = o.BaselineId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BaselineFilter) UnmarshalJSON(data []byte) (err error) {
	varBaselineFilter := _BaselineFilter{}

	err = json.Unmarshal(data, &varBaselineFilter)

	if err != nil {
		return err
	}

	*o = BaselineFilter(varBaselineFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "datacenter")
		delete(additionalProperties, "serverType")
		delete(additionalProperties, "osTemplate")
		delete(additionalProperties, "baselineId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaselineFilter struct {
	value *BaselineFilter
	isSet bool
}

func (v NullableBaselineFilter) Get() *BaselineFilter {
	return v.value
}

func (v *NullableBaselineFilter) Set(val *BaselineFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableBaselineFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableBaselineFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaselineFilter(val *BaselineFilter) *NullableBaselineFilter {
	return &NullableBaselineFilter{value: val, isSet: true}
}

func (v NullableBaselineFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaselineFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


