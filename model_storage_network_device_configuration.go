/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the StorageNetworkDeviceConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageNetworkDeviceConfiguration{}

// StorageNetworkDeviceConfiguration struct for StorageNetworkDeviceConfiguration
type StorageNetworkDeviceConfiguration struct {
	// Id of the storage network device configuration
	Id float32 `json:"id"`
	// Id of the storage
	StorageId float32 `json:"storageId"`
	// Id of the network device
	NetworkDeviceId float32 `json:"networkDeviceId"`
	// Identifier of the storage physical interface
	StoragePhysicalInterfaceIdentifier string `json:"storagePhysicalInterfaceIdentifier"`
	// Identifier of the network device
	NetworkDeviceIdentifier string `json:"networkDeviceIdentifier"`
	// Identifier of the network device interface
	NetworkDeviceInterfaceIdentifier string `json:"networkDeviceInterfaceIdentifier"`
	// Array of VLANS for the network device interface
	NetworkDeviceInterfaceVlans []float32 `json:"networkDeviceInterfaceVlans,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageNetworkDeviceConfiguration StorageNetworkDeviceConfiguration

// NewStorageNetworkDeviceConfiguration instantiates a new StorageNetworkDeviceConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageNetworkDeviceConfiguration(id float32, storageId float32, networkDeviceId float32, storagePhysicalInterfaceIdentifier string, networkDeviceIdentifier string, networkDeviceInterfaceIdentifier string) *StorageNetworkDeviceConfiguration {
	this := StorageNetworkDeviceConfiguration{}
	this.Id = id
	this.StorageId = storageId
	this.NetworkDeviceId = networkDeviceId
	this.StoragePhysicalInterfaceIdentifier = storagePhysicalInterfaceIdentifier
	this.NetworkDeviceIdentifier = networkDeviceIdentifier
	this.NetworkDeviceInterfaceIdentifier = networkDeviceInterfaceIdentifier
	return &this
}

// NewStorageNetworkDeviceConfigurationWithDefaults instantiates a new StorageNetworkDeviceConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageNetworkDeviceConfigurationWithDefaults() *StorageNetworkDeviceConfiguration {
	this := StorageNetworkDeviceConfiguration{}
	return &this
}

// GetId returns the Id field value
func (o *StorageNetworkDeviceConfiguration) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StorageNetworkDeviceConfiguration) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StorageNetworkDeviceConfiguration) SetId(v float32) {
	o.Id = v
}

// GetStorageId returns the StorageId field value
func (o *StorageNetworkDeviceConfiguration) GetStorageId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value
// and a boolean to check if the value has been set.
func (o *StorageNetworkDeviceConfiguration) GetStorageIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageId, true
}

// SetStorageId sets field value
func (o *StorageNetworkDeviceConfiguration) SetStorageId(v float32) {
	o.StorageId = v
}

// GetNetworkDeviceId returns the NetworkDeviceId field value
func (o *StorageNetworkDeviceConfiguration) GetNetworkDeviceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NetworkDeviceId
}

// GetNetworkDeviceIdOk returns a tuple with the NetworkDeviceId field value
// and a boolean to check if the value has been set.
func (o *StorageNetworkDeviceConfiguration) GetNetworkDeviceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDeviceId, true
}

// SetNetworkDeviceId sets field value
func (o *StorageNetworkDeviceConfiguration) SetNetworkDeviceId(v float32) {
	o.NetworkDeviceId = v
}

// GetStoragePhysicalInterfaceIdentifier returns the StoragePhysicalInterfaceIdentifier field value
func (o *StorageNetworkDeviceConfiguration) GetStoragePhysicalInterfaceIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoragePhysicalInterfaceIdentifier
}

// GetStoragePhysicalInterfaceIdentifierOk returns a tuple with the StoragePhysicalInterfaceIdentifier field value
// and a boolean to check if the value has been set.
func (o *StorageNetworkDeviceConfiguration) GetStoragePhysicalInterfaceIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoragePhysicalInterfaceIdentifier, true
}

// SetStoragePhysicalInterfaceIdentifier sets field value
func (o *StorageNetworkDeviceConfiguration) SetStoragePhysicalInterfaceIdentifier(v string) {
	o.StoragePhysicalInterfaceIdentifier = v
}

// GetNetworkDeviceIdentifier returns the NetworkDeviceIdentifier field value
func (o *StorageNetworkDeviceConfiguration) GetNetworkDeviceIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDeviceIdentifier
}

// GetNetworkDeviceIdentifierOk returns a tuple with the NetworkDeviceIdentifier field value
// and a boolean to check if the value has been set.
func (o *StorageNetworkDeviceConfiguration) GetNetworkDeviceIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDeviceIdentifier, true
}

// SetNetworkDeviceIdentifier sets field value
func (o *StorageNetworkDeviceConfiguration) SetNetworkDeviceIdentifier(v string) {
	o.NetworkDeviceIdentifier = v
}

// GetNetworkDeviceInterfaceIdentifier returns the NetworkDeviceInterfaceIdentifier field value
func (o *StorageNetworkDeviceConfiguration) GetNetworkDeviceInterfaceIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDeviceInterfaceIdentifier
}

// GetNetworkDeviceInterfaceIdentifierOk returns a tuple with the NetworkDeviceInterfaceIdentifier field value
// and a boolean to check if the value has been set.
func (o *StorageNetworkDeviceConfiguration) GetNetworkDeviceInterfaceIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDeviceInterfaceIdentifier, true
}

// SetNetworkDeviceInterfaceIdentifier sets field value
func (o *StorageNetworkDeviceConfiguration) SetNetworkDeviceInterfaceIdentifier(v string) {
	o.NetworkDeviceInterfaceIdentifier = v
}

// GetNetworkDeviceInterfaceVlans returns the NetworkDeviceInterfaceVlans field value if set, zero value otherwise.
func (o *StorageNetworkDeviceConfiguration) GetNetworkDeviceInterfaceVlans() []float32 {
	if o == nil || IsNil(o.NetworkDeviceInterfaceVlans) {
		var ret []float32
		return ret
	}
	return o.NetworkDeviceInterfaceVlans
}

// GetNetworkDeviceInterfaceVlansOk returns a tuple with the NetworkDeviceInterfaceVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageNetworkDeviceConfiguration) GetNetworkDeviceInterfaceVlansOk() ([]float32, bool) {
	if o == nil || IsNil(o.NetworkDeviceInterfaceVlans) {
		return nil, false
	}
	return o.NetworkDeviceInterfaceVlans, true
}

// HasNetworkDeviceInterfaceVlans returns a boolean if a field has been set.
func (o *StorageNetworkDeviceConfiguration) HasNetworkDeviceInterfaceVlans() bool {
	if o != nil && !IsNil(o.NetworkDeviceInterfaceVlans) {
		return true
	}

	return false
}

// SetNetworkDeviceInterfaceVlans gets a reference to the given []float32 and assigns it to the NetworkDeviceInterfaceVlans field.
func (o *StorageNetworkDeviceConfiguration) SetNetworkDeviceInterfaceVlans(v []float32) {
	o.NetworkDeviceInterfaceVlans = v
}

func (o StorageNetworkDeviceConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageNetworkDeviceConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["storageId"] = o.StorageId
	toSerialize["networkDeviceId"] = o.NetworkDeviceId
	toSerialize["storagePhysicalInterfaceIdentifier"] = o.StoragePhysicalInterfaceIdentifier
	toSerialize["networkDeviceIdentifier"] = o.NetworkDeviceIdentifier
	toSerialize["networkDeviceInterfaceIdentifier"] = o.NetworkDeviceInterfaceIdentifier
	if !IsNil(o.NetworkDeviceInterfaceVlans) {
		toSerialize["networkDeviceInterfaceVlans"] = o.NetworkDeviceInterfaceVlans
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageNetworkDeviceConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"storageId",
		"networkDeviceId",
		"storagePhysicalInterfaceIdentifier",
		"networkDeviceIdentifier",
		"networkDeviceInterfaceIdentifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageNetworkDeviceConfiguration := _StorageNetworkDeviceConfiguration{}

	err = json.Unmarshal(data, &varStorageNetworkDeviceConfiguration)

	if err != nil {
		return err
	}

	*o = StorageNetworkDeviceConfiguration(varStorageNetworkDeviceConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "storageId")
		delete(additionalProperties, "networkDeviceId")
		delete(additionalProperties, "storagePhysicalInterfaceIdentifier")
		delete(additionalProperties, "networkDeviceIdentifier")
		delete(additionalProperties, "networkDeviceInterfaceIdentifier")
		delete(additionalProperties, "networkDeviceInterfaceVlans")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageNetworkDeviceConfiguration struct {
	value *StorageNetworkDeviceConfiguration
	isSet bool
}

func (v NullableStorageNetworkDeviceConfiguration) Get() *StorageNetworkDeviceConfiguration {
	return v.value
}

func (v *NullableStorageNetworkDeviceConfiguration) Set(val *StorageNetworkDeviceConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNetworkDeviceConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNetworkDeviceConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNetworkDeviceConfiguration(val *StorageNetworkDeviceConfiguration) *NullableStorageNetworkDeviceConfiguration {
	return &NullableStorageNetworkDeviceConfiguration{value: val, isSet: true}
}

func (v NullableStorageNetworkDeviceConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNetworkDeviceConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


