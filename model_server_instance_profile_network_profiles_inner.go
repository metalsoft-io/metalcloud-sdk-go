/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ServerInstanceProfileNetworkProfilesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceProfileNetworkProfilesInner{}

// ServerInstanceProfileNetworkProfilesInner struct for ServerInstanceProfileNetworkProfilesInner
type ServerInstanceProfileNetworkProfilesInner struct {
	NetworkId *int32 `json:"networkId,omitempty"`
	NetworkProfileId *int32 `json:"networkProfileId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceProfileNetworkProfilesInner ServerInstanceProfileNetworkProfilesInner

// NewServerInstanceProfileNetworkProfilesInner instantiates a new ServerInstanceProfileNetworkProfilesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceProfileNetworkProfilesInner() *ServerInstanceProfileNetworkProfilesInner {
	this := ServerInstanceProfileNetworkProfilesInner{}
	return &this
}

// NewServerInstanceProfileNetworkProfilesInnerWithDefaults instantiates a new ServerInstanceProfileNetworkProfilesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceProfileNetworkProfilesInnerWithDefaults() *ServerInstanceProfileNetworkProfilesInner {
	this := ServerInstanceProfileNetworkProfilesInner{}
	return &this
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *ServerInstanceProfileNetworkProfilesInner) GetNetworkId() int32 {
	if o == nil || IsNil(o.NetworkId) {
		var ret int32
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceProfileNetworkProfilesInner) GetNetworkIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkId) {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *ServerInstanceProfileNetworkProfilesInner) HasNetworkId() bool {
	if o != nil && !IsNil(o.NetworkId) {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given int32 and assigns it to the NetworkId field.
func (o *ServerInstanceProfileNetworkProfilesInner) SetNetworkId(v int32) {
	o.NetworkId = &v
}

// GetNetworkProfileId returns the NetworkProfileId field value if set, zero value otherwise.
func (o *ServerInstanceProfileNetworkProfilesInner) GetNetworkProfileId() int32 {
	if o == nil || IsNil(o.NetworkProfileId) {
		var ret int32
		return ret
	}
	return *o.NetworkProfileId
}

// GetNetworkProfileIdOk returns a tuple with the NetworkProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceProfileNetworkProfilesInner) GetNetworkProfileIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkProfileId) {
		return nil, false
	}
	return o.NetworkProfileId, true
}

// HasNetworkProfileId returns a boolean if a field has been set.
func (o *ServerInstanceProfileNetworkProfilesInner) HasNetworkProfileId() bool {
	if o != nil && !IsNil(o.NetworkProfileId) {
		return true
	}

	return false
}

// SetNetworkProfileId gets a reference to the given int32 and assigns it to the NetworkProfileId field.
func (o *ServerInstanceProfileNetworkProfilesInner) SetNetworkProfileId(v int32) {
	o.NetworkProfileId = &v
}

func (o ServerInstanceProfileNetworkProfilesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceProfileNetworkProfilesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkId) {
		toSerialize["networkId"] = o.NetworkId
	}
	if !IsNil(o.NetworkProfileId) {
		toSerialize["networkProfileId"] = o.NetworkProfileId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceProfileNetworkProfilesInner) UnmarshalJSON(data []byte) (err error) {
	varServerInstanceProfileNetworkProfilesInner := _ServerInstanceProfileNetworkProfilesInner{}

	err = json.Unmarshal(data, &varServerInstanceProfileNetworkProfilesInner)

	if err != nil {
		return err
	}

	*o = ServerInstanceProfileNetworkProfilesInner(varServerInstanceProfileNetworkProfilesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "networkId")
		delete(additionalProperties, "networkProfileId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceProfileNetworkProfilesInner struct {
	value *ServerInstanceProfileNetworkProfilesInner
	isSet bool
}

func (v NullableServerInstanceProfileNetworkProfilesInner) Get() *ServerInstanceProfileNetworkProfilesInner {
	return v.value
}

func (v *NullableServerInstanceProfileNetworkProfilesInner) Set(val *ServerInstanceProfileNetworkProfilesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceProfileNetworkProfilesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceProfileNetworkProfilesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceProfileNetworkProfilesInner(val *ServerInstanceProfileNetworkProfilesInner) *NullableServerInstanceProfileNetworkProfilesInner {
	return &NullableServerInstanceProfileNetworkProfilesInner{value: val, isSet: true}
}

func (v NullableServerInstanceProfileNetworkProfilesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceProfileNetworkProfilesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


