/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ServerCleanupPolicyAPIService ServerCleanupPolicyAPI service
type ServerCleanupPolicyAPIService service

type ServerCleanupPolicyAPICreateServerCleanupPolicyRequest struct {
	ctx context.Context
	ApiService *ServerCleanupPolicyAPIService
	createServerCleanupPolicy *CreateServerCleanupPolicy
}

// The Server Cleanup Policy create object
func (r ServerCleanupPolicyAPICreateServerCleanupPolicyRequest) CreateServerCleanupPolicy(createServerCleanupPolicy CreateServerCleanupPolicy) ServerCleanupPolicyAPICreateServerCleanupPolicyRequest {
	r.createServerCleanupPolicy = &createServerCleanupPolicy
	return r
}

func (r ServerCleanupPolicyAPICreateServerCleanupPolicyRequest) Execute() (*ServerCleanupPolicy, *http.Response, error) {
	return r.ApiService.CreateServerCleanupPolicyExecute(r)
}

/*
CreateServerCleanupPolicy Creates a Server Cleanup Policy

Creates a Server Cleanup Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerCleanupPolicyAPICreateServerCleanupPolicyRequest
*/
func (a *ServerCleanupPolicyAPIService) CreateServerCleanupPolicy(ctx context.Context) ServerCleanupPolicyAPICreateServerCleanupPolicyRequest {
	return ServerCleanupPolicyAPICreateServerCleanupPolicyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerCleanupPolicy
func (a *ServerCleanupPolicyAPIService) CreateServerCleanupPolicyExecute(r ServerCleanupPolicyAPICreateServerCleanupPolicyRequest) (*ServerCleanupPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerCleanupPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerCleanupPolicyAPIService.CreateServerCleanupPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/cleanup-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createServerCleanupPolicy == nil {
		return localVarReturnValue, nil, reportError("createServerCleanupPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createServerCleanupPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerCleanupPolicyAPIDeleteServerCleanupPolicyRequest struct {
	ctx context.Context
	ApiService *ServerCleanupPolicyAPIService
	serverCleanupPolicyId float32
}

func (r ServerCleanupPolicyAPIDeleteServerCleanupPolicyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServerCleanupPolicyExecute(r)
}

/*
DeleteServerCleanupPolicy Deletes a Server Cleanup Policy

Deletes a Server Cleanup Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverCleanupPolicyId
 @return ServerCleanupPolicyAPIDeleteServerCleanupPolicyRequest
*/
func (a *ServerCleanupPolicyAPIService) DeleteServerCleanupPolicy(ctx context.Context, serverCleanupPolicyId float32) ServerCleanupPolicyAPIDeleteServerCleanupPolicyRequest {
	return ServerCleanupPolicyAPIDeleteServerCleanupPolicyRequest{
		ApiService: a,
		ctx: ctx,
		serverCleanupPolicyId: serverCleanupPolicyId,
	}
}

// Execute executes the request
func (a *ServerCleanupPolicyAPIService) DeleteServerCleanupPolicyExecute(r ServerCleanupPolicyAPIDeleteServerCleanupPolicyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerCleanupPolicyAPIService.DeleteServerCleanupPolicy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/cleanup-policies/{serverCleanupPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverCleanupPolicyId"+"}", url.PathEscape(parameterValueToString(r.serverCleanupPolicyId, "serverCleanupPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest struct {
	ctx context.Context
	ApiService *ServerCleanupPolicyAPIService
	page *float32
	limit *float32
	filterLabel *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest) Page(page float32) ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest) Limit(limit float32) ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest {
	r.limit = &limit
	return r
}

// Filter by label query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.label&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.label&#x3D;$not:$like:John Doe&amp;filter.label&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest) FilterLabel(filterLabel []string) ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest {
	r.filterLabel = &filterLabel
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;label&lt;/li&gt;&lt;/ul&gt;       
func (r ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest) SortBy(sortBy []string) ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest) Search(search string) ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; id,label           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;label&lt;/li&gt;&lt;/ul&gt;         
func (r ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest) SearchBy(searchBy []string) ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest {
	r.searchBy = &searchBy
	return r
}

func (r ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest) Execute() (*ServerCleanupPolicyPaginatedList, *http.Response, error) {
	return r.ApiService.GetServerCleanupPoliciesExecute(r)
}

/*
GetServerCleanupPolicies Get a list of Server Cleanup Policies

Returns a list of Server Cleanup Policies

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest
*/
func (a *ServerCleanupPolicyAPIService) GetServerCleanupPolicies(ctx context.Context) ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest {
	return ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerCleanupPolicyPaginatedList
func (a *ServerCleanupPolicyAPIService) GetServerCleanupPoliciesExecute(r ServerCleanupPolicyAPIGetServerCleanupPoliciesRequest) (*ServerCleanupPolicyPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerCleanupPolicyPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerCleanupPolicyAPIService.GetServerCleanupPolicies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/cleanup-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterLabel != nil {
		t := *r.filterLabel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerCleanupPolicyAPIGetServerCleanupPolicyInfoRequest struct {
	ctx context.Context
	ApiService *ServerCleanupPolicyAPIService
	serverCleanupPolicyId float32
}

func (r ServerCleanupPolicyAPIGetServerCleanupPolicyInfoRequest) Execute() (*ServerCleanupPolicy, *http.Response, error) {
	return r.ApiService.GetServerCleanupPolicyInfoExecute(r)
}

/*
GetServerCleanupPolicyInfo Get Server Cleanup Policy information

Returns Server Cleanup Policy information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverCleanupPolicyId
 @return ServerCleanupPolicyAPIGetServerCleanupPolicyInfoRequest
*/
func (a *ServerCleanupPolicyAPIService) GetServerCleanupPolicyInfo(ctx context.Context, serverCleanupPolicyId float32) ServerCleanupPolicyAPIGetServerCleanupPolicyInfoRequest {
	return ServerCleanupPolicyAPIGetServerCleanupPolicyInfoRequest{
		ApiService: a,
		ctx: ctx,
		serverCleanupPolicyId: serverCleanupPolicyId,
	}
}

// Execute executes the request
//  @return ServerCleanupPolicy
func (a *ServerCleanupPolicyAPIService) GetServerCleanupPolicyInfoExecute(r ServerCleanupPolicyAPIGetServerCleanupPolicyInfoRequest) (*ServerCleanupPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerCleanupPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerCleanupPolicyAPIService.GetServerCleanupPolicyInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/cleanup-policies/{serverCleanupPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverCleanupPolicyId"+"}", url.PathEscape(parameterValueToString(r.serverCleanupPolicyId, "serverCleanupPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerCleanupPolicyAPIUpdateServerCleanupPolicyRequest struct {
	ctx context.Context
	ApiService *ServerCleanupPolicyAPIService
	serverCleanupPolicyId float32
	updateServerCleanupPolicy *UpdateServerCleanupPolicy
}

// The Server Cleanup Policy update object
func (r ServerCleanupPolicyAPIUpdateServerCleanupPolicyRequest) UpdateServerCleanupPolicy(updateServerCleanupPolicy UpdateServerCleanupPolicy) ServerCleanupPolicyAPIUpdateServerCleanupPolicyRequest {
	r.updateServerCleanupPolicy = &updateServerCleanupPolicy
	return r
}

func (r ServerCleanupPolicyAPIUpdateServerCleanupPolicyRequest) Execute() (*ServerCleanupPolicy, *http.Response, error) {
	return r.ApiService.UpdateServerCleanupPolicyExecute(r)
}

/*
UpdateServerCleanupPolicy Updates a Server Cleanup Policy

Updates a Server Cleanup Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverCleanupPolicyId
 @return ServerCleanupPolicyAPIUpdateServerCleanupPolicyRequest
*/
func (a *ServerCleanupPolicyAPIService) UpdateServerCleanupPolicy(ctx context.Context, serverCleanupPolicyId float32) ServerCleanupPolicyAPIUpdateServerCleanupPolicyRequest {
	return ServerCleanupPolicyAPIUpdateServerCleanupPolicyRequest{
		ApiService: a,
		ctx: ctx,
		serverCleanupPolicyId: serverCleanupPolicyId,
	}
}

// Execute executes the request
//  @return ServerCleanupPolicy
func (a *ServerCleanupPolicyAPIService) UpdateServerCleanupPolicyExecute(r ServerCleanupPolicyAPIUpdateServerCleanupPolicyRequest) (*ServerCleanupPolicy, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerCleanupPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerCleanupPolicyAPIService.UpdateServerCleanupPolicy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/servers/cleanup-policies/{serverCleanupPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverCleanupPolicyId"+"}", url.PathEscape(parameterValueToString(r.serverCleanupPolicyId, "serverCleanupPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateServerCleanupPolicy == nil {
		return localVarReturnValue, nil, reportError("updateServerCleanupPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateServerCleanupPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
