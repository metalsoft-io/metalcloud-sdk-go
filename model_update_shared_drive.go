/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateSharedDrive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSharedDrive{}

// UpdateSharedDrive struct for UpdateSharedDrive
type UpdateSharedDrive struct {
	// Label of the Drive.
	Label *string `json:"label,omitempty"`
	// Disk size in MB for Drive
	SizeMb *float32 `json:"sizeMb,omitempty"`
	// The IO limit policy of the Drive.
	IoLimitPolicy *string `json:"ioLimitPolicy,omitempty"`
	// Id of the Logical Network for the Drive.
	LogicalNetworkId *float32 `json:"logicalNetworkId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateSharedDrive UpdateSharedDrive

// NewUpdateSharedDrive instantiates a new UpdateSharedDrive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSharedDrive() *UpdateSharedDrive {
	this := UpdateSharedDrive{}
	return &this
}

// NewUpdateSharedDriveWithDefaults instantiates a new UpdateSharedDrive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSharedDriveWithDefaults() *UpdateSharedDrive {
	this := UpdateSharedDrive{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateSharedDrive) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSharedDrive) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateSharedDrive) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateSharedDrive) SetLabel(v string) {
	o.Label = &v
}

// GetSizeMb returns the SizeMb field value if set, zero value otherwise.
func (o *UpdateSharedDrive) GetSizeMb() float32 {
	if o == nil || IsNil(o.SizeMb) {
		var ret float32
		return ret
	}
	return *o.SizeMb
}

// GetSizeMbOk returns a tuple with the SizeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSharedDrive) GetSizeMbOk() (*float32, bool) {
	if o == nil || IsNil(o.SizeMb) {
		return nil, false
	}
	return o.SizeMb, true
}

// HasSizeMb returns a boolean if a field has been set.
func (o *UpdateSharedDrive) HasSizeMb() bool {
	if o != nil && !IsNil(o.SizeMb) {
		return true
	}

	return false
}

// SetSizeMb gets a reference to the given float32 and assigns it to the SizeMb field.
func (o *UpdateSharedDrive) SetSizeMb(v float32) {
	o.SizeMb = &v
}

// GetIoLimitPolicy returns the IoLimitPolicy field value if set, zero value otherwise.
func (o *UpdateSharedDrive) GetIoLimitPolicy() string {
	if o == nil || IsNil(o.IoLimitPolicy) {
		var ret string
		return ret
	}
	return *o.IoLimitPolicy
}

// GetIoLimitPolicyOk returns a tuple with the IoLimitPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSharedDrive) GetIoLimitPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.IoLimitPolicy) {
		return nil, false
	}
	return o.IoLimitPolicy, true
}

// HasIoLimitPolicy returns a boolean if a field has been set.
func (o *UpdateSharedDrive) HasIoLimitPolicy() bool {
	if o != nil && !IsNil(o.IoLimitPolicy) {
		return true
	}

	return false
}

// SetIoLimitPolicy gets a reference to the given string and assigns it to the IoLimitPolicy field.
func (o *UpdateSharedDrive) SetIoLimitPolicy(v string) {
	o.IoLimitPolicy = &v
}

// GetLogicalNetworkId returns the LogicalNetworkId field value if set, zero value otherwise.
func (o *UpdateSharedDrive) GetLogicalNetworkId() float32 {
	if o == nil || IsNil(o.LogicalNetworkId) {
		var ret float32
		return ret
	}
	return *o.LogicalNetworkId
}

// GetLogicalNetworkIdOk returns a tuple with the LogicalNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSharedDrive) GetLogicalNetworkIdOk() (*float32, bool) {
	if o == nil || IsNil(o.LogicalNetworkId) {
		return nil, false
	}
	return o.LogicalNetworkId, true
}

// HasLogicalNetworkId returns a boolean if a field has been set.
func (o *UpdateSharedDrive) HasLogicalNetworkId() bool {
	if o != nil && !IsNil(o.LogicalNetworkId) {
		return true
	}

	return false
}

// SetLogicalNetworkId gets a reference to the given float32 and assigns it to the LogicalNetworkId field.
func (o *UpdateSharedDrive) SetLogicalNetworkId(v float32) {
	o.LogicalNetworkId = &v
}

func (o UpdateSharedDrive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSharedDrive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.SizeMb) {
		toSerialize["sizeMb"] = o.SizeMb
	}
	if !IsNil(o.IoLimitPolicy) {
		toSerialize["ioLimitPolicy"] = o.IoLimitPolicy
	}
	if !IsNil(o.LogicalNetworkId) {
		toSerialize["logicalNetworkId"] = o.LogicalNetworkId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateSharedDrive) UnmarshalJSON(data []byte) (err error) {
	varUpdateSharedDrive := _UpdateSharedDrive{}

	err = json.Unmarshal(data, &varUpdateSharedDrive)

	if err != nil {
		return err
	}

	*o = UpdateSharedDrive(varUpdateSharedDrive)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "sizeMb")
		delete(additionalProperties, "ioLimitPolicy")
		delete(additionalProperties, "logicalNetworkId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateSharedDrive struct {
	value *UpdateSharedDrive
	isSet bool
}

func (v NullableUpdateSharedDrive) Get() *UpdateSharedDrive {
	return v.value
}

func (v *NullableUpdateSharedDrive) Set(val *UpdateSharedDrive) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSharedDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSharedDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSharedDrive(val *UpdateSharedDrive) *NullableUpdateSharedDrive {
	return &NullableUpdateSharedDrive{value: val, isSet: true}
}

func (v NullableUpdateSharedDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSharedDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


