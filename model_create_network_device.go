/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateNetworkDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNetworkDevice{}

// CreateNetworkDevice struct for CreateNetworkDevice
type CreateNetworkDevice struct {
	// Site identifier
	SiteId *int32 `json:"siteId,omitempty"`
	// Name of the datacenter
	DatacenterName *string `json:"datacenterName,omitempty"`
	// Unique identifier string for the network device
	IdentifierString *string `json:"identifierString,omitempty"`
	// ID of the rack where the network device chassis is installed
	ChassisRackId *int32 `json:"chassisRackId,omitempty"`
	// Unique identifier for the network device chassis
	ChassisIdentifier NullableString `json:"chassisIdentifier,omitempty"`
	// Driver software used to communicate with the network device
	Driver NetworkDeviceDriver `json:"driver"`
	// The physical or logical position of the network device in the network topology.
	Position string `json:"position"`
	// ID of the Top-of-Rack (TOR) switch that this network device is linked to. Used for establishing hierarchical relationships between network devices.
	TorLinkedId NullableFloat32 `json:"torLinkedId,omitempty"`
	// Indicates if this network device acts as a gateway for external network traffic
	IsGateway *bool `json:"isGateway,omitempty"`
	// Indicates if syslog logging is enabled for this network device
	SyslogEnabled NullableBool `json:"syslogEnabled,omitempty"`
	// Indicates if this network device is dedicated to storage traffic
	IsStorageSwitch *bool `json:"isStorageSwitch,omitempty"`
	// Indicates if this network device functions as a border device connecting to external networks
	IsBorderDevice *bool `json:"isBorderDevice,omitempty"`
	// The VLAN ID for the quarantine network
	QuarantineVlan *int32 `json:"quarantineVlan,omitempty"`
	// The IP address used to manage the network device
	ManagementAddress NullableString `json:"managementAddress,omitempty"`
	// The port number used for management connections
	ManagementPort NullableInt32 `json:"managementPort,omitempty"`
	// The username used for management authentication
	Username NullableString `json:"username,omitempty"`
	// The password used for management authentication
	ManagementPassword NullableString `json:"managementPassword,omitempty"`
	// The gateway IP address for the management network
	ManagementAddressGateway NullableString `json:"managementAddressGateway,omitempty"`
	// The subnet mask for the management network
	ManagementAddressMask NullableString `json:"managementAddressMask,omitempty"`
	// The MAC address of the management interface
	ManagementMAC NullableString `json:"managementMAC,omitempty"`
	// The loopback IP address assigned to the network device
	LoopbackAddress NullableString `json:"loopbackAddress,omitempty"`
	// The VTEP (VXLAN Tunnel Endpoint) IP address for overlay networking
	VtepAddress NullableString `json:"vtepAddress,omitempty"`
	// The Autonomous System Number for BGP routing
	Asn NullableFloat32 `json:"asn,omitempty"`
	// Additional description or notes about the network device
	Description NullableString `json:"description,omitempty"`
	// The country where the network device is located
	Country NullableString `json:"country,omitempty"`
	// The city where the network device is located
	City NullableString `json:"city,omitempty"`
	// Metadata about the datacenter where the device is located
	DatacenterMeta NullableString `json:"datacenterMeta,omitempty"`
	// The room within the datacenter where the device is located
	DatacenterRoom NullableString `json:"datacenterRoom,omitempty"`
	// The rack identifier within the datacenter where the device is mounted
	DatacenterRack NullableString `json:"datacenterRack,omitempty"`
	// The upper rack unit position where the device is mounted
	RackPositionUpperUnit NullableInt32 `json:"rackPositionUpperUnit,omitempty"`
	// The lower rack unit position where the device is mounted
	RackPositionLowerUnit NullableInt32 `json:"rackPositionLowerUnit,omitempty"`
	// The serial number of the network device
	SerialNumber *string `json:"serialNumber,omitempty"`
	// The order index for sorting network devices
	OrderIndex *float32 `json:"orderIndex,omitempty"`
	// The default Maximum Transmission Unit (MTU) for interfaces on this device
	DefaultMtu NullableFloat32 `json:"defaultMtu,omitempty"`
	// Tags for categorizing and filtering network devices
	Tags []string `json:"tags,omitempty"`
	// Indicates if the device requires OS installation before provisioning
	RequiresOsInstall *bool `json:"requiresOsInstall,omitempty"`
	// Whether to overwrite the hostname with the one fetched from the device
	OverwriteWithHostnameFromFetchedSwitch NullableBool `json:"overwriteWithHostnameFromFetchedSwitch,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateNetworkDevice CreateNetworkDevice

// NewCreateNetworkDevice instantiates a new CreateNetworkDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNetworkDevice(driver NetworkDeviceDriver, position string) *CreateNetworkDevice {
	this := CreateNetworkDevice{}
	this.Driver = driver
	this.Position = position
	return &this
}

// NewCreateNetworkDeviceWithDefaults instantiates a new CreateNetworkDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNetworkDeviceWithDefaults() *CreateNetworkDevice {
	this := CreateNetworkDevice{}
	return &this
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *CreateNetworkDevice) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetDatacenterName returns the DatacenterName field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetDatacenterName() string {
	if o == nil || IsNil(o.DatacenterName) {
		var ret string
		return ret
	}
	return *o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetDatacenterNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterName) {
		return nil, false
	}
	return o.DatacenterName, true
}

// HasDatacenterName returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasDatacenterName() bool {
	if o != nil && !IsNil(o.DatacenterName) {
		return true
	}

	return false
}

// SetDatacenterName gets a reference to the given string and assigns it to the DatacenterName field.
func (o *CreateNetworkDevice) SetDatacenterName(v string) {
	o.DatacenterName = &v
}

// GetIdentifierString returns the IdentifierString field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetIdentifierString() string {
	if o == nil || IsNil(o.IdentifierString) {
		var ret string
		return ret
	}
	return *o.IdentifierString
}

// GetIdentifierStringOk returns a tuple with the IdentifierString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetIdentifierStringOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifierString) {
		return nil, false
	}
	return o.IdentifierString, true
}

// HasIdentifierString returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasIdentifierString() bool {
	if o != nil && !IsNil(o.IdentifierString) {
		return true
	}

	return false
}

// SetIdentifierString gets a reference to the given string and assigns it to the IdentifierString field.
func (o *CreateNetworkDevice) SetIdentifierString(v string) {
	o.IdentifierString = &v
}

// GetChassisRackId returns the ChassisRackId field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetChassisRackId() int32 {
	if o == nil || IsNil(o.ChassisRackId) {
		var ret int32
		return ret
	}
	return *o.ChassisRackId
}

// GetChassisRackIdOk returns a tuple with the ChassisRackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetChassisRackIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ChassisRackId) {
		return nil, false
	}
	return o.ChassisRackId, true
}

// HasChassisRackId returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasChassisRackId() bool {
	if o != nil && !IsNil(o.ChassisRackId) {
		return true
	}

	return false
}

// SetChassisRackId gets a reference to the given int32 and assigns it to the ChassisRackId field.
func (o *CreateNetworkDevice) SetChassisRackId(v int32) {
	o.ChassisRackId = &v
}

// GetChassisIdentifier returns the ChassisIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetChassisIdentifier() string {
	if o == nil || IsNil(o.ChassisIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.ChassisIdentifier.Get()
}

// GetChassisIdentifierOk returns a tuple with the ChassisIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetChassisIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisIdentifier.Get(), o.ChassisIdentifier.IsSet()
}

// HasChassisIdentifier returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasChassisIdentifier() bool {
	if o != nil && o.ChassisIdentifier.IsSet() {
		return true
	}

	return false
}

// SetChassisIdentifier gets a reference to the given NullableString and assigns it to the ChassisIdentifier field.
func (o *CreateNetworkDevice) SetChassisIdentifier(v string) {
	o.ChassisIdentifier.Set(&v)
}
// SetChassisIdentifierNil sets the value for ChassisIdentifier to be an explicit nil
func (o *CreateNetworkDevice) SetChassisIdentifierNil() {
	o.ChassisIdentifier.Set(nil)
}

// UnsetChassisIdentifier ensures that no value is present for ChassisIdentifier, not even an explicit nil
func (o *CreateNetworkDevice) UnsetChassisIdentifier() {
	o.ChassisIdentifier.Unset()
}

// GetDriver returns the Driver field value
func (o *CreateNetworkDevice) GetDriver() NetworkDeviceDriver {
	if o == nil {
		var ret NetworkDeviceDriver
		return ret
	}

	return o.Driver
}

// GetDriverOk returns a tuple with the Driver field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetDriverOk() (*NetworkDeviceDriver, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Driver, true
}

// SetDriver sets field value
func (o *CreateNetworkDevice) SetDriver(v NetworkDeviceDriver) {
	o.Driver = v
}

// GetPosition returns the Position field value
func (o *CreateNetworkDevice) GetPosition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetPositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *CreateNetworkDevice) SetPosition(v string) {
	o.Position = v
}

// GetTorLinkedId returns the TorLinkedId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetTorLinkedId() float32 {
	if o == nil || IsNil(o.TorLinkedId.Get()) {
		var ret float32
		return ret
	}
	return *o.TorLinkedId.Get()
}

// GetTorLinkedIdOk returns a tuple with the TorLinkedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetTorLinkedIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TorLinkedId.Get(), o.TorLinkedId.IsSet()
}

// HasTorLinkedId returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasTorLinkedId() bool {
	if o != nil && o.TorLinkedId.IsSet() {
		return true
	}

	return false
}

// SetTorLinkedId gets a reference to the given NullableFloat32 and assigns it to the TorLinkedId field.
func (o *CreateNetworkDevice) SetTorLinkedId(v float32) {
	o.TorLinkedId.Set(&v)
}
// SetTorLinkedIdNil sets the value for TorLinkedId to be an explicit nil
func (o *CreateNetworkDevice) SetTorLinkedIdNil() {
	o.TorLinkedId.Set(nil)
}

// UnsetTorLinkedId ensures that no value is present for TorLinkedId, not even an explicit nil
func (o *CreateNetworkDevice) UnsetTorLinkedId() {
	o.TorLinkedId.Unset()
}

// GetIsGateway returns the IsGateway field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetIsGateway() bool {
	if o == nil || IsNil(o.IsGateway) {
		var ret bool
		return ret
	}
	return *o.IsGateway
}

// GetIsGatewayOk returns a tuple with the IsGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetIsGatewayOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGateway) {
		return nil, false
	}
	return o.IsGateway, true
}

// HasIsGateway returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasIsGateway() bool {
	if o != nil && !IsNil(o.IsGateway) {
		return true
	}

	return false
}

// SetIsGateway gets a reference to the given bool and assigns it to the IsGateway field.
func (o *CreateNetworkDevice) SetIsGateway(v bool) {
	o.IsGateway = &v
}

// GetSyslogEnabled returns the SyslogEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetSyslogEnabled() bool {
	if o == nil || IsNil(o.SyslogEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.SyslogEnabled.Get()
}

// GetSyslogEnabledOk returns a tuple with the SyslogEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetSyslogEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SyslogEnabled.Get(), o.SyslogEnabled.IsSet()
}

// HasSyslogEnabled returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasSyslogEnabled() bool {
	if o != nil && o.SyslogEnabled.IsSet() {
		return true
	}

	return false
}

// SetSyslogEnabled gets a reference to the given NullableBool and assigns it to the SyslogEnabled field.
func (o *CreateNetworkDevice) SetSyslogEnabled(v bool) {
	o.SyslogEnabled.Set(&v)
}
// SetSyslogEnabledNil sets the value for SyslogEnabled to be an explicit nil
func (o *CreateNetworkDevice) SetSyslogEnabledNil() {
	o.SyslogEnabled.Set(nil)
}

// UnsetSyslogEnabled ensures that no value is present for SyslogEnabled, not even an explicit nil
func (o *CreateNetworkDevice) UnsetSyslogEnabled() {
	o.SyslogEnabled.Unset()
}

// GetIsStorageSwitch returns the IsStorageSwitch field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetIsStorageSwitch() bool {
	if o == nil || IsNil(o.IsStorageSwitch) {
		var ret bool
		return ret
	}
	return *o.IsStorageSwitch
}

// GetIsStorageSwitchOk returns a tuple with the IsStorageSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetIsStorageSwitchOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStorageSwitch) {
		return nil, false
	}
	return o.IsStorageSwitch, true
}

// HasIsStorageSwitch returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasIsStorageSwitch() bool {
	if o != nil && !IsNil(o.IsStorageSwitch) {
		return true
	}

	return false
}

// SetIsStorageSwitch gets a reference to the given bool and assigns it to the IsStorageSwitch field.
func (o *CreateNetworkDevice) SetIsStorageSwitch(v bool) {
	o.IsStorageSwitch = &v
}

// GetIsBorderDevice returns the IsBorderDevice field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetIsBorderDevice() bool {
	if o == nil || IsNil(o.IsBorderDevice) {
		var ret bool
		return ret
	}
	return *o.IsBorderDevice
}

// GetIsBorderDeviceOk returns a tuple with the IsBorderDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetIsBorderDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBorderDevice) {
		return nil, false
	}
	return o.IsBorderDevice, true
}

// HasIsBorderDevice returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasIsBorderDevice() bool {
	if o != nil && !IsNil(o.IsBorderDevice) {
		return true
	}

	return false
}

// SetIsBorderDevice gets a reference to the given bool and assigns it to the IsBorderDevice field.
func (o *CreateNetworkDevice) SetIsBorderDevice(v bool) {
	o.IsBorderDevice = &v
}

// GetQuarantineVlan returns the QuarantineVlan field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetQuarantineVlan() int32 {
	if o == nil || IsNil(o.QuarantineVlan) {
		var ret int32
		return ret
	}
	return *o.QuarantineVlan
}

// GetQuarantineVlanOk returns a tuple with the QuarantineVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetQuarantineVlanOk() (*int32, bool) {
	if o == nil || IsNil(o.QuarantineVlan) {
		return nil, false
	}
	return o.QuarantineVlan, true
}

// HasQuarantineVlan returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasQuarantineVlan() bool {
	if o != nil && !IsNil(o.QuarantineVlan) {
		return true
	}

	return false
}

// SetQuarantineVlan gets a reference to the given int32 and assigns it to the QuarantineVlan field.
func (o *CreateNetworkDevice) SetQuarantineVlan(v int32) {
	o.QuarantineVlan = &v
}

// GetManagementAddress returns the ManagementAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetManagementAddress() string {
	if o == nil || IsNil(o.ManagementAddress.Get()) {
		var ret string
		return ret
	}
	return *o.ManagementAddress.Get()
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetManagementAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementAddress.Get(), o.ManagementAddress.IsSet()
}

// HasManagementAddress returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasManagementAddress() bool {
	if o != nil && o.ManagementAddress.IsSet() {
		return true
	}

	return false
}

// SetManagementAddress gets a reference to the given NullableString and assigns it to the ManagementAddress field.
func (o *CreateNetworkDevice) SetManagementAddress(v string) {
	o.ManagementAddress.Set(&v)
}
// SetManagementAddressNil sets the value for ManagementAddress to be an explicit nil
func (o *CreateNetworkDevice) SetManagementAddressNil() {
	o.ManagementAddress.Set(nil)
}

// UnsetManagementAddress ensures that no value is present for ManagementAddress, not even an explicit nil
func (o *CreateNetworkDevice) UnsetManagementAddress() {
	o.ManagementAddress.Unset()
}

// GetManagementPort returns the ManagementPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetManagementPort() int32 {
	if o == nil || IsNil(o.ManagementPort.Get()) {
		var ret int32
		return ret
	}
	return *o.ManagementPort.Get()
}

// GetManagementPortOk returns a tuple with the ManagementPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetManagementPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementPort.Get(), o.ManagementPort.IsSet()
}

// HasManagementPort returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasManagementPort() bool {
	if o != nil && o.ManagementPort.IsSet() {
		return true
	}

	return false
}

// SetManagementPort gets a reference to the given NullableInt32 and assigns it to the ManagementPort field.
func (o *CreateNetworkDevice) SetManagementPort(v int32) {
	o.ManagementPort.Set(&v)
}
// SetManagementPortNil sets the value for ManagementPort to be an explicit nil
func (o *CreateNetworkDevice) SetManagementPortNil() {
	o.ManagementPort.Set(nil)
}

// UnsetManagementPort ensures that no value is present for ManagementPort, not even an explicit nil
func (o *CreateNetworkDevice) UnsetManagementPort() {
	o.ManagementPort.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *CreateNetworkDevice) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *CreateNetworkDevice) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *CreateNetworkDevice) UnsetUsername() {
	o.Username.Unset()
}

// GetManagementPassword returns the ManagementPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetManagementPassword() string {
	if o == nil || IsNil(o.ManagementPassword.Get()) {
		var ret string
		return ret
	}
	return *o.ManagementPassword.Get()
}

// GetManagementPasswordOk returns a tuple with the ManagementPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetManagementPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementPassword.Get(), o.ManagementPassword.IsSet()
}

// HasManagementPassword returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasManagementPassword() bool {
	if o != nil && o.ManagementPassword.IsSet() {
		return true
	}

	return false
}

// SetManagementPassword gets a reference to the given NullableString and assigns it to the ManagementPassword field.
func (o *CreateNetworkDevice) SetManagementPassword(v string) {
	o.ManagementPassword.Set(&v)
}
// SetManagementPasswordNil sets the value for ManagementPassword to be an explicit nil
func (o *CreateNetworkDevice) SetManagementPasswordNil() {
	o.ManagementPassword.Set(nil)
}

// UnsetManagementPassword ensures that no value is present for ManagementPassword, not even an explicit nil
func (o *CreateNetworkDevice) UnsetManagementPassword() {
	o.ManagementPassword.Unset()
}

// GetManagementAddressGateway returns the ManagementAddressGateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetManagementAddressGateway() string {
	if o == nil || IsNil(o.ManagementAddressGateway.Get()) {
		var ret string
		return ret
	}
	return *o.ManagementAddressGateway.Get()
}

// GetManagementAddressGatewayOk returns a tuple with the ManagementAddressGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetManagementAddressGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementAddressGateway.Get(), o.ManagementAddressGateway.IsSet()
}

// HasManagementAddressGateway returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasManagementAddressGateway() bool {
	if o != nil && o.ManagementAddressGateway.IsSet() {
		return true
	}

	return false
}

// SetManagementAddressGateway gets a reference to the given NullableString and assigns it to the ManagementAddressGateway field.
func (o *CreateNetworkDevice) SetManagementAddressGateway(v string) {
	o.ManagementAddressGateway.Set(&v)
}
// SetManagementAddressGatewayNil sets the value for ManagementAddressGateway to be an explicit nil
func (o *CreateNetworkDevice) SetManagementAddressGatewayNil() {
	o.ManagementAddressGateway.Set(nil)
}

// UnsetManagementAddressGateway ensures that no value is present for ManagementAddressGateway, not even an explicit nil
func (o *CreateNetworkDevice) UnsetManagementAddressGateway() {
	o.ManagementAddressGateway.Unset()
}

// GetManagementAddressMask returns the ManagementAddressMask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetManagementAddressMask() string {
	if o == nil || IsNil(o.ManagementAddressMask.Get()) {
		var ret string
		return ret
	}
	return *o.ManagementAddressMask.Get()
}

// GetManagementAddressMaskOk returns a tuple with the ManagementAddressMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetManagementAddressMaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementAddressMask.Get(), o.ManagementAddressMask.IsSet()
}

// HasManagementAddressMask returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasManagementAddressMask() bool {
	if o != nil && o.ManagementAddressMask.IsSet() {
		return true
	}

	return false
}

// SetManagementAddressMask gets a reference to the given NullableString and assigns it to the ManagementAddressMask field.
func (o *CreateNetworkDevice) SetManagementAddressMask(v string) {
	o.ManagementAddressMask.Set(&v)
}
// SetManagementAddressMaskNil sets the value for ManagementAddressMask to be an explicit nil
func (o *CreateNetworkDevice) SetManagementAddressMaskNil() {
	o.ManagementAddressMask.Set(nil)
}

// UnsetManagementAddressMask ensures that no value is present for ManagementAddressMask, not even an explicit nil
func (o *CreateNetworkDevice) UnsetManagementAddressMask() {
	o.ManagementAddressMask.Unset()
}

// GetManagementMAC returns the ManagementMAC field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetManagementMAC() string {
	if o == nil || IsNil(o.ManagementMAC.Get()) {
		var ret string
		return ret
	}
	return *o.ManagementMAC.Get()
}

// GetManagementMACOk returns a tuple with the ManagementMAC field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetManagementMACOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementMAC.Get(), o.ManagementMAC.IsSet()
}

// HasManagementMAC returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasManagementMAC() bool {
	if o != nil && o.ManagementMAC.IsSet() {
		return true
	}

	return false
}

// SetManagementMAC gets a reference to the given NullableString and assigns it to the ManagementMAC field.
func (o *CreateNetworkDevice) SetManagementMAC(v string) {
	o.ManagementMAC.Set(&v)
}
// SetManagementMACNil sets the value for ManagementMAC to be an explicit nil
func (o *CreateNetworkDevice) SetManagementMACNil() {
	o.ManagementMAC.Set(nil)
}

// UnsetManagementMAC ensures that no value is present for ManagementMAC, not even an explicit nil
func (o *CreateNetworkDevice) UnsetManagementMAC() {
	o.ManagementMAC.Unset()
}

// GetLoopbackAddress returns the LoopbackAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetLoopbackAddress() string {
	if o == nil || IsNil(o.LoopbackAddress.Get()) {
		var ret string
		return ret
	}
	return *o.LoopbackAddress.Get()
}

// GetLoopbackAddressOk returns a tuple with the LoopbackAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetLoopbackAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LoopbackAddress.Get(), o.LoopbackAddress.IsSet()
}

// HasLoopbackAddress returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasLoopbackAddress() bool {
	if o != nil && o.LoopbackAddress.IsSet() {
		return true
	}

	return false
}

// SetLoopbackAddress gets a reference to the given NullableString and assigns it to the LoopbackAddress field.
func (o *CreateNetworkDevice) SetLoopbackAddress(v string) {
	o.LoopbackAddress.Set(&v)
}
// SetLoopbackAddressNil sets the value for LoopbackAddress to be an explicit nil
func (o *CreateNetworkDevice) SetLoopbackAddressNil() {
	o.LoopbackAddress.Set(nil)
}

// UnsetLoopbackAddress ensures that no value is present for LoopbackAddress, not even an explicit nil
func (o *CreateNetworkDevice) UnsetLoopbackAddress() {
	o.LoopbackAddress.Unset()
}

// GetVtepAddress returns the VtepAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetVtepAddress() string {
	if o == nil || IsNil(o.VtepAddress.Get()) {
		var ret string
		return ret
	}
	return *o.VtepAddress.Get()
}

// GetVtepAddressOk returns a tuple with the VtepAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetVtepAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VtepAddress.Get(), o.VtepAddress.IsSet()
}

// HasVtepAddress returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasVtepAddress() bool {
	if o != nil && o.VtepAddress.IsSet() {
		return true
	}

	return false
}

// SetVtepAddress gets a reference to the given NullableString and assigns it to the VtepAddress field.
func (o *CreateNetworkDevice) SetVtepAddress(v string) {
	o.VtepAddress.Set(&v)
}
// SetVtepAddressNil sets the value for VtepAddress to be an explicit nil
func (o *CreateNetworkDevice) SetVtepAddressNil() {
	o.VtepAddress.Set(nil)
}

// UnsetVtepAddress ensures that no value is present for VtepAddress, not even an explicit nil
func (o *CreateNetworkDevice) UnsetVtepAddress() {
	o.VtepAddress.Unset()
}

// GetAsn returns the Asn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetAsn() float32 {
	if o == nil || IsNil(o.Asn.Get()) {
		var ret float32
		return ret
	}
	return *o.Asn.Get()
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetAsnOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Asn.Get(), o.Asn.IsSet()
}

// HasAsn returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasAsn() bool {
	if o != nil && o.Asn.IsSet() {
		return true
	}

	return false
}

// SetAsn gets a reference to the given NullableFloat32 and assigns it to the Asn field.
func (o *CreateNetworkDevice) SetAsn(v float32) {
	o.Asn.Set(&v)
}
// SetAsnNil sets the value for Asn to be an explicit nil
func (o *CreateNetworkDevice) SetAsnNil() {
	o.Asn.Set(nil)
}

// UnsetAsn ensures that no value is present for Asn, not even an explicit nil
func (o *CreateNetworkDevice) UnsetAsn() {
	o.Asn.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateNetworkDevice) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateNetworkDevice) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateNetworkDevice) UnsetDescription() {
	o.Description.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetCountry() string {
	if o == nil || IsNil(o.Country.Get()) {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *CreateNetworkDevice) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *CreateNetworkDevice) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *CreateNetworkDevice) UnsetCountry() {
	o.Country.Unset()
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetCity() string {
	if o == nil || IsNil(o.City.Get()) {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *CreateNetworkDevice) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *CreateNetworkDevice) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *CreateNetworkDevice) UnsetCity() {
	o.City.Unset()
}

// GetDatacenterMeta returns the DatacenterMeta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetDatacenterMeta() string {
	if o == nil || IsNil(o.DatacenterMeta.Get()) {
		var ret string
		return ret
	}
	return *o.DatacenterMeta.Get()
}

// GetDatacenterMetaOk returns a tuple with the DatacenterMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetDatacenterMetaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatacenterMeta.Get(), o.DatacenterMeta.IsSet()
}

// HasDatacenterMeta returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasDatacenterMeta() bool {
	if o != nil && o.DatacenterMeta.IsSet() {
		return true
	}

	return false
}

// SetDatacenterMeta gets a reference to the given NullableString and assigns it to the DatacenterMeta field.
func (o *CreateNetworkDevice) SetDatacenterMeta(v string) {
	o.DatacenterMeta.Set(&v)
}
// SetDatacenterMetaNil sets the value for DatacenterMeta to be an explicit nil
func (o *CreateNetworkDevice) SetDatacenterMetaNil() {
	o.DatacenterMeta.Set(nil)
}

// UnsetDatacenterMeta ensures that no value is present for DatacenterMeta, not even an explicit nil
func (o *CreateNetworkDevice) UnsetDatacenterMeta() {
	o.DatacenterMeta.Unset()
}

// GetDatacenterRoom returns the DatacenterRoom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetDatacenterRoom() string {
	if o == nil || IsNil(o.DatacenterRoom.Get()) {
		var ret string
		return ret
	}
	return *o.DatacenterRoom.Get()
}

// GetDatacenterRoomOk returns a tuple with the DatacenterRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetDatacenterRoomOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatacenterRoom.Get(), o.DatacenterRoom.IsSet()
}

// HasDatacenterRoom returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasDatacenterRoom() bool {
	if o != nil && o.DatacenterRoom.IsSet() {
		return true
	}

	return false
}

// SetDatacenterRoom gets a reference to the given NullableString and assigns it to the DatacenterRoom field.
func (o *CreateNetworkDevice) SetDatacenterRoom(v string) {
	o.DatacenterRoom.Set(&v)
}
// SetDatacenterRoomNil sets the value for DatacenterRoom to be an explicit nil
func (o *CreateNetworkDevice) SetDatacenterRoomNil() {
	o.DatacenterRoom.Set(nil)
}

// UnsetDatacenterRoom ensures that no value is present for DatacenterRoom, not even an explicit nil
func (o *CreateNetworkDevice) UnsetDatacenterRoom() {
	o.DatacenterRoom.Unset()
}

// GetDatacenterRack returns the DatacenterRack field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetDatacenterRack() string {
	if o == nil || IsNil(o.DatacenterRack.Get()) {
		var ret string
		return ret
	}
	return *o.DatacenterRack.Get()
}

// GetDatacenterRackOk returns a tuple with the DatacenterRack field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetDatacenterRackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatacenterRack.Get(), o.DatacenterRack.IsSet()
}

// HasDatacenterRack returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasDatacenterRack() bool {
	if o != nil && o.DatacenterRack.IsSet() {
		return true
	}

	return false
}

// SetDatacenterRack gets a reference to the given NullableString and assigns it to the DatacenterRack field.
func (o *CreateNetworkDevice) SetDatacenterRack(v string) {
	o.DatacenterRack.Set(&v)
}
// SetDatacenterRackNil sets the value for DatacenterRack to be an explicit nil
func (o *CreateNetworkDevice) SetDatacenterRackNil() {
	o.DatacenterRack.Set(nil)
}

// UnsetDatacenterRack ensures that no value is present for DatacenterRack, not even an explicit nil
func (o *CreateNetworkDevice) UnsetDatacenterRack() {
	o.DatacenterRack.Unset()
}

// GetRackPositionUpperUnit returns the RackPositionUpperUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetRackPositionUpperUnit() int32 {
	if o == nil || IsNil(o.RackPositionUpperUnit.Get()) {
		var ret int32
		return ret
	}
	return *o.RackPositionUpperUnit.Get()
}

// GetRackPositionUpperUnitOk returns a tuple with the RackPositionUpperUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetRackPositionUpperUnitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RackPositionUpperUnit.Get(), o.RackPositionUpperUnit.IsSet()
}

// HasRackPositionUpperUnit returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasRackPositionUpperUnit() bool {
	if o != nil && o.RackPositionUpperUnit.IsSet() {
		return true
	}

	return false
}

// SetRackPositionUpperUnit gets a reference to the given NullableInt32 and assigns it to the RackPositionUpperUnit field.
func (o *CreateNetworkDevice) SetRackPositionUpperUnit(v int32) {
	o.RackPositionUpperUnit.Set(&v)
}
// SetRackPositionUpperUnitNil sets the value for RackPositionUpperUnit to be an explicit nil
func (o *CreateNetworkDevice) SetRackPositionUpperUnitNil() {
	o.RackPositionUpperUnit.Set(nil)
}

// UnsetRackPositionUpperUnit ensures that no value is present for RackPositionUpperUnit, not even an explicit nil
func (o *CreateNetworkDevice) UnsetRackPositionUpperUnit() {
	o.RackPositionUpperUnit.Unset()
}

// GetRackPositionLowerUnit returns the RackPositionLowerUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetRackPositionLowerUnit() int32 {
	if o == nil || IsNil(o.RackPositionLowerUnit.Get()) {
		var ret int32
		return ret
	}
	return *o.RackPositionLowerUnit.Get()
}

// GetRackPositionLowerUnitOk returns a tuple with the RackPositionLowerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetRackPositionLowerUnitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RackPositionLowerUnit.Get(), o.RackPositionLowerUnit.IsSet()
}

// HasRackPositionLowerUnit returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasRackPositionLowerUnit() bool {
	if o != nil && o.RackPositionLowerUnit.IsSet() {
		return true
	}

	return false
}

// SetRackPositionLowerUnit gets a reference to the given NullableInt32 and assigns it to the RackPositionLowerUnit field.
func (o *CreateNetworkDevice) SetRackPositionLowerUnit(v int32) {
	o.RackPositionLowerUnit.Set(&v)
}
// SetRackPositionLowerUnitNil sets the value for RackPositionLowerUnit to be an explicit nil
func (o *CreateNetworkDevice) SetRackPositionLowerUnitNil() {
	o.RackPositionLowerUnit.Set(nil)
}

// UnsetRackPositionLowerUnit ensures that no value is present for RackPositionLowerUnit, not even an explicit nil
func (o *CreateNetworkDevice) UnsetRackPositionLowerUnit() {
	o.RackPositionLowerUnit.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *CreateNetworkDevice) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetOrderIndex returns the OrderIndex field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetOrderIndex() float32 {
	if o == nil || IsNil(o.OrderIndex) {
		var ret float32
		return ret
	}
	return *o.OrderIndex
}

// GetOrderIndexOk returns a tuple with the OrderIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetOrderIndexOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderIndex) {
		return nil, false
	}
	return o.OrderIndex, true
}

// HasOrderIndex returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasOrderIndex() bool {
	if o != nil && !IsNil(o.OrderIndex) {
		return true
	}

	return false
}

// SetOrderIndex gets a reference to the given float32 and assigns it to the OrderIndex field.
func (o *CreateNetworkDevice) SetOrderIndex(v float32) {
	o.OrderIndex = &v
}

// GetDefaultMtu returns the DefaultMtu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetDefaultMtu() float32 {
	if o == nil || IsNil(o.DefaultMtu.Get()) {
		var ret float32
		return ret
	}
	return *o.DefaultMtu.Get()
}

// GetDefaultMtuOk returns a tuple with the DefaultMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetDefaultMtuOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultMtu.Get(), o.DefaultMtu.IsSet()
}

// HasDefaultMtu returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasDefaultMtu() bool {
	if o != nil && o.DefaultMtu.IsSet() {
		return true
	}

	return false
}

// SetDefaultMtu gets a reference to the given NullableFloat32 and assigns it to the DefaultMtu field.
func (o *CreateNetworkDevice) SetDefaultMtu(v float32) {
	o.DefaultMtu.Set(&v)
}
// SetDefaultMtuNil sets the value for DefaultMtu to be an explicit nil
func (o *CreateNetworkDevice) SetDefaultMtuNil() {
	o.DefaultMtu.Set(nil)
}

// UnsetDefaultMtu ensures that no value is present for DefaultMtu, not even an explicit nil
func (o *CreateNetworkDevice) UnsetDefaultMtu() {
	o.DefaultMtu.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CreateNetworkDevice) SetTags(v []string) {
	o.Tags = v
}

// GetRequiresOsInstall returns the RequiresOsInstall field value if set, zero value otherwise.
func (o *CreateNetworkDevice) GetRequiresOsInstall() bool {
	if o == nil || IsNil(o.RequiresOsInstall) {
		var ret bool
		return ret
	}
	return *o.RequiresOsInstall
}

// GetRequiresOsInstallOk returns a tuple with the RequiresOsInstall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkDevice) GetRequiresOsInstallOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresOsInstall) {
		return nil, false
	}
	return o.RequiresOsInstall, true
}

// HasRequiresOsInstall returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasRequiresOsInstall() bool {
	if o != nil && !IsNil(o.RequiresOsInstall) {
		return true
	}

	return false
}

// SetRequiresOsInstall gets a reference to the given bool and assigns it to the RequiresOsInstall field.
func (o *CreateNetworkDevice) SetRequiresOsInstall(v bool) {
	o.RequiresOsInstall = &v
}

// GetOverwriteWithHostnameFromFetchedSwitch returns the OverwriteWithHostnameFromFetchedSwitch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateNetworkDevice) GetOverwriteWithHostnameFromFetchedSwitch() bool {
	if o == nil || IsNil(o.OverwriteWithHostnameFromFetchedSwitch.Get()) {
		var ret bool
		return ret
	}
	return *o.OverwriteWithHostnameFromFetchedSwitch.Get()
}

// GetOverwriteWithHostnameFromFetchedSwitchOk returns a tuple with the OverwriteWithHostnameFromFetchedSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkDevice) GetOverwriteWithHostnameFromFetchedSwitchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverwriteWithHostnameFromFetchedSwitch.Get(), o.OverwriteWithHostnameFromFetchedSwitch.IsSet()
}

// HasOverwriteWithHostnameFromFetchedSwitch returns a boolean if a field has been set.
func (o *CreateNetworkDevice) HasOverwriteWithHostnameFromFetchedSwitch() bool {
	if o != nil && o.OverwriteWithHostnameFromFetchedSwitch.IsSet() {
		return true
	}

	return false
}

// SetOverwriteWithHostnameFromFetchedSwitch gets a reference to the given NullableBool and assigns it to the OverwriteWithHostnameFromFetchedSwitch field.
func (o *CreateNetworkDevice) SetOverwriteWithHostnameFromFetchedSwitch(v bool) {
	o.OverwriteWithHostnameFromFetchedSwitch.Set(&v)
}
// SetOverwriteWithHostnameFromFetchedSwitchNil sets the value for OverwriteWithHostnameFromFetchedSwitch to be an explicit nil
func (o *CreateNetworkDevice) SetOverwriteWithHostnameFromFetchedSwitchNil() {
	o.OverwriteWithHostnameFromFetchedSwitch.Set(nil)
}

// UnsetOverwriteWithHostnameFromFetchedSwitch ensures that no value is present for OverwriteWithHostnameFromFetchedSwitch, not even an explicit nil
func (o *CreateNetworkDevice) UnsetOverwriteWithHostnameFromFetchedSwitch() {
	o.OverwriteWithHostnameFromFetchedSwitch.Unset()
}

func (o CreateNetworkDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNetworkDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.DatacenterName) {
		toSerialize["datacenterName"] = o.DatacenterName
	}
	if !IsNil(o.IdentifierString) {
		toSerialize["identifierString"] = o.IdentifierString
	}
	if !IsNil(o.ChassisRackId) {
		toSerialize["chassisRackId"] = o.ChassisRackId
	}
	if o.ChassisIdentifier.IsSet() {
		toSerialize["chassisIdentifier"] = o.ChassisIdentifier.Get()
	}
	toSerialize["driver"] = o.Driver
	toSerialize["position"] = o.Position
	if o.TorLinkedId.IsSet() {
		toSerialize["torLinkedId"] = o.TorLinkedId.Get()
	}
	if !IsNil(o.IsGateway) {
		toSerialize["isGateway"] = o.IsGateway
	}
	if o.SyslogEnabled.IsSet() {
		toSerialize["syslogEnabled"] = o.SyslogEnabled.Get()
	}
	if !IsNil(o.IsStorageSwitch) {
		toSerialize["isStorageSwitch"] = o.IsStorageSwitch
	}
	if !IsNil(o.IsBorderDevice) {
		toSerialize["isBorderDevice"] = o.IsBorderDevice
	}
	if !IsNil(o.QuarantineVlan) {
		toSerialize["quarantineVlan"] = o.QuarantineVlan
	}
	if o.ManagementAddress.IsSet() {
		toSerialize["managementAddress"] = o.ManagementAddress.Get()
	}
	if o.ManagementPort.IsSet() {
		toSerialize["managementPort"] = o.ManagementPort.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.ManagementPassword.IsSet() {
		toSerialize["managementPassword"] = o.ManagementPassword.Get()
	}
	if o.ManagementAddressGateway.IsSet() {
		toSerialize["managementAddressGateway"] = o.ManagementAddressGateway.Get()
	}
	if o.ManagementAddressMask.IsSet() {
		toSerialize["managementAddressMask"] = o.ManagementAddressMask.Get()
	}
	if o.ManagementMAC.IsSet() {
		toSerialize["managementMAC"] = o.ManagementMAC.Get()
	}
	if o.LoopbackAddress.IsSet() {
		toSerialize["loopbackAddress"] = o.LoopbackAddress.Get()
	}
	if o.VtepAddress.IsSet() {
		toSerialize["vtepAddress"] = o.VtepAddress.Get()
	}
	if o.Asn.IsSet() {
		toSerialize["asn"] = o.Asn.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.DatacenterMeta.IsSet() {
		toSerialize["datacenterMeta"] = o.DatacenterMeta.Get()
	}
	if o.DatacenterRoom.IsSet() {
		toSerialize["datacenterRoom"] = o.DatacenterRoom.Get()
	}
	if o.DatacenterRack.IsSet() {
		toSerialize["datacenterRack"] = o.DatacenterRack.Get()
	}
	if o.RackPositionUpperUnit.IsSet() {
		toSerialize["rackPositionUpperUnit"] = o.RackPositionUpperUnit.Get()
	}
	if o.RackPositionLowerUnit.IsSet() {
		toSerialize["rackPositionLowerUnit"] = o.RackPositionLowerUnit.Get()
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.OrderIndex) {
		toSerialize["orderIndex"] = o.OrderIndex
	}
	if o.DefaultMtu.IsSet() {
		toSerialize["defaultMtu"] = o.DefaultMtu.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.RequiresOsInstall) {
		toSerialize["requiresOsInstall"] = o.RequiresOsInstall
	}
	if o.OverwriteWithHostnameFromFetchedSwitch.IsSet() {
		toSerialize["overwriteWithHostnameFromFetchedSwitch"] = o.OverwriteWithHostnameFromFetchedSwitch.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateNetworkDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"driver",
		"position",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNetworkDevice := _CreateNetworkDevice{}

	err = json.Unmarshal(data, &varCreateNetworkDevice)

	if err != nil {
		return err
	}

	*o = CreateNetworkDevice(varCreateNetworkDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "datacenterName")
		delete(additionalProperties, "identifierString")
		delete(additionalProperties, "chassisRackId")
		delete(additionalProperties, "chassisIdentifier")
		delete(additionalProperties, "driver")
		delete(additionalProperties, "position")
		delete(additionalProperties, "torLinkedId")
		delete(additionalProperties, "isGateway")
		delete(additionalProperties, "syslogEnabled")
		delete(additionalProperties, "isStorageSwitch")
		delete(additionalProperties, "isBorderDevice")
		delete(additionalProperties, "quarantineVlan")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "managementPort")
		delete(additionalProperties, "username")
		delete(additionalProperties, "managementPassword")
		delete(additionalProperties, "managementAddressGateway")
		delete(additionalProperties, "managementAddressMask")
		delete(additionalProperties, "managementMAC")
		delete(additionalProperties, "loopbackAddress")
		delete(additionalProperties, "vtepAddress")
		delete(additionalProperties, "asn")
		delete(additionalProperties, "description")
		delete(additionalProperties, "country")
		delete(additionalProperties, "city")
		delete(additionalProperties, "datacenterMeta")
		delete(additionalProperties, "datacenterRoom")
		delete(additionalProperties, "datacenterRack")
		delete(additionalProperties, "rackPositionUpperUnit")
		delete(additionalProperties, "rackPositionLowerUnit")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "orderIndex")
		delete(additionalProperties, "defaultMtu")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "requiresOsInstall")
		delete(additionalProperties, "overwriteWithHostnameFromFetchedSwitch")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNetworkDevice struct {
	value *CreateNetworkDevice
	isSet bool
}

func (v NullableCreateNetworkDevice) Get() *CreateNetworkDevice {
	return v.value
}

func (v *NullableCreateNetworkDevice) Set(val *CreateNetworkDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetworkDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetworkDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetworkDevice(val *CreateNetworkDevice) *NullableCreateNetworkDevice {
	return &NullableCreateNetworkDevice{value: val, isSet: true}
}

func (v NullableCreateNetworkDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetworkDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


