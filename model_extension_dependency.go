/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtensionDependency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionDependency{}

// ExtensionDependency struct for ExtensionDependency
type ExtensionDependency struct {
	// Metalsoft Controller version required by the extension.
	ControllerVersion string `json:"controllerVersion"`
	// List of OS templates required by the extension.
	OsTemplates []string `json:"osTemplates"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionDependency ExtensionDependency

// NewExtensionDependency instantiates a new ExtensionDependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionDependency(controllerVersion string, osTemplates []string) *ExtensionDependency {
	this := ExtensionDependency{}
	this.ControllerVersion = controllerVersion
	this.OsTemplates = osTemplates
	return &this
}

// NewExtensionDependencyWithDefaults instantiates a new ExtensionDependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionDependencyWithDefaults() *ExtensionDependency {
	this := ExtensionDependency{}
	return &this
}

// GetControllerVersion returns the ControllerVersion field value
func (o *ExtensionDependency) GetControllerVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ControllerVersion
}

// GetControllerVersionOk returns a tuple with the ControllerVersion field value
// and a boolean to check if the value has been set.
func (o *ExtensionDependency) GetControllerVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ControllerVersion, true
}

// SetControllerVersion sets field value
func (o *ExtensionDependency) SetControllerVersion(v string) {
	o.ControllerVersion = v
}

// GetOsTemplates returns the OsTemplates field value
func (o *ExtensionDependency) GetOsTemplates() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OsTemplates
}

// GetOsTemplatesOk returns a tuple with the OsTemplates field value
// and a boolean to check if the value has been set.
func (o *ExtensionDependency) GetOsTemplatesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsTemplates, true
}

// SetOsTemplates sets field value
func (o *ExtensionDependency) SetOsTemplates(v []string) {
	o.OsTemplates = v
}

func (o ExtensionDependency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionDependency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["controllerVersion"] = o.ControllerVersion
	toSerialize["osTemplates"] = o.OsTemplates

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionDependency) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"controllerVersion",
		"osTemplates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionDependency := _ExtensionDependency{}

	err = json.Unmarshal(data, &varExtensionDependency)

	if err != nil {
		return err
	}

	*o = ExtensionDependency(varExtensionDependency)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "controllerVersion")
		delete(additionalProperties, "osTemplates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionDependency struct {
	value *ExtensionDependency
	isSet bool
}

func (v NullableExtensionDependency) Get() *ExtensionDependency {
	return v.value
}

func (v *NullableExtensionDependency) Set(val *ExtensionDependency) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionDependency) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionDependency(val *ExtensionDependency) *NullableExtensionDependency {
	return &NullableExtensionDependency{value: val, isSet: true}
}

func (v NullableExtensionDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


