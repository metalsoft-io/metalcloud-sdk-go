/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStorage{}

// UpdateStorage struct for UpdateStorage
type UpdateStorage struct {
	// Options for the storage
	Options map[string]interface{} `json:"options,omitempty"`
	// Specifies if the storage is in maintenance
	InMaintenance *float32 `json:"inMaintenance,omitempty"`
	// Specifies if the storage is experimental
	IsExperimental *float32 `json:"isExperimental,omitempty"`
	// Specifies the drive priority
	DrivePriority *float32 `json:"drivePriority,omitempty"`
	// Specifies the shared drive priority
	SharedDrivePriority *float32 `json:"sharedDrivePriority,omitempty"`
	// Tags
	Tags []string `json:"tags,omitempty"`
	// Port group allocation order
	PortGroupAllocationOrder map[string]interface{} `json:"portGroupAllocationOrder,omitempty"`
	// Port group physical ports
	PortGroupPhysicalPorts map[string]interface{} `json:"portGroupPhysicalPorts,omitempty"`
	// Default IO limit policy
	DefaultIoLimitPolicy *string `json:"defaultIoLimitPolicy,omitempty"`
	// Array id
	ArrayId *string `json:"arrayId,omitempty"`
	// Director id
	DirectorId *string `json:"directorId,omitempty"`
	// S3 hostname
	S3Hostname *string `json:"s3Hostname,omitempty"`
	// S3 port
	S3Port *string `json:"s3Port,omitempty"`
	JobInfo *JobInfo `json:"jobInfo,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	// Username
	Username *string `json:"username,omitempty"`
	// The password to use.
	Password *string `json:"password,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateStorage UpdateStorage

// NewUpdateStorage instantiates a new UpdateStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStorage() *UpdateStorage {
	this := UpdateStorage{}
	return &this
}

// NewUpdateStorageWithDefaults instantiates a new UpdateStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStorageWithDefaults() *UpdateStorage {
	this := UpdateStorage{}
	return &this
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *UpdateStorage) GetOptions() map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *UpdateStorage) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *UpdateStorage) SetOptions(v map[string]interface{}) {
	o.Options = v
}

// GetInMaintenance returns the InMaintenance field value if set, zero value otherwise.
func (o *UpdateStorage) GetInMaintenance() float32 {
	if o == nil || IsNil(o.InMaintenance) {
		var ret float32
		return ret
	}
	return *o.InMaintenance
}

// GetInMaintenanceOk returns a tuple with the InMaintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetInMaintenanceOk() (*float32, bool) {
	if o == nil || IsNil(o.InMaintenance) {
		return nil, false
	}
	return o.InMaintenance, true
}

// HasInMaintenance returns a boolean if a field has been set.
func (o *UpdateStorage) HasInMaintenance() bool {
	if o != nil && !IsNil(o.InMaintenance) {
		return true
	}

	return false
}

// SetInMaintenance gets a reference to the given float32 and assigns it to the InMaintenance field.
func (o *UpdateStorage) SetInMaintenance(v float32) {
	o.InMaintenance = &v
}

// GetIsExperimental returns the IsExperimental field value if set, zero value otherwise.
func (o *UpdateStorage) GetIsExperimental() float32 {
	if o == nil || IsNil(o.IsExperimental) {
		var ret float32
		return ret
	}
	return *o.IsExperimental
}

// GetIsExperimentalOk returns a tuple with the IsExperimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetIsExperimentalOk() (*float32, bool) {
	if o == nil || IsNil(o.IsExperimental) {
		return nil, false
	}
	return o.IsExperimental, true
}

// HasIsExperimental returns a boolean if a field has been set.
func (o *UpdateStorage) HasIsExperimental() bool {
	if o != nil && !IsNil(o.IsExperimental) {
		return true
	}

	return false
}

// SetIsExperimental gets a reference to the given float32 and assigns it to the IsExperimental field.
func (o *UpdateStorage) SetIsExperimental(v float32) {
	o.IsExperimental = &v
}

// GetDrivePriority returns the DrivePriority field value if set, zero value otherwise.
func (o *UpdateStorage) GetDrivePriority() float32 {
	if o == nil || IsNil(o.DrivePriority) {
		var ret float32
		return ret
	}
	return *o.DrivePriority
}

// GetDrivePriorityOk returns a tuple with the DrivePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetDrivePriorityOk() (*float32, bool) {
	if o == nil || IsNil(o.DrivePriority) {
		return nil, false
	}
	return o.DrivePriority, true
}

// HasDrivePriority returns a boolean if a field has been set.
func (o *UpdateStorage) HasDrivePriority() bool {
	if o != nil && !IsNil(o.DrivePriority) {
		return true
	}

	return false
}

// SetDrivePriority gets a reference to the given float32 and assigns it to the DrivePriority field.
func (o *UpdateStorage) SetDrivePriority(v float32) {
	o.DrivePriority = &v
}

// GetSharedDrivePriority returns the SharedDrivePriority field value if set, zero value otherwise.
func (o *UpdateStorage) GetSharedDrivePriority() float32 {
	if o == nil || IsNil(o.SharedDrivePriority) {
		var ret float32
		return ret
	}
	return *o.SharedDrivePriority
}

// GetSharedDrivePriorityOk returns a tuple with the SharedDrivePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetSharedDrivePriorityOk() (*float32, bool) {
	if o == nil || IsNil(o.SharedDrivePriority) {
		return nil, false
	}
	return o.SharedDrivePriority, true
}

// HasSharedDrivePriority returns a boolean if a field has been set.
func (o *UpdateStorage) HasSharedDrivePriority() bool {
	if o != nil && !IsNil(o.SharedDrivePriority) {
		return true
	}

	return false
}

// SetSharedDrivePriority gets a reference to the given float32 and assigns it to the SharedDrivePriority field.
func (o *UpdateStorage) SetSharedDrivePriority(v float32) {
	o.SharedDrivePriority = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateStorage) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateStorage) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateStorage) SetTags(v []string) {
	o.Tags = v
}

// GetPortGroupAllocationOrder returns the PortGroupAllocationOrder field value if set, zero value otherwise.
func (o *UpdateStorage) GetPortGroupAllocationOrder() map[string]interface{} {
	if o == nil || IsNil(o.PortGroupAllocationOrder) {
		var ret map[string]interface{}
		return ret
	}
	return o.PortGroupAllocationOrder
}

// GetPortGroupAllocationOrderOk returns a tuple with the PortGroupAllocationOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetPortGroupAllocationOrderOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PortGroupAllocationOrder) {
		return map[string]interface{}{}, false
	}
	return o.PortGroupAllocationOrder, true
}

// HasPortGroupAllocationOrder returns a boolean if a field has been set.
func (o *UpdateStorage) HasPortGroupAllocationOrder() bool {
	if o != nil && !IsNil(o.PortGroupAllocationOrder) {
		return true
	}

	return false
}

// SetPortGroupAllocationOrder gets a reference to the given map[string]interface{} and assigns it to the PortGroupAllocationOrder field.
func (o *UpdateStorage) SetPortGroupAllocationOrder(v map[string]interface{}) {
	o.PortGroupAllocationOrder = v
}

// GetPortGroupPhysicalPorts returns the PortGroupPhysicalPorts field value if set, zero value otherwise.
func (o *UpdateStorage) GetPortGroupPhysicalPorts() map[string]interface{} {
	if o == nil || IsNil(o.PortGroupPhysicalPorts) {
		var ret map[string]interface{}
		return ret
	}
	return o.PortGroupPhysicalPorts
}

// GetPortGroupPhysicalPortsOk returns a tuple with the PortGroupPhysicalPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetPortGroupPhysicalPortsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PortGroupPhysicalPorts) {
		return map[string]interface{}{}, false
	}
	return o.PortGroupPhysicalPorts, true
}

// HasPortGroupPhysicalPorts returns a boolean if a field has been set.
func (o *UpdateStorage) HasPortGroupPhysicalPorts() bool {
	if o != nil && !IsNil(o.PortGroupPhysicalPorts) {
		return true
	}

	return false
}

// SetPortGroupPhysicalPorts gets a reference to the given map[string]interface{} and assigns it to the PortGroupPhysicalPorts field.
func (o *UpdateStorage) SetPortGroupPhysicalPorts(v map[string]interface{}) {
	o.PortGroupPhysicalPorts = v
}

// GetDefaultIoLimitPolicy returns the DefaultIoLimitPolicy field value if set, zero value otherwise.
func (o *UpdateStorage) GetDefaultIoLimitPolicy() string {
	if o == nil || IsNil(o.DefaultIoLimitPolicy) {
		var ret string
		return ret
	}
	return *o.DefaultIoLimitPolicy
}

// GetDefaultIoLimitPolicyOk returns a tuple with the DefaultIoLimitPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetDefaultIoLimitPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultIoLimitPolicy) {
		return nil, false
	}
	return o.DefaultIoLimitPolicy, true
}

// HasDefaultIoLimitPolicy returns a boolean if a field has been set.
func (o *UpdateStorage) HasDefaultIoLimitPolicy() bool {
	if o != nil && !IsNil(o.DefaultIoLimitPolicy) {
		return true
	}

	return false
}

// SetDefaultIoLimitPolicy gets a reference to the given string and assigns it to the DefaultIoLimitPolicy field.
func (o *UpdateStorage) SetDefaultIoLimitPolicy(v string) {
	o.DefaultIoLimitPolicy = &v
}

// GetArrayId returns the ArrayId field value if set, zero value otherwise.
func (o *UpdateStorage) GetArrayId() string {
	if o == nil || IsNil(o.ArrayId) {
		var ret string
		return ret
	}
	return *o.ArrayId
}

// GetArrayIdOk returns a tuple with the ArrayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetArrayIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArrayId) {
		return nil, false
	}
	return o.ArrayId, true
}

// HasArrayId returns a boolean if a field has been set.
func (o *UpdateStorage) HasArrayId() bool {
	if o != nil && !IsNil(o.ArrayId) {
		return true
	}

	return false
}

// SetArrayId gets a reference to the given string and assigns it to the ArrayId field.
func (o *UpdateStorage) SetArrayId(v string) {
	o.ArrayId = &v
}

// GetDirectorId returns the DirectorId field value if set, zero value otherwise.
func (o *UpdateStorage) GetDirectorId() string {
	if o == nil || IsNil(o.DirectorId) {
		var ret string
		return ret
	}
	return *o.DirectorId
}

// GetDirectorIdOk returns a tuple with the DirectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetDirectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.DirectorId) {
		return nil, false
	}
	return o.DirectorId, true
}

// HasDirectorId returns a boolean if a field has been set.
func (o *UpdateStorage) HasDirectorId() bool {
	if o != nil && !IsNil(o.DirectorId) {
		return true
	}

	return false
}

// SetDirectorId gets a reference to the given string and assigns it to the DirectorId field.
func (o *UpdateStorage) SetDirectorId(v string) {
	o.DirectorId = &v
}

// GetS3Hostname returns the S3Hostname field value if set, zero value otherwise.
func (o *UpdateStorage) GetS3Hostname() string {
	if o == nil || IsNil(o.S3Hostname) {
		var ret string
		return ret
	}
	return *o.S3Hostname
}

// GetS3HostnameOk returns a tuple with the S3Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetS3HostnameOk() (*string, bool) {
	if o == nil || IsNil(o.S3Hostname) {
		return nil, false
	}
	return o.S3Hostname, true
}

// HasS3Hostname returns a boolean if a field has been set.
func (o *UpdateStorage) HasS3Hostname() bool {
	if o != nil && !IsNil(o.S3Hostname) {
		return true
	}

	return false
}

// SetS3Hostname gets a reference to the given string and assigns it to the S3Hostname field.
func (o *UpdateStorage) SetS3Hostname(v string) {
	o.S3Hostname = &v
}

// GetS3Port returns the S3Port field value if set, zero value otherwise.
func (o *UpdateStorage) GetS3Port() string {
	if o == nil || IsNil(o.S3Port) {
		var ret string
		return ret
	}
	return *o.S3Port
}

// GetS3PortOk returns a tuple with the S3Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetS3PortOk() (*string, bool) {
	if o == nil || IsNil(o.S3Port) {
		return nil, false
	}
	return o.S3Port, true
}

// HasS3Port returns a boolean if a field has been set.
func (o *UpdateStorage) HasS3Port() bool {
	if o != nil && !IsNil(o.S3Port) {
		return true
	}

	return false
}

// SetS3Port gets a reference to the given string and assigns it to the S3Port field.
func (o *UpdateStorage) SetS3Port(v string) {
	o.S3Port = &v
}

// GetJobInfo returns the JobInfo field value if set, zero value otherwise.
func (o *UpdateStorage) GetJobInfo() JobInfo {
	if o == nil || IsNil(o.JobInfo) {
		var ret JobInfo
		return ret
	}
	return *o.JobInfo
}

// GetJobInfoOk returns a tuple with the JobInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetJobInfoOk() (*JobInfo, bool) {
	if o == nil || IsNil(o.JobInfo) {
		return nil, false
	}
	return o.JobInfo, true
}

// HasJobInfo returns a boolean if a field has been set.
func (o *UpdateStorage) HasJobInfo() bool {
	if o != nil && !IsNil(o.JobInfo) {
		return true
	}

	return false
}

// SetJobInfo gets a reference to the given JobInfo and assigns it to the JobInfo field.
func (o *UpdateStorage) SetJobInfo(v JobInfo) {
	o.JobInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *UpdateStorage) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *UpdateStorage) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *UpdateStorage) SetLinks(v []Link) {
	o.Links = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UpdateStorage) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateStorage) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UpdateStorage) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateStorage) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorage) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UpdateStorage) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateStorage) SetPassword(v string) {
	o.Password = &v
}

func (o UpdateStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.InMaintenance) {
		toSerialize["inMaintenance"] = o.InMaintenance
	}
	if !IsNil(o.IsExperimental) {
		toSerialize["isExperimental"] = o.IsExperimental
	}
	if !IsNil(o.DrivePriority) {
		toSerialize["drivePriority"] = o.DrivePriority
	}
	if !IsNil(o.SharedDrivePriority) {
		toSerialize["sharedDrivePriority"] = o.SharedDrivePriority
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.PortGroupAllocationOrder) {
		toSerialize["portGroupAllocationOrder"] = o.PortGroupAllocationOrder
	}
	if !IsNil(o.PortGroupPhysicalPorts) {
		toSerialize["portGroupPhysicalPorts"] = o.PortGroupPhysicalPorts
	}
	if !IsNil(o.DefaultIoLimitPolicy) {
		toSerialize["defaultIoLimitPolicy"] = o.DefaultIoLimitPolicy
	}
	if !IsNil(o.ArrayId) {
		toSerialize["arrayId"] = o.ArrayId
	}
	if !IsNil(o.DirectorId) {
		toSerialize["directorId"] = o.DirectorId
	}
	if !IsNil(o.S3Hostname) {
		toSerialize["s3Hostname"] = o.S3Hostname
	}
	if !IsNil(o.S3Port) {
		toSerialize["s3Port"] = o.S3Port
	}
	if !IsNil(o.JobInfo) {
		toSerialize["jobInfo"] = o.JobInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateStorage) UnmarshalJSON(data []byte) (err error) {
	varUpdateStorage := _UpdateStorage{}

	err = json.Unmarshal(data, &varUpdateStorage)

	if err != nil {
		return err
	}

	*o = UpdateStorage(varUpdateStorage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "options")
		delete(additionalProperties, "inMaintenance")
		delete(additionalProperties, "isExperimental")
		delete(additionalProperties, "drivePriority")
		delete(additionalProperties, "sharedDrivePriority")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "portGroupAllocationOrder")
		delete(additionalProperties, "portGroupPhysicalPorts")
		delete(additionalProperties, "defaultIoLimitPolicy")
		delete(additionalProperties, "arrayId")
		delete(additionalProperties, "directorId")
		delete(additionalProperties, "s3Hostname")
		delete(additionalProperties, "s3Port")
		delete(additionalProperties, "jobInfo")
		delete(additionalProperties, "links")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateStorage struct {
	value *UpdateStorage
	isSet bool
}

func (v NullableUpdateStorage) Get() *UpdateStorage {
	return v.value
}

func (v *NullableUpdateStorage) Set(val *UpdateStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStorage(val *UpdateStorage) *NullableUpdateStorage {
	return &NullableUpdateStorage{value: val, isSet: true}
}

func (v NullableUpdateStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


