/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInterfacesRedundancyGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInterfacesRedundancyGroup{}

// ServerInterfacesRedundancyGroup struct for ServerInterfacesRedundancyGroup
type ServerInterfacesRedundancyGroup struct {
	// The id of the server interfaces
	ServerInterfaceIds []float32 `json:"serverInterfaceIds"`
	// The redundancy group index
	RedundancyGroupIndex NullableFloat32 `json:"redundancyGroupIndex"`
	AdditionalProperties map[string]interface{}
}

type _ServerInterfacesRedundancyGroup ServerInterfacesRedundancyGroup

// NewServerInterfacesRedundancyGroup instantiates a new ServerInterfacesRedundancyGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInterfacesRedundancyGroup(serverInterfaceIds []float32, redundancyGroupIndex NullableFloat32) *ServerInterfacesRedundancyGroup {
	this := ServerInterfacesRedundancyGroup{}
	this.ServerInterfaceIds = serverInterfaceIds
	this.RedundancyGroupIndex = redundancyGroupIndex
	return &this
}

// NewServerInterfacesRedundancyGroupWithDefaults instantiates a new ServerInterfacesRedundancyGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInterfacesRedundancyGroupWithDefaults() *ServerInterfacesRedundancyGroup {
	this := ServerInterfacesRedundancyGroup{}
	return &this
}

// GetServerInterfaceIds returns the ServerInterfaceIds field value
func (o *ServerInterfacesRedundancyGroup) GetServerInterfaceIds() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.ServerInterfaceIds
}

// GetServerInterfaceIdsOk returns a tuple with the ServerInterfaceIds field value
// and a boolean to check if the value has been set.
func (o *ServerInterfacesRedundancyGroup) GetServerInterfaceIdsOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerInterfaceIds, true
}

// SetServerInterfaceIds sets field value
func (o *ServerInterfacesRedundancyGroup) SetServerInterfaceIds(v []float32) {
	o.ServerInterfaceIds = v
}

// GetRedundancyGroupIndex returns the RedundancyGroupIndex field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *ServerInterfacesRedundancyGroup) GetRedundancyGroupIndex() float32 {
	if o == nil || o.RedundancyGroupIndex.Get() == nil {
		var ret float32
		return ret
	}

	return *o.RedundancyGroupIndex.Get()
}

// GetRedundancyGroupIndexOk returns a tuple with the RedundancyGroupIndex field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerInterfacesRedundancyGroup) GetRedundancyGroupIndexOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedundancyGroupIndex.Get(), o.RedundancyGroupIndex.IsSet()
}

// SetRedundancyGroupIndex sets field value
func (o *ServerInterfacesRedundancyGroup) SetRedundancyGroupIndex(v float32) {
	o.RedundancyGroupIndex.Set(&v)
}

func (o ServerInterfacesRedundancyGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInterfacesRedundancyGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverInterfaceIds"] = o.ServerInterfaceIds
	toSerialize["redundancyGroupIndex"] = o.RedundancyGroupIndex.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInterfacesRedundancyGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverInterfaceIds",
		"redundancyGroupIndex",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInterfacesRedundancyGroup := _ServerInterfacesRedundancyGroup{}

	err = json.Unmarshal(data, &varServerInterfacesRedundancyGroup)

	if err != nil {
		return err
	}

	*o = ServerInterfacesRedundancyGroup(varServerInterfacesRedundancyGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverInterfaceIds")
		delete(additionalProperties, "redundancyGroupIndex")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInterfacesRedundancyGroup struct {
	value *ServerInterfacesRedundancyGroup
	isSet bool
}

func (v NullableServerInterfacesRedundancyGroup) Get() *ServerInterfacesRedundancyGroup {
	return v.value
}

func (v *NullableServerInterfacesRedundancyGroup) Set(val *ServerInterfacesRedundancyGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInterfacesRedundancyGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInterfacesRedundancyGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInterfacesRedundancyGroup(val *ServerInterfacesRedundancyGroup) *NullableServerInterfacesRedundancyGroup {
	return &NullableServerInterfacesRedundancyGroup{value: val, isSet: true}
}

func (v NullableServerInterfacesRedundancyGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInterfacesRedundancyGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


