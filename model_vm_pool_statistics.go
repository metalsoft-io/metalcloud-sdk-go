/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMPoolStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMPoolStatistics{}

// VMPoolStatistics struct for VMPoolStatistics
type VMPoolStatistics struct {
	// Total RAM in GB
	TotalRamGB float32 `json:"totalRamGB"`
	// Free RAM in GB
	FreeRamGB float32 `json:"freeRamGB"`
	// Used RAM in GB
	UsedRamGB float32 `json:"usedRamGB"`
	// Total disk space in GB
	TotalSpaceGB float32 `json:"totalSpaceGB"`
	// Used disk space in GB
	UsedSpaceGB float32 `json:"usedSpaceGB"`
	// Free disk space in GB
	FreeSpaceGB float32 `json:"freeSpaceGB"`
	AdditionalProperties map[string]interface{}
}

type _VMPoolStatistics VMPoolStatistics

// NewVMPoolStatistics instantiates a new VMPoolStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMPoolStatistics(totalRamGB float32, freeRamGB float32, usedRamGB float32, totalSpaceGB float32, usedSpaceGB float32, freeSpaceGB float32) *VMPoolStatistics {
	this := VMPoolStatistics{}
	this.TotalRamGB = totalRamGB
	this.FreeRamGB = freeRamGB
	this.UsedRamGB = usedRamGB
	this.TotalSpaceGB = totalSpaceGB
	this.UsedSpaceGB = usedSpaceGB
	this.FreeSpaceGB = freeSpaceGB
	return &this
}

// NewVMPoolStatisticsWithDefaults instantiates a new VMPoolStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMPoolStatisticsWithDefaults() *VMPoolStatistics {
	this := VMPoolStatistics{}
	return &this
}

// GetTotalRamGB returns the TotalRamGB field value
func (o *VMPoolStatistics) GetTotalRamGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalRamGB
}

// GetTotalRamGBOk returns a tuple with the TotalRamGB field value
// and a boolean to check if the value has been set.
func (o *VMPoolStatistics) GetTotalRamGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalRamGB, true
}

// SetTotalRamGB sets field value
func (o *VMPoolStatistics) SetTotalRamGB(v float32) {
	o.TotalRamGB = v
}

// GetFreeRamGB returns the FreeRamGB field value
func (o *VMPoolStatistics) GetFreeRamGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FreeRamGB
}

// GetFreeRamGBOk returns a tuple with the FreeRamGB field value
// and a boolean to check if the value has been set.
func (o *VMPoolStatistics) GetFreeRamGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreeRamGB, true
}

// SetFreeRamGB sets field value
func (o *VMPoolStatistics) SetFreeRamGB(v float32) {
	o.FreeRamGB = v
}

// GetUsedRamGB returns the UsedRamGB field value
func (o *VMPoolStatistics) GetUsedRamGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UsedRamGB
}

// GetUsedRamGBOk returns a tuple with the UsedRamGB field value
// and a boolean to check if the value has been set.
func (o *VMPoolStatistics) GetUsedRamGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedRamGB, true
}

// SetUsedRamGB sets field value
func (o *VMPoolStatistics) SetUsedRamGB(v float32) {
	o.UsedRamGB = v
}

// GetTotalSpaceGB returns the TotalSpaceGB field value
func (o *VMPoolStatistics) GetTotalSpaceGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalSpaceGB
}

// GetTotalSpaceGBOk returns a tuple with the TotalSpaceGB field value
// and a boolean to check if the value has been set.
func (o *VMPoolStatistics) GetTotalSpaceGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSpaceGB, true
}

// SetTotalSpaceGB sets field value
func (o *VMPoolStatistics) SetTotalSpaceGB(v float32) {
	o.TotalSpaceGB = v
}

// GetUsedSpaceGB returns the UsedSpaceGB field value
func (o *VMPoolStatistics) GetUsedSpaceGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UsedSpaceGB
}

// GetUsedSpaceGBOk returns a tuple with the UsedSpaceGB field value
// and a boolean to check if the value has been set.
func (o *VMPoolStatistics) GetUsedSpaceGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedSpaceGB, true
}

// SetUsedSpaceGB sets field value
func (o *VMPoolStatistics) SetUsedSpaceGB(v float32) {
	o.UsedSpaceGB = v
}

// GetFreeSpaceGB returns the FreeSpaceGB field value
func (o *VMPoolStatistics) GetFreeSpaceGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FreeSpaceGB
}

// GetFreeSpaceGBOk returns a tuple with the FreeSpaceGB field value
// and a boolean to check if the value has been set.
func (o *VMPoolStatistics) GetFreeSpaceGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreeSpaceGB, true
}

// SetFreeSpaceGB sets field value
func (o *VMPoolStatistics) SetFreeSpaceGB(v float32) {
	o.FreeSpaceGB = v
}

func (o VMPoolStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMPoolStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalRamGB"] = o.TotalRamGB
	toSerialize["freeRamGB"] = o.FreeRamGB
	toSerialize["usedRamGB"] = o.UsedRamGB
	toSerialize["totalSpaceGB"] = o.TotalSpaceGB
	toSerialize["usedSpaceGB"] = o.UsedSpaceGB
	toSerialize["freeSpaceGB"] = o.FreeSpaceGB

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMPoolStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalRamGB",
		"freeRamGB",
		"usedRamGB",
		"totalSpaceGB",
		"usedSpaceGB",
		"freeSpaceGB",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMPoolStatistics := _VMPoolStatistics{}

	err = json.Unmarshal(data, &varVMPoolStatistics)

	if err != nil {
		return err
	}

	*o = VMPoolStatistics(varVMPoolStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "totalRamGB")
		delete(additionalProperties, "freeRamGB")
		delete(additionalProperties, "usedRamGB")
		delete(additionalProperties, "totalSpaceGB")
		delete(additionalProperties, "usedSpaceGB")
		delete(additionalProperties, "freeSpaceGB")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMPoolStatistics struct {
	value *VMPoolStatistics
	isSet bool
}

func (v NullableVMPoolStatistics) Get() *VMPoolStatistics {
	return v.value
}

func (v *NullableVMPoolStatistics) Set(val *VMPoolStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableVMPoolStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableVMPoolStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMPoolStatistics(val *VMPoolStatistics) *NullableVMPoolStatistics {
	return &NullableVMPoolStatistics{value: val, isSet: true}
}

func (v NullableVMPoolStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMPoolStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


