/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the PermissionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionList{}

// PermissionList struct for PermissionList
type PermissionList struct {
	// List of permissions
	Permissions []Permission `json:"permissions"`
	AdditionalProperties map[string]interface{}
}

type _PermissionList PermissionList

// NewPermissionList instantiates a new PermissionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionList(permissions []Permission) *PermissionList {
	this := PermissionList{}
	this.Permissions = permissions
	return &this
}

// NewPermissionListWithDefaults instantiates a new PermissionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionListWithDefaults() *PermissionList {
	this := PermissionList{}
	return &this
}

// GetPermissions returns the Permissions field value
func (o *PermissionList) GetPermissions() []Permission {
	if o == nil {
		var ret []Permission
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *PermissionList) GetPermissionsOk() ([]Permission, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *PermissionList) SetPermissions(v []Permission) {
	o.Permissions = v
}

func (o PermissionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["permissions"] = o.Permissions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PermissionList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPermissionList := _PermissionList{}

	err = json.Unmarshal(data, &varPermissionList)

	if err != nil {
		return err
	}

	*o = PermissionList(varPermissionList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePermissionList struct {
	value *PermissionList
	isSet bool
}

func (v NullablePermissionList) Get() *PermissionList {
	return v.value
}

func (v *NullablePermissionList) Set(val *PermissionList) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionList) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionList(val *PermissionList) *NullablePermissionList {
	return &NullablePermissionList{value: val, isSet: true}
}

func (v NullablePermissionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


