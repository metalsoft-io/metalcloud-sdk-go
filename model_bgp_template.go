/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the BgpTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpTemplate{}

// BgpTemplate struct for BgpTemplate
type BgpTemplate struct {
	// Network type
	NetworkType string `json:"networkType"`
	// Network device driver
	NetworkDeviceDriver string `json:"networkDeviceDriver"`
	// Network device position
	NetworkDevicePosition string `json:"networkDevicePosition"`
	// Remote network device position
	RemoteNetworkDevicePosition string `json:"remoteNetworkDevicePosition"`
	// MLAG pair
	MlagPair float32 `json:"mlagPair"`
	// BGP numbering
	BgpNumbering string `json:"bgpNumbering"`
	// BGP link configuration
	BgpLinkConfiguration string `json:"bgpLinkConfiguration"`
	// Execution type
	ExecutionType string `json:"executionType"`
	// Library label for the BGP template
	LibraryLabel string `json:"libraryLabel"`
	// Preparation commands in base64 format. It should start with the necessary commands to start configuring the device. Example: sonic-cli configure terminal interface Eth1/1
	Preparation *string `json:"preparation,omitempty"`
	// Configuration commands in base64 format. It should start with the necessary commands to start configuring the device. Example: sonic-cli configure terminal interface Eth1/1
	Configuration string `json:"configuration"`
	// Entity creation timestamp
	CreatedTimestamp time.Time `json:"createdTimestamp"`
	// Entity last update timestamp
	UpdatedTimestamp time.Time `json:"updatedTimestamp"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	// BGP Template Id
	Id float32 `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _BgpTemplate BgpTemplate

// NewBgpTemplate instantiates a new BgpTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpTemplate(networkType string, networkDeviceDriver string, networkDevicePosition string, remoteNetworkDevicePosition string, mlagPair float32, bgpNumbering string, bgpLinkConfiguration string, executionType string, libraryLabel string, configuration string, createdTimestamp time.Time, updatedTimestamp time.Time, id float32) *BgpTemplate {
	this := BgpTemplate{}
	this.NetworkType = networkType
	this.NetworkDeviceDriver = networkDeviceDriver
	this.NetworkDevicePosition = networkDevicePosition
	this.RemoteNetworkDevicePosition = remoteNetworkDevicePosition
	this.MlagPair = mlagPair
	this.BgpNumbering = bgpNumbering
	this.BgpLinkConfiguration = bgpLinkConfiguration
	this.ExecutionType = executionType
	this.LibraryLabel = libraryLabel
	this.Configuration = configuration
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.Id = id
	return &this
}

// NewBgpTemplateWithDefaults instantiates a new BgpTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpTemplateWithDefaults() *BgpTemplate {
	this := BgpTemplate{}
	return &this
}

// GetNetworkType returns the NetworkType field value
func (o *BgpTemplate) GetNetworkType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetNetworkTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkType, true
}

// SetNetworkType sets field value
func (o *BgpTemplate) SetNetworkType(v string) {
	o.NetworkType = v
}

// GetNetworkDeviceDriver returns the NetworkDeviceDriver field value
func (o *BgpTemplate) GetNetworkDeviceDriver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDeviceDriver
}

// GetNetworkDeviceDriverOk returns a tuple with the NetworkDeviceDriver field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetNetworkDeviceDriverOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDeviceDriver, true
}

// SetNetworkDeviceDriver sets field value
func (o *BgpTemplate) SetNetworkDeviceDriver(v string) {
	o.NetworkDeviceDriver = v
}

// GetNetworkDevicePosition returns the NetworkDevicePosition field value
func (o *BgpTemplate) GetNetworkDevicePosition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDevicePosition
}

// GetNetworkDevicePositionOk returns a tuple with the NetworkDevicePosition field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetNetworkDevicePositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDevicePosition, true
}

// SetNetworkDevicePosition sets field value
func (o *BgpTemplate) SetNetworkDevicePosition(v string) {
	o.NetworkDevicePosition = v
}

// GetRemoteNetworkDevicePosition returns the RemoteNetworkDevicePosition field value
func (o *BgpTemplate) GetRemoteNetworkDevicePosition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteNetworkDevicePosition
}

// GetRemoteNetworkDevicePositionOk returns a tuple with the RemoteNetworkDevicePosition field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetRemoteNetworkDevicePositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteNetworkDevicePosition, true
}

// SetRemoteNetworkDevicePosition sets field value
func (o *BgpTemplate) SetRemoteNetworkDevicePosition(v string) {
	o.RemoteNetworkDevicePosition = v
}

// GetMlagPair returns the MlagPair field value
func (o *BgpTemplate) GetMlagPair() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MlagPair
}

// GetMlagPairOk returns a tuple with the MlagPair field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetMlagPairOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MlagPair, true
}

// SetMlagPair sets field value
func (o *BgpTemplate) SetMlagPair(v float32) {
	o.MlagPair = v
}

// GetBgpNumbering returns the BgpNumbering field value
func (o *BgpTemplate) GetBgpNumbering() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BgpNumbering
}

// GetBgpNumberingOk returns a tuple with the BgpNumbering field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetBgpNumberingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BgpNumbering, true
}

// SetBgpNumbering sets field value
func (o *BgpTemplate) SetBgpNumbering(v string) {
	o.BgpNumbering = v
}

// GetBgpLinkConfiguration returns the BgpLinkConfiguration field value
func (o *BgpTemplate) GetBgpLinkConfiguration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BgpLinkConfiguration
}

// GetBgpLinkConfigurationOk returns a tuple with the BgpLinkConfiguration field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetBgpLinkConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BgpLinkConfiguration, true
}

// SetBgpLinkConfiguration sets field value
func (o *BgpTemplate) SetBgpLinkConfiguration(v string) {
	o.BgpLinkConfiguration = v
}

// GetExecutionType returns the ExecutionType field value
func (o *BgpTemplate) GetExecutionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutionType
}

// GetExecutionTypeOk returns a tuple with the ExecutionType field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetExecutionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionType, true
}

// SetExecutionType sets field value
func (o *BgpTemplate) SetExecutionType(v string) {
	o.ExecutionType = v
}

// GetLibraryLabel returns the LibraryLabel field value
func (o *BgpTemplate) GetLibraryLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LibraryLabel
}

// GetLibraryLabelOk returns a tuple with the LibraryLabel field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetLibraryLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LibraryLabel, true
}

// SetLibraryLabel sets field value
func (o *BgpTemplate) SetLibraryLabel(v string) {
	o.LibraryLabel = v
}

// GetPreparation returns the Preparation field value if set, zero value otherwise.
func (o *BgpTemplate) GetPreparation() string {
	if o == nil || IsNil(o.Preparation) {
		var ret string
		return ret
	}
	return *o.Preparation
}

// GetPreparationOk returns a tuple with the Preparation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetPreparationOk() (*string, bool) {
	if o == nil || IsNil(o.Preparation) {
		return nil, false
	}
	return o.Preparation, true
}

// HasPreparation returns a boolean if a field has been set.
func (o *BgpTemplate) HasPreparation() bool {
	if o != nil && !IsNil(o.Preparation) {
		return true
	}

	return false
}

// SetPreparation gets a reference to the given string and assigns it to the Preparation field.
func (o *BgpTemplate) SetPreparation(v string) {
	o.Preparation = &v
}

// GetConfiguration returns the Configuration field value
func (o *BgpTemplate) GetConfiguration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *BgpTemplate) SetConfiguration(v string) {
	o.Configuration = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *BgpTemplate) GetCreatedTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetCreatedTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *BgpTemplate) SetCreatedTimestamp(v time.Time) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *BgpTemplate) GetUpdatedTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetUpdatedTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *BgpTemplate) SetUpdatedTimestamp(v time.Time) {
	o.UpdatedTimestamp = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BgpTemplate) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BgpTemplate) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *BgpTemplate) SetLinks(v []Link) {
	o.Links = v
}

// GetId returns the Id field value
func (o *BgpTemplate) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BgpTemplate) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BgpTemplate) SetId(v float32) {
	o.Id = v
}

func (o BgpTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["networkType"] = o.NetworkType
	toSerialize["networkDeviceDriver"] = o.NetworkDeviceDriver
	toSerialize["networkDevicePosition"] = o.NetworkDevicePosition
	toSerialize["remoteNetworkDevicePosition"] = o.RemoteNetworkDevicePosition
	toSerialize["mlagPair"] = o.MlagPair
	toSerialize["bgpNumbering"] = o.BgpNumbering
	toSerialize["bgpLinkConfiguration"] = o.BgpLinkConfiguration
	toSerialize["executionType"] = o.ExecutionType
	toSerialize["libraryLabel"] = o.LibraryLabel
	if !IsNil(o.Preparation) {
		toSerialize["preparation"] = o.Preparation
	}
	toSerialize["configuration"] = o.Configuration
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpTemplate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"networkType",
		"networkDeviceDriver",
		"networkDevicePosition",
		"remoteNetworkDevicePosition",
		"mlagPair",
		"bgpNumbering",
		"bgpLinkConfiguration",
		"executionType",
		"libraryLabel",
		"configuration",
		"createdTimestamp",
		"updatedTimestamp",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBgpTemplate := _BgpTemplate{}

	err = json.Unmarshal(data, &varBgpTemplate)

	if err != nil {
		return err
	}

	*o = BgpTemplate(varBgpTemplate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "networkType")
		delete(additionalProperties, "networkDeviceDriver")
		delete(additionalProperties, "networkDevicePosition")
		delete(additionalProperties, "remoteNetworkDevicePosition")
		delete(additionalProperties, "mlagPair")
		delete(additionalProperties, "bgpNumbering")
		delete(additionalProperties, "bgpLinkConfiguration")
		delete(additionalProperties, "executionType")
		delete(additionalProperties, "libraryLabel")
		delete(additionalProperties, "preparation")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "links")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpTemplate struct {
	value *BgpTemplate
	isSet bool
}

func (v NullableBgpTemplate) Get() *BgpTemplate {
	return v.value
}

func (v *NullableBgpTemplate) Set(val *BgpTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpTemplate(val *BgpTemplate) *NullableBgpTemplate {
	return &NullableBgpTemplate{value: val, isSet: true}
}

func (v NullableBgpTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


