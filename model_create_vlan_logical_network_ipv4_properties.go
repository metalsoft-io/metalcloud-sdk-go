/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateVlanLogicalNetworkIpv4Properties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVlanLogicalNetworkIpv4Properties{}

// CreateVlanLogicalNetworkIpv4Properties struct for CreateVlanLogicalNetworkIpv4Properties
type CreateVlanLogicalNetworkIpv4Properties struct {
	SubnetAllocationStrategies []CreateIpv4SubnetAllocationStrategy `json:"subnetAllocationStrategies"`
	AdditionalProperties map[string]interface{}
}

type _CreateVlanLogicalNetworkIpv4Properties CreateVlanLogicalNetworkIpv4Properties

// NewCreateVlanLogicalNetworkIpv4Properties instantiates a new CreateVlanLogicalNetworkIpv4Properties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVlanLogicalNetworkIpv4Properties(subnetAllocationStrategies []CreateIpv4SubnetAllocationStrategy) *CreateVlanLogicalNetworkIpv4Properties {
	this := CreateVlanLogicalNetworkIpv4Properties{}
	this.SubnetAllocationStrategies = subnetAllocationStrategies
	return &this
}

// NewCreateVlanLogicalNetworkIpv4PropertiesWithDefaults instantiates a new CreateVlanLogicalNetworkIpv4Properties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVlanLogicalNetworkIpv4PropertiesWithDefaults() *CreateVlanLogicalNetworkIpv4Properties {
	this := CreateVlanLogicalNetworkIpv4Properties{}
	return &this
}

// GetSubnetAllocationStrategies returns the SubnetAllocationStrategies field value
func (o *CreateVlanLogicalNetworkIpv4Properties) GetSubnetAllocationStrategies() []CreateIpv4SubnetAllocationStrategy {
	if o == nil {
		var ret []CreateIpv4SubnetAllocationStrategy
		return ret
	}

	return o.SubnetAllocationStrategies
}

// GetSubnetAllocationStrategiesOk returns a tuple with the SubnetAllocationStrategies field value
// and a boolean to check if the value has been set.
func (o *CreateVlanLogicalNetworkIpv4Properties) GetSubnetAllocationStrategiesOk() ([]CreateIpv4SubnetAllocationStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubnetAllocationStrategies, true
}

// SetSubnetAllocationStrategies sets field value
func (o *CreateVlanLogicalNetworkIpv4Properties) SetSubnetAllocationStrategies(v []CreateIpv4SubnetAllocationStrategy) {
	o.SubnetAllocationStrategies = v
}

func (o CreateVlanLogicalNetworkIpv4Properties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVlanLogicalNetworkIpv4Properties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subnetAllocationStrategies"] = o.SubnetAllocationStrategies

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateVlanLogicalNetworkIpv4Properties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnetAllocationStrategies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVlanLogicalNetworkIpv4Properties := _CreateVlanLogicalNetworkIpv4Properties{}

	err = json.Unmarshal(data, &varCreateVlanLogicalNetworkIpv4Properties)

	if err != nil {
		return err
	}

	*o = CreateVlanLogicalNetworkIpv4Properties(varCreateVlanLogicalNetworkIpv4Properties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subnetAllocationStrategies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateVlanLogicalNetworkIpv4Properties struct {
	value *CreateVlanLogicalNetworkIpv4Properties
	isSet bool
}

func (v NullableCreateVlanLogicalNetworkIpv4Properties) Get() *CreateVlanLogicalNetworkIpv4Properties {
	return v.value
}

func (v *NullableCreateVlanLogicalNetworkIpv4Properties) Set(val *CreateVlanLogicalNetworkIpv4Properties) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVlanLogicalNetworkIpv4Properties) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVlanLogicalNetworkIpv4Properties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVlanLogicalNetworkIpv4Properties(val *CreateVlanLogicalNetworkIpv4Properties) *NullableCreateVlanLogicalNetworkIpv4Properties {
	return &NullableCreateVlanLogicalNetworkIpv4Properties{value: val, isSet: true}
}

func (v NullableCreateVlanLogicalNetworkIpv4Properties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVlanLogicalNetworkIpv4Properties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


