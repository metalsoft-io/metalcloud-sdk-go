/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceInterfaceNetworkVariables type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceInterfaceNetworkVariables{}

// InstanceInterfaceNetworkVariables struct for InstanceInterfaceNetworkVariables
type InstanceInterfaceNetworkVariables struct {
	InterfaceType InstanceInterfaceType `json:"interfaceType"`
	LogicalNetworkId *float32 `json:"logicalNetworkId,omitempty"`
	TypeInterfaceId float32 `json:"typeInterfaceId"`
	MacAddress *string `json:"macAddress,omitempty"`
	Mtu *float32 `json:"mtu,omitempty"`
	VlanId *float32 `json:"vlanId,omitempty"`
	Ipv4Addresses []InstanceInterfaceIpv4AddressVariables `json:"ipv4Addresses,omitempty"`
	Ipv6Addresses []InstanceInterfaceIpv6AddressVariables `json:"ipv6Addresses,omitempty"`
	Routes []InstanceInterfaceRouteVariables `json:"routes,omitempty"`
	Members []InstanceInterfaceMemberVariables `json:"members,omitempty"`
	Links []InstanceInterfaceLinkVariables `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InstanceInterfaceNetworkVariables InstanceInterfaceNetworkVariables

// NewInstanceInterfaceNetworkVariables instantiates a new InstanceInterfaceNetworkVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceInterfaceNetworkVariables(interfaceType InstanceInterfaceType, typeInterfaceId float32) *InstanceInterfaceNetworkVariables {
	this := InstanceInterfaceNetworkVariables{}
	this.InterfaceType = interfaceType
	this.TypeInterfaceId = typeInterfaceId
	return &this
}

// NewInstanceInterfaceNetworkVariablesWithDefaults instantiates a new InstanceInterfaceNetworkVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceInterfaceNetworkVariablesWithDefaults() *InstanceInterfaceNetworkVariables {
	this := InstanceInterfaceNetworkVariables{}
	return &this
}

// GetInterfaceType returns the InterfaceType field value
func (o *InstanceInterfaceNetworkVariables) GetInterfaceType() InstanceInterfaceType {
	if o == nil {
		var ret InstanceInterfaceType
		return ret
	}

	return o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetInterfaceTypeOk() (*InstanceInterfaceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterfaceType, true
}

// SetInterfaceType sets field value
func (o *InstanceInterfaceNetworkVariables) SetInterfaceType(v InstanceInterfaceType) {
	o.InterfaceType = v
}

// GetLogicalNetworkId returns the LogicalNetworkId field value if set, zero value otherwise.
func (o *InstanceInterfaceNetworkVariables) GetLogicalNetworkId() float32 {
	if o == nil || IsNil(o.LogicalNetworkId) {
		var ret float32
		return ret
	}
	return *o.LogicalNetworkId
}

// GetLogicalNetworkIdOk returns a tuple with the LogicalNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetLogicalNetworkIdOk() (*float32, bool) {
	if o == nil || IsNil(o.LogicalNetworkId) {
		return nil, false
	}
	return o.LogicalNetworkId, true
}

// HasLogicalNetworkId returns a boolean if a field has been set.
func (o *InstanceInterfaceNetworkVariables) HasLogicalNetworkId() bool {
	if o != nil && !IsNil(o.LogicalNetworkId) {
		return true
	}

	return false
}

// SetLogicalNetworkId gets a reference to the given float32 and assigns it to the LogicalNetworkId field.
func (o *InstanceInterfaceNetworkVariables) SetLogicalNetworkId(v float32) {
	o.LogicalNetworkId = &v
}

// GetTypeInterfaceId returns the TypeInterfaceId field value
func (o *InstanceInterfaceNetworkVariables) GetTypeInterfaceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TypeInterfaceId
}

// GetTypeInterfaceIdOk returns a tuple with the TypeInterfaceId field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetTypeInterfaceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeInterfaceId, true
}

// SetTypeInterfaceId sets field value
func (o *InstanceInterfaceNetworkVariables) SetTypeInterfaceId(v float32) {
	o.TypeInterfaceId = v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *InstanceInterfaceNetworkVariables) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *InstanceInterfaceNetworkVariables) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *InstanceInterfaceNetworkVariables) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *InstanceInterfaceNetworkVariables) GetMtu() float32 {
	if o == nil || IsNil(o.Mtu) {
		var ret float32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetMtuOk() (*float32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *InstanceInterfaceNetworkVariables) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given float32 and assigns it to the Mtu field.
func (o *InstanceInterfaceNetworkVariables) SetMtu(v float32) {
	o.Mtu = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *InstanceInterfaceNetworkVariables) GetVlanId() float32 {
	if o == nil || IsNil(o.VlanId) {
		var ret float32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetVlanIdOk() (*float32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *InstanceInterfaceNetworkVariables) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given float32 and assigns it to the VlanId field.
func (o *InstanceInterfaceNetworkVariables) SetVlanId(v float32) {
	o.VlanId = &v
}

// GetIpv4Addresses returns the Ipv4Addresses field value if set, zero value otherwise.
func (o *InstanceInterfaceNetworkVariables) GetIpv4Addresses() []InstanceInterfaceIpv4AddressVariables {
	if o == nil || IsNil(o.Ipv4Addresses) {
		var ret []InstanceInterfaceIpv4AddressVariables
		return ret
	}
	return o.Ipv4Addresses
}

// GetIpv4AddressesOk returns a tuple with the Ipv4Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetIpv4AddressesOk() ([]InstanceInterfaceIpv4AddressVariables, bool) {
	if o == nil || IsNil(o.Ipv4Addresses) {
		return nil, false
	}
	return o.Ipv4Addresses, true
}

// HasIpv4Addresses returns a boolean if a field has been set.
func (o *InstanceInterfaceNetworkVariables) HasIpv4Addresses() bool {
	if o != nil && !IsNil(o.Ipv4Addresses) {
		return true
	}

	return false
}

// SetIpv4Addresses gets a reference to the given []InstanceInterfaceIpv4AddressVariables and assigns it to the Ipv4Addresses field.
func (o *InstanceInterfaceNetworkVariables) SetIpv4Addresses(v []InstanceInterfaceIpv4AddressVariables) {
	o.Ipv4Addresses = v
}

// GetIpv6Addresses returns the Ipv6Addresses field value if set, zero value otherwise.
func (o *InstanceInterfaceNetworkVariables) GetIpv6Addresses() []InstanceInterfaceIpv6AddressVariables {
	if o == nil || IsNil(o.Ipv6Addresses) {
		var ret []InstanceInterfaceIpv6AddressVariables
		return ret
	}
	return o.Ipv6Addresses
}

// GetIpv6AddressesOk returns a tuple with the Ipv6Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetIpv6AddressesOk() ([]InstanceInterfaceIpv6AddressVariables, bool) {
	if o == nil || IsNil(o.Ipv6Addresses) {
		return nil, false
	}
	return o.Ipv6Addresses, true
}

// HasIpv6Addresses returns a boolean if a field has been set.
func (o *InstanceInterfaceNetworkVariables) HasIpv6Addresses() bool {
	if o != nil && !IsNil(o.Ipv6Addresses) {
		return true
	}

	return false
}

// SetIpv6Addresses gets a reference to the given []InstanceInterfaceIpv6AddressVariables and assigns it to the Ipv6Addresses field.
func (o *InstanceInterfaceNetworkVariables) SetIpv6Addresses(v []InstanceInterfaceIpv6AddressVariables) {
	o.Ipv6Addresses = v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *InstanceInterfaceNetworkVariables) GetRoutes() []InstanceInterfaceRouteVariables {
	if o == nil || IsNil(o.Routes) {
		var ret []InstanceInterfaceRouteVariables
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetRoutesOk() ([]InstanceInterfaceRouteVariables, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *InstanceInterfaceNetworkVariables) HasRoutes() bool {
	if o != nil && !IsNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []InstanceInterfaceRouteVariables and assigns it to the Routes field.
func (o *InstanceInterfaceNetworkVariables) SetRoutes(v []InstanceInterfaceRouteVariables) {
	o.Routes = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *InstanceInterfaceNetworkVariables) GetMembers() []InstanceInterfaceMemberVariables {
	if o == nil || IsNil(o.Members) {
		var ret []InstanceInterfaceMemberVariables
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetMembersOk() ([]InstanceInterfaceMemberVariables, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *InstanceInterfaceNetworkVariables) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []InstanceInterfaceMemberVariables and assigns it to the Members field.
func (o *InstanceInterfaceNetworkVariables) SetMembers(v []InstanceInterfaceMemberVariables) {
	o.Members = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *InstanceInterfaceNetworkVariables) GetLinks() []InstanceInterfaceLinkVariables {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceInterfaceLinkVariables
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceNetworkVariables) GetLinksOk() ([]InstanceInterfaceLinkVariables, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *InstanceInterfaceNetworkVariables) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceInterfaceLinkVariables and assigns it to the Links field.
func (o *InstanceInterfaceNetworkVariables) SetLinks(v []InstanceInterfaceLinkVariables) {
	o.Links = v
}

func (o InstanceInterfaceNetworkVariables) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceInterfaceNetworkVariables) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interfaceType"] = o.InterfaceType
	if !IsNil(o.LogicalNetworkId) {
		toSerialize["logicalNetworkId"] = o.LogicalNetworkId
	}
	toSerialize["typeInterfaceId"] = o.TypeInterfaceId
	if !IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlanId"] = o.VlanId
	}
	if !IsNil(o.Ipv4Addresses) {
		toSerialize["ipv4Addresses"] = o.Ipv4Addresses
	}
	if !IsNil(o.Ipv6Addresses) {
		toSerialize["ipv6Addresses"] = o.Ipv6Addresses
	}
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceInterfaceNetworkVariables) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interfaceType",
		"typeInterfaceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceInterfaceNetworkVariables := _InstanceInterfaceNetworkVariables{}

	err = json.Unmarshal(data, &varInstanceInterfaceNetworkVariables)

	if err != nil {
		return err
	}

	*o = InstanceInterfaceNetworkVariables(varInstanceInterfaceNetworkVariables)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "interfaceType")
		delete(additionalProperties, "logicalNetworkId")
		delete(additionalProperties, "typeInterfaceId")
		delete(additionalProperties, "macAddress")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "vlanId")
		delete(additionalProperties, "ipv4Addresses")
		delete(additionalProperties, "ipv6Addresses")
		delete(additionalProperties, "routes")
		delete(additionalProperties, "members")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceInterfaceNetworkVariables struct {
	value *InstanceInterfaceNetworkVariables
	isSet bool
}

func (v NullableInstanceInterfaceNetworkVariables) Get() *InstanceInterfaceNetworkVariables {
	return v.value
}

func (v *NullableInstanceInterfaceNetworkVariables) Set(val *InstanceInterfaceNetworkVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceInterfaceNetworkVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceInterfaceNetworkVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceInterfaceNetworkVariables(val *InstanceInterfaceNetworkVariables) *NullableInstanceInterfaceNetworkVariables {
	return &NullableInstanceInterfaceNetworkVariables{value: val, isSet: true}
}

func (v NullableInstanceInterfaceNetworkVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceInterfaceNetworkVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


