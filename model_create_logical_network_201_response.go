/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// CreateLogicalNetwork201Response - struct for CreateLogicalNetwork201Response
type CreateLogicalNetwork201Response struct {
	VlanLogicalNetwork *VlanLogicalNetwork
	VxlanLogicalNetwork *VxlanLogicalNetwork
}

// VlanLogicalNetworkAsCreateLogicalNetwork201Response is a convenience function that returns VlanLogicalNetwork wrapped in CreateLogicalNetwork201Response
func VlanLogicalNetworkAsCreateLogicalNetwork201Response(v *VlanLogicalNetwork) CreateLogicalNetwork201Response {
	return CreateLogicalNetwork201Response{
		VlanLogicalNetwork: v,
	}
}

// VxlanLogicalNetworkAsCreateLogicalNetwork201Response is a convenience function that returns VxlanLogicalNetwork wrapped in CreateLogicalNetwork201Response
func VxlanLogicalNetworkAsCreateLogicalNetwork201Response(v *VxlanLogicalNetwork) CreateLogicalNetwork201Response {
	return CreateLogicalNetwork201Response{
		VxlanLogicalNetwork: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateLogicalNetwork201Response) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'VlanLogicalNetwork'
	if jsonDict["kind"] == "VlanLogicalNetwork" {
		// try to unmarshal JSON data into VlanLogicalNetwork
		err = json.Unmarshal(data, &dst.VlanLogicalNetwork)
		if err == nil {
			return nil // data stored in dst.VlanLogicalNetwork, return on the first match
		} else {
			dst.VlanLogicalNetwork = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetwork201Response as VlanLogicalNetwork: %s", err.Error())
		}
	}

	// check if the discriminator value is 'VxlanLogicalNetwork'
	if jsonDict["kind"] == "VxlanLogicalNetwork" {
		// try to unmarshal JSON data into VxlanLogicalNetwork
		err = json.Unmarshal(data, &dst.VxlanLogicalNetwork)
		if err == nil {
			return nil // data stored in dst.VxlanLogicalNetwork, return on the first match
		} else {
			dst.VxlanLogicalNetwork = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetwork201Response as VxlanLogicalNetwork: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateLogicalNetwork201Response) MarshalJSON() ([]byte, error) {
	if src.VlanLogicalNetwork != nil {
		return json.Marshal(&src.VlanLogicalNetwork)
	}

	if src.VxlanLogicalNetwork != nil {
		return json.Marshal(&src.VxlanLogicalNetwork)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateLogicalNetwork201Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VlanLogicalNetwork != nil {
		return obj.VlanLogicalNetwork
	}

	if obj.VxlanLogicalNetwork != nil {
		return obj.VxlanLogicalNetwork
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateLogicalNetwork201Response) GetActualInstanceValue() (interface{}) {
	if obj.VlanLogicalNetwork != nil {
		return *obj.VlanLogicalNetwork
	}

	if obj.VxlanLogicalNetwork != nil {
		return *obj.VxlanLogicalNetwork
	}

	// all schemas are nil
	return nil
}

type NullableCreateLogicalNetwork201Response struct {
	value *CreateLogicalNetwork201Response
	isSet bool
}

func (v NullableCreateLogicalNetwork201Response) Get() *CreateLogicalNetwork201Response {
	return v.value
}

func (v *NullableCreateLogicalNetwork201Response) Set(val *CreateLogicalNetwork201Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLogicalNetwork201Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLogicalNetwork201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLogicalNetwork201Response(val *CreateLogicalNetwork201Response) *NullableCreateLogicalNetwork201Response {
	return &NullableCreateLogicalNetwork201Response{value: val, isSet: true}
}

func (v NullableCreateLogicalNetwork201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLogicalNetwork201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


