/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMDisk{}

// VMDisk struct for VMDisk
type VMDisk struct {
	// VM ID
	Id float32 `json:"id"`
	// VM ID
	VmId float32 `json:"vmId"`
	// Name of the VM Disk datastore
	Datastore string `json:"datastore"`
	// Size of the VM Disk in GB
	SizeGB float32 `json:"sizeGB"`
	AdditionalProperties map[string]interface{}
}

type _VMDisk VMDisk

// NewVMDisk instantiates a new VMDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMDisk(id float32, vmId float32, datastore string, sizeGB float32) *VMDisk {
	this := VMDisk{}
	this.Id = id
	this.VmId = vmId
	this.Datastore = datastore
	this.SizeGB = sizeGB
	return &this
}

// NewVMDiskWithDefaults instantiates a new VMDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMDiskWithDefaults() *VMDisk {
	this := VMDisk{}
	return &this
}

// GetId returns the Id field value
func (o *VMDisk) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VMDisk) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VMDisk) SetId(v float32) {
	o.Id = v
}

// GetVmId returns the VmId field value
func (o *VMDisk) GetVmId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VmId
}

// GetVmIdOk returns a tuple with the VmId field value
// and a boolean to check if the value has been set.
func (o *VMDisk) GetVmIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmId, true
}

// SetVmId sets field value
func (o *VMDisk) SetVmId(v float32) {
	o.VmId = v
}

// GetDatastore returns the Datastore field value
func (o *VMDisk) GetDatastore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value
// and a boolean to check if the value has been set.
func (o *VMDisk) GetDatastoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datastore, true
}

// SetDatastore sets field value
func (o *VMDisk) SetDatastore(v string) {
	o.Datastore = v
}

// GetSizeGB returns the SizeGB field value
func (o *VMDisk) GetSizeGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SizeGB
}

// GetSizeGBOk returns a tuple with the SizeGB field value
// and a boolean to check if the value has been set.
func (o *VMDisk) GetSizeGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeGB, true
}

// SetSizeGB sets field value
func (o *VMDisk) SetSizeGB(v float32) {
	o.SizeGB = v
}

func (o VMDisk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["vmId"] = o.VmId
	toSerialize["datastore"] = o.Datastore
	toSerialize["sizeGB"] = o.SizeGB

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMDisk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"vmId",
		"datastore",
		"sizeGB",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMDisk := _VMDisk{}

	err = json.Unmarshal(data, &varVMDisk)

	if err != nil {
		return err
	}

	*o = VMDisk(varVMDisk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "vmId")
		delete(additionalProperties, "datastore")
		delete(additionalProperties, "sizeGB")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMDisk struct {
	value *VMDisk
	isSet bool
}

func (v NullableVMDisk) Get() *VMDisk {
	return v.value
}

func (v *NullableVMDisk) Set(val *VMDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableVMDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableVMDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMDisk(val *VMDisk) *NullableVMDisk {
	return &NullableVMDisk{value: val, isSet: true}
}

func (v NullableVMDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


