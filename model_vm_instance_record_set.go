/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMInstanceRecordSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMInstanceRecordSet{}

// VMInstanceRecordSet struct for VMInstanceRecordSet
type VMInstanceRecordSet struct {
	// The ID of the VM Pool.
	VmPoolId float32 `json:"vmPoolId"`
	// The hostname of the VM Pool.
	Hostname string `json:"hostname"`
	// The username for the VM Instance.
	Username *string `json:"username,omitempty"`
	// The password for the VM Instance.
	Password *string `json:"password,omitempty"`
	// The certificate for the VM Instance.
	Certificate *string `json:"certificate,omitempty"`
	// The private key for the VM Instance.
	PrivateKey *string `json:"privateKey,omitempty"`
	// The operation to be performed on the VM Instance.
	Operation string `json:"operation"`
	// The name of the VM Instance.
	VmName string `json:"vm_name"`
	// The disk size of the VM Instance in GB.
	VmDiskGb float32 `json:"vm_disk_gb"`
	// The number of CPU cores for the VM Instance.
	VmCpuCores float32 `json:"vm_cpu_cores"`
	// The RAM size of the VM Instance in GB.
	VmRamGb float32 `json:"vm_ram_gb"`
	// The template used by the VM Instance.
	VmTemplate string `json:"vm_template"`
	// The network name of the VM Instance.
	VmNetName *string `json:"vm_net_name,omitempty"`
	// The vCenter internal network name of the VM Instance.
	VcenterNetNameInternal *string `json:"vcenter_net_name_internal,omitempty"`
	// The vCenter datacenter for the VM Instance.
	VcenterDatacenter *string `json:"vcenter_datacenter,omitempty"`
	// The vCenter cluster for the VM Instance.
	VcenterCluster *string `json:"vcenter_cluster,omitempty"`
	// The vCenter VM destination folder for the VM Instance.
	VcenterVmDestinationFolder *string `json:"vcenter_vm_destination_folder,omitempty"`
	// The vCenter datastore name for the VM Instance.
	VcenterDiskDatastore *string `json:"vcenter_disk_datastore,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VMInstanceRecordSet VMInstanceRecordSet

// NewVMInstanceRecordSet instantiates a new VMInstanceRecordSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMInstanceRecordSet(vmPoolId float32, hostname string, operation string, vmName string, vmDiskGb float32, vmCpuCores float32, vmRamGb float32, vmTemplate string) *VMInstanceRecordSet {
	this := VMInstanceRecordSet{}
	this.VmPoolId = vmPoolId
	this.Hostname = hostname
	this.Operation = operation
	this.VmName = vmName
	this.VmDiskGb = vmDiskGb
	this.VmCpuCores = vmCpuCores
	this.VmRamGb = vmRamGb
	this.VmTemplate = vmTemplate
	return &this
}

// NewVMInstanceRecordSetWithDefaults instantiates a new VMInstanceRecordSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMInstanceRecordSetWithDefaults() *VMInstanceRecordSet {
	this := VMInstanceRecordSet{}
	return &this
}

// GetVmPoolId returns the VmPoolId field value
func (o *VMInstanceRecordSet) GetVmPoolId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VmPoolId
}

// GetVmPoolIdOk returns a tuple with the VmPoolId field value
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVmPoolIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmPoolId, true
}

// SetVmPoolId sets field value
func (o *VMInstanceRecordSet) SetVmPoolId(v float32) {
	o.VmPoolId = v
}

// GetHostname returns the Hostname field value
func (o *VMInstanceRecordSet) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *VMInstanceRecordSet) SetHostname(v string) {
	o.Hostname = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *VMInstanceRecordSet) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *VMInstanceRecordSet) SetPassword(v string) {
	o.Password = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *VMInstanceRecordSet) SetCertificate(v string) {
	o.Certificate = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *VMInstanceRecordSet) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetOperation returns the Operation field value
func (o *VMInstanceRecordSet) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *VMInstanceRecordSet) SetOperation(v string) {
	o.Operation = v
}

// GetVmName returns the VmName field value
func (o *VMInstanceRecordSet) GetVmName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VmName
}

// GetVmNameOk returns a tuple with the VmName field value
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmName, true
}

// SetVmName sets field value
func (o *VMInstanceRecordSet) SetVmName(v string) {
	o.VmName = v
}

// GetVmDiskGb returns the VmDiskGb field value
func (o *VMInstanceRecordSet) GetVmDiskGb() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VmDiskGb
}

// GetVmDiskGbOk returns a tuple with the VmDiskGb field value
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVmDiskGbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmDiskGb, true
}

// SetVmDiskGb sets field value
func (o *VMInstanceRecordSet) SetVmDiskGb(v float32) {
	o.VmDiskGb = v
}

// GetVmCpuCores returns the VmCpuCores field value
func (o *VMInstanceRecordSet) GetVmCpuCores() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VmCpuCores
}

// GetVmCpuCoresOk returns a tuple with the VmCpuCores field value
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVmCpuCoresOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmCpuCores, true
}

// SetVmCpuCores sets field value
func (o *VMInstanceRecordSet) SetVmCpuCores(v float32) {
	o.VmCpuCores = v
}

// GetVmRamGb returns the VmRamGb field value
func (o *VMInstanceRecordSet) GetVmRamGb() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VmRamGb
}

// GetVmRamGbOk returns a tuple with the VmRamGb field value
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVmRamGbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmRamGb, true
}

// SetVmRamGb sets field value
func (o *VMInstanceRecordSet) SetVmRamGb(v float32) {
	o.VmRamGb = v
}

// GetVmTemplate returns the VmTemplate field value
func (o *VMInstanceRecordSet) GetVmTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VmTemplate
}

// GetVmTemplateOk returns a tuple with the VmTemplate field value
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVmTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmTemplate, true
}

// SetVmTemplate sets field value
func (o *VMInstanceRecordSet) SetVmTemplate(v string) {
	o.VmTemplate = v
}

// GetVmNetName returns the VmNetName field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetVmNetName() string {
	if o == nil || IsNil(o.VmNetName) {
		var ret string
		return ret
	}
	return *o.VmNetName
}

// GetVmNetNameOk returns a tuple with the VmNetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVmNetNameOk() (*string, bool) {
	if o == nil || IsNil(o.VmNetName) {
		return nil, false
	}
	return o.VmNetName, true
}

// HasVmNetName returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasVmNetName() bool {
	if o != nil && !IsNil(o.VmNetName) {
		return true
	}

	return false
}

// SetVmNetName gets a reference to the given string and assigns it to the VmNetName field.
func (o *VMInstanceRecordSet) SetVmNetName(v string) {
	o.VmNetName = &v
}

// GetVcenterNetNameInternal returns the VcenterNetNameInternal field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetVcenterNetNameInternal() string {
	if o == nil || IsNil(o.VcenterNetNameInternal) {
		var ret string
		return ret
	}
	return *o.VcenterNetNameInternal
}

// GetVcenterNetNameInternalOk returns a tuple with the VcenterNetNameInternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVcenterNetNameInternalOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterNetNameInternal) {
		return nil, false
	}
	return o.VcenterNetNameInternal, true
}

// HasVcenterNetNameInternal returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasVcenterNetNameInternal() bool {
	if o != nil && !IsNil(o.VcenterNetNameInternal) {
		return true
	}

	return false
}

// SetVcenterNetNameInternal gets a reference to the given string and assigns it to the VcenterNetNameInternal field.
func (o *VMInstanceRecordSet) SetVcenterNetNameInternal(v string) {
	o.VcenterNetNameInternal = &v
}

// GetVcenterDatacenter returns the VcenterDatacenter field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetVcenterDatacenter() string {
	if o == nil || IsNil(o.VcenterDatacenter) {
		var ret string
		return ret
	}
	return *o.VcenterDatacenter
}

// GetVcenterDatacenterOk returns a tuple with the VcenterDatacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVcenterDatacenterOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterDatacenter) {
		return nil, false
	}
	return o.VcenterDatacenter, true
}

// HasVcenterDatacenter returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasVcenterDatacenter() bool {
	if o != nil && !IsNil(o.VcenterDatacenter) {
		return true
	}

	return false
}

// SetVcenterDatacenter gets a reference to the given string and assigns it to the VcenterDatacenter field.
func (o *VMInstanceRecordSet) SetVcenterDatacenter(v string) {
	o.VcenterDatacenter = &v
}

// GetVcenterCluster returns the VcenterCluster field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetVcenterCluster() string {
	if o == nil || IsNil(o.VcenterCluster) {
		var ret string
		return ret
	}
	return *o.VcenterCluster
}

// GetVcenterClusterOk returns a tuple with the VcenterCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVcenterClusterOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterCluster) {
		return nil, false
	}
	return o.VcenterCluster, true
}

// HasVcenterCluster returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasVcenterCluster() bool {
	if o != nil && !IsNil(o.VcenterCluster) {
		return true
	}

	return false
}

// SetVcenterCluster gets a reference to the given string and assigns it to the VcenterCluster field.
func (o *VMInstanceRecordSet) SetVcenterCluster(v string) {
	o.VcenterCluster = &v
}

// GetVcenterVmDestinationFolder returns the VcenterVmDestinationFolder field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetVcenterVmDestinationFolder() string {
	if o == nil || IsNil(o.VcenterVmDestinationFolder) {
		var ret string
		return ret
	}
	return *o.VcenterVmDestinationFolder
}

// GetVcenterVmDestinationFolderOk returns a tuple with the VcenterVmDestinationFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVcenterVmDestinationFolderOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterVmDestinationFolder) {
		return nil, false
	}
	return o.VcenterVmDestinationFolder, true
}

// HasVcenterVmDestinationFolder returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasVcenterVmDestinationFolder() bool {
	if o != nil && !IsNil(o.VcenterVmDestinationFolder) {
		return true
	}

	return false
}

// SetVcenterVmDestinationFolder gets a reference to the given string and assigns it to the VcenterVmDestinationFolder field.
func (o *VMInstanceRecordSet) SetVcenterVmDestinationFolder(v string) {
	o.VcenterVmDestinationFolder = &v
}

// GetVcenterDiskDatastore returns the VcenterDiskDatastore field value if set, zero value otherwise.
func (o *VMInstanceRecordSet) GetVcenterDiskDatastore() string {
	if o == nil || IsNil(o.VcenterDiskDatastore) {
		var ret string
		return ret
	}
	return *o.VcenterDiskDatastore
}

// GetVcenterDiskDatastoreOk returns a tuple with the VcenterDiskDatastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceRecordSet) GetVcenterDiskDatastoreOk() (*string, bool) {
	if o == nil || IsNil(o.VcenterDiskDatastore) {
		return nil, false
	}
	return o.VcenterDiskDatastore, true
}

// HasVcenterDiskDatastore returns a boolean if a field has been set.
func (o *VMInstanceRecordSet) HasVcenterDiskDatastore() bool {
	if o != nil && !IsNil(o.VcenterDiskDatastore) {
		return true
	}

	return false
}

// SetVcenterDiskDatastore gets a reference to the given string and assigns it to the VcenterDiskDatastore field.
func (o *VMInstanceRecordSet) SetVcenterDiskDatastore(v string) {
	o.VcenterDiskDatastore = &v
}

func (o VMInstanceRecordSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMInstanceRecordSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vmPoolId"] = o.VmPoolId
	toSerialize["hostname"] = o.Hostname
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["privateKey"] = o.PrivateKey
	}
	toSerialize["operation"] = o.Operation
	toSerialize["vm_name"] = o.VmName
	toSerialize["vm_disk_gb"] = o.VmDiskGb
	toSerialize["vm_cpu_cores"] = o.VmCpuCores
	toSerialize["vm_ram_gb"] = o.VmRamGb
	toSerialize["vm_template"] = o.VmTemplate
	if !IsNil(o.VmNetName) {
		toSerialize["vm_net_name"] = o.VmNetName
	}
	if !IsNil(o.VcenterNetNameInternal) {
		toSerialize["vcenter_net_name_internal"] = o.VcenterNetNameInternal
	}
	if !IsNil(o.VcenterDatacenter) {
		toSerialize["vcenter_datacenter"] = o.VcenterDatacenter
	}
	if !IsNil(o.VcenterCluster) {
		toSerialize["vcenter_cluster"] = o.VcenterCluster
	}
	if !IsNil(o.VcenterVmDestinationFolder) {
		toSerialize["vcenter_vm_destination_folder"] = o.VcenterVmDestinationFolder
	}
	if !IsNil(o.VcenterDiskDatastore) {
		toSerialize["vcenter_disk_datastore"] = o.VcenterDiskDatastore
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMInstanceRecordSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vmPoolId",
		"hostname",
		"operation",
		"vm_name",
		"vm_disk_gb",
		"vm_cpu_cores",
		"vm_ram_gb",
		"vm_template",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMInstanceRecordSet := _VMInstanceRecordSet{}

	err = json.Unmarshal(data, &varVMInstanceRecordSet)

	if err != nil {
		return err
	}

	*o = VMInstanceRecordSet(varVMInstanceRecordSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vmPoolId")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "privateKey")
		delete(additionalProperties, "operation")
		delete(additionalProperties, "vm_name")
		delete(additionalProperties, "vm_disk_gb")
		delete(additionalProperties, "vm_cpu_cores")
		delete(additionalProperties, "vm_ram_gb")
		delete(additionalProperties, "vm_template")
		delete(additionalProperties, "vm_net_name")
		delete(additionalProperties, "vcenter_net_name_internal")
		delete(additionalProperties, "vcenter_datacenter")
		delete(additionalProperties, "vcenter_cluster")
		delete(additionalProperties, "vcenter_vm_destination_folder")
		delete(additionalProperties, "vcenter_disk_datastore")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMInstanceRecordSet struct {
	value *VMInstanceRecordSet
	isSet bool
}

func (v NullableVMInstanceRecordSet) Get() *VMInstanceRecordSet {
	return v.value
}

func (v *NullableVMInstanceRecordSet) Set(val *VMInstanceRecordSet) {
	v.value = val
	v.isSet = true
}

func (v NullableVMInstanceRecordSet) IsSet() bool {
	return v.isSet
}

func (v *NullableVMInstanceRecordSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMInstanceRecordSet(val *VMInstanceRecordSet) *NullableVMInstanceRecordSet {
	return &NullableVMInstanceRecordSet{value: val, isSet: true}
}

func (v NullableVMInstanceRecordSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMInstanceRecordSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


