/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the OSTemplateCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSTemplateCreate{}

// OSTemplateCreate struct for OSTemplateCreate
type OSTemplateCreate struct {
	// The OS template name
	Name string `json:"name"`
	// The OS template description
	Description *string `json:"description,omitempty"`
	// The OS template label
	Label *string `json:"label,omitempty"`
	Device OSTemplateDevice `json:"device"`
	Install OSTemplateInstall `json:"install"`
	ImageBuild OSTemplateImageBuild `json:"imageBuild"`
	Os OSTemplateOs `json:"os"`
	// The visibility of the OS template.                     If the visibility is PUBLIC any user can use the OS template in deployments                     If the visibility is PRIVATE the OS template can be used in deployments only                     by the user who created and/or updated the template
	Visibility *string `json:"visibility,omitempty"`
	// The tags associated with the OS template
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OSTemplateCreate OSTemplateCreate

// NewOSTemplateCreate instantiates a new OSTemplateCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSTemplateCreate(name string, device OSTemplateDevice, install OSTemplateInstall, imageBuild OSTemplateImageBuild, os OSTemplateOs) *OSTemplateCreate {
	this := OSTemplateCreate{}
	this.Name = name
	this.Device = device
	this.Install = install
	this.ImageBuild = imageBuild
	this.Os = os
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// NewOSTemplateCreateWithDefaults instantiates a new OSTemplateCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSTemplateCreateWithDefaults() *OSTemplateCreate {
	this := OSTemplateCreate{}
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// GetName returns the Name field value
func (o *OSTemplateCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OSTemplateCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OSTemplateCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OSTemplateCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSTemplateCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OSTemplateCreate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OSTemplateCreate) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *OSTemplateCreate) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSTemplateCreate) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *OSTemplateCreate) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *OSTemplateCreate) SetLabel(v string) {
	o.Label = &v
}

// GetDevice returns the Device field value
func (o *OSTemplateCreate) GetDevice() OSTemplateDevice {
	if o == nil {
		var ret OSTemplateDevice
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *OSTemplateCreate) GetDeviceOk() (*OSTemplateDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *OSTemplateCreate) SetDevice(v OSTemplateDevice) {
	o.Device = v
}

// GetInstall returns the Install field value
func (o *OSTemplateCreate) GetInstall() OSTemplateInstall {
	if o == nil {
		var ret OSTemplateInstall
		return ret
	}

	return o.Install
}

// GetInstallOk returns a tuple with the Install field value
// and a boolean to check if the value has been set.
func (o *OSTemplateCreate) GetInstallOk() (*OSTemplateInstall, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Install, true
}

// SetInstall sets field value
func (o *OSTemplateCreate) SetInstall(v OSTemplateInstall) {
	o.Install = v
}

// GetImageBuild returns the ImageBuild field value
func (o *OSTemplateCreate) GetImageBuild() OSTemplateImageBuild {
	if o == nil {
		var ret OSTemplateImageBuild
		return ret
	}

	return o.ImageBuild
}

// GetImageBuildOk returns a tuple with the ImageBuild field value
// and a boolean to check if the value has been set.
func (o *OSTemplateCreate) GetImageBuildOk() (*OSTemplateImageBuild, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageBuild, true
}

// SetImageBuild sets field value
func (o *OSTemplateCreate) SetImageBuild(v OSTemplateImageBuild) {
	o.ImageBuild = v
}

// GetOs returns the Os field value
func (o *OSTemplateCreate) GetOs() OSTemplateOs {
	if o == nil {
		var ret OSTemplateOs
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *OSTemplateCreate) GetOsOk() (*OSTemplateOs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *OSTemplateCreate) SetOs(v OSTemplateOs) {
	o.Os = v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *OSTemplateCreate) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSTemplateCreate) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *OSTemplateCreate) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *OSTemplateCreate) SetVisibility(v string) {
	o.Visibility = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *OSTemplateCreate) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSTemplateCreate) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *OSTemplateCreate) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *OSTemplateCreate) SetTags(v []string) {
	o.Tags = v
}

func (o OSTemplateCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSTemplateCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["device"] = o.Device
	toSerialize["install"] = o.Install
	toSerialize["imageBuild"] = o.ImageBuild
	toSerialize["os"] = o.Os
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OSTemplateCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"device",
		"install",
		"imageBuild",
		"os",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSTemplateCreate := _OSTemplateCreate{}

	err = json.Unmarshal(data, &varOSTemplateCreate)

	if err != nil {
		return err
	}

	*o = OSTemplateCreate(varOSTemplateCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "label")
		delete(additionalProperties, "device")
		delete(additionalProperties, "install")
		delete(additionalProperties, "imageBuild")
		delete(additionalProperties, "os")
		delete(additionalProperties, "visibility")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOSTemplateCreate struct {
	value *OSTemplateCreate
	isSet bool
}

func (v NullableOSTemplateCreate) Get() *OSTemplateCreate {
	return v.value
}

func (v *NullableOSTemplateCreate) Set(val *OSTemplateCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableOSTemplateCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableOSTemplateCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSTemplateCreate(val *OSTemplateCreate) *NullableOSTemplateCreate {
	return &NullableOSTemplateCreate{value: val, isSet: true}
}

func (v NullableOSTemplateCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSTemplateCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


