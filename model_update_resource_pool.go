/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateResourcePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateResourcePool{}

// UpdateResourcePool struct for UpdateResourcePool
type UpdateResourcePool struct {
	// Label of the Resource Pool
	ResourcePoolLabel *string `json:"resourcePoolLabel,omitempty"`
	// Description of the Resource Pool
	ResourcePoolDescription *string `json:"resourcePoolDescription,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateResourcePool UpdateResourcePool

// NewUpdateResourcePool instantiates a new UpdateResourcePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateResourcePool() *UpdateResourcePool {
	this := UpdateResourcePool{}
	return &this
}

// NewUpdateResourcePoolWithDefaults instantiates a new UpdateResourcePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateResourcePoolWithDefaults() *UpdateResourcePool {
	this := UpdateResourcePool{}
	return &this
}

// GetResourcePoolLabel returns the ResourcePoolLabel field value if set, zero value otherwise.
func (o *UpdateResourcePool) GetResourcePoolLabel() string {
	if o == nil || IsNil(o.ResourcePoolLabel) {
		var ret string
		return ret
	}
	return *o.ResourcePoolLabel
}

// GetResourcePoolLabelOk returns a tuple with the ResourcePoolLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateResourcePool) GetResourcePoolLabelOk() (*string, bool) {
	if o == nil || IsNil(o.ResourcePoolLabel) {
		return nil, false
	}
	return o.ResourcePoolLabel, true
}

// HasResourcePoolLabel returns a boolean if a field has been set.
func (o *UpdateResourcePool) HasResourcePoolLabel() bool {
	if o != nil && !IsNil(o.ResourcePoolLabel) {
		return true
	}

	return false
}

// SetResourcePoolLabel gets a reference to the given string and assigns it to the ResourcePoolLabel field.
func (o *UpdateResourcePool) SetResourcePoolLabel(v string) {
	o.ResourcePoolLabel = &v
}

// GetResourcePoolDescription returns the ResourcePoolDescription field value if set, zero value otherwise.
func (o *UpdateResourcePool) GetResourcePoolDescription() string {
	if o == nil || IsNil(o.ResourcePoolDescription) {
		var ret string
		return ret
	}
	return *o.ResourcePoolDescription
}

// GetResourcePoolDescriptionOk returns a tuple with the ResourcePoolDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateResourcePool) GetResourcePoolDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ResourcePoolDescription) {
		return nil, false
	}
	return o.ResourcePoolDescription, true
}

// HasResourcePoolDescription returns a boolean if a field has been set.
func (o *UpdateResourcePool) HasResourcePoolDescription() bool {
	if o != nil && !IsNil(o.ResourcePoolDescription) {
		return true
	}

	return false
}

// SetResourcePoolDescription gets a reference to the given string and assigns it to the ResourcePoolDescription field.
func (o *UpdateResourcePool) SetResourcePoolDescription(v string) {
	o.ResourcePoolDescription = &v
}

func (o UpdateResourcePool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateResourcePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourcePoolLabel) {
		toSerialize["resourcePoolLabel"] = o.ResourcePoolLabel
	}
	if !IsNil(o.ResourcePoolDescription) {
		toSerialize["resourcePoolDescription"] = o.ResourcePoolDescription
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateResourcePool) UnmarshalJSON(data []byte) (err error) {
	varUpdateResourcePool := _UpdateResourcePool{}

	err = json.Unmarshal(data, &varUpdateResourcePool)

	if err != nil {
		return err
	}

	*o = UpdateResourcePool(varUpdateResourcePool)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resourcePoolLabel")
		delete(additionalProperties, "resourcePoolDescription")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateResourcePool struct {
	value *UpdateResourcePool
	isSet bool
}

func (v NullableUpdateResourcePool) Get() *UpdateResourcePool {
	return v.value
}

func (v *NullableUpdateResourcePool) Set(val *UpdateResourcePool) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateResourcePool) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateResourcePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateResourcePool(val *UpdateResourcePool) *NullableUpdateResourcePool {
	return &NullableUpdateResourcePool{value: val, isSet: true}
}

func (v NullableUpdateResourcePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateResourcePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


