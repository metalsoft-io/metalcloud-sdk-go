/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerTypeStorageController type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTypeStorageController{}

// ServerTypeStorageController struct for ServerTypeStorageController
type ServerTypeStorageController struct {
	// The options for the storage controller.
	StorageControllerOptions ServerTypeStorageControllerOptions `json:"storageControllerOptions"`
	// The disks information for the server type.
	Disks []ServerTypeDisks `json:"disks"`
	AdditionalProperties map[string]interface{}
}

type _ServerTypeStorageController ServerTypeStorageController

// NewServerTypeStorageController instantiates a new ServerTypeStorageController object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTypeStorageController(storageControllerOptions ServerTypeStorageControllerOptions, disks []ServerTypeDisks) *ServerTypeStorageController {
	this := ServerTypeStorageController{}
	this.StorageControllerOptions = storageControllerOptions
	this.Disks = disks
	return &this
}

// NewServerTypeStorageControllerWithDefaults instantiates a new ServerTypeStorageController object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeStorageControllerWithDefaults() *ServerTypeStorageController {
	this := ServerTypeStorageController{}
	return &this
}

// GetStorageControllerOptions returns the StorageControllerOptions field value
func (o *ServerTypeStorageController) GetStorageControllerOptions() ServerTypeStorageControllerOptions {
	if o == nil {
		var ret ServerTypeStorageControllerOptions
		return ret
	}

	return o.StorageControllerOptions
}

// GetStorageControllerOptionsOk returns a tuple with the StorageControllerOptions field value
// and a boolean to check if the value has been set.
func (o *ServerTypeStorageController) GetStorageControllerOptionsOk() (*ServerTypeStorageControllerOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageControllerOptions, true
}

// SetStorageControllerOptions sets field value
func (o *ServerTypeStorageController) SetStorageControllerOptions(v ServerTypeStorageControllerOptions) {
	o.StorageControllerOptions = v
}

// GetDisks returns the Disks field value
func (o *ServerTypeStorageController) GetDisks() []ServerTypeDisks {
	if o == nil {
		var ret []ServerTypeDisks
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *ServerTypeStorageController) GetDisksOk() ([]ServerTypeDisks, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disks, true
}

// SetDisks sets field value
func (o *ServerTypeStorageController) SetDisks(v []ServerTypeDisks) {
	o.Disks = v
}

func (o ServerTypeStorageController) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTypeStorageController) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storageControllerOptions"] = o.StorageControllerOptions
	toSerialize["disks"] = o.Disks

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerTypeStorageController) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storageControllerOptions",
		"disks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerTypeStorageController := _ServerTypeStorageController{}

	err = json.Unmarshal(data, &varServerTypeStorageController)

	if err != nil {
		return err
	}

	*o = ServerTypeStorageController(varServerTypeStorageController)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "storageControllerOptions")
		delete(additionalProperties, "disks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerTypeStorageController struct {
	value *ServerTypeStorageController
	isSet bool
}

func (v NullableServerTypeStorageController) Get() *ServerTypeStorageController {
	return v.value
}

func (v *NullableServerTypeStorageController) Set(val *ServerTypeStorageController) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTypeStorageController) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTypeStorageController) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTypeStorageController(val *ServerTypeStorageController) *NullableServerTypeStorageController {
	return &NullableServerTypeStorageController{value: val, isSet: true}
}

func (v NullableServerTypeStorageController) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTypeStorageController) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


