/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the GenericMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenericMeta{}

// GenericMeta struct for GenericMeta
type GenericMeta struct {
	// List of tags representative for the associated product.
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GenericMeta GenericMeta

// NewGenericMeta instantiates a new GenericMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericMeta() *GenericMeta {
	this := GenericMeta{}
	return &this
}

// NewGenericMetaWithDefaults instantiates a new GenericMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericMetaWithDefaults() *GenericMeta {
	this := GenericMeta{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *GenericMeta) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericMeta) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *GenericMeta) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *GenericMeta) SetTags(v []string) {
	o.Tags = v
}

func (o GenericMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenericMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GenericMeta) UnmarshalJSON(data []byte) (err error) {
	varGenericMeta := _GenericMeta{}

	err = json.Unmarshal(data, &varGenericMeta)

	if err != nil {
		return err
	}

	*o = GenericMeta(varGenericMeta)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGenericMeta struct {
	value *GenericMeta
	isSet bool
}

func (v NullableGenericMeta) Get() *GenericMeta {
	return v.value
}

func (v *NullableGenericMeta) Set(val *GenericMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericMeta(val *GenericMeta) *NullableGenericMeta {
	return &NullableGenericMeta{value: val, isSet: true}
}

func (v NullableGenericMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


