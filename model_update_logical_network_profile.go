/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateLogicalNetworkProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLogicalNetworkProfile{}

// UpdateLogicalNetworkProfile struct for UpdateLogicalNetworkProfile
type UpdateLogicalNetworkProfile struct {
	Label *string `json:"label,omitempty"`
	Name *string `json:"name,omitempty"`
	Annotations *map[string]string `json:"annotations,omitempty"`
	Vlan UpdateLogicalNetworkProfileVlanProperties `json:"vlan"`
	Vxlan UpdateLogicalNetworkProfileVxlanProperties `json:"vxlan"`
	Ipv4 UpdateLogicalNetworkProfileIpv4Properties `json:"ipv4"`
	Ipv6 UpdateLogicalNetworkProfileIpv6Properties `json:"ipv6"`
	RouteDomainId NullableInt32 `json:"routeDomainId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLogicalNetworkProfile UpdateLogicalNetworkProfile

// NewUpdateLogicalNetworkProfile instantiates a new UpdateLogicalNetworkProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLogicalNetworkProfile(vlan UpdateLogicalNetworkProfileVlanProperties, vxlan UpdateLogicalNetworkProfileVxlanProperties, ipv4 UpdateLogicalNetworkProfileIpv4Properties, ipv6 UpdateLogicalNetworkProfileIpv6Properties) *UpdateLogicalNetworkProfile {
	this := UpdateLogicalNetworkProfile{}
	this.Vlan = vlan
	this.Vxlan = vxlan
	this.Ipv4 = ipv4
	this.Ipv6 = ipv6
	return &this
}

// NewUpdateLogicalNetworkProfileWithDefaults instantiates a new UpdateLogicalNetworkProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLogicalNetworkProfileWithDefaults() *UpdateLogicalNetworkProfile {
	this := UpdateLogicalNetworkProfile{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkProfile) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfile) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkProfile) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateLogicalNetworkProfile) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkProfile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkProfile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateLogicalNetworkProfile) SetName(v string) {
	o.Name = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkProfile) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfile) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkProfile) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *UpdateLogicalNetworkProfile) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetVlan returns the Vlan field value
func (o *UpdateLogicalNetworkProfile) GetVlan() UpdateLogicalNetworkProfileVlanProperties {
	if o == nil {
		var ret UpdateLogicalNetworkProfileVlanProperties
		return ret
	}

	return o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfile) GetVlanOk() (*UpdateLogicalNetworkProfileVlanProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vlan, true
}

// SetVlan sets field value
func (o *UpdateLogicalNetworkProfile) SetVlan(v UpdateLogicalNetworkProfileVlanProperties) {
	o.Vlan = v
}

// GetVxlan returns the Vxlan field value
func (o *UpdateLogicalNetworkProfile) GetVxlan() UpdateLogicalNetworkProfileVxlanProperties {
	if o == nil {
		var ret UpdateLogicalNetworkProfileVxlanProperties
		return ret
	}

	return o.Vxlan
}

// GetVxlanOk returns a tuple with the Vxlan field value
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfile) GetVxlanOk() (*UpdateLogicalNetworkProfileVxlanProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vxlan, true
}

// SetVxlan sets field value
func (o *UpdateLogicalNetworkProfile) SetVxlan(v UpdateLogicalNetworkProfileVxlanProperties) {
	o.Vxlan = v
}

// GetIpv4 returns the Ipv4 field value
func (o *UpdateLogicalNetworkProfile) GetIpv4() UpdateLogicalNetworkProfileIpv4Properties {
	if o == nil {
		var ret UpdateLogicalNetworkProfileIpv4Properties
		return ret
	}

	return o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfile) GetIpv4Ok() (*UpdateLogicalNetworkProfileIpv4Properties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv4, true
}

// SetIpv4 sets field value
func (o *UpdateLogicalNetworkProfile) SetIpv4(v UpdateLogicalNetworkProfileIpv4Properties) {
	o.Ipv4 = v
}

// GetIpv6 returns the Ipv6 field value
func (o *UpdateLogicalNetworkProfile) GetIpv6() UpdateLogicalNetworkProfileIpv6Properties {
	if o == nil {
		var ret UpdateLogicalNetworkProfileIpv6Properties
		return ret
	}

	return o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfile) GetIpv6Ok() (*UpdateLogicalNetworkProfileIpv6Properties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv6, true
}

// SetIpv6 sets field value
func (o *UpdateLogicalNetworkProfile) SetIpv6(v UpdateLogicalNetworkProfileIpv6Properties) {
	o.Ipv6 = v
}

// GetRouteDomainId returns the RouteDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateLogicalNetworkProfile) GetRouteDomainId() int32 {
	if o == nil || IsNil(o.RouteDomainId.Get()) {
		var ret int32
		return ret
	}
	return *o.RouteDomainId.Get()
}

// GetRouteDomainIdOk returns a tuple with the RouteDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateLogicalNetworkProfile) GetRouteDomainIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RouteDomainId.Get(), o.RouteDomainId.IsSet()
}

// HasRouteDomainId returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkProfile) HasRouteDomainId() bool {
	if o != nil && o.RouteDomainId.IsSet() {
		return true
	}

	return false
}

// SetRouteDomainId gets a reference to the given NullableInt32 and assigns it to the RouteDomainId field.
func (o *UpdateLogicalNetworkProfile) SetRouteDomainId(v int32) {
	o.RouteDomainId.Set(&v)
}
// SetRouteDomainIdNil sets the value for RouteDomainId to be an explicit nil
func (o *UpdateLogicalNetworkProfile) SetRouteDomainIdNil() {
	o.RouteDomainId.Set(nil)
}

// UnsetRouteDomainId ensures that no value is present for RouteDomainId, not even an explicit nil
func (o *UpdateLogicalNetworkProfile) UnsetRouteDomainId() {
	o.RouteDomainId.Unset()
}

func (o UpdateLogicalNetworkProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLogicalNetworkProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	toSerialize["vlan"] = o.Vlan
	toSerialize["vxlan"] = o.Vxlan
	toSerialize["ipv4"] = o.Ipv4
	toSerialize["ipv6"] = o.Ipv6
	if o.RouteDomainId.IsSet() {
		toSerialize["routeDomainId"] = o.RouteDomainId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLogicalNetworkProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vlan",
		"vxlan",
		"ipv4",
		"ipv6",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateLogicalNetworkProfile := _UpdateLogicalNetworkProfile{}

	err = json.Unmarshal(data, &varUpdateLogicalNetworkProfile)

	if err != nil {
		return err
	}

	*o = UpdateLogicalNetworkProfile(varUpdateLogicalNetworkProfile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "name")
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "vlan")
		delete(additionalProperties, "vxlan")
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "ipv6")
		delete(additionalProperties, "routeDomainId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLogicalNetworkProfile struct {
	value *UpdateLogicalNetworkProfile
	isSet bool
}

func (v NullableUpdateLogicalNetworkProfile) Get() *UpdateLogicalNetworkProfile {
	return v.value
}

func (v *NullableUpdateLogicalNetworkProfile) Set(val *UpdateLogicalNetworkProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLogicalNetworkProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLogicalNetworkProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLogicalNetworkProfile(val *UpdateLogicalNetworkProfile) *NullableUpdateLogicalNetworkProfile {
	return &NullableUpdateLogicalNetworkProfile{value: val, isSet: true}
}

func (v NullableUpdateLogicalNetworkProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLogicalNetworkProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


