/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerConnectInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerConnectInterface{}

// ServerConnectInterface struct for ServerConnectInterface
type ServerConnectInterface struct {
	// The id of the server interface
	ServerInterfaceId float32 `json:"serverInterfaceId"`
	// The network device port name
	NetworkDevicePortId string `json:"networkDevicePortId"`
	// The network device hostname
	NetworkDeviceHostname string `json:"networkDeviceHostname"`
	AdditionalProperties map[string]interface{}
}

type _ServerConnectInterface ServerConnectInterface

// NewServerConnectInterface instantiates a new ServerConnectInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerConnectInterface(serverInterfaceId float32, networkDevicePortId string, networkDeviceHostname string) *ServerConnectInterface {
	this := ServerConnectInterface{}
	this.ServerInterfaceId = serverInterfaceId
	this.NetworkDevicePortId = networkDevicePortId
	this.NetworkDeviceHostname = networkDeviceHostname
	return &this
}

// NewServerConnectInterfaceWithDefaults instantiates a new ServerConnectInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerConnectInterfaceWithDefaults() *ServerConnectInterface {
	this := ServerConnectInterface{}
	return &this
}

// GetServerInterfaceId returns the ServerInterfaceId field value
func (o *ServerConnectInterface) GetServerInterfaceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServerInterfaceId
}

// GetServerInterfaceIdOk returns a tuple with the ServerInterfaceId field value
// and a boolean to check if the value has been set.
func (o *ServerConnectInterface) GetServerInterfaceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerInterfaceId, true
}

// SetServerInterfaceId sets field value
func (o *ServerConnectInterface) SetServerInterfaceId(v float32) {
	o.ServerInterfaceId = v
}

// GetNetworkDevicePortId returns the NetworkDevicePortId field value
func (o *ServerConnectInterface) GetNetworkDevicePortId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDevicePortId
}

// GetNetworkDevicePortIdOk returns a tuple with the NetworkDevicePortId field value
// and a boolean to check if the value has been set.
func (o *ServerConnectInterface) GetNetworkDevicePortIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDevicePortId, true
}

// SetNetworkDevicePortId sets field value
func (o *ServerConnectInterface) SetNetworkDevicePortId(v string) {
	o.NetworkDevicePortId = v
}

// GetNetworkDeviceHostname returns the NetworkDeviceHostname field value
func (o *ServerConnectInterface) GetNetworkDeviceHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDeviceHostname
}

// GetNetworkDeviceHostnameOk returns a tuple with the NetworkDeviceHostname field value
// and a boolean to check if the value has been set.
func (o *ServerConnectInterface) GetNetworkDeviceHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDeviceHostname, true
}

// SetNetworkDeviceHostname sets field value
func (o *ServerConnectInterface) SetNetworkDeviceHostname(v string) {
	o.NetworkDeviceHostname = v
}

func (o ServerConnectInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerConnectInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverInterfaceId"] = o.ServerInterfaceId
	toSerialize["networkDevicePortId"] = o.NetworkDevicePortId
	toSerialize["networkDeviceHostname"] = o.NetworkDeviceHostname

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerConnectInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverInterfaceId",
		"networkDevicePortId",
		"networkDeviceHostname",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerConnectInterface := _ServerConnectInterface{}

	err = json.Unmarshal(data, &varServerConnectInterface)

	if err != nil {
		return err
	}

	*o = ServerConnectInterface(varServerConnectInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverInterfaceId")
		delete(additionalProperties, "networkDevicePortId")
		delete(additionalProperties, "networkDeviceHostname")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerConnectInterface struct {
	value *ServerConnectInterface
	isSet bool
}

func (v NullableServerConnectInterface) Get() *ServerConnectInterface {
	return v.value
}

func (v *NullableServerConnectInterface) Set(val *ServerConnectInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableServerConnectInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableServerConnectInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerConnectInterface(val *ServerConnectInterface) *NullableServerConnectInterface {
	return &NullableServerConnectInterface{value: val, isSet: true}
}

func (v NullableServerConnectInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerConnectInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


