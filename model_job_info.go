/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the JobInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobInfo{}

// JobInfo struct for JobInfo
type JobInfo struct {
	// The id of the job.
	JobId float32 `json:"jobId"`
	// The id of the job group.
	JobGroupId float32 `json:"jobGroupId"`
	AdditionalProperties map[string]interface{}
}

type _JobInfo JobInfo

// NewJobInfo instantiates a new JobInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobInfo(jobId float32, jobGroupId float32) *JobInfo {
	this := JobInfo{}
	this.JobId = jobId
	this.JobGroupId = jobGroupId
	return &this
}

// NewJobInfoWithDefaults instantiates a new JobInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobInfoWithDefaults() *JobInfo {
	this := JobInfo{}
	return &this
}

// GetJobId returns the JobId field value
func (o *JobInfo) GetJobId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value
// and a boolean to check if the value has been set.
func (o *JobInfo) GetJobIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobId, true
}

// SetJobId sets field value
func (o *JobInfo) SetJobId(v float32) {
	o.JobId = v
}

// GetJobGroupId returns the JobGroupId field value
func (o *JobInfo) GetJobGroupId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.JobGroupId
}

// GetJobGroupIdOk returns a tuple with the JobGroupId field value
// and a boolean to check if the value has been set.
func (o *JobInfo) GetJobGroupIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobGroupId, true
}

// SetJobGroupId sets field value
func (o *JobInfo) SetJobGroupId(v float32) {
	o.JobGroupId = v
}

func (o JobInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jobId"] = o.JobId
	toSerialize["jobGroupId"] = o.JobGroupId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jobId",
		"jobGroupId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobInfo := _JobInfo{}

	err = json.Unmarshal(data, &varJobInfo)

	if err != nil {
		return err
	}

	*o = JobInfo(varJobInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "jobId")
		delete(additionalProperties, "jobGroupId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobInfo struct {
	value *JobInfo
	isSet bool
}

func (v NullableJobInfo) Get() *JobInfo {
	return v.value
}

func (v *NullableJobInfo) Set(val *JobInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJobInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJobInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobInfo(val *JobInfo) *NullableJobInfo {
	return &NullableJobInfo{value: val, isSet: true}
}

func (v NullableJobInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


