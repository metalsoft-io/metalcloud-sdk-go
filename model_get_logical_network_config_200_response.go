/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// GetLogicalNetworkConfig200Response - struct for GetLogicalNetworkConfig200Response
type GetLogicalNetworkConfig200Response struct {
	VlanLogicalNetworkConfig *VlanLogicalNetworkConfig
	VxlanLogicalNetworkConfig *VxlanLogicalNetworkConfig
}

// VlanLogicalNetworkConfigAsGetLogicalNetworkConfig200Response is a convenience function that returns VlanLogicalNetworkConfig wrapped in GetLogicalNetworkConfig200Response
func VlanLogicalNetworkConfigAsGetLogicalNetworkConfig200Response(v *VlanLogicalNetworkConfig) GetLogicalNetworkConfig200Response {
	return GetLogicalNetworkConfig200Response{
		VlanLogicalNetworkConfig: v,
	}
}

// VxlanLogicalNetworkConfigAsGetLogicalNetworkConfig200Response is a convenience function that returns VxlanLogicalNetworkConfig wrapped in GetLogicalNetworkConfig200Response
func VxlanLogicalNetworkConfigAsGetLogicalNetworkConfig200Response(v *VxlanLogicalNetworkConfig) GetLogicalNetworkConfig200Response {
	return GetLogicalNetworkConfig200Response{
		VxlanLogicalNetworkConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetLogicalNetworkConfig200Response) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'VlanLogicalNetworkConfig'
	if jsonDict["kind"] == "VlanLogicalNetworkConfig" {
		// try to unmarshal JSON data into VlanLogicalNetworkConfig
		err = json.Unmarshal(data, &dst.VlanLogicalNetworkConfig)
		if err == nil {
			return nil // data stored in dst.VlanLogicalNetworkConfig, return on the first match
		} else {
			dst.VlanLogicalNetworkConfig = nil
			return fmt.Errorf("failed to unmarshal GetLogicalNetworkConfig200Response as VlanLogicalNetworkConfig: %s", err.Error())
		}
	}

	// check if the discriminator value is 'VxlanLogicalNetworkConfig'
	if jsonDict["kind"] == "VxlanLogicalNetworkConfig" {
		// try to unmarshal JSON data into VxlanLogicalNetworkConfig
		err = json.Unmarshal(data, &dst.VxlanLogicalNetworkConfig)
		if err == nil {
			return nil // data stored in dst.VxlanLogicalNetworkConfig, return on the first match
		} else {
			dst.VxlanLogicalNetworkConfig = nil
			return fmt.Errorf("failed to unmarshal GetLogicalNetworkConfig200Response as VxlanLogicalNetworkConfig: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetLogicalNetworkConfig200Response) MarshalJSON() ([]byte, error) {
	if src.VlanLogicalNetworkConfig != nil {
		return json.Marshal(&src.VlanLogicalNetworkConfig)
	}

	if src.VxlanLogicalNetworkConfig != nil {
		return json.Marshal(&src.VxlanLogicalNetworkConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetLogicalNetworkConfig200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.VlanLogicalNetworkConfig != nil {
		return obj.VlanLogicalNetworkConfig
	}

	if obj.VxlanLogicalNetworkConfig != nil {
		return obj.VxlanLogicalNetworkConfig
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetLogicalNetworkConfig200Response) GetActualInstanceValue() (interface{}) {
	if obj.VlanLogicalNetworkConfig != nil {
		return *obj.VlanLogicalNetworkConfig
	}

	if obj.VxlanLogicalNetworkConfig != nil {
		return *obj.VxlanLogicalNetworkConfig
	}

	// all schemas are nil
	return nil
}

type NullableGetLogicalNetworkConfig200Response struct {
	value *GetLogicalNetworkConfig200Response
	isSet bool
}

func (v NullableGetLogicalNetworkConfig200Response) Get() *GetLogicalNetworkConfig200Response {
	return v.value
}

func (v *NullableGetLogicalNetworkConfig200Response) Set(val *GetLogicalNetworkConfig200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLogicalNetworkConfig200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLogicalNetworkConfig200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLogicalNetworkConfig200Response(val *GetLogicalNetworkConfig200Response) *NullableGetLogicalNetworkConfig200Response {
	return &NullableGetLogicalNetworkConfig200Response{value: val, isSet: true}
}

func (v NullableGetLogicalNetworkConfig200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLogicalNetworkConfig200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


