/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// InfrastructureExtensionActionsTasksDataItem - struct for InfrastructureExtensionActionsTasksDataItem
type InfrastructureExtensionActionsTasksDataItem struct {
	ExtensionTaskAnsible *ExtensionTaskAnsible
	ExtensionTaskSsh *ExtensionTaskSsh
	ExtensionTaskWebhook *ExtensionTaskWebhook
}

// ExtensionTaskAnsibleAsInfrastructureExtensionActionsTasksDataItem is a convenience function that returns ExtensionTaskAnsible wrapped in InfrastructureExtensionActionsTasksDataItem
func ExtensionTaskAnsibleAsInfrastructureExtensionActionsTasksDataItem(v *ExtensionTaskAnsible) InfrastructureExtensionActionsTasksDataItem {
	return InfrastructureExtensionActionsTasksDataItem{
		ExtensionTaskAnsible: v,
	}
}

// ExtensionTaskSshAsInfrastructureExtensionActionsTasksDataItem is a convenience function that returns ExtensionTaskSsh wrapped in InfrastructureExtensionActionsTasksDataItem
func ExtensionTaskSshAsInfrastructureExtensionActionsTasksDataItem(v *ExtensionTaskSsh) InfrastructureExtensionActionsTasksDataItem {
	return InfrastructureExtensionActionsTasksDataItem{
		ExtensionTaskSsh: v,
	}
}

// ExtensionTaskWebhookAsInfrastructureExtensionActionsTasksDataItem is a convenience function that returns ExtensionTaskWebhook wrapped in InfrastructureExtensionActionsTasksDataItem
func ExtensionTaskWebhookAsInfrastructureExtensionActionsTasksDataItem(v *ExtensionTaskWebhook) InfrastructureExtensionActionsTasksDataItem {
	return InfrastructureExtensionActionsTasksDataItem{
		ExtensionTaskWebhook: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *InfrastructureExtensionActionsTasksDataItem) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'ExtensionTaskAnsible'
	if jsonDict["taskType"] == "ExtensionTaskAnsible" {
		// try to unmarshal JSON data into ExtensionTaskAnsible
		err = json.Unmarshal(data, &dst.ExtensionTaskAnsible)
		if err == nil {
			return nil // data stored in dst.ExtensionTaskAnsible, return on the first match
		} else {
			dst.ExtensionTaskAnsible = nil
			return fmt.Errorf("failed to unmarshal InfrastructureExtensionActionsTasksDataItem as ExtensionTaskAnsible: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExtensionTaskSsh'
	if jsonDict["taskType"] == "ExtensionTaskSsh" {
		// try to unmarshal JSON data into ExtensionTaskSsh
		err = json.Unmarshal(data, &dst.ExtensionTaskSsh)
		if err == nil {
			return nil // data stored in dst.ExtensionTaskSsh, return on the first match
		} else {
			dst.ExtensionTaskSsh = nil
			return fmt.Errorf("failed to unmarshal InfrastructureExtensionActionsTasksDataItem as ExtensionTaskSsh: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExtensionTaskWebhook'
	if jsonDict["taskType"] == "ExtensionTaskWebhook" {
		// try to unmarshal JSON data into ExtensionTaskWebhook
		err = json.Unmarshal(data, &dst.ExtensionTaskWebhook)
		if err == nil {
			return nil // data stored in dst.ExtensionTaskWebhook, return on the first match
		} else {
			dst.ExtensionTaskWebhook = nil
			return fmt.Errorf("failed to unmarshal InfrastructureExtensionActionsTasksDataItem as ExtensionTaskWebhook: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InfrastructureExtensionActionsTasksDataItem) MarshalJSON() ([]byte, error) {
	if src.ExtensionTaskAnsible != nil {
		return json.Marshal(&src.ExtensionTaskAnsible)
	}

	if src.ExtensionTaskSsh != nil {
		return json.Marshal(&src.ExtensionTaskSsh)
	}

	if src.ExtensionTaskWebhook != nil {
		return json.Marshal(&src.ExtensionTaskWebhook)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InfrastructureExtensionActionsTasksDataItem) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ExtensionTaskAnsible != nil {
		return obj.ExtensionTaskAnsible
	}

	if obj.ExtensionTaskSsh != nil {
		return obj.ExtensionTaskSsh
	}

	if obj.ExtensionTaskWebhook != nil {
		return obj.ExtensionTaskWebhook
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj InfrastructureExtensionActionsTasksDataItem) GetActualInstanceValue() (interface{}) {
	if obj.ExtensionTaskAnsible != nil {
		return *obj.ExtensionTaskAnsible
	}

	if obj.ExtensionTaskSsh != nil {
		return *obj.ExtensionTaskSsh
	}

	if obj.ExtensionTaskWebhook != nil {
		return *obj.ExtensionTaskWebhook
	}

	// all schemas are nil
	return nil
}

type NullableInfrastructureExtensionActionsTasksDataItem struct {
	value *InfrastructureExtensionActionsTasksDataItem
	isSet bool
}

func (v NullableInfrastructureExtensionActionsTasksDataItem) Get() *InfrastructureExtensionActionsTasksDataItem {
	return v.value
}

func (v *NullableInfrastructureExtensionActionsTasksDataItem) Set(val *InfrastructureExtensionActionsTasksDataItem) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureExtensionActionsTasksDataItem) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureExtensionActionsTasksDataItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureExtensionActionsTasksDataItem(val *InfrastructureExtensionActionsTasksDataItem) *NullableInfrastructureExtensionActionsTasksDataItem {
	return &NullableInfrastructureExtensionActionsTasksDataItem{value: val, isSet: true}
}

func (v NullableInfrastructureExtensionActionsTasksDataItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureExtensionActionsTasksDataItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


