/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the DriveResourceItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DriveResourceItem{}

// DriveResourceItem struct for DriveResourceItem
type DriveResourceItem struct {
	Id float32 `json:"id"`
	Label string `json:"label"`
	StartTimestamp string `json:"startTimestamp"`
	EndTimestamp string `json:"endTimestamp"`
	MeasurementPeriod float32 `json:"measurementPeriod"`
	MeasurementUnit string `json:"measurementUnit"`
	Quantity float32 `json:"quantity"`
	Tags *string `json:"tags,omitempty"`
	DriveSizeMbytes float32 `json:"driveSizeMbytes"`
	DriveStorageType string `json:"driveStorageType"`
	AdditionalProperties map[string]interface{}
}

type _DriveResourceItem DriveResourceItem

// NewDriveResourceItem instantiates a new DriveResourceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriveResourceItem(id float32, label string, startTimestamp string, endTimestamp string, measurementPeriod float32, measurementUnit string, quantity float32, driveSizeMbytes float32, driveStorageType string) *DriveResourceItem {
	this := DriveResourceItem{}
	this.Id = id
	this.Label = label
	this.StartTimestamp = startTimestamp
	this.EndTimestamp = endTimestamp
	this.MeasurementPeriod = measurementPeriod
	this.MeasurementUnit = measurementUnit
	this.Quantity = quantity
	this.DriveSizeMbytes = driveSizeMbytes
	this.DriveStorageType = driveStorageType
	return &this
}

// NewDriveResourceItemWithDefaults instantiates a new DriveResourceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriveResourceItemWithDefaults() *DriveResourceItem {
	this := DriveResourceItem{}
	return &this
}

// GetId returns the Id field value
func (o *DriveResourceItem) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DriveResourceItem) SetId(v float32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *DriveResourceItem) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *DriveResourceItem) SetLabel(v string) {
	o.Label = v
}

// GetStartTimestamp returns the StartTimestamp field value
func (o *DriveResourceItem) GetStartTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetStartTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTimestamp, true
}

// SetStartTimestamp sets field value
func (o *DriveResourceItem) SetStartTimestamp(v string) {
	o.StartTimestamp = v
}

// GetEndTimestamp returns the EndTimestamp field value
func (o *DriveResourceItem) GetEndTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetEndTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTimestamp, true
}

// SetEndTimestamp sets field value
func (o *DriveResourceItem) SetEndTimestamp(v string) {
	o.EndTimestamp = v
}

// GetMeasurementPeriod returns the MeasurementPeriod field value
func (o *DriveResourceItem) GetMeasurementPeriod() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MeasurementPeriod
}

// GetMeasurementPeriodOk returns a tuple with the MeasurementPeriod field value
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetMeasurementPeriodOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementPeriod, true
}

// SetMeasurementPeriod sets field value
func (o *DriveResourceItem) SetMeasurementPeriod(v float32) {
	o.MeasurementPeriod = v
}

// GetMeasurementUnit returns the MeasurementUnit field value
func (o *DriveResourceItem) GetMeasurementUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeasurementUnit
}

// GetMeasurementUnitOk returns a tuple with the MeasurementUnit field value
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetMeasurementUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementUnit, true
}

// SetMeasurementUnit sets field value
func (o *DriveResourceItem) SetMeasurementUnit(v string) {
	o.MeasurementUnit = v
}

// GetQuantity returns the Quantity field value
func (o *DriveResourceItem) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *DriveResourceItem) SetQuantity(v float32) {
	o.Quantity = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DriveResourceItem) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DriveResourceItem) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *DriveResourceItem) SetTags(v string) {
	o.Tags = &v
}

// GetDriveSizeMbytes returns the DriveSizeMbytes field value
func (o *DriveResourceItem) GetDriveSizeMbytes() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DriveSizeMbytes
}

// GetDriveSizeMbytesOk returns a tuple with the DriveSizeMbytes field value
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetDriveSizeMbytesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DriveSizeMbytes, true
}

// SetDriveSizeMbytes sets field value
func (o *DriveResourceItem) SetDriveSizeMbytes(v float32) {
	o.DriveSizeMbytes = v
}

// GetDriveStorageType returns the DriveStorageType field value
func (o *DriveResourceItem) GetDriveStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DriveStorageType
}

// GetDriveStorageTypeOk returns a tuple with the DriveStorageType field value
// and a boolean to check if the value has been set.
func (o *DriveResourceItem) GetDriveStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DriveStorageType, true
}

// SetDriveStorageType sets field value
func (o *DriveResourceItem) SetDriveStorageType(v string) {
	o.DriveStorageType = v
}

func (o DriveResourceItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DriveResourceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["startTimestamp"] = o.StartTimestamp
	toSerialize["endTimestamp"] = o.EndTimestamp
	toSerialize["measurementPeriod"] = o.MeasurementPeriod
	toSerialize["measurementUnit"] = o.MeasurementUnit
	toSerialize["quantity"] = o.Quantity
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["driveSizeMbytes"] = o.DriveSizeMbytes
	toSerialize["driveStorageType"] = o.DriveStorageType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DriveResourceItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"startTimestamp",
		"endTimestamp",
		"measurementPeriod",
		"measurementUnit",
		"quantity",
		"driveSizeMbytes",
		"driveStorageType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDriveResourceItem := _DriveResourceItem{}

	err = json.Unmarshal(data, &varDriveResourceItem)

	if err != nil {
		return err
	}

	*o = DriveResourceItem(varDriveResourceItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "startTimestamp")
		delete(additionalProperties, "endTimestamp")
		delete(additionalProperties, "measurementPeriod")
		delete(additionalProperties, "measurementUnit")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "driveSizeMbytes")
		delete(additionalProperties, "driveStorageType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDriveResourceItem struct {
	value *DriveResourceItem
	isSet bool
}

func (v NullableDriveResourceItem) Get() *DriveResourceItem {
	return v.value
}

func (v *NullableDriveResourceItem) Set(val *DriveResourceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableDriveResourceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableDriveResourceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriveResourceItem(val *DriveResourceItem) *NullableDriveResourceItem {
	return &NullableDriveResourceItem{value: val, isSet: true}
}

func (v NullableDriveResourceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriveResourceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


