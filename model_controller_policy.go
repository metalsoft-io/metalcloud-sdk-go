/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ControllerPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControllerPolicy{}

// ControllerPolicy struct for ControllerPolicy
type ControllerPolicy struct {
	// List of subnets in IPv4 or IPv6 CIDR notation
	SubnetAllocation []string `json:"subnetAllocation"`
	AdditionalProperties map[string]interface{}
}

type _ControllerPolicy ControllerPolicy

// NewControllerPolicy instantiates a new ControllerPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllerPolicy(subnetAllocation []string) *ControllerPolicy {
	this := ControllerPolicy{}
	this.SubnetAllocation = subnetAllocation
	return &this
}

// NewControllerPolicyWithDefaults instantiates a new ControllerPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllerPolicyWithDefaults() *ControllerPolicy {
	this := ControllerPolicy{}
	return &this
}

// GetSubnetAllocation returns the SubnetAllocation field value
func (o *ControllerPolicy) GetSubnetAllocation() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SubnetAllocation
}

// GetSubnetAllocationOk returns a tuple with the SubnetAllocation field value
// and a boolean to check if the value has been set.
func (o *ControllerPolicy) GetSubnetAllocationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubnetAllocation, true
}

// SetSubnetAllocation sets field value
func (o *ControllerPolicy) SetSubnetAllocation(v []string) {
	o.SubnetAllocation = v
}

func (o ControllerPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControllerPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subnetAllocation"] = o.SubnetAllocation

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ControllerPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnetAllocation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varControllerPolicy := _ControllerPolicy{}

	err = json.Unmarshal(data, &varControllerPolicy)

	if err != nil {
		return err
	}

	*o = ControllerPolicy(varControllerPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subnetAllocation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableControllerPolicy struct {
	value *ControllerPolicy
	isSet bool
}

func (v NullableControllerPolicy) Get() *ControllerPolicy {
	return v.value
}

func (v *NullableControllerPolicy) Set(val *ControllerPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableControllerPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableControllerPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllerPolicy(val *ControllerPolicy) *NullableControllerPolicy {
	return &NullableControllerPolicy{value: val, isSet: true}
}

func (v NullableControllerPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllerPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


