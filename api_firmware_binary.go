/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// FirmwareBinaryAPIService FirmwareBinaryAPI service
type FirmwareBinaryAPIService service

type FirmwareBinaryAPICreateFirmwareBinaryRequest struct {
	ctx context.Context
	ApiService *FirmwareBinaryAPIService
	createFirmwareBinaryDto *CreateFirmwareBinaryDto
}

func (r FirmwareBinaryAPICreateFirmwareBinaryRequest) CreateFirmwareBinaryDto(createFirmwareBinaryDto CreateFirmwareBinaryDto) FirmwareBinaryAPICreateFirmwareBinaryRequest {
	r.createFirmwareBinaryDto = &createFirmwareBinaryDto
	return r
}

func (r FirmwareBinaryAPICreateFirmwareBinaryRequest) Execute() (*FirmwareBinaryDto, *http.Response, error) {
	return r.ApiService.CreateFirmwareBinaryExecute(r)
}

/*
CreateFirmwareBinary Create a new firmware binary

Creates a new firmware binary and returns it

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwareBinaryAPICreateFirmwareBinaryRequest
*/
func (a *FirmwareBinaryAPIService) CreateFirmwareBinary(ctx context.Context) FirmwareBinaryAPICreateFirmwareBinaryRequest {
	return FirmwareBinaryAPICreateFirmwareBinaryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FirmwareBinaryDto
func (a *FirmwareBinaryAPIService) CreateFirmwareBinaryExecute(r FirmwareBinaryAPICreateFirmwareBinaryRequest) (*FirmwareBinaryDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirmwareBinaryDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBinaryAPIService.CreateFirmwareBinary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/binary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFirmwareBinaryDto == nil {
		return localVarReturnValue, nil, reportError("createFirmwareBinaryDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFirmwareBinaryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwareBinaryAPIDeleteFirmwareBinaryRequest struct {
	ctx context.Context
	ApiService *FirmwareBinaryAPIService
	firmwareBinaryId float32
}

func (r FirmwareBinaryAPIDeleteFirmwareBinaryRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFirmwareBinaryExecute(r)
}

/*
DeleteFirmwareBinary Delete Firmware Binary

Deletes a firmware binary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwareBinaryId The firmware binary id
 @return FirmwareBinaryAPIDeleteFirmwareBinaryRequest
*/
func (a *FirmwareBinaryAPIService) DeleteFirmwareBinary(ctx context.Context, firmwareBinaryId float32) FirmwareBinaryAPIDeleteFirmwareBinaryRequest {
	return FirmwareBinaryAPIDeleteFirmwareBinaryRequest{
		ApiService: a,
		ctx: ctx,
		firmwareBinaryId: firmwareBinaryId,
	}
}

// Execute executes the request
func (a *FirmwareBinaryAPIService) DeleteFirmwareBinaryExecute(r FirmwareBinaryAPIDeleteFirmwareBinaryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBinaryAPIService.DeleteFirmwareBinary")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/binary/{firmwareBinaryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwareBinaryId"+"}", url.PathEscape(parameterValueToString(r.firmwareBinaryId, "firmwareBinaryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FirmwareBinaryAPIGetFirmwareBinariesRequest struct {
	ctx context.Context
	ApiService *FirmwareBinaryAPIService
	page *float32
	limit *float32
	filterServerFirmwareBinaryId *[]string
	filterServerFirmwareBinaryCatalogId *[]string
	filterServerFirmwareBinaryExternalId *[]string
	filterServerFirmwareBinaryPackageId *[]string
	filterServerFirmwareBinaryCreatedTimestamp *[]string
	filterServerFirmwareBinaryUpdateSeverity *[]string
	filterServerFirmwareBinaryRebootRequired *[]string
	filterServerFirmwareBinaryVendorReleaseTimestamp *[]string
	filterServerFirmwareBinaryPackageVersion *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
	select_ *string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) Page(page float32) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) Limit(limit float32) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.limit = &limit
	return r
}

// Filter by serverFirmwareBinaryId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverFirmwareBinaryId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverFirmwareBinaryId&#x3D;$not:$like:John Doe&amp;filter.serverFirmwareBinaryId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) FilterServerFirmwareBinaryId(filterServerFirmwareBinaryId []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.filterServerFirmwareBinaryId = &filterServerFirmwareBinaryId
	return r
}

// Filter by serverFirmwareBinaryCatalogId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverFirmwareBinaryCatalogId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverFirmwareBinaryCatalogId&#x3D;$not:$like:John Doe&amp;filter.serverFirmwareBinaryCatalogId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) FilterServerFirmwareBinaryCatalogId(filterServerFirmwareBinaryCatalogId []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.filterServerFirmwareBinaryCatalogId = &filterServerFirmwareBinaryCatalogId
	return r
}

// Filter by serverFirmwareBinaryExternalId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverFirmwareBinaryExternalId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverFirmwareBinaryExternalId&#x3D;$not:$like:John Doe&amp;filter.serverFirmwareBinaryExternalId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) FilterServerFirmwareBinaryExternalId(filterServerFirmwareBinaryExternalId []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.filterServerFirmwareBinaryExternalId = &filterServerFirmwareBinaryExternalId
	return r
}

// Filter by serverFirmwareBinaryPackageId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverFirmwareBinaryPackageId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverFirmwareBinaryPackageId&#x3D;$not:$like:John Doe&amp;filter.serverFirmwareBinaryPackageId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) FilterServerFirmwareBinaryPackageId(filterServerFirmwareBinaryPackageId []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.filterServerFirmwareBinaryPackageId = &filterServerFirmwareBinaryPackageId
	return r
}

// Filter by serverFirmwareBinaryCreatedTimestamp query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverFirmwareBinaryCreatedTimestamp&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverFirmwareBinaryCreatedTimestamp&#x3D;$not:$like:John Doe&amp;filter.serverFirmwareBinaryCreatedTimestamp&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) FilterServerFirmwareBinaryCreatedTimestamp(filterServerFirmwareBinaryCreatedTimestamp []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.filterServerFirmwareBinaryCreatedTimestamp = &filterServerFirmwareBinaryCreatedTimestamp
	return r
}

// Filter by serverFirmwareBinaryUpdateSeverity query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverFirmwareBinaryUpdateSeverity&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverFirmwareBinaryUpdateSeverity&#x3D;$not:$like:John Doe&amp;filter.serverFirmwareBinaryUpdateSeverity&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) FilterServerFirmwareBinaryUpdateSeverity(filterServerFirmwareBinaryUpdateSeverity []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.filterServerFirmwareBinaryUpdateSeverity = &filterServerFirmwareBinaryUpdateSeverity
	return r
}

// Filter by serverFirmwareBinaryRebootRequired query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverFirmwareBinaryRebootRequired&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverFirmwareBinaryRebootRequired&#x3D;$not:$like:John Doe&amp;filter.serverFirmwareBinaryRebootRequired&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) FilterServerFirmwareBinaryRebootRequired(filterServerFirmwareBinaryRebootRequired []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.filterServerFirmwareBinaryRebootRequired = &filterServerFirmwareBinaryRebootRequired
	return r
}

// Filter by serverFirmwareBinaryVendorReleaseTimestamp query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverFirmwareBinaryVendorReleaseTimestamp&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverFirmwareBinaryVendorReleaseTimestamp&#x3D;$not:$like:John Doe&amp;filter.serverFirmwareBinaryVendorReleaseTimestamp&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) FilterServerFirmwareBinaryVendorReleaseTimestamp(filterServerFirmwareBinaryVendorReleaseTimestamp []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.filterServerFirmwareBinaryVendorReleaseTimestamp = &filterServerFirmwareBinaryVendorReleaseTimestamp
	return r
}

// Filter by serverFirmwareBinaryPackageVersion query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serverFirmwareBinaryPackageVersion&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serverFirmwareBinaryPackageVersion&#x3D;$not:$like:John Doe&amp;filter.serverFirmwareBinaryPackageVersion&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) FilterServerFirmwareBinaryPackageVersion(filterServerFirmwareBinaryPackageVersion []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.filterServerFirmwareBinaryPackageVersion = &filterServerFirmwareBinaryPackageVersion
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; serverFirmwareBinaryId:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;serverFirmwareBinaryId&lt;/li&gt; &lt;li&gt;serverFirmwareBinaryName&lt;/li&gt; &lt;li&gt;serverFirmwareBinaryUpdateSeverity&lt;/li&gt; &lt;li&gt;serverFirmwareBinaryCatalogId&lt;/li&gt; &lt;li&gt;serverFirmwareBinaryRebootRequired&lt;/li&gt; &lt;li&gt;serverFirmwareBinaryVendorReleaseTimestamp&lt;/li&gt; &lt;li&gt;serverFirmwareBinaryPackageVersion&lt;/li&gt;&lt;/ul&gt;       
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) SortBy(sortBy []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) Search(search string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; serverFirmwareBinaryName           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;serverFirmwareBinaryName&lt;/li&gt;&lt;/ul&gt;         
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) SearchBy(searchBy []string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.searchBy = &searchBy
	return r
}

// List of fields to select.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; serverFirmwareBinaryId,serverFirmwareBinaryCatalogId,serverFirmwareBinaryExternalId,serverFirmwareBinaryPackageId,serverFirmwareBinaryPackageVersion           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields returns. If you want to select only some fields, provide them in query param           &lt;/p&gt;       
func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) Select_(select_ string) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	r.select_ = &select_
	return r
}

func (r FirmwareBinaryAPIGetFirmwareBinariesRequest) Execute() (*FirmwareBinaryPaginatedList, *http.Response, error) {
	return r.ApiService.GetFirmwareBinariesExecute(r)
}

/*
GetFirmwareBinaries Get Firmware Binaries

Returns a list of firmware binaries

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwareBinaryAPIGetFirmwareBinariesRequest
*/
func (a *FirmwareBinaryAPIService) GetFirmwareBinaries(ctx context.Context) FirmwareBinaryAPIGetFirmwareBinariesRequest {
	return FirmwareBinaryAPIGetFirmwareBinariesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FirmwareBinaryPaginatedList
func (a *FirmwareBinaryAPIService) GetFirmwareBinariesExecute(r FirmwareBinaryAPIGetFirmwareBinariesRequest) (*FirmwareBinaryPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirmwareBinaryPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBinaryAPIService.GetFirmwareBinaries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/binary"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterServerFirmwareBinaryId != nil {
		t := *r.filterServerFirmwareBinaryId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryId", t, "form", "multi")
		}
	}
	if r.filterServerFirmwareBinaryCatalogId != nil {
		t := *r.filterServerFirmwareBinaryCatalogId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryCatalogId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryCatalogId", t, "form", "multi")
		}
	}
	if r.filterServerFirmwareBinaryExternalId != nil {
		t := *r.filterServerFirmwareBinaryExternalId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryExternalId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryExternalId", t, "form", "multi")
		}
	}
	if r.filterServerFirmwareBinaryPackageId != nil {
		t := *r.filterServerFirmwareBinaryPackageId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryPackageId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryPackageId", t, "form", "multi")
		}
	}
	if r.filterServerFirmwareBinaryCreatedTimestamp != nil {
		t := *r.filterServerFirmwareBinaryCreatedTimestamp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryCreatedTimestamp", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryCreatedTimestamp", t, "form", "multi")
		}
	}
	if r.filterServerFirmwareBinaryUpdateSeverity != nil {
		t := *r.filterServerFirmwareBinaryUpdateSeverity
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryUpdateSeverity", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryUpdateSeverity", t, "form", "multi")
		}
	}
	if r.filterServerFirmwareBinaryRebootRequired != nil {
		t := *r.filterServerFirmwareBinaryRebootRequired
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryRebootRequired", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryRebootRequired", t, "form", "multi")
		}
	}
	if r.filterServerFirmwareBinaryVendorReleaseTimestamp != nil {
		t := *r.filterServerFirmwareBinaryVendorReleaseTimestamp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryVendorReleaseTimestamp", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryVendorReleaseTimestamp", t, "form", "multi")
		}
	}
	if r.filterServerFirmwareBinaryPackageVersion != nil {
		t := *r.filterServerFirmwareBinaryPackageVersion
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryPackageVersion", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serverFirmwareBinaryPackageVersion", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwareBinaryAPIGetFirmwareBinaryRequest struct {
	ctx context.Context
	ApiService *FirmwareBinaryAPIService
	firmwareBinaryId float32
}

func (r FirmwareBinaryAPIGetFirmwareBinaryRequest) Execute() (*FirmwareBinaryDto, *http.Response, error) {
	return r.ApiService.GetFirmwareBinaryExecute(r)
}

/*
GetFirmwareBinary Get Firmware Binary

Returns a firmware binary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwareBinaryId The firmware binary id
 @return FirmwareBinaryAPIGetFirmwareBinaryRequest
*/
func (a *FirmwareBinaryAPIService) GetFirmwareBinary(ctx context.Context, firmwareBinaryId float32) FirmwareBinaryAPIGetFirmwareBinaryRequest {
	return FirmwareBinaryAPIGetFirmwareBinaryRequest{
		ApiService: a,
		ctx: ctx,
		firmwareBinaryId: firmwareBinaryId,
	}
}

// Execute executes the request
//  @return FirmwareBinaryDto
func (a *FirmwareBinaryAPIService) GetFirmwareBinaryExecute(r FirmwareBinaryAPIGetFirmwareBinaryRequest) (*FirmwareBinaryDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirmwareBinaryDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBinaryAPIService.GetFirmwareBinary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/binary/{firmwareBinaryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwareBinaryId"+"}", url.PathEscape(parameterValueToString(r.firmwareBinaryId, "firmwareBinaryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwareBinaryAPIUpdateFirmwareBinaryRequest struct {
	ctx context.Context
	ApiService *FirmwareBinaryAPIService
	firmwareBinaryId float32
	updateFirmwareBinaryDto *UpdateFirmwareBinaryDto
}

func (r FirmwareBinaryAPIUpdateFirmwareBinaryRequest) UpdateFirmwareBinaryDto(updateFirmwareBinaryDto UpdateFirmwareBinaryDto) FirmwareBinaryAPIUpdateFirmwareBinaryRequest {
	r.updateFirmwareBinaryDto = &updateFirmwareBinaryDto
	return r
}

func (r FirmwareBinaryAPIUpdateFirmwareBinaryRequest) Execute() (*FirmwareBinaryDto, *http.Response, error) {
	return r.ApiService.UpdateFirmwareBinaryExecute(r)
}

/*
UpdateFirmwareBinary Update Firmware Binary

Updates a firmware binary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwareBinaryId The firmware binary id
 @return FirmwareBinaryAPIUpdateFirmwareBinaryRequest
*/
func (a *FirmwareBinaryAPIService) UpdateFirmwareBinary(ctx context.Context, firmwareBinaryId float32) FirmwareBinaryAPIUpdateFirmwareBinaryRequest {
	return FirmwareBinaryAPIUpdateFirmwareBinaryRequest{
		ApiService: a,
		ctx: ctx,
		firmwareBinaryId: firmwareBinaryId,
	}
}

// Execute executes the request
//  @return FirmwareBinaryDto
func (a *FirmwareBinaryAPIService) UpdateFirmwareBinaryExecute(r FirmwareBinaryAPIUpdateFirmwareBinaryRequest) (*FirmwareBinaryDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirmwareBinaryDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBinaryAPIService.UpdateFirmwareBinary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/binary/{firmwareBinaryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwareBinaryId"+"}", url.PathEscape(parameterValueToString(r.firmwareBinaryId, "firmwareBinaryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateFirmwareBinaryDto == nil {
		return localVarReturnValue, nil, reportError("updateFirmwareBinaryDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateFirmwareBinaryDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
