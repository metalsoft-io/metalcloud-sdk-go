/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateVM type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVM{}

// UpdateVM struct for UpdateVM
type UpdateVM struct {
	// VM comments.
	Comments *float32 `json:"comments,omitempty"`
	// Tags for the VM. This is a JSON object.
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateVM UpdateVM

// NewUpdateVM instantiates a new UpdateVM object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVM() *UpdateVM {
	this := UpdateVM{}
	return &this
}

// NewUpdateVMWithDefaults instantiates a new UpdateVM object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVMWithDefaults() *UpdateVM {
	this := UpdateVM{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *UpdateVM) GetComments() float32 {
	if o == nil || IsNil(o.Comments) {
		var ret float32
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVM) GetCommentsOk() (*float32, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *UpdateVM) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given float32 and assigns it to the Comments field.
func (o *UpdateVM) SetComments(v float32) {
	o.Comments = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateVM) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVM) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateVM) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateVM) SetTags(v []string) {
	o.Tags = v
}

func (o UpdateVM) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVM) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateVM) UnmarshalJSON(data []byte) (err error) {
	varUpdateVM := _UpdateVM{}

	err = json.Unmarshal(data, &varUpdateVM)

	if err != nil {
		return err
	}

	*o = UpdateVM(varUpdateVM)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comments")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateVM struct {
	value *UpdateVM
	isSet bool
}

func (v NullableUpdateVM) Get() *UpdateVM {
	return v.value
}

func (v *NullableUpdateVM) Set(val *UpdateVM) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVM) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVM) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVM(val *UpdateVM) *NullableUpdateVM {
	return &NullableUpdateVM{value: val, isSet: true}
}

func (v NullableUpdateVM) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVM) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


