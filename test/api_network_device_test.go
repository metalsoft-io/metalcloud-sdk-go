/*
MetalSoft REST API

Testing NetworkDeviceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_NetworkDeviceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NetworkDeviceAPIService AddNetworkDeviceDefaults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.NetworkDeviceAPI.AddNetworkDeviceDefaults(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService ArchiveNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.ArchiveNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService ChangeNetworkDeviceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.ChangeNetworkDeviceStatus(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService DiscoverNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.DiscoverNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService EnableNetworkDeviceSyslog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.EnableNetworkDeviceSyslog(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService GetNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		resp, httpRes, err := apiClient.NetworkDeviceAPI.GetNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService GetNetworkDeviceCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.GetNetworkDeviceCredentials(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService GetNetworkDeviceDefaults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var datacenterName string

		resp, httpRes, err := apiClient.NetworkDeviceAPI.GetNetworkDeviceDefaults(context.Background(), datacenterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService GetNetworkDeviceInventoryPorts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.GetNetworkDeviceInventoryPorts(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService GetNetworkDevicePorts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.GetNetworkDevicePorts(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService GetNetworkDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkDeviceAPI.GetNetworkDevices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerAddTagsToNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		resp, httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerAddTagsToNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerCreateNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerCreateNetworkDevice(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerDeleteNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerDeleteNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerGetIscsiBootServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerGetIscsiBootServers(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerGetNetworkDeviceStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerGetNetworkDeviceStatistics(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerGetTagsForNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		resp, httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerGetTagsForNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerRemoveTagsFromNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerRemoveTagsFromNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerReplaceNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		resp, httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerReplaceNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerUpdateNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		resp, httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerUpdateNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService NetworkDeviceControllerUpdateTagsForNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		resp, httpRes, err := apiClient.NetworkDeviceAPI.NetworkDeviceControllerUpdateTagsForNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService ReProvisionNetworkEquipment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkDeviceAPI.ReProvisionNetworkEquipment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService RemoveNetworkDeviceDefaults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.NetworkDeviceAPI.RemoveNetworkDeviceDefaults(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService ResetNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.ResetNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService RunExtensionOnNetworkDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		resp, httpRes, err := apiClient.NetworkDeviceAPI.RunExtensionOnNetworkDevice(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkDeviceAPIService SetNetworkDevicePortStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		httpRes, err := apiClient.NetworkDeviceAPI.SetNetworkDevicePortStatus(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
