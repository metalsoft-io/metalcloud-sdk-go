/*
MetalSoft REST API

Testing JobAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_JobAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test JobAPIService GetJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId float32

		resp, httpRes, err := apiClient.JobAPI.GetJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService GetJobExceptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId float32

		resp, httpRes, err := apiClient.JobAPI.GetJobExceptions(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService GetJobFromArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId float32

		resp, httpRes, err := apiClient.JobAPI.GetJobFromArchive(context.Background(), jobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService GetJobGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobGroupId float32

		resp, httpRes, err := apiClient.JobAPI.GetJobGroup(context.Background(), jobGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService GetJobGroupStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobGroupId float32

		resp, httpRes, err := apiClient.JobAPI.GetJobGroupStatistics(context.Background(), jobGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService GetJobGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.JobAPI.GetJobGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService GetJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.JobAPI.GetJobs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService GetJobsFromArchive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.JobAPI.GetJobsFromArchive(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService GetJobsStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.JobAPI.GetJobsStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService IssueCommandForJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId float32

		httpRes, err := apiClient.JobAPI.IssueCommandForJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService RetryJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId float32

		httpRes, err := apiClient.JobAPI.RetryJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobAPIService SkipJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobId float32

		httpRes, err := apiClient.JobAPI.SkipJob(context.Background(), jobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
