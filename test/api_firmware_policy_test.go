/*
MetalSoft REST API

Testing FirmwarePolicyAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_FirmwarePolicyAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FirmwarePolicyAPIService ApplyFirmwarePoliciesWithServerInstanceGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirmwarePolicyAPI.ApplyFirmwarePoliciesWithServerInstanceGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirmwarePolicyAPIService ApplyFirmwarePoliciesWithoutServerInstanceGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirmwarePolicyAPI.ApplyFirmwarePoliciesWithoutServerInstanceGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirmwarePolicyAPIService CreateFirmwarePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirmwarePolicyAPI.CreateFirmwarePolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirmwarePolicyAPIService DeleteFirmwarePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var firmwarePolicyId float32

		httpRes, err := apiClient.FirmwarePolicyAPI.DeleteFirmwarePolicy(context.Background(), firmwarePolicyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirmwarePolicyAPIService GenerateFirmwarePolicyAudit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var firmwarePolicyId float32

		resp, httpRes, err := apiClient.FirmwarePolicyAPI.GenerateFirmwarePolicyAudit(context.Background(), firmwarePolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirmwarePolicyAPIService GetFirmwarePolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirmwarePolicyAPI.GetFirmwarePolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirmwarePolicyAPIService GetFirmwarePolicyInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var firmwarePolicyId float32

		resp, httpRes, err := apiClient.FirmwarePolicyAPI.GetFirmwarePolicyInfo(context.Background(), firmwarePolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirmwarePolicyAPIService GetGlobalFirmwareConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirmwarePolicyAPI.GetGlobalFirmwareConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirmwarePolicyAPIService UpdateFirmwarePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var firmwarePolicyId float32

		resp, httpRes, err := apiClient.FirmwarePolicyAPI.UpdateFirmwarePolicy(context.Background(), firmwarePolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FirmwarePolicyAPIService UpdateGlobalFirmwareConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FirmwarePolicyAPI.UpdateGlobalFirmwareConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
