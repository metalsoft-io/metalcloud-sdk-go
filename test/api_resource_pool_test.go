/*
MetalSoft REST API

Testing ResourcePoolAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_ResourcePoolAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResourcePoolAPIService AddResourcePoolUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32
		var userId float32

		httpRes, err := apiClient.ResourcePoolAPI.AddResourcePoolUser(context.Background(), resourcePoolId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService AddServerToResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32
		var serverId float32

		httpRes, err := apiClient.ResourcePoolAPI.AddServerToResourcePool(context.Background(), resourcePoolId, serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService AddSubnetPoolToResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32
		var subnetPoolId float32

		httpRes, err := apiClient.ResourcePoolAPI.AddSubnetPoolToResourcePool(context.Background(), resourcePoolId, subnetPoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService CreateResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourcePoolAPI.CreateResourcePool(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService DeleteResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32

		httpRes, err := apiClient.ResourcePoolAPI.DeleteResourcePool(context.Background(), resourcePoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService GetResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32

		resp, httpRes, err := apiClient.ResourcePoolAPI.GetResourcePool(context.Background(), resourcePoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService GetResourcePoolServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32

		resp, httpRes, err := apiClient.ResourcePoolAPI.GetResourcePoolServers(context.Background(), resourcePoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService GetResourcePoolSubnetPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32

		resp, httpRes, err := apiClient.ResourcePoolAPI.GetResourcePoolSubnetPools(context.Background(), resourcePoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService GetResourcePoolUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32

		resp, httpRes, err := apiClient.ResourcePoolAPI.GetResourcePoolUsers(context.Background(), resourcePoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService GetResourcePools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourcePoolAPI.GetResourcePools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService GetUserResourcePools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.ResourcePoolAPI.GetUserResourcePools(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService RemoveResourcePoolUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32
		var userId float32

		httpRes, err := apiClient.ResourcePoolAPI.RemoveResourcePoolUser(context.Background(), resourcePoolId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService RemoveServerFromResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32
		var serverId float32

		httpRes, err := apiClient.ResourcePoolAPI.RemoveServerFromResourcePool(context.Background(), resourcePoolId, serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService RemoveSubnetPoolFromResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32
		var subnetPoolId float32

		httpRes, err := apiClient.ResourcePoolAPI.RemoveSubnetPoolFromResourcePool(context.Background(), resourcePoolId, subnetPoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcePoolAPIService UpdateResourcePool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourcePoolId float32

		resp, httpRes, err := apiClient.ResourcePoolAPI.UpdateResourcePool(context.Background(), resourcePoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
