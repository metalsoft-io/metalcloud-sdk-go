/*
MetalSoft REST API

Testing EndpointInstanceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_EndpointInstanceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EndpointInstanceAPIService CreateEndpointInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId int32

		resp, httpRes, err := apiClient.EndpointInstanceAPI.CreateEndpointInstance(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceAPIService DeleteEndpointInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceId int32

		httpRes, err := apiClient.EndpointInstanceAPI.DeleteEndpointInstance(context.Background(), endpointInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceAPIService GetEndpointInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceId int32

		resp, httpRes, err := apiClient.EndpointInstanceAPI.GetEndpointInstance(context.Background(), endpointInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceAPIService GetEndpointInstanceConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceId int32

		resp, httpRes, err := apiClient.EndpointInstanceAPI.GetEndpointInstanceConfig(context.Background(), endpointInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceAPIService GetEndpointInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EndpointInstanceAPI.GetEndpointInstances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceAPIService GetInfrastructureEndpointInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId int32

		resp, httpRes, err := apiClient.EndpointInstanceAPI.GetInfrastructureEndpointInstances(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceAPIService UpdateEndpointInstanceConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceId int32

		resp, httpRes, err := apiClient.EndpointInstanceAPI.UpdateEndpointInstanceConfig(context.Background(), endpointInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceAPIService UpdateEndpointInstanceMeta", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceId int32

		httpRes, err := apiClient.EndpointInstanceAPI.UpdateEndpointInstanceMeta(context.Background(), endpointInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
