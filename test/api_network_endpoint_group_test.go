/*
MetalSoft REST API

Testing NetworkEndpointGroupAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_NetworkEndpointGroupAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NetworkEndpointGroupAPIService AddLogicalNetworksToNetworkEndpointGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEndpointGroupId int32

		httpRes, err := apiClient.NetworkEndpointGroupAPI.AddLogicalNetworksToNetworkEndpointGroup(context.Background(), networkEndpointGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkEndpointGroupAPIService CreateNetworkEndpointGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkEndpointGroupAPI.CreateNetworkEndpointGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkEndpointGroupAPIService DeleteNetworkEndpointGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEndpointGroupId float32

		httpRes, err := apiClient.NetworkEndpointGroupAPI.DeleteNetworkEndpointGroup(context.Background(), networkEndpointGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkEndpointGroupAPIService GetNetworkEndpointGroupById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEndpointGroupId float32

		resp, httpRes, err := apiClient.NetworkEndpointGroupAPI.GetNetworkEndpointGroupById(context.Background(), networkEndpointGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkEndpointGroupAPIService GetNetworkEndpointGroupLogicalNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEndpointGroupId int32
		var logicalNetworkId int32

		resp, httpRes, err := apiClient.NetworkEndpointGroupAPI.GetNetworkEndpointGroupLogicalNetwork(context.Background(), networkEndpointGroupId, logicalNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkEndpointGroupAPIService GetNetworkEndpointGroupLogicalNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEndpointGroupId int32

		resp, httpRes, err := apiClient.NetworkEndpointGroupAPI.GetNetworkEndpointGroupLogicalNetworks(context.Background(), networkEndpointGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkEndpointGroupAPIService GetNetworkEndpointGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NetworkEndpointGroupAPI.GetNetworkEndpointGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkEndpointGroupAPIService RemoveLogicalNetworkFromNetworkEndpointGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEndpointGroupId int32
		var logicalNetworkId int32

		resp, httpRes, err := apiClient.NetworkEndpointGroupAPI.RemoveLogicalNetworkFromNetworkEndpointGroup(context.Background(), networkEndpointGroupId, logicalNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkEndpointGroupAPIService UpdateNetworkEndpointGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEndpointGroupId int32

		resp, httpRes, err := apiClient.NetworkEndpointGroupAPI.UpdateNetworkEndpointGroup(context.Background(), networkEndpointGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkEndpointGroupAPIService UpdateNetworkEndpointGroupLogicalNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkEndpointGroupId int32
		var logicalNetworkId int32

		resp, httpRes, err := apiClient.NetworkEndpointGroupAPI.UpdateNetworkEndpointGroupLogicalNetwork(context.Background(), networkEndpointGroupId, logicalNetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
