/*
MetalSoft REST API

Testing FileShareAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_FileShareAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FileShareAPIService CreateInfrastructureFileShare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32

		resp, httpRes, err := apiClient.FileShareAPI.CreateInfrastructureFileShare(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileShareAPIService DeleteFileShare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var fileShareId float32

		httpRes, err := apiClient.FileShareAPI.DeleteFileShare(context.Background(), infrastructureId, fileShareId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileShareAPIService GetFileShare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileShareId float32

		resp, httpRes, err := apiClient.FileShareAPI.GetFileShare(context.Background(), fileShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileShareAPIService GetFileShareHosts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var fileShareId float32

		resp, httpRes, err := apiClient.FileShareAPI.GetFileShareHosts(context.Background(), infrastructureId, fileShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileShareAPIService GetInfrastructureFileShare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var fileShareId float32

		resp, httpRes, err := apiClient.FileShareAPI.GetInfrastructureFileShare(context.Background(), infrastructureId, fileShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileShareAPIService GetInfrastructureFileShares", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32

		resp, httpRes, err := apiClient.FileShareAPI.GetInfrastructureFileShares(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileShareAPIService UpdateFileShare", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var fileShareId float32

		resp, httpRes, err := apiClient.FileShareAPI.UpdateFileShare(context.Background(), infrastructureId, fileShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileShareAPIService UpdateFileShareInstanceArrayHostsBulk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var fileShareId float32

		resp, httpRes, err := apiClient.FileShareAPI.UpdateFileShareInstanceArrayHostsBulk(context.Background(), infrastructureId, fileShareId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
