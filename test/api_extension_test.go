/*
MetalSoft REST API

Testing ExtensionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_ExtensionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExtensionAPIService ArchiveExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionId float32

		httpRes, err := apiClient.ExtensionAPI.ArchiveExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionAPIService CreateExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExtensionAPI.CreateExtension(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionAPIService GetExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionId float32

		resp, httpRes, err := apiClient.ExtensionAPI.GetExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionAPIService GetExtensions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExtensionAPI.GetExtensions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionAPIService MakePublicExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionId float32

		httpRes, err := apiClient.ExtensionAPI.MakePublicExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionAPIService PublishExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionId float32

		httpRes, err := apiClient.ExtensionAPI.PublishExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionAPIService UpdateExtension", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extensionId float32

		resp, httpRes, err := apiClient.ExtensionAPI.UpdateExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
