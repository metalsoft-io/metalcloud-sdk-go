/*
MetalSoft REST API

Testing ServerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_ServerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServerAPIService ArchiveServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		httpRes, err := apiClient.ServerAPI.ArchiveServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService DeleteServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		httpRes, err := apiClient.ServerAPI.DeleteServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService EnableServerSyslog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		httpRes, err := apiClient.ServerAPI.EnableServerSyslog(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerCapabilities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.GetServerCapabilities(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.GetServerCredentials(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.GetServerInfo(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerPowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.GetServerPowerStatus(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerRemoteConsoleInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.GetServerRemoteConsoleInfo(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServerVNCInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.GetServerVNCInfo(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAPI.GetServers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService GetServersStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAPI.GetServersStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService IdentifyServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		httpRes, err := apiClient.ServerAPI.IdentifyServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService ReRegisterServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.ReRegisterServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService RegisterProductionServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAPI.RegisterProductionServer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService RegisterServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerAPI.RegisterServer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService ResetServerToFactoryDefaults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		httpRes, err := apiClient.ServerAPI.ResetServerToFactoryDefaults(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService SetServerPowerState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		httpRes, err := apiClient.ServerAPI.SetServerPowerState(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService UpdateServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.UpdateServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService UpdateServerEnableSnmp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.UpdateServerEnableSnmp(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerAPIService UpdateServerIpmiCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerAPI.UpdateServerIpmiCredentials(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
