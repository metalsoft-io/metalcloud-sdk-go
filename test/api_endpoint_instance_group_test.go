/*
MetalSoft REST API

Testing EndpointInstanceGroupAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_EndpointInstanceGroupAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EndpointInstanceGroupAPIService CreateEndpointInstanceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.CreateEndpointInstanceGroup(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService CreateEndpointInstanceGroupLogicalNetworkACL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32
		var connectionId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.CreateEndpointInstanceGroupLogicalNetworkACL(context.Background(), endpointInstanceGroupId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService CreateEndpointInstanceGroupNetworkConfigurationConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.CreateEndpointInstanceGroupNetworkConfigurationConnection(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService DeleteEndpointInstanceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		httpRes, err := apiClient.EndpointInstanceGroupAPI.DeleteEndpointInstanceGroup(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService DeleteEndpointInstanceGroupLogicalNetworkACL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32
		var connectionId int32
		var ruleId int32

		httpRes, err := apiClient.EndpointInstanceGroupAPI.DeleteEndpointInstanceGroupLogicalNetworkACL(context.Background(), endpointInstanceGroupId, connectionId, ruleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService DeleteEndpointInstanceGroupNetworkConfigurationConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32
		var connectionId int32

		httpRes, err := apiClient.EndpointInstanceGroupAPI.DeleteEndpointInstanceGroupNetworkConfigurationConnection(context.Background(), endpointInstanceGroupId, connectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService GetEndpointInstanceGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.GetEndpointInstanceGroup(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService GetEndpointInstanceGroupConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.GetEndpointInstanceGroupConfig(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService GetEndpointInstanceGroupEndpointInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.GetEndpointInstanceGroupEndpointInstances(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService GetEndpointInstanceGroupLogicalNetworkACL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32
		var connectionId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.GetEndpointInstanceGroupLogicalNetworkACL(context.Background(), endpointInstanceGroupId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService GetEndpointInstanceGroupLogicalNetworkACLById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32
		var connectionId int32
		var ruleId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.GetEndpointInstanceGroupLogicalNetworkACLById(context.Background(), endpointInstanceGroupId, connectionId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService GetEndpointInstanceGroupNetworkConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.GetEndpointInstanceGroupNetworkConfiguration(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService GetEndpointInstanceGroupNetworkConfigurationConnectionById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32
		var connectionId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.GetEndpointInstanceGroupNetworkConfigurationConnectionById(context.Background(), endpointInstanceGroupId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService GetEndpointInstanceGroupNetworkConfigurationConnections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.GetEndpointInstanceGroupNetworkConfigurationConnections(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService GetInfrastructureEndpointInstanceGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.GetInfrastructureEndpointInstanceGroups(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService UpdateEndpointInstanceGroupConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.UpdateEndpointInstanceGroupConfig(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService UpdateEndpointInstanceGroupLogicalNetworkACL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32
		var connectionId int32
		var ruleId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.UpdateEndpointInstanceGroupLogicalNetworkACL(context.Background(), endpointInstanceGroupId, connectionId, ruleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService UpdateEndpointInstanceGroupMeta", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		httpRes, err := apiClient.EndpointInstanceGroupAPI.UpdateEndpointInstanceGroupMeta(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService UpdateEndpointInstanceGroupNetworkConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.UpdateEndpointInstanceGroupNetworkConfiguration(context.Background(), endpointInstanceGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointInstanceGroupAPIService UpdateEndpointInstanceGroupNetworkConfigurationConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointInstanceGroupId int32
		var connectionId float32

		resp, httpRes, err := apiClient.EndpointInstanceGroupAPI.UpdateEndpointInstanceGroupNetworkConfigurationConnection(context.Background(), endpointInstanceGroupId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
