/*
MetalSoft REST API

Testing SharedDriveAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_SharedDriveAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SharedDriveAPIService CreateSharedDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var sharedDriveId float32

		resp, httpRes, err := apiClient.SharedDriveAPI.CreateSharedDrive(context.Background(), infrastructureId, sharedDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedDriveAPIService DeleteSharedDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var sharedDriveId float32

		httpRes, err := apiClient.SharedDriveAPI.DeleteSharedDrive(context.Background(), infrastructureId, sharedDriveId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedDriveAPIService GetInfrastructureSharedDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var sharedDriveId float32

		resp, httpRes, err := apiClient.SharedDriveAPI.GetInfrastructureSharedDrive(context.Background(), infrastructureId, sharedDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedDriveAPIService GetInfrastructureSharedDrives", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32

		resp, httpRes, err := apiClient.SharedDriveAPI.GetInfrastructureSharedDrives(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedDriveAPIService GetSharedDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sharedDriveId float32

		resp, httpRes, err := apiClient.SharedDriveAPI.GetSharedDrive(context.Background(), sharedDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedDriveAPIService GetSharedDriveConfigInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var sharedDriveId float32

		resp, httpRes, err := apiClient.SharedDriveAPI.GetSharedDriveConfigInfo(context.Background(), infrastructureId, sharedDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedDriveAPIService GetSharedDriveHosts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var sharedDriveId float32

		resp, httpRes, err := apiClient.SharedDriveAPI.GetSharedDriveHosts(context.Background(), infrastructureId, sharedDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedDriveAPIService PatchSharedDriveConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var sharedDriveId float32

		resp, httpRes, err := apiClient.SharedDriveAPI.PatchSharedDriveConfig(context.Background(), infrastructureId, sharedDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedDriveAPIService PatchSharedDriveMeta", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var sharedDriveId float32

		resp, httpRes, err := apiClient.SharedDriveAPI.PatchSharedDriveMeta(context.Background(), infrastructureId, sharedDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharedDriveAPIService UpdateSharedDriveInstanceArrayHostsBulk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var sharedDriveId float32

		resp, httpRes, err := apiClient.SharedDriveAPI.UpdateSharedDriveInstanceArrayHostsBulk(context.Background(), infrastructureId, sharedDriveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
