/*
MetalSoft REST API

Testing ServerFirmwareAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_ServerFirmwareAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServerFirmwareAPIService FetchAndUpdateServerFirmwareAvailableVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		httpRes, err := apiClient.ServerFirmwareAPI.FetchAndUpdateServerFirmwareAvailableVersions(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService GenerateServersFirmwareUpgradeAudit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerFirmwareAPI.GenerateServersFirmwareUpgradeAudit(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService GetServerComponentInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32
		var componentId float32

		resp, httpRes, err := apiClient.ServerFirmwareAPI.GetServerComponentInfo(context.Background(), serverId, componentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService GetServerComponents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerFirmwareAPI.GetServerComponents(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService GetServerFirmwareInventory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerFirmwareAPI.GetServerFirmwareInventory(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService ScheduleServerFirmwareUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		httpRes, err := apiClient.ServerFirmwareAPI.ScheduleServerFirmwareUpgrade(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService UpdateServerComponent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32
		var componentId float32

		resp, httpRes, err := apiClient.ServerFirmwareAPI.UpdateServerComponent(context.Background(), serverId, componentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService UpdateServerFirmwareInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		httpRes, err := apiClient.ServerFirmwareAPI.UpdateServerFirmwareInfo(context.Background(), serverId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService UpgradeFirmwareOfServer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32

		resp, httpRes, err := apiClient.ServerFirmwareAPI.UpgradeFirmwareOfServer(context.Background(), serverId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService UpgradeFirmwareOfServerComponent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverId float32
		var serverComponentId float32

		resp, httpRes, err := apiClient.ServerFirmwareAPI.UpgradeFirmwareOfServerComponent(context.Background(), serverId, serverComponentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerFirmwareAPIService UpgradeFirmwareOfServersBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerFirmwareAPI.UpgradeFirmwareOfServersBatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
