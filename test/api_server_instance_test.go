/*
MetalSoft REST API

Testing ServerInstanceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_ServerInstanceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServerInstanceAPIService CreateServerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.CreateServerInstance(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService DeleteServerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		httpRes, err := apiClient.ServerInstanceAPI.DeleteServerInstance(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetInfrastructureServerInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetInfrastructureServerInstances(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetPowerFromServerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		httpRes, err := apiClient.ServerInstanceAPI.GetPowerFromServerInstance(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetPowerStatusBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetPowerStatusBatch(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetServerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetServerInstance(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetServerInstanceConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetServerInstanceConfig(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetServerInstanceCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetServerInstanceCredentials(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetServerInstanceDrives", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetServerInstanceDrives(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetServerInstanceInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32
		var interfaceId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetServerInstanceInterface(context.Background(), serverInstanceId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetServerInstanceInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetServerInstanceInterfaces(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetServerInstanceStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetServerInstanceStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetServerInstanceVariables", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetServerInstanceVariables(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService GetServerInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ServerInstanceAPI.GetServerInstances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService ReinstallServerInstanceOS", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		httpRes, err := apiClient.ServerInstanceAPI.ReinstallServerInstanceOS(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService ResetServerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		httpRes, err := apiClient.ServerInstanceAPI.ResetServerInstance(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService SetPowerStatusBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId int32

		httpRes, err := apiClient.ServerInstanceAPI.SetPowerStatusBatch(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService SetPowerToServerInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		httpRes, err := apiClient.ServerInstanceAPI.SetPowerToServerInstance(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService UpdateServerInstanceConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.UpdateServerInstanceConfig(context.Background(), serverInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServerInstanceAPIService UpdateServerInstanceInterfaceConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serverInstanceId int32
		var interfaceId int32

		resp, httpRes, err := apiClient.ServerInstanceAPI.UpdateServerInstanceInterfaceConfig(context.Background(), serverInstanceId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
