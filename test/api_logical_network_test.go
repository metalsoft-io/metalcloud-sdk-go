/*
MetalSoft REST API

Testing LogicalNetworkAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_LogicalNetworkAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LogicalNetworkAPIService ApplyProfilesToLogicalNetworkConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.ApplyProfilesToLogicalNetworkConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService CreateLogicalNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogicalNetworkAPI.CreateLogicalNetwork(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService CreateLogicalNetworkConfigIpv4SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.CreateLogicalNetworkConfigIpv4SubnetAllocationStrategy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService CreateLogicalNetworkConfigIpv6SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.CreateLogicalNetworkConfigIpv6SubnetAllocationStrategy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService CreateLogicalNetworkConfigVlanAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.CreateLogicalNetworkConfigVlanAllocationStrategy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService CreateLogicalNetworkConfigVniAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.CreateLogicalNetworkConfigVniAllocationStrategy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService CreateLogicalNetworkFromProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogicalNetworkAPI.CreateLogicalNetworkFromProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService DeleteLogicalNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		httpRes, err := apiClient.LogicalNetworkAPI.DeleteLogicalNetwork(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService DeleteLogicalNetworkConfigIpv4SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		httpRes, err := apiClient.LogicalNetworkAPI.DeleteLogicalNetworkConfigIpv4SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService DeleteLogicalNetworkConfigIpv6SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		httpRes, err := apiClient.LogicalNetworkAPI.DeleteLogicalNetworkConfigIpv6SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService DeleteLogicalNetworkConfigVlanAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		httpRes, err := apiClient.LogicalNetworkAPI.DeleteLogicalNetworkConfigVlanAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService DeleteLogicalNetworkConfigVniAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		httpRes, err := apiClient.LogicalNetworkAPI.DeleteLogicalNetworkConfigVniAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService DetachExternalConnectionLogicalNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var externalConnectionId float32

		httpRes, err := apiClient.LogicalNetworkAPI.DetachExternalConnectionLogicalNetwork(context.Background(), id, externalConnectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetwork(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkAttachedExternalConnectionLogicalNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkAttachedExternalConnectionLogicalNetworks(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkAttachedExternalConnections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkAttachedExternalConnections(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkConfigIpv4SubnetAllocationStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkConfigIpv4SubnetAllocationStrategies(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkConfigIpv4SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkConfigIpv4SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkConfigIpv6SubnetAllocationStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkConfigIpv6SubnetAllocationStrategies(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkConfigIpv6SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkConfigIpv6SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkConfigVlanAllocationStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkConfigVlanAllocationStrategies(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkConfigVlanAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkConfigVlanAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkConfigVniAllocationStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkConfigVniAllocationStrategies(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworkConfigVniAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworkConfigVniAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService GetLogicalNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogicalNetworkAPI.GetLogicalNetworks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService ReplaceLogicalNetworkConfigIpv4SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.ReplaceLogicalNetworkConfigIpv4SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService ReplaceLogicalNetworkConfigIpv6SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.ReplaceLogicalNetworkConfigIpv6SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService ReplaceLogicalNetworkConfigVlanAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.ReplaceLogicalNetworkConfigVlanAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService ReplaceLogicalNetworkConfigVniAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.ReplaceLogicalNetworkConfigVniAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService UpdateLogicalNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.UpdateLogicalNetwork(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkAPIService UpdateLogicalNetworkConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkAPI.UpdateLogicalNetworkConfig(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
