/*
MetalSoft REST API

Testing VMInstanceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_VMInstanceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VMInstanceAPIService ApplyVMTypeOnVMInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var vmInstanceId float32
		var vmTypeId float32

		resp, httpRes, err := apiClient.VMInstanceAPI.ApplyVMTypeOnVMInstance(context.Background(), infrastructureId, vmInstanceId, vmTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMInstanceAPIService CreateVMInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32

		resp, httpRes, err := apiClient.VMInstanceAPI.CreateVMInstance(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMInstanceAPIService DeleteVMInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var vmInstanceId float32

		httpRes, err := apiClient.VMInstanceAPI.DeleteVMInstance(context.Background(), infrastructureId, vmInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMInstanceAPIService GetVMInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var vmInstanceId float32

		resp, httpRes, err := apiClient.VMInstanceAPI.GetVMInstance(context.Background(), infrastructureId, vmInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMInstanceAPIService GetVMInstancePowerStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var vmInstanceId float32

		resp, httpRes, err := apiClient.VMInstanceAPI.GetVMInstancePowerStatus(context.Background(), infrastructureId, vmInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMInstanceAPIService RebootVMInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var vmInstanceId float32

		httpRes, err := apiClient.VMInstanceAPI.RebootVMInstance(context.Background(), infrastructureId, vmInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMInstanceAPIService ShutdownVMInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var vmInstanceId float32

		httpRes, err := apiClient.VMInstanceAPI.ShutdownVMInstance(context.Background(), infrastructureId, vmInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMInstanceAPIService StartVMInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var vmInstanceId float32

		httpRes, err := apiClient.VMInstanceAPI.StartVMInstance(context.Background(), infrastructureId, vmInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMInstanceAPIService UpdateVMInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var vmInstanceId float32

		resp, httpRes, err := apiClient.VMInstanceAPI.UpdateVMInstance(context.Background(), infrastructureId, vmInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
