/*
MetalSoft REST API

Testing DriveAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_DriveAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DriveAPIService CreateDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32

		resp, httpRes, err := apiClient.DriveAPI.CreateDrive(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DriveAPIService DeleteDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var driveId float32

		httpRes, err := apiClient.DriveAPI.DeleteDrive(context.Background(), infrastructureId, driveId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DriveAPIService GetDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var driveId float32

		resp, httpRes, err := apiClient.DriveAPI.GetDrive(context.Background(), driveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DriveAPIService GetDriveConfigInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var driveId float32

		resp, httpRes, err := apiClient.DriveAPI.GetDriveConfigInfo(context.Background(), infrastructureId, driveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DriveAPIService GetInfrastructureDrive", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var driveId float32

		resp, httpRes, err := apiClient.DriveAPI.GetInfrastructureDrive(context.Background(), infrastructureId, driveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DriveAPIService GetInfrastructureDrives", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32

		resp, httpRes, err := apiClient.DriveAPI.GetInfrastructureDrives(context.Background(), infrastructureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DriveAPIService PatchDriveConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var driveId float32

		resp, httpRes, err := apiClient.DriveAPI.PatchDriveConfig(context.Background(), infrastructureId, driveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DriveAPIService PatchDriveMeta", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var infrastructureId float32
		var driveId float32

		resp, httpRes, err := apiClient.DriveAPI.PatchDriveMeta(context.Background(), infrastructureId, driveId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
