/*
MetalSoft REST API

Testing AccountAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_AccountAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountAPIService AccountControllerGetUserConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId float32

		resp, httpRes, err := apiClient.AccountAPI.AccountControllerGetUserConfiguration(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService ArchiveAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId float32

		resp, httpRes, err := apiClient.AccountAPI.ArchiveAccount(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService CreateAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountAPI.CreateAccount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService GetAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId float32

		resp, httpRes, err := apiClient.AccountAPI.GetAccount(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService GetAccountLimits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId float32

		resp, httpRes, err := apiClient.AccountAPI.GetAccountLimits(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService GetAccountUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId float32

		resp, httpRes, err := apiClient.AccountAPI.GetAccountUsers(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService GetAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountAPI.GetAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService UnarchiveAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId float32

		resp, httpRes, err := apiClient.AccountAPI.UnarchiveAccount(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService UpdateAccountConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId float32

		resp, httpRes, err := apiClient.AccountAPI.UpdateAccountConfig(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService UpdateAccountLimits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId float32

		resp, httpRes, err := apiClient.AccountAPI.UpdateAccountLimits(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
