/*
MetalSoft REST API

Testing DNSZoneAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_DNSZoneAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DNSZoneAPIService CreateDNSZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DNSZoneAPI.CreateDNSZone(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DNSZoneAPIService DeleteDNSZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dnsZoneId float32

		httpRes, err := apiClient.DNSZoneAPI.DeleteDNSZone(context.Background(), dnsZoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DNSZoneAPIService GetDNSRecordSetById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var recordSetId float32

		resp, httpRes, err := apiClient.DNSZoneAPI.GetDNSRecordSetById(context.Background(), id, recordSetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DNSZoneAPIService GetDNSZoneById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dnsZoneId float32

		resp, httpRes, err := apiClient.DNSZoneAPI.GetDNSZoneById(context.Background(), dnsZoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DNSZoneAPIService GetDNSZoneNameservers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dnsZoneId float32

		resp, httpRes, err := apiClient.DNSZoneAPI.GetDNSZoneNameservers(context.Background(), dnsZoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DNSZoneAPIService GetDNSZones", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DNSZoneAPI.GetDNSZones(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DNSZoneAPIService ListDNSRecordSetsByZoneId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.DNSZoneAPI.ListDNSRecordSetsByZoneId(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DNSZoneAPIService UpdateDNSZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dnsZoneId float32

		resp, httpRes, err := apiClient.DNSZoneAPI.UpdateDNSZone(context.Background(), dnsZoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
