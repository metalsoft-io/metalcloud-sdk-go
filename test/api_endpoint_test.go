/*
MetalSoft REST API

Testing EndpointAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_EndpointAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EndpointAPIService CreateEndpoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EndpointAPI.CreateEndpoint(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService CreateEndpointInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId int32

		resp, httpRes, err := apiClient.EndpointAPI.CreateEndpointInterface(context.Background(), endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService DeleteEndpoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId int32

		httpRes, err := apiClient.EndpointAPI.DeleteEndpoint(context.Background(), endpointId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService DeleteEndpointInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId int32
		var endpointInterfaceId int32

		httpRes, err := apiClient.EndpointAPI.DeleteEndpointInterface(context.Background(), endpointId, endpointInterfaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService GetEndpointById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId int32

		resp, httpRes, err := apiClient.EndpointAPI.GetEndpointById(context.Background(), endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService GetEndpointInterfaceById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId int32
		var endpointInterfaceId int32

		resp, httpRes, err := apiClient.EndpointAPI.GetEndpointInterfaceById(context.Background(), endpointId, endpointInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService GetEndpointInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId int32

		resp, httpRes, err := apiClient.EndpointAPI.GetEndpointInterfaces(context.Background(), endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService GetEndpoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EndpointAPI.GetEndpoints(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService UpdateEndpoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId int32

		resp, httpRes, err := apiClient.EndpointAPI.UpdateEndpoint(context.Background(), endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService UpdateEndpointInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endpointId int32
		var endpointInterfaceId int32

		resp, httpRes, err := apiClient.EndpointAPI.UpdateEndpointInterface(context.Background(), endpointId, endpointInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
