/*
MetalSoft REST API

Testing ExternalConnectionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_ExternalConnectionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExternalConnectionAPIService CreateExternalConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalConnectionAPI.CreateExternalConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService CreateExternalConnectionInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.CreateExternalConnectionInterface(context.Background(), externalConnectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService CreateExternalConnectionLogicalNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.CreateExternalConnectionLogicalNetwork(context.Background(), externalConnectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService DeleteExternalConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32

		httpRes, err := apiClient.ExternalConnectionAPI.DeleteExternalConnection(context.Background(), externalConnectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService DeleteExternalConnectionInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32
		var externalConnectionInterfaceId int32

		httpRes, err := apiClient.ExternalConnectionAPI.DeleteExternalConnectionInterface(context.Background(), externalConnectionId, externalConnectionInterfaceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService DeleteExternalConnectionLogicalNetwork", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32
		var id int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.DeleteExternalConnectionLogicalNetwork(context.Background(), externalConnectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService GetExternalConnectionById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.GetExternalConnectionById(context.Background(), externalConnectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService GetExternalConnectionInterfaceById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32
		var externalConnectionInterfaceId int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.GetExternalConnectionInterfaceById(context.Background(), externalConnectionId, externalConnectionInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService GetExternalConnectionInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.GetExternalConnectionInterfaces(context.Background(), externalConnectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService GetExternalConnectionLogicalNetworkById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32
		var id int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.GetExternalConnectionLogicalNetworkById(context.Background(), externalConnectionId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService GetExternalConnectionLogicalNetworks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.GetExternalConnectionLogicalNetworks(context.Background(), externalConnectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService GetExternalConnections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalConnectionAPI.GetExternalConnections(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService GetNetworkDeviceInterfacesAndExternalConnections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var networkDeviceId float32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.GetNetworkDeviceInterfacesAndExternalConnections(context.Background(), networkDeviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService UpdateExternalConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.UpdateExternalConnection(context.Background(), externalConnectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalConnectionAPIService UpdateExternalConnectionInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalConnectionId int32
		var externalConnectionInterfaceId int32

		resp, httpRes, err := apiClient.ExternalConnectionAPI.UpdateExternalConnectionInterface(context.Background(), externalConnectionId, externalConnectionInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
