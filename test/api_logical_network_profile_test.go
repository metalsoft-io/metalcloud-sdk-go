/*
MetalSoft REST API

Testing LogicalNetworkProfileAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_LogicalNetworkProfileAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LogicalNetworkProfileAPIService CreateLogicalNetworkProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.CreateLogicalNetworkProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService CreateLogicalNetworkProfileIpv4SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.CreateLogicalNetworkProfileIpv4SubnetAllocationStrategy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.CreateLogicalNetworkProfileIpv6SubnetAllocationStrategy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService CreateLogicalNetworkProfileVniAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.CreateLogicalNetworkProfileVniAllocationStrategy(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService DeleteLogicalNetworkProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		httpRes, err := apiClient.LogicalNetworkProfileAPI.DeleteLogicalNetworkProfile(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService DeleteLogicalNetworkProfileIpv4SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		httpRes, err := apiClient.LogicalNetworkProfileAPI.DeleteLogicalNetworkProfileIpv4SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService DeleteLogicalNetworkProfileIpv6SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		httpRes, err := apiClient.LogicalNetworkProfileAPI.DeleteLogicalNetworkProfileIpv6SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService DeleteLogicalNetworkProfileVlanAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		httpRes, err := apiClient.LogicalNetworkProfileAPI.DeleteLogicalNetworkProfileVlanAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService DeleteLogicalNetworkProfileVniAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		httpRes, err := apiClient.LogicalNetworkProfileAPI.DeleteLogicalNetworkProfileVniAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfile(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfileIpv4SubnetAllocationStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfileIpv4SubnetAllocationStrategies(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfileIpv4SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfileIpv4SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfileIpv6SubnetAllocationStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfileIpv6SubnetAllocationStrategies(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfileIpv6SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfileIpv6SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfileVlanAllocationStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfileVlanAllocationStrategies(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfileVlanAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfileVlanAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfileVniAllocationStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfileVniAllocationStrategies(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfileVniAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfileVniAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService GetLogicalNetworkProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.GetLogicalNetworkProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService ReplaceLogicalNetworkProfileIpv4SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.ReplaceLogicalNetworkProfileIpv4SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService ReplaceLogicalNetworkProfileIpv6SubnetAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.ReplaceLogicalNetworkProfileIpv6SubnetAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService ReplaceLogicalNetworkProfileVlanAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.ReplaceLogicalNetworkProfileVlanAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService ReplaceLogicalNetworkProfileVniAllocationStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32
		var allocationStrategyId float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.ReplaceLogicalNetworkProfileVniAllocationStrategy(context.Background(), id, allocationStrategyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LogicalNetworkProfileAPIService UpdateLogicalNetworkProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.LogicalNetworkProfileAPI.UpdateLogicalNetworkProfile(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
