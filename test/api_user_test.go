/*
MetalSoft REST API

Testing UserAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_UserAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserAPIService ArchiveUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.ArchiveUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService ChangeUserAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.ChangeUserAccount(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService CreateUserAuthorized", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.CreateUserAuthorized(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.GetUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetUserLimits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.GetUserLimits(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.GetUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UnarchiveUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UnarchiveUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UpdateUserConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UpdateUserConfig(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UpdateUserLimits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UpdateUserLimits(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerAddDelegate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32
		var delegateId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerAddDelegate(context.Background(), userId, delegateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerAddUserSshKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerAddUserSshKey(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerDeleteUserSshKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32
		var keyId float32

		httpRes, err := apiClient.UserAPI.UserControllerDeleteUserSshKey(context.Background(), userId, keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerDisableTwoFactorAuthentication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		httpRes, err := apiClient.UserAPI.UserControllerDisableTwoFactorAuthentication(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerEnableTwoFactorAuthentication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		httpRes, err := apiClient.UserAPI.UserControllerEnableTwoFactorAuthentication(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerGenerateTwoFactorAuthenticationSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerGenerateTwoFactorAuthenticationSecret(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerGetUserApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerGetUserApiKey(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerGetUserChildDelegates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerGetUserChildDelegates(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerGetUserConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerGetUserConfiguration(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerGetUserParentDelegates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerGetUserParentDelegates(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerGetUserPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerGetUserPermissions(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerGetUserSshKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32
		var keyId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerGetUserSshKey(context.Background(), userId, keyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerGetUserSshKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerGetUserSshKeys(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerGetUserSuspendReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerGetUserSuspendReasons(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerRegenerateJwtSalt", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerRegenerateJwtSalt(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerRegenerateUserApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerRegenerateUserApiKey(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerRemoveDelegate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32
		var delegateId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerRemoveDelegate(context.Background(), userId, delegateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerSuspendUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerSuspendUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerUnsuspendUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		httpRes, err := apiClient.UserAPI.UserControllerUnsuspendUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerUpdateUserEmail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerUpdateUserEmail(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerUpdateUserMeta", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerUpdateUserMeta(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerUpdateUserPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerUpdateUserPassword(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UserControllerUpdateUserPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId float32

		resp, httpRes, err := apiClient.UserAPI.UserControllerUpdateUserPermissions(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
