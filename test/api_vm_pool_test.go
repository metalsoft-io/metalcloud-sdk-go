/*
MetalSoft REST API

Testing VMPoolAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sdk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/metalsoft-io/metalcloud-sdk-go"
)

func Test_sdk_VMPoolAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VMPoolAPIService CreateVMPool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VMPoolAPI.CreateVMPool(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService DeleteVMPool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32

		httpRes, err := apiClient.VMPoolAPI.DeleteVMPool(context.Background(), vmPoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService GetVMPool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32

		resp, httpRes, err := apiClient.VMPoolAPI.GetVMPool(context.Background(), vmPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService GetVMPoolClusterHost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32
		var vmPoolClusterHostId float32

		resp, httpRes, err := apiClient.VMPoolAPI.GetVMPoolClusterHost(context.Background(), vmPoolId, vmPoolClusterHostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService GetVMPoolClusterHostInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32
		var vmPoolClusterHostId float32
		var vmPoolClusterHostInterfaceId float32

		resp, httpRes, err := apiClient.VMPoolAPI.GetVMPoolClusterHostInterface(context.Background(), vmPoolId, vmPoolClusterHostId, vmPoolClusterHostInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService GetVMPoolClusterHostInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32
		var vmPoolClusterHostId float32

		resp, httpRes, err := apiClient.VMPoolAPI.GetVMPoolClusterHostInterfaces(context.Background(), vmPoolId, vmPoolClusterHostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService GetVMPoolClusterHostVMs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32
		var vmPoolClusterHostId float32

		resp, httpRes, err := apiClient.VMPoolAPI.GetVMPoolClusterHostVMs(context.Background(), vmPoolId, vmPoolClusterHostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService GetVMPoolClusterHosts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32

		resp, httpRes, err := apiClient.VMPoolAPI.GetVMPoolClusterHosts(context.Background(), vmPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService GetVMPoolCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32

		resp, httpRes, err := apiClient.VMPoolAPI.GetVMPoolCredentials(context.Background(), vmPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService GetVMPoolVMs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32

		resp, httpRes, err := apiClient.VMPoolAPI.GetVMPoolVMs(context.Background(), vmPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService GetVMPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VMPoolAPI.GetVMPools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService UpdateVMPool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32

		resp, httpRes, err := apiClient.VMPoolAPI.UpdateVMPool(context.Background(), vmPoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VMPoolAPIService UpdateVMPoolClusterHostInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vmPoolId float32
		var vmPoolClusterHostId float32
		var vmPoolClusterHostInterfaceId float32

		resp, httpRes, err := apiClient.VMPoolAPI.UpdateVMPoolClusterHostInterface(context.Background(), vmPoolId, vmPoolClusterHostId, vmPoolClusterHostInterfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
