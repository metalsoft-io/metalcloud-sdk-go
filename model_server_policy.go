/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerPolicy{}

// ServerPolicy struct for ServerPolicy
type ServerPolicy struct {
	// Server registration type
	RegisterCredentials string `json:"registerCredentials"`
	// Minimum number of switch-connected interfaces required
	MinimumNumberOfConnectedInterfaces float32 `json:"minimumNumberOfConnectedInterfaces"`
	// Option82 to IP mapping
	DhcpOption82ToIPMapping map[string]interface{} `json:"dhcpOption82ToIPMapping"`
	// Whether to enable DHCP BMC MAC address whitelist
	DhcpBmcMacAddressWhitelistEnabled bool `json:"dhcpBmcMacAddressWhitelistEnabled"`
	// List of DHCP BMC MAC address whitelist
	DhcpBmcMacAddressWhitelist []string `json:"dhcpBmcMacAddressWhitelist"`
	// Whether to disable TPM after registration
	DisableTpmAfterRegistration bool `json:"disableTpmAfterRegistration"`
	// Whether syslog monitoring is enabled
	SyslogMonitoringEnabled bool `json:"syslogMonitoringEnabled"`
	// Default server cleanup policy ID
	DefaultServerCleanupPolicyID float32 `json:"defaultServerCleanupPolicyID"`
	// Automatically allocate server types
	AutomaticallyAllocateServerTypes bool `json:"automaticallyAllocateServerTypes"`
	// Automatically set servers as available
	AutomaticallySetServersAsAvailable bool `json:"automaticallySetServersAsAvailable"`
	// Server registration BIOS profile
	ServerRegistrationBiosProfile []ServerRegistrationBiosProfile `json:"serverRegistrationBiosProfile"`
	AdditionalProperties map[string]interface{}
}

type _ServerPolicy ServerPolicy

// NewServerPolicy instantiates a new ServerPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerPolicy(registerCredentials string, minimumNumberOfConnectedInterfaces float32, dhcpOption82ToIPMapping map[string]interface{}, dhcpBmcMacAddressWhitelistEnabled bool, dhcpBmcMacAddressWhitelist []string, disableTpmAfterRegistration bool, syslogMonitoringEnabled bool, defaultServerCleanupPolicyID float32, automaticallyAllocateServerTypes bool, automaticallySetServersAsAvailable bool, serverRegistrationBiosProfile []ServerRegistrationBiosProfile) *ServerPolicy {
	this := ServerPolicy{}
	this.RegisterCredentials = registerCredentials
	this.MinimumNumberOfConnectedInterfaces = minimumNumberOfConnectedInterfaces
	this.DhcpOption82ToIPMapping = dhcpOption82ToIPMapping
	this.DhcpBmcMacAddressWhitelistEnabled = dhcpBmcMacAddressWhitelistEnabled
	this.DhcpBmcMacAddressWhitelist = dhcpBmcMacAddressWhitelist
	this.DisableTpmAfterRegistration = disableTpmAfterRegistration
	this.SyslogMonitoringEnabled = syslogMonitoringEnabled
	this.DefaultServerCleanupPolicyID = defaultServerCleanupPolicyID
	this.AutomaticallyAllocateServerTypes = automaticallyAllocateServerTypes
	this.AutomaticallySetServersAsAvailable = automaticallySetServersAsAvailable
	this.ServerRegistrationBiosProfile = serverRegistrationBiosProfile
	return &this
}

// NewServerPolicyWithDefaults instantiates a new ServerPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerPolicyWithDefaults() *ServerPolicy {
	this := ServerPolicy{}
	return &this
}

// GetRegisterCredentials returns the RegisterCredentials field value
func (o *ServerPolicy) GetRegisterCredentials() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegisterCredentials
}

// GetRegisterCredentialsOk returns a tuple with the RegisterCredentials field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetRegisterCredentialsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegisterCredentials, true
}

// SetRegisterCredentials sets field value
func (o *ServerPolicy) SetRegisterCredentials(v string) {
	o.RegisterCredentials = v
}

// GetMinimumNumberOfConnectedInterfaces returns the MinimumNumberOfConnectedInterfaces field value
func (o *ServerPolicy) GetMinimumNumberOfConnectedInterfaces() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MinimumNumberOfConnectedInterfaces
}

// GetMinimumNumberOfConnectedInterfacesOk returns a tuple with the MinimumNumberOfConnectedInterfaces field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetMinimumNumberOfConnectedInterfacesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumNumberOfConnectedInterfaces, true
}

// SetMinimumNumberOfConnectedInterfaces sets field value
func (o *ServerPolicy) SetMinimumNumberOfConnectedInterfaces(v float32) {
	o.MinimumNumberOfConnectedInterfaces = v
}

// GetDhcpOption82ToIPMapping returns the DhcpOption82ToIPMapping field value
func (o *ServerPolicy) GetDhcpOption82ToIPMapping() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.DhcpOption82ToIPMapping
}

// GetDhcpOption82ToIPMappingOk returns a tuple with the DhcpOption82ToIPMapping field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetDhcpOption82ToIPMappingOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.DhcpOption82ToIPMapping, true
}

// SetDhcpOption82ToIPMapping sets field value
func (o *ServerPolicy) SetDhcpOption82ToIPMapping(v map[string]interface{}) {
	o.DhcpOption82ToIPMapping = v
}

// GetDhcpBmcMacAddressWhitelistEnabled returns the DhcpBmcMacAddressWhitelistEnabled field value
func (o *ServerPolicy) GetDhcpBmcMacAddressWhitelistEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DhcpBmcMacAddressWhitelistEnabled
}

// GetDhcpBmcMacAddressWhitelistEnabledOk returns a tuple with the DhcpBmcMacAddressWhitelistEnabled field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetDhcpBmcMacAddressWhitelistEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DhcpBmcMacAddressWhitelistEnabled, true
}

// SetDhcpBmcMacAddressWhitelistEnabled sets field value
func (o *ServerPolicy) SetDhcpBmcMacAddressWhitelistEnabled(v bool) {
	o.DhcpBmcMacAddressWhitelistEnabled = v
}

// GetDhcpBmcMacAddressWhitelist returns the DhcpBmcMacAddressWhitelist field value
func (o *ServerPolicy) GetDhcpBmcMacAddressWhitelist() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DhcpBmcMacAddressWhitelist
}

// GetDhcpBmcMacAddressWhitelistOk returns a tuple with the DhcpBmcMacAddressWhitelist field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetDhcpBmcMacAddressWhitelistOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DhcpBmcMacAddressWhitelist, true
}

// SetDhcpBmcMacAddressWhitelist sets field value
func (o *ServerPolicy) SetDhcpBmcMacAddressWhitelist(v []string) {
	o.DhcpBmcMacAddressWhitelist = v
}

// GetDisableTpmAfterRegistration returns the DisableTpmAfterRegistration field value
func (o *ServerPolicy) GetDisableTpmAfterRegistration() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DisableTpmAfterRegistration
}

// GetDisableTpmAfterRegistrationOk returns a tuple with the DisableTpmAfterRegistration field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetDisableTpmAfterRegistrationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisableTpmAfterRegistration, true
}

// SetDisableTpmAfterRegistration sets field value
func (o *ServerPolicy) SetDisableTpmAfterRegistration(v bool) {
	o.DisableTpmAfterRegistration = v
}

// GetSyslogMonitoringEnabled returns the SyslogMonitoringEnabled field value
func (o *ServerPolicy) GetSyslogMonitoringEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SyslogMonitoringEnabled
}

// GetSyslogMonitoringEnabledOk returns a tuple with the SyslogMonitoringEnabled field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetSyslogMonitoringEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyslogMonitoringEnabled, true
}

// SetSyslogMonitoringEnabled sets field value
func (o *ServerPolicy) SetSyslogMonitoringEnabled(v bool) {
	o.SyslogMonitoringEnabled = v
}

// GetDefaultServerCleanupPolicyID returns the DefaultServerCleanupPolicyID field value
func (o *ServerPolicy) GetDefaultServerCleanupPolicyID() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DefaultServerCleanupPolicyID
}

// GetDefaultServerCleanupPolicyIDOk returns a tuple with the DefaultServerCleanupPolicyID field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetDefaultServerCleanupPolicyIDOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultServerCleanupPolicyID, true
}

// SetDefaultServerCleanupPolicyID sets field value
func (o *ServerPolicy) SetDefaultServerCleanupPolicyID(v float32) {
	o.DefaultServerCleanupPolicyID = v
}

// GetAutomaticallyAllocateServerTypes returns the AutomaticallyAllocateServerTypes field value
func (o *ServerPolicy) GetAutomaticallyAllocateServerTypes() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutomaticallyAllocateServerTypes
}

// GetAutomaticallyAllocateServerTypesOk returns a tuple with the AutomaticallyAllocateServerTypes field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetAutomaticallyAllocateServerTypesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutomaticallyAllocateServerTypes, true
}

// SetAutomaticallyAllocateServerTypes sets field value
func (o *ServerPolicy) SetAutomaticallyAllocateServerTypes(v bool) {
	o.AutomaticallyAllocateServerTypes = v
}

// GetAutomaticallySetServersAsAvailable returns the AutomaticallySetServersAsAvailable field value
func (o *ServerPolicy) GetAutomaticallySetServersAsAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutomaticallySetServersAsAvailable
}

// GetAutomaticallySetServersAsAvailableOk returns a tuple with the AutomaticallySetServersAsAvailable field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetAutomaticallySetServersAsAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutomaticallySetServersAsAvailable, true
}

// SetAutomaticallySetServersAsAvailable sets field value
func (o *ServerPolicy) SetAutomaticallySetServersAsAvailable(v bool) {
	o.AutomaticallySetServersAsAvailable = v
}

// GetServerRegistrationBiosProfile returns the ServerRegistrationBiosProfile field value
func (o *ServerPolicy) GetServerRegistrationBiosProfile() []ServerRegistrationBiosProfile {
	if o == nil {
		var ret []ServerRegistrationBiosProfile
		return ret
	}

	return o.ServerRegistrationBiosProfile
}

// GetServerRegistrationBiosProfileOk returns a tuple with the ServerRegistrationBiosProfile field value
// and a boolean to check if the value has been set.
func (o *ServerPolicy) GetServerRegistrationBiosProfileOk() ([]ServerRegistrationBiosProfile, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerRegistrationBiosProfile, true
}

// SetServerRegistrationBiosProfile sets field value
func (o *ServerPolicy) SetServerRegistrationBiosProfile(v []ServerRegistrationBiosProfile) {
	o.ServerRegistrationBiosProfile = v
}

func (o ServerPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registerCredentials"] = o.RegisterCredentials
	toSerialize["minimumNumberOfConnectedInterfaces"] = o.MinimumNumberOfConnectedInterfaces
	toSerialize["dhcpOption82ToIPMapping"] = o.DhcpOption82ToIPMapping
	toSerialize["dhcpBmcMacAddressWhitelistEnabled"] = o.DhcpBmcMacAddressWhitelistEnabled
	toSerialize["dhcpBmcMacAddressWhitelist"] = o.DhcpBmcMacAddressWhitelist
	toSerialize["disableTpmAfterRegistration"] = o.DisableTpmAfterRegistration
	toSerialize["syslogMonitoringEnabled"] = o.SyslogMonitoringEnabled
	toSerialize["defaultServerCleanupPolicyID"] = o.DefaultServerCleanupPolicyID
	toSerialize["automaticallyAllocateServerTypes"] = o.AutomaticallyAllocateServerTypes
	toSerialize["automaticallySetServersAsAvailable"] = o.AutomaticallySetServersAsAvailable
	toSerialize["serverRegistrationBiosProfile"] = o.ServerRegistrationBiosProfile

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registerCredentials",
		"minimumNumberOfConnectedInterfaces",
		"dhcpOption82ToIPMapping",
		"dhcpBmcMacAddressWhitelistEnabled",
		"dhcpBmcMacAddressWhitelist",
		"disableTpmAfterRegistration",
		"syslogMonitoringEnabled",
		"defaultServerCleanupPolicyID",
		"automaticallyAllocateServerTypes",
		"automaticallySetServersAsAvailable",
		"serverRegistrationBiosProfile",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerPolicy := _ServerPolicy{}

	err = json.Unmarshal(data, &varServerPolicy)

	if err != nil {
		return err
	}

	*o = ServerPolicy(varServerPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "registerCredentials")
		delete(additionalProperties, "minimumNumberOfConnectedInterfaces")
		delete(additionalProperties, "dhcpOption82ToIPMapping")
		delete(additionalProperties, "dhcpBmcMacAddressWhitelistEnabled")
		delete(additionalProperties, "dhcpBmcMacAddressWhitelist")
		delete(additionalProperties, "disableTpmAfterRegistration")
		delete(additionalProperties, "syslogMonitoringEnabled")
		delete(additionalProperties, "defaultServerCleanupPolicyID")
		delete(additionalProperties, "automaticallyAllocateServerTypes")
		delete(additionalProperties, "automaticallySetServersAsAvailable")
		delete(additionalProperties, "serverRegistrationBiosProfile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerPolicy struct {
	value *ServerPolicy
	isSet bool
}

func (v NullableServerPolicy) Get() *ServerPolicy {
	return v.value
}

func (v *NullableServerPolicy) Set(val *ServerPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableServerPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableServerPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerPolicy(val *ServerPolicy) *NullableServerPolicy {
	return &NullableServerPolicy{value: val, isSet: true}
}

func (v NullableServerPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


