/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the Network type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Network{}

// Network struct for Network
type Network struct {
	// Id of the Network.
	NetworkId float32 `json:"networkId"`
	// Type of the Network.
	NetworkType string `json:"networkType"`
	// Id of the Infrastructure.
	InfrastructureId float32 `json:"infrastructureId"`
	// Network Service status.
	ServiceStatus string `json:"serviceStatus"`
	// Name of the Network.
	Label string `json:"label"`
	// Subdomain of the Network.
	Subdomain string `json:"subdomain"`
	// Permanent subdomain of the Network.
	SubdomainPermanent string `json:"subdomainPermanent"`
	// Timestamp of the Network creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Timestamp of the Network update.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	AdditionalProperties map[string]interface{}
}

type _Network Network

// NewNetwork instantiates a new Network object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetwork(networkId float32, networkType string, infrastructureId float32, serviceStatus string, label string, subdomain string, subdomainPermanent string, createdTimestamp string, updatedTimestamp string) *Network {
	this := Network{}
	this.NetworkId = networkId
	this.NetworkType = networkType
	this.InfrastructureId = infrastructureId
	this.ServiceStatus = serviceStatus
	this.Label = label
	this.Subdomain = subdomain
	this.SubdomainPermanent = subdomainPermanent
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	return &this
}

// NewNetworkWithDefaults instantiates a new Network object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkWithDefaults() *Network {
	this := Network{}
	return &this
}

// GetNetworkId returns the NetworkId field value
func (o *Network) GetNetworkId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value
// and a boolean to check if the value has been set.
func (o *Network) GetNetworkIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkId, true
}

// SetNetworkId sets field value
func (o *Network) SetNetworkId(v float32) {
	o.NetworkId = v
}

// GetNetworkType returns the NetworkType field value
func (o *Network) GetNetworkType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value
// and a boolean to check if the value has been set.
func (o *Network) GetNetworkTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkType, true
}

// SetNetworkType sets field value
func (o *Network) SetNetworkType(v string) {
	o.NetworkType = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *Network) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *Network) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *Network) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *Network) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *Network) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *Network) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetLabel returns the Label field value
func (o *Network) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Network) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Network) SetLabel(v string) {
	o.Label = v
}

// GetSubdomain returns the Subdomain field value
func (o *Network) GetSubdomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value
// and a boolean to check if the value has been set.
func (o *Network) GetSubdomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subdomain, true
}

// SetSubdomain sets field value
func (o *Network) SetSubdomain(v string) {
	o.Subdomain = v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value
func (o *Network) GetSubdomainPermanent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value
// and a boolean to check if the value has been set.
func (o *Network) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubdomainPermanent, true
}

// SetSubdomainPermanent sets field value
func (o *Network) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *Network) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *Network) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *Network) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *Network) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *Network) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *Network) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

func (o Network) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Network) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["networkId"] = o.NetworkId
	toSerialize["networkType"] = o.NetworkType
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["serviceStatus"] = o.ServiceStatus
	toSerialize["label"] = o.Label
	toSerialize["subdomain"] = o.Subdomain
	toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Network) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"networkId",
		"networkType",
		"infrastructureId",
		"serviceStatus",
		"label",
		"subdomain",
		"subdomainPermanent",
		"createdTimestamp",
		"updatedTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetwork := _Network{}

	err = json.Unmarshal(data, &varNetwork)

	if err != nil {
		return err
	}

	*o = Network(varNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "networkId")
		delete(additionalProperties, "networkType")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "label")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetwork struct {
	value *Network
	isSet bool
}

func (v NullableNetwork) Get() *Network {
	return v.value
}

func (v *NullableNetwork) Set(val *Network) {
	v.value = val
	v.isSet = true
}

func (v NullableNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetwork(val *Network) *NullableNetwork {
	return &NullableNetwork{value: val, isSet: true}
}

func (v NullableNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


