/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the UserSuspendReason type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSuspendReason{}

// UserSuspendReason struct for UserSuspendReason
type UserSuspendReason struct {
	// The ID of the user suspend reasons
	Id float32 `json:"id"`
	// The ID of the user
	UserId float32 `json:"userId"`
	// The type of the user suspend reason
	Type string `json:"type"`
	// The timestamp when the user logged in
	CreatedTimestamp time.Time `json:"createdTimestamp"`
	// The timestamp when the user was last updated
	EndTimestamp *time.Time `json:"endTimestamp,omitempty"`
	// The public comment of the user suspend reason
	PublicComment string `json:"publicComment"`
	// The private comment of the user suspend reason
	PrivateComment *string `json:"privateComment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserSuspendReason UserSuspendReason

// NewUserSuspendReason instantiates a new UserSuspendReason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSuspendReason(id float32, userId float32, type_ string, createdTimestamp time.Time, publicComment string) *UserSuspendReason {
	this := UserSuspendReason{}
	this.Id = id
	this.UserId = userId
	this.Type = type_
	this.CreatedTimestamp = createdTimestamp
	this.PublicComment = publicComment
	return &this
}

// NewUserSuspendReasonWithDefaults instantiates a new UserSuspendReason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSuspendReasonWithDefaults() *UserSuspendReason {
	this := UserSuspendReason{}
	return &this
}

// GetId returns the Id field value
func (o *UserSuspendReason) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserSuspendReason) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserSuspendReason) SetId(v float32) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *UserSuspendReason) GetUserId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserSuspendReason) GetUserIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserSuspendReason) SetUserId(v float32) {
	o.UserId = v
}

// GetType returns the Type field value
func (o *UserSuspendReason) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserSuspendReason) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserSuspendReason) SetType(v string) {
	o.Type = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *UserSuspendReason) GetCreatedTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *UserSuspendReason) GetCreatedTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *UserSuspendReason) SetCreatedTimestamp(v time.Time) {
	o.CreatedTimestamp = v
}

// GetEndTimestamp returns the EndTimestamp field value if set, zero value otherwise.
func (o *UserSuspendReason) GetEndTimestamp() time.Time {
	if o == nil || IsNil(o.EndTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSuspendReason) GetEndTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTimestamp) {
		return nil, false
	}
	return o.EndTimestamp, true
}

// HasEndTimestamp returns a boolean if a field has been set.
func (o *UserSuspendReason) HasEndTimestamp() bool {
	if o != nil && !IsNil(o.EndTimestamp) {
		return true
	}

	return false
}

// SetEndTimestamp gets a reference to the given time.Time and assigns it to the EndTimestamp field.
func (o *UserSuspendReason) SetEndTimestamp(v time.Time) {
	o.EndTimestamp = &v
}

// GetPublicComment returns the PublicComment field value
func (o *UserSuspendReason) GetPublicComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicComment
}

// GetPublicCommentOk returns a tuple with the PublicComment field value
// and a boolean to check if the value has been set.
func (o *UserSuspendReason) GetPublicCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicComment, true
}

// SetPublicComment sets field value
func (o *UserSuspendReason) SetPublicComment(v string) {
	o.PublicComment = v
}

// GetPrivateComment returns the PrivateComment field value if set, zero value otherwise.
func (o *UserSuspendReason) GetPrivateComment() string {
	if o == nil || IsNil(o.PrivateComment) {
		var ret string
		return ret
	}
	return *o.PrivateComment
}

// GetPrivateCommentOk returns a tuple with the PrivateComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSuspendReason) GetPrivateCommentOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateComment) {
		return nil, false
	}
	return o.PrivateComment, true
}

// HasPrivateComment returns a boolean if a field has been set.
func (o *UserSuspendReason) HasPrivateComment() bool {
	if o != nil && !IsNil(o.PrivateComment) {
		return true
	}

	return false
}

// SetPrivateComment gets a reference to the given string and assigns it to the PrivateComment field.
func (o *UserSuspendReason) SetPrivateComment(v string) {
	o.PrivateComment = &v
}

func (o UserSuspendReason) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSuspendReason) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["userId"] = o.UserId
	toSerialize["type"] = o.Type
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	if !IsNil(o.EndTimestamp) {
		toSerialize["endTimestamp"] = o.EndTimestamp
	}
	toSerialize["publicComment"] = o.PublicComment
	if !IsNil(o.PrivateComment) {
		toSerialize["privateComment"] = o.PrivateComment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserSuspendReason) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"userId",
		"type",
		"createdTimestamp",
		"publicComment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSuspendReason := _UserSuspendReason{}

	err = json.Unmarshal(data, &varUserSuspendReason)

	if err != nil {
		return err
	}

	*o = UserSuspendReason(varUserSuspendReason)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "type")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "endTimestamp")
		delete(additionalProperties, "publicComment")
		delete(additionalProperties, "privateComment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserSuspendReason struct {
	value *UserSuspendReason
	isSet bool
}

func (v NullableUserSuspendReason) Get() *UserSuspendReason {
	return v.value
}

func (v *NullableUserSuspendReason) Set(val *UserSuspendReason) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSuspendReason) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSuspendReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSuspendReason(val *UserSuspendReason) *NullableUserSuspendReason {
	return &NullableUserSuspendReason{value: val, isSet: true}
}

func (v NullableUserSuspendReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSuspendReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


