/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceTrunkNetworkConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceTrunkNetworkConfig{}

// ServerInstanceTrunkNetworkConfig struct for ServerInstanceTrunkNetworkConfig
type ServerInstanceTrunkNetworkConfig struct {
	InterfaceType string `json:"interfaceType"`
	TypeInterfaceId float32 `json:"typeInterfaceId"`
	LogicalNetworkId *float32 `json:"logicalNetworkId,omitempty"`
	LogicalNetworkName *string `json:"logicalNetworkName,omitempty"`
	LogicalNetworkLabel *string `json:"logicalNetworkLabel,omitempty"`
	// The list of IPv4 addresses.
	Ipv4Addresses []ServerInstanceNetworkConfigIpInfo `json:"ipv4Addresses,omitempty"`
	// The list of IPv6 addresses.
	Ipv6Addresses []ServerInstanceNetworkConfigIpInfo `json:"ipv6Addresses,omitempty"`
	// The list of static routes.
	Routes []ServerInstanceNetworkConfigRoute `json:"routes,omitempty"`
	VlanId float32 `json:"vlanId"`
	// The list of network configuration members.
	Links []ServerInstanceNetworkConfigMembers `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceTrunkNetworkConfig ServerInstanceTrunkNetworkConfig

// NewServerInstanceTrunkNetworkConfig instantiates a new ServerInstanceTrunkNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceTrunkNetworkConfig(interfaceType string, typeInterfaceId float32, vlanId float32) *ServerInstanceTrunkNetworkConfig {
	this := ServerInstanceTrunkNetworkConfig{}
	this.InterfaceType = interfaceType
	this.TypeInterfaceId = typeInterfaceId
	this.VlanId = vlanId
	return &this
}

// NewServerInstanceTrunkNetworkConfigWithDefaults instantiates a new ServerInstanceTrunkNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceTrunkNetworkConfigWithDefaults() *ServerInstanceTrunkNetworkConfig {
	this := ServerInstanceTrunkNetworkConfig{}
	return &this
}

// GetInterfaceType returns the InterfaceType field value
func (o *ServerInstanceTrunkNetworkConfig) GetInterfaceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetInterfaceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterfaceType, true
}

// SetInterfaceType sets field value
func (o *ServerInstanceTrunkNetworkConfig) SetInterfaceType(v string) {
	o.InterfaceType = v
}

// GetTypeInterfaceId returns the TypeInterfaceId field value
func (o *ServerInstanceTrunkNetworkConfig) GetTypeInterfaceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TypeInterfaceId
}

// GetTypeInterfaceIdOk returns a tuple with the TypeInterfaceId field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetTypeInterfaceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeInterfaceId, true
}

// SetTypeInterfaceId sets field value
func (o *ServerInstanceTrunkNetworkConfig) SetTypeInterfaceId(v float32) {
	o.TypeInterfaceId = v
}

// GetLogicalNetworkId returns the LogicalNetworkId field value if set, zero value otherwise.
func (o *ServerInstanceTrunkNetworkConfig) GetLogicalNetworkId() float32 {
	if o == nil || IsNil(o.LogicalNetworkId) {
		var ret float32
		return ret
	}
	return *o.LogicalNetworkId
}

// GetLogicalNetworkIdOk returns a tuple with the LogicalNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetLogicalNetworkIdOk() (*float32, bool) {
	if o == nil || IsNil(o.LogicalNetworkId) {
		return nil, false
	}
	return o.LogicalNetworkId, true
}

// HasLogicalNetworkId returns a boolean if a field has been set.
func (o *ServerInstanceTrunkNetworkConfig) HasLogicalNetworkId() bool {
	if o != nil && !IsNil(o.LogicalNetworkId) {
		return true
	}

	return false
}

// SetLogicalNetworkId gets a reference to the given float32 and assigns it to the LogicalNetworkId field.
func (o *ServerInstanceTrunkNetworkConfig) SetLogicalNetworkId(v float32) {
	o.LogicalNetworkId = &v
}

// GetLogicalNetworkName returns the LogicalNetworkName field value if set, zero value otherwise.
func (o *ServerInstanceTrunkNetworkConfig) GetLogicalNetworkName() string {
	if o == nil || IsNil(o.LogicalNetworkName) {
		var ret string
		return ret
	}
	return *o.LogicalNetworkName
}

// GetLogicalNetworkNameOk returns a tuple with the LogicalNetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetLogicalNetworkNameOk() (*string, bool) {
	if o == nil || IsNil(o.LogicalNetworkName) {
		return nil, false
	}
	return o.LogicalNetworkName, true
}

// HasLogicalNetworkName returns a boolean if a field has been set.
func (o *ServerInstanceTrunkNetworkConfig) HasLogicalNetworkName() bool {
	if o != nil && !IsNil(o.LogicalNetworkName) {
		return true
	}

	return false
}

// SetLogicalNetworkName gets a reference to the given string and assigns it to the LogicalNetworkName field.
func (o *ServerInstanceTrunkNetworkConfig) SetLogicalNetworkName(v string) {
	o.LogicalNetworkName = &v
}

// GetLogicalNetworkLabel returns the LogicalNetworkLabel field value if set, zero value otherwise.
func (o *ServerInstanceTrunkNetworkConfig) GetLogicalNetworkLabel() string {
	if o == nil || IsNil(o.LogicalNetworkLabel) {
		var ret string
		return ret
	}
	return *o.LogicalNetworkLabel
}

// GetLogicalNetworkLabelOk returns a tuple with the LogicalNetworkLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetLogicalNetworkLabelOk() (*string, bool) {
	if o == nil || IsNil(o.LogicalNetworkLabel) {
		return nil, false
	}
	return o.LogicalNetworkLabel, true
}

// HasLogicalNetworkLabel returns a boolean if a field has been set.
func (o *ServerInstanceTrunkNetworkConfig) HasLogicalNetworkLabel() bool {
	if o != nil && !IsNil(o.LogicalNetworkLabel) {
		return true
	}

	return false
}

// SetLogicalNetworkLabel gets a reference to the given string and assigns it to the LogicalNetworkLabel field.
func (o *ServerInstanceTrunkNetworkConfig) SetLogicalNetworkLabel(v string) {
	o.LogicalNetworkLabel = &v
}

// GetIpv4Addresses returns the Ipv4Addresses field value if set, zero value otherwise.
func (o *ServerInstanceTrunkNetworkConfig) GetIpv4Addresses() []ServerInstanceNetworkConfigIpInfo {
	if o == nil || IsNil(o.Ipv4Addresses) {
		var ret []ServerInstanceNetworkConfigIpInfo
		return ret
	}
	return o.Ipv4Addresses
}

// GetIpv4AddressesOk returns a tuple with the Ipv4Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetIpv4AddressesOk() ([]ServerInstanceNetworkConfigIpInfo, bool) {
	if o == nil || IsNil(o.Ipv4Addresses) {
		return nil, false
	}
	return o.Ipv4Addresses, true
}

// HasIpv4Addresses returns a boolean if a field has been set.
func (o *ServerInstanceTrunkNetworkConfig) HasIpv4Addresses() bool {
	if o != nil && !IsNil(o.Ipv4Addresses) {
		return true
	}

	return false
}

// SetIpv4Addresses gets a reference to the given []ServerInstanceNetworkConfigIpInfo and assigns it to the Ipv4Addresses field.
func (o *ServerInstanceTrunkNetworkConfig) SetIpv4Addresses(v []ServerInstanceNetworkConfigIpInfo) {
	o.Ipv4Addresses = v
}

// GetIpv6Addresses returns the Ipv6Addresses field value if set, zero value otherwise.
func (o *ServerInstanceTrunkNetworkConfig) GetIpv6Addresses() []ServerInstanceNetworkConfigIpInfo {
	if o == nil || IsNil(o.Ipv6Addresses) {
		var ret []ServerInstanceNetworkConfigIpInfo
		return ret
	}
	return o.Ipv6Addresses
}

// GetIpv6AddressesOk returns a tuple with the Ipv6Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetIpv6AddressesOk() ([]ServerInstanceNetworkConfigIpInfo, bool) {
	if o == nil || IsNil(o.Ipv6Addresses) {
		return nil, false
	}
	return o.Ipv6Addresses, true
}

// HasIpv6Addresses returns a boolean if a field has been set.
func (o *ServerInstanceTrunkNetworkConfig) HasIpv6Addresses() bool {
	if o != nil && !IsNil(o.Ipv6Addresses) {
		return true
	}

	return false
}

// SetIpv6Addresses gets a reference to the given []ServerInstanceNetworkConfigIpInfo and assigns it to the Ipv6Addresses field.
func (o *ServerInstanceTrunkNetworkConfig) SetIpv6Addresses(v []ServerInstanceNetworkConfigIpInfo) {
	o.Ipv6Addresses = v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *ServerInstanceTrunkNetworkConfig) GetRoutes() []ServerInstanceNetworkConfigRoute {
	if o == nil || IsNil(o.Routes) {
		var ret []ServerInstanceNetworkConfigRoute
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetRoutesOk() ([]ServerInstanceNetworkConfigRoute, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *ServerInstanceTrunkNetworkConfig) HasRoutes() bool {
	if o != nil && !IsNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []ServerInstanceNetworkConfigRoute and assigns it to the Routes field.
func (o *ServerInstanceTrunkNetworkConfig) SetRoutes(v []ServerInstanceNetworkConfigRoute) {
	o.Routes = v
}

// GetVlanId returns the VlanId field value
func (o *ServerInstanceTrunkNetworkConfig) GetVlanId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetVlanIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanId, true
}

// SetVlanId sets field value
func (o *ServerInstanceTrunkNetworkConfig) SetVlanId(v float32) {
	o.VlanId = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ServerInstanceTrunkNetworkConfig) GetLinks() []ServerInstanceNetworkConfigMembers {
	if o == nil || IsNil(o.Links) {
		var ret []ServerInstanceNetworkConfigMembers
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceTrunkNetworkConfig) GetLinksOk() ([]ServerInstanceNetworkConfigMembers, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ServerInstanceTrunkNetworkConfig) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ServerInstanceNetworkConfigMembers and assigns it to the Links field.
func (o *ServerInstanceTrunkNetworkConfig) SetLinks(v []ServerInstanceNetworkConfigMembers) {
	o.Links = v
}

func (o ServerInstanceTrunkNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceTrunkNetworkConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interfaceType"] = o.InterfaceType
	toSerialize["typeInterfaceId"] = o.TypeInterfaceId
	if !IsNil(o.LogicalNetworkId) {
		toSerialize["logicalNetworkId"] = o.LogicalNetworkId
	}
	if !IsNil(o.LogicalNetworkName) {
		toSerialize["logicalNetworkName"] = o.LogicalNetworkName
	}
	if !IsNil(o.LogicalNetworkLabel) {
		toSerialize["logicalNetworkLabel"] = o.LogicalNetworkLabel
	}
	if !IsNil(o.Ipv4Addresses) {
		toSerialize["ipv4Addresses"] = o.Ipv4Addresses
	}
	if !IsNil(o.Ipv6Addresses) {
		toSerialize["ipv6Addresses"] = o.Ipv6Addresses
	}
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	toSerialize["vlanId"] = o.VlanId
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceTrunkNetworkConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interfaceType",
		"typeInterfaceId",
		"vlanId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceTrunkNetworkConfig := _ServerInstanceTrunkNetworkConfig{}

	err = json.Unmarshal(data, &varServerInstanceTrunkNetworkConfig)

	if err != nil {
		return err
	}

	*o = ServerInstanceTrunkNetworkConfig(varServerInstanceTrunkNetworkConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "interfaceType")
		delete(additionalProperties, "typeInterfaceId")
		delete(additionalProperties, "logicalNetworkId")
		delete(additionalProperties, "logicalNetworkName")
		delete(additionalProperties, "logicalNetworkLabel")
		delete(additionalProperties, "ipv4Addresses")
		delete(additionalProperties, "ipv6Addresses")
		delete(additionalProperties, "routes")
		delete(additionalProperties, "vlanId")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceTrunkNetworkConfig struct {
	value *ServerInstanceTrunkNetworkConfig
	isSet bool
}

func (v NullableServerInstanceTrunkNetworkConfig) Get() *ServerInstanceTrunkNetworkConfig {
	return v.value
}

func (v *NullableServerInstanceTrunkNetworkConfig) Set(val *ServerInstanceTrunkNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceTrunkNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceTrunkNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceTrunkNetworkConfig(val *ServerInstanceTrunkNetworkConfig) *NullableServerInstanceTrunkNetworkConfig {
	return &NullableServerInstanceTrunkNetworkConfig{value: val, isSet: true}
}

func (v NullableServerInstanceTrunkNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceTrunkNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


