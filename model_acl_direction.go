/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ACLDirection The direction of the rule such as in, out
type ACLDirection string

// List of ACLDirection
const (
	ACLDIRECTION_IN ACLDirection = "in"
	ACLDIRECTION_OUT ACLDirection = "out"
)

// All allowed values of ACLDirection enum
var AllowedACLDirectionEnumValues = []ACLDirection{
	"in",
	"out",
}

func (v *ACLDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ACLDirection(value)
	for _, existing := range AllowedACLDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ACLDirection", value)
}

// NewACLDirectionFromValue returns a pointer to a valid ACLDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewACLDirectionFromValue(v string) (*ACLDirection, error) {
	ev := ACLDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ACLDirection: valid values are %v", v, AllowedACLDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ACLDirection) IsValid() bool {
	for _, existing := range AllowedACLDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ACLDirection value
func (v ACLDirection) Ptr() *ACLDirection {
	return &v
}

type NullableACLDirection struct {
	value *ACLDirection
	isSet bool
}

func (v NullableACLDirection) Get() *ACLDirection {
	return v.value
}

func (v *NullableACLDirection) Set(val *ACLDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableACLDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableACLDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLDirection(val *ACLDirection) *NullableACLDirection {
	return &NullableACLDirection{value: val, isSet: true}
}

func (v NullableACLDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

