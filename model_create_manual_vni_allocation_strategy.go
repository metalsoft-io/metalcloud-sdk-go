/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateManualVniAllocationStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateManualVniAllocationStrategy{}

// CreateManualVniAllocationStrategy struct for CreateManualVniAllocationStrategy
type CreateManualVniAllocationStrategy struct {
	Kind AllocationStrategyKind `json:"kind"`
	Scope CreateResourceScope `json:"scope"`
	Vni int32 `json:"vni"`
	AdditionalProperties map[string]interface{}
}

type _CreateManualVniAllocationStrategy CreateManualVniAllocationStrategy

// NewCreateManualVniAllocationStrategy instantiates a new CreateManualVniAllocationStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateManualVniAllocationStrategy(kind AllocationStrategyKind, scope CreateResourceScope, vni int32) *CreateManualVniAllocationStrategy {
	this := CreateManualVniAllocationStrategy{}
	this.Kind = kind
	this.Scope = scope
	this.Vni = vni
	return &this
}

// NewCreateManualVniAllocationStrategyWithDefaults instantiates a new CreateManualVniAllocationStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateManualVniAllocationStrategyWithDefaults() *CreateManualVniAllocationStrategy {
	this := CreateManualVniAllocationStrategy{}
	return &this
}

// GetKind returns the Kind field value
func (o *CreateManualVniAllocationStrategy) GetKind() AllocationStrategyKind {
	if o == nil {
		var ret AllocationStrategyKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CreateManualVniAllocationStrategy) GetKindOk() (*AllocationStrategyKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CreateManualVniAllocationStrategy) SetKind(v AllocationStrategyKind) {
	o.Kind = v
}

// GetScope returns the Scope field value
func (o *CreateManualVniAllocationStrategy) GetScope() CreateResourceScope {
	if o == nil {
		var ret CreateResourceScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *CreateManualVniAllocationStrategy) GetScopeOk() (*CreateResourceScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *CreateManualVniAllocationStrategy) SetScope(v CreateResourceScope) {
	o.Scope = v
}

// GetVni returns the Vni field value
func (o *CreateManualVniAllocationStrategy) GetVni() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vni
}

// GetVniOk returns a tuple with the Vni field value
// and a boolean to check if the value has been set.
func (o *CreateManualVniAllocationStrategy) GetVniOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vni, true
}

// SetVni sets field value
func (o *CreateManualVniAllocationStrategy) SetVni(v int32) {
	o.Vni = v
}

func (o CreateManualVniAllocationStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateManualVniAllocationStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["scope"] = o.Scope
	toSerialize["vni"] = o.Vni

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateManualVniAllocationStrategy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"scope",
		"vni",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateManualVniAllocationStrategy := _CreateManualVniAllocationStrategy{}

	err = json.Unmarshal(data, &varCreateManualVniAllocationStrategy)

	if err != nil {
		return err
	}

	*o = CreateManualVniAllocationStrategy(varCreateManualVniAllocationStrategy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kind")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "vni")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateManualVniAllocationStrategy struct {
	value *CreateManualVniAllocationStrategy
	isSet bool
}

func (v NullableCreateManualVniAllocationStrategy) Get() *CreateManualVniAllocationStrategy {
	return v.value
}

func (v *NullableCreateManualVniAllocationStrategy) Set(val *CreateManualVniAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateManualVniAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateManualVniAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateManualVniAllocationStrategy(val *CreateManualVniAllocationStrategy) *NullableCreateManualVniAllocationStrategy {
	return &NullableCreateManualVniAllocationStrategy{value: val, isSet: true}
}

func (v NullableCreateManualVniAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateManualVniAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


