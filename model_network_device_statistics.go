/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkDeviceStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDeviceStatistics{}

// NetworkDeviceStatistics struct for NetworkDeviceStatistics
type NetworkDeviceStatistics struct {
	// Total count of network devices
	DeviceCount int32 `json:"deviceCount"`
	// Total count of network device ports
	PortCount int32 `json:"portCount"`
	AdditionalProperties map[string]interface{}
}

type _NetworkDeviceStatistics NetworkDeviceStatistics

// NewNetworkDeviceStatistics instantiates a new NetworkDeviceStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDeviceStatistics(deviceCount int32, portCount int32) *NetworkDeviceStatistics {
	this := NetworkDeviceStatistics{}
	this.DeviceCount = deviceCount
	this.PortCount = portCount
	return &this
}

// NewNetworkDeviceStatisticsWithDefaults instantiates a new NetworkDeviceStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDeviceStatisticsWithDefaults() *NetworkDeviceStatistics {
	this := NetworkDeviceStatistics{}
	return &this
}

// GetDeviceCount returns the DeviceCount field value
func (o *NetworkDeviceStatistics) GetDeviceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DeviceCount
}

// GetDeviceCountOk returns a tuple with the DeviceCount field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceStatistics) GetDeviceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceCount, true
}

// SetDeviceCount sets field value
func (o *NetworkDeviceStatistics) SetDeviceCount(v int32) {
	o.DeviceCount = v
}

// GetPortCount returns the PortCount field value
func (o *NetworkDeviceStatistics) GetPortCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PortCount
}

// GetPortCountOk returns a tuple with the PortCount field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceStatistics) GetPortCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortCount, true
}

// SetPortCount sets field value
func (o *NetworkDeviceStatistics) SetPortCount(v int32) {
	o.PortCount = v
}

func (o NetworkDeviceStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDeviceStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceCount"] = o.DeviceCount
	toSerialize["portCount"] = o.PortCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkDeviceStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deviceCount",
		"portCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkDeviceStatistics := _NetworkDeviceStatistics{}

	err = json.Unmarshal(data, &varNetworkDeviceStatistics)

	if err != nil {
		return err
	}

	*o = NetworkDeviceStatistics(varNetworkDeviceStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "deviceCount")
		delete(additionalProperties, "portCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkDeviceStatistics struct {
	value *NetworkDeviceStatistics
	isSet bool
}

func (v NullableNetworkDeviceStatistics) Get() *NetworkDeviceStatistics {
	return v.value
}

func (v *NullableNetworkDeviceStatistics) Set(val *NetworkDeviceStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDeviceStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDeviceStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDeviceStatistics(val *NetworkDeviceStatistics) *NullableNetworkDeviceStatistics {
	return &NullableNetworkDeviceStatistics{value: val, isSet: true}
}

func (v NullableNetworkDeviceStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDeviceStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


