/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateVMInstanceGroupNetworkConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVMInstanceGroupNetworkConnection{}

// UpdateVMInstanceGroupNetworkConnection struct for UpdateVMInstanceGroupNetworkConnection
type UpdateVMInstanceGroupNetworkConnection struct {
	// Whether the logical network is tagged.
	Tagged *bool `json:"tagged,omitempty"`
	// The access mode of the network endpoint group
	AccessMode *NetworkEndpointGroupAllowedAccessMode `json:"accessMode,omitempty"`
	// The MTU of the logical network
	Mtu *int32 `json:"mtu,omitempty"`
	// The redundancy configuration
	Redundancy NullableRedundancyConfig `json:"redundancy,omitempty"`
	// DNS records configuration for the server instance group.
	Dns NullableDnsRecordsEndpointGroupLogicalNetwork `json:"dns,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateVMInstanceGroupNetworkConnection UpdateVMInstanceGroupNetworkConnection

// NewUpdateVMInstanceGroupNetworkConnection instantiates a new UpdateVMInstanceGroupNetworkConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVMInstanceGroupNetworkConnection() *UpdateVMInstanceGroupNetworkConnection {
	this := UpdateVMInstanceGroupNetworkConnection{}
	return &this
}

// NewUpdateVMInstanceGroupNetworkConnectionWithDefaults instantiates a new UpdateVMInstanceGroupNetworkConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVMInstanceGroupNetworkConnectionWithDefaults() *UpdateVMInstanceGroupNetworkConnection {
	this := UpdateVMInstanceGroupNetworkConnection{}
	return &this
}

// GetTagged returns the Tagged field value if set, zero value otherwise.
func (o *UpdateVMInstanceGroupNetworkConnection) GetTagged() bool {
	if o == nil || IsNil(o.Tagged) {
		var ret bool
		return ret
	}
	return *o.Tagged
}

// GetTaggedOk returns a tuple with the Tagged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMInstanceGroupNetworkConnection) GetTaggedOk() (*bool, bool) {
	if o == nil || IsNil(o.Tagged) {
		return nil, false
	}
	return o.Tagged, true
}

// HasTagged returns a boolean if a field has been set.
func (o *UpdateVMInstanceGroupNetworkConnection) HasTagged() bool {
	if o != nil && !IsNil(o.Tagged) {
		return true
	}

	return false
}

// SetTagged gets a reference to the given bool and assigns it to the Tagged field.
func (o *UpdateVMInstanceGroupNetworkConnection) SetTagged(v bool) {
	o.Tagged = &v
}

// GetAccessMode returns the AccessMode field value if set, zero value otherwise.
func (o *UpdateVMInstanceGroupNetworkConnection) GetAccessMode() NetworkEndpointGroupAllowedAccessMode {
	if o == nil || IsNil(o.AccessMode) {
		var ret NetworkEndpointGroupAllowedAccessMode
		return ret
	}
	return *o.AccessMode
}

// GetAccessModeOk returns a tuple with the AccessMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMInstanceGroupNetworkConnection) GetAccessModeOk() (*NetworkEndpointGroupAllowedAccessMode, bool) {
	if o == nil || IsNil(o.AccessMode) {
		return nil, false
	}
	return o.AccessMode, true
}

// HasAccessMode returns a boolean if a field has been set.
func (o *UpdateVMInstanceGroupNetworkConnection) HasAccessMode() bool {
	if o != nil && !IsNil(o.AccessMode) {
		return true
	}

	return false
}

// SetAccessMode gets a reference to the given NetworkEndpointGroupAllowedAccessMode and assigns it to the AccessMode field.
func (o *UpdateVMInstanceGroupNetworkConnection) SetAccessMode(v NetworkEndpointGroupAllowedAccessMode) {
	o.AccessMode = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *UpdateVMInstanceGroupNetworkConnection) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMInstanceGroupNetworkConnection) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *UpdateVMInstanceGroupNetworkConnection) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *UpdateVMInstanceGroupNetworkConnection) SetMtu(v int32) {
	o.Mtu = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateVMInstanceGroupNetworkConnection) GetRedundancy() RedundancyConfig {
	if o == nil || IsNil(o.Redundancy.Get()) {
		var ret RedundancyConfig
		return ret
	}
	return *o.Redundancy.Get()
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateVMInstanceGroupNetworkConnection) GetRedundancyOk() (*RedundancyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Redundancy.Get(), o.Redundancy.IsSet()
}

// HasRedundancy returns a boolean if a field has been set.
func (o *UpdateVMInstanceGroupNetworkConnection) HasRedundancy() bool {
	if o != nil && o.Redundancy.IsSet() {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given NullableRedundancyConfig and assigns it to the Redundancy field.
func (o *UpdateVMInstanceGroupNetworkConnection) SetRedundancy(v RedundancyConfig) {
	o.Redundancy.Set(&v)
}
// SetRedundancyNil sets the value for Redundancy to be an explicit nil
func (o *UpdateVMInstanceGroupNetworkConnection) SetRedundancyNil() {
	o.Redundancy.Set(nil)
}

// UnsetRedundancy ensures that no value is present for Redundancy, not even an explicit nil
func (o *UpdateVMInstanceGroupNetworkConnection) UnsetRedundancy() {
	o.Redundancy.Unset()
}

// GetDns returns the Dns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateVMInstanceGroupNetworkConnection) GetDns() DnsRecordsEndpointGroupLogicalNetwork {
	if o == nil || IsNil(o.Dns.Get()) {
		var ret DnsRecordsEndpointGroupLogicalNetwork
		return ret
	}
	return *o.Dns.Get()
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateVMInstanceGroupNetworkConnection) GetDnsOk() (*DnsRecordsEndpointGroupLogicalNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dns.Get(), o.Dns.IsSet()
}

// HasDns returns a boolean if a field has been set.
func (o *UpdateVMInstanceGroupNetworkConnection) HasDns() bool {
	if o != nil && o.Dns.IsSet() {
		return true
	}

	return false
}

// SetDns gets a reference to the given NullableDnsRecordsEndpointGroupLogicalNetwork and assigns it to the Dns field.
func (o *UpdateVMInstanceGroupNetworkConnection) SetDns(v DnsRecordsEndpointGroupLogicalNetwork) {
	o.Dns.Set(&v)
}
// SetDnsNil sets the value for Dns to be an explicit nil
func (o *UpdateVMInstanceGroupNetworkConnection) SetDnsNil() {
	o.Dns.Set(nil)
}

// UnsetDns ensures that no value is present for Dns, not even an explicit nil
func (o *UpdateVMInstanceGroupNetworkConnection) UnsetDns() {
	o.Dns.Unset()
}

func (o UpdateVMInstanceGroupNetworkConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVMInstanceGroupNetworkConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tagged) {
		toSerialize["tagged"] = o.Tagged
	}
	if !IsNil(o.AccessMode) {
		toSerialize["accessMode"] = o.AccessMode
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if o.Redundancy.IsSet() {
		toSerialize["redundancy"] = o.Redundancy.Get()
	}
	if o.Dns.IsSet() {
		toSerialize["dns"] = o.Dns.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateVMInstanceGroupNetworkConnection) UnmarshalJSON(data []byte) (err error) {
	varUpdateVMInstanceGroupNetworkConnection := _UpdateVMInstanceGroupNetworkConnection{}

	err = json.Unmarshal(data, &varUpdateVMInstanceGroupNetworkConnection)

	if err != nil {
		return err
	}

	*o = UpdateVMInstanceGroupNetworkConnection(varUpdateVMInstanceGroupNetworkConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tagged")
		delete(additionalProperties, "accessMode")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "dns")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateVMInstanceGroupNetworkConnection struct {
	value *UpdateVMInstanceGroupNetworkConnection
	isSet bool
}

func (v NullableUpdateVMInstanceGroupNetworkConnection) Get() *UpdateVMInstanceGroupNetworkConnection {
	return v.value
}

func (v *NullableUpdateVMInstanceGroupNetworkConnection) Set(val *UpdateVMInstanceGroupNetworkConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVMInstanceGroupNetworkConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVMInstanceGroupNetworkConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVMInstanceGroupNetworkConnection(val *UpdateVMInstanceGroupNetworkConnection) *NullableUpdateVMInstanceGroupNetworkConnection {
	return &NullableUpdateVMInstanceGroupNetworkConnection{value: val, isSet: true}
}

func (v NullableUpdateVMInstanceGroupNetworkConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVMInstanceGroupNetworkConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


