/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateVMPoolOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVMPoolOptions{}

// UpdateVMPoolOptions struct for UpdateVMPoolOptions
type UpdateVMPoolOptions struct {
	// Name of the datastore to use for the VM Pool
	DatastoreName *string `json:"datastoreName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateVMPoolOptions UpdateVMPoolOptions

// NewUpdateVMPoolOptions instantiates a new UpdateVMPoolOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVMPoolOptions() *UpdateVMPoolOptions {
	this := UpdateVMPoolOptions{}
	return &this
}

// NewUpdateVMPoolOptionsWithDefaults instantiates a new UpdateVMPoolOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVMPoolOptionsWithDefaults() *UpdateVMPoolOptions {
	this := UpdateVMPoolOptions{}
	return &this
}

// GetDatastoreName returns the DatastoreName field value if set, zero value otherwise.
func (o *UpdateVMPoolOptions) GetDatastoreName() string {
	if o == nil || IsNil(o.DatastoreName) {
		var ret string
		return ret
	}
	return *o.DatastoreName
}

// GetDatastoreNameOk returns a tuple with the DatastoreName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMPoolOptions) GetDatastoreNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatastoreName) {
		return nil, false
	}
	return o.DatastoreName, true
}

// HasDatastoreName returns a boolean if a field has been set.
func (o *UpdateVMPoolOptions) HasDatastoreName() bool {
	if o != nil && !IsNil(o.DatastoreName) {
		return true
	}

	return false
}

// SetDatastoreName gets a reference to the given string and assigns it to the DatastoreName field.
func (o *UpdateVMPoolOptions) SetDatastoreName(v string) {
	o.DatastoreName = &v
}

func (o UpdateVMPoolOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVMPoolOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatastoreName) {
		toSerialize["datastoreName"] = o.DatastoreName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateVMPoolOptions) UnmarshalJSON(data []byte) (err error) {
	varUpdateVMPoolOptions := _UpdateVMPoolOptions{}

	err = json.Unmarshal(data, &varUpdateVMPoolOptions)

	if err != nil {
		return err
	}

	*o = UpdateVMPoolOptions(varUpdateVMPoolOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "datastoreName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateVMPoolOptions struct {
	value *UpdateVMPoolOptions
	isSet bool
}

func (v NullableUpdateVMPoolOptions) Get() *UpdateVMPoolOptions {
	return v.value
}

func (v *NullableUpdateVMPoolOptions) Set(val *UpdateVMPoolOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVMPoolOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVMPoolOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVMPoolOptions(val *UpdateVMPoolOptions) *NullableUpdateVMPoolOptions {
	return &NullableUpdateVMPoolOptions{value: val, isSet: true}
}

func (v NullableUpdateVMPoolOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVMPoolOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


