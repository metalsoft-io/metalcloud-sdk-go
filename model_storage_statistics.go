/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the StorageStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageStatistics{}

// StorageStatistics struct for StorageStatistics
type StorageStatistics struct {
	// Total capacity in GB
	TotalSpaceGB float32 `json:"totalSpaceGB"`
	// Total used space in GB
	UsedSpaceGB float32 `json:"usedSpaceGB"`
	// Total free space in GB
	FreeSpaceGB float32 `json:"freeSpaceGB"`
	AdditionalProperties map[string]interface{}
}

type _StorageStatistics StorageStatistics

// NewStorageStatistics instantiates a new StorageStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageStatistics(totalSpaceGB float32, usedSpaceGB float32, freeSpaceGB float32) *StorageStatistics {
	this := StorageStatistics{}
	this.TotalSpaceGB = totalSpaceGB
	this.UsedSpaceGB = usedSpaceGB
	this.FreeSpaceGB = freeSpaceGB
	return &this
}

// NewStorageStatisticsWithDefaults instantiates a new StorageStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageStatisticsWithDefaults() *StorageStatistics {
	this := StorageStatistics{}
	return &this
}

// GetTotalSpaceGB returns the TotalSpaceGB field value
func (o *StorageStatistics) GetTotalSpaceGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalSpaceGB
}

// GetTotalSpaceGBOk returns a tuple with the TotalSpaceGB field value
// and a boolean to check if the value has been set.
func (o *StorageStatistics) GetTotalSpaceGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSpaceGB, true
}

// SetTotalSpaceGB sets field value
func (o *StorageStatistics) SetTotalSpaceGB(v float32) {
	o.TotalSpaceGB = v
}

// GetUsedSpaceGB returns the UsedSpaceGB field value
func (o *StorageStatistics) GetUsedSpaceGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UsedSpaceGB
}

// GetUsedSpaceGBOk returns a tuple with the UsedSpaceGB field value
// and a boolean to check if the value has been set.
func (o *StorageStatistics) GetUsedSpaceGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsedSpaceGB, true
}

// SetUsedSpaceGB sets field value
func (o *StorageStatistics) SetUsedSpaceGB(v float32) {
	o.UsedSpaceGB = v
}

// GetFreeSpaceGB returns the FreeSpaceGB field value
func (o *StorageStatistics) GetFreeSpaceGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FreeSpaceGB
}

// GetFreeSpaceGBOk returns a tuple with the FreeSpaceGB field value
// and a boolean to check if the value has been set.
func (o *StorageStatistics) GetFreeSpaceGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreeSpaceGB, true
}

// SetFreeSpaceGB sets field value
func (o *StorageStatistics) SetFreeSpaceGB(v float32) {
	o.FreeSpaceGB = v
}

func (o StorageStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["totalSpaceGB"] = o.TotalSpaceGB
	toSerialize["usedSpaceGB"] = o.UsedSpaceGB
	toSerialize["freeSpaceGB"] = o.FreeSpaceGB

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"totalSpaceGB",
		"usedSpaceGB",
		"freeSpaceGB",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageStatistics := _StorageStatistics{}

	err = json.Unmarshal(data, &varStorageStatistics)

	if err != nil {
		return err
	}

	*o = StorageStatistics(varStorageStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "totalSpaceGB")
		delete(additionalProperties, "usedSpaceGB")
		delete(additionalProperties, "freeSpaceGB")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageStatistics struct {
	value *StorageStatistics
	isSet bool
}

func (v NullableStorageStatistics) Get() *StorageStatistics {
	return v.value
}

func (v *NullableStorageStatistics) Set(val *StorageStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageStatistics(val *StorageStatistics) *NullableStorageStatistics {
	return &NullableStorageStatistics{value: val, isSet: true}
}

func (v NullableStorageStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


