/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InfrastructureExtensionActions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureExtensionActions{}

// InfrastructureExtensionActions struct for InfrastructureExtensionActions
type InfrastructureExtensionActions struct {
	Stage InfrastructureExtensionActionStage `json:"stage"`
	// Tasks.
	Tasks []InfrastructureExtensionActionsTasksDataItem `json:"tasks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureExtensionActions InfrastructureExtensionActions

// NewInfrastructureExtensionActions instantiates a new InfrastructureExtensionActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureExtensionActions(stage InfrastructureExtensionActionStage) *InfrastructureExtensionActions {
	this := InfrastructureExtensionActions{}
	this.Stage = stage
	return &this
}

// NewInfrastructureExtensionActionsWithDefaults instantiates a new InfrastructureExtensionActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureExtensionActionsWithDefaults() *InfrastructureExtensionActions {
	this := InfrastructureExtensionActions{}
	return &this
}

// GetStage returns the Stage field value
func (o *InfrastructureExtensionActions) GetStage() InfrastructureExtensionActionStage {
	if o == nil {
		var ret InfrastructureExtensionActionStage
		return ret
	}

	return o.Stage
}

// GetStageOk returns a tuple with the Stage field value
// and a boolean to check if the value has been set.
func (o *InfrastructureExtensionActions) GetStageOk() (*InfrastructureExtensionActionStage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stage, true
}

// SetStage sets field value
func (o *InfrastructureExtensionActions) SetStage(v InfrastructureExtensionActionStage) {
	o.Stage = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *InfrastructureExtensionActions) GetTasks() []InfrastructureExtensionActionsTasksDataItem {
	if o == nil || IsNil(o.Tasks) {
		var ret []InfrastructureExtensionActionsTasksDataItem
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureExtensionActions) GetTasksOk() ([]InfrastructureExtensionActionsTasksDataItem, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *InfrastructureExtensionActions) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []InfrastructureExtensionActionsTasksDataItem and assigns it to the Tasks field.
func (o *InfrastructureExtensionActions) SetTasks(v []InfrastructureExtensionActionsTasksDataItem) {
	o.Tasks = v
}

func (o InfrastructureExtensionActions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureExtensionActions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stage"] = o.Stage
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureExtensionActions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfrastructureExtensionActions := _InfrastructureExtensionActions{}

	err = json.Unmarshal(data, &varInfrastructureExtensionActions)

	if err != nil {
		return err
	}

	*o = InfrastructureExtensionActions(varInfrastructureExtensionActions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "stage")
		delete(additionalProperties, "tasks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureExtensionActions struct {
	value *InfrastructureExtensionActions
	isSet bool
}

func (v NullableInfrastructureExtensionActions) Get() *InfrastructureExtensionActions {
	return v.value
}

func (v *NullableInfrastructureExtensionActions) Set(val *InfrastructureExtensionActions) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureExtensionActions) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureExtensionActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureExtensionActions(val *InfrastructureExtensionActions) *NullableInfrastructureExtensionActions {
	return &NullableInfrastructureExtensionActions{value: val, isSet: true}
}

func (v NullableInfrastructureExtensionActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureExtensionActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


