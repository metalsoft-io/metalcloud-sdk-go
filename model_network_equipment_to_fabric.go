/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkEquipmentToFabric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkEquipmentToFabric{}

// NetworkEquipmentToFabric struct for NetworkEquipmentToFabric
type NetworkEquipmentToFabric struct {
	// The network equipment IDs to add to the fabric
	NetworkEquipmentIds []float32 `json:"networkEquipmentIds"`
	AdditionalProperties map[string]interface{}
}

type _NetworkEquipmentToFabric NetworkEquipmentToFabric

// NewNetworkEquipmentToFabric instantiates a new NetworkEquipmentToFabric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkEquipmentToFabric(networkEquipmentIds []float32) *NetworkEquipmentToFabric {
	this := NetworkEquipmentToFabric{}
	this.NetworkEquipmentIds = networkEquipmentIds
	return &this
}

// NewNetworkEquipmentToFabricWithDefaults instantiates a new NetworkEquipmentToFabric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkEquipmentToFabricWithDefaults() *NetworkEquipmentToFabric {
	this := NetworkEquipmentToFabric{}
	return &this
}

// GetNetworkEquipmentIds returns the NetworkEquipmentIds field value
func (o *NetworkEquipmentToFabric) GetNetworkEquipmentIds() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.NetworkEquipmentIds
}

// GetNetworkEquipmentIdsOk returns a tuple with the NetworkEquipmentIds field value
// and a boolean to check if the value has been set.
func (o *NetworkEquipmentToFabric) GetNetworkEquipmentIdsOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkEquipmentIds, true
}

// SetNetworkEquipmentIds sets field value
func (o *NetworkEquipmentToFabric) SetNetworkEquipmentIds(v []float32) {
	o.NetworkEquipmentIds = v
}

func (o NetworkEquipmentToFabric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkEquipmentToFabric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["networkEquipmentIds"] = o.NetworkEquipmentIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkEquipmentToFabric) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"networkEquipmentIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkEquipmentToFabric := _NetworkEquipmentToFabric{}

	err = json.Unmarshal(data, &varNetworkEquipmentToFabric)

	if err != nil {
		return err
	}

	*o = NetworkEquipmentToFabric(varNetworkEquipmentToFabric)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "networkEquipmentIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkEquipmentToFabric struct {
	value *NetworkEquipmentToFabric
	isSet bool
}

func (v NullableNetworkEquipmentToFabric) Get() *NetworkEquipmentToFabric {
	return v.value
}

func (v *NullableNetworkEquipmentToFabric) Set(val *NetworkEquipmentToFabric) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkEquipmentToFabric) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkEquipmentToFabric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkEquipmentToFabric(val *NetworkEquipmentToFabric) *NullableNetworkEquipmentToFabric {
	return &NullableNetworkEquipmentToFabric{value: val, isSet: true}
}

func (v NullableNetworkEquipmentToFabric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkEquipmentToFabric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


