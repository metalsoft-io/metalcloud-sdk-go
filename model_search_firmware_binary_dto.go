/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SearchFirmwareBinaryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchFirmwareBinaryDto{}

// SearchFirmwareBinaryDto struct for SearchFirmwareBinaryDto
type SearchFirmwareBinaryDto struct {
	Vendor FirmwareVendorType `json:"vendor"`
	BaselineFilter BaselineFilter `json:"baselineFilter"`
	// Array of vendor component filters, structure is specific per vendor
	ServerComponentFilter []ServerComponentFilterInner `json:"serverComponentFilter,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SearchFirmwareBinaryDto SearchFirmwareBinaryDto

// NewSearchFirmwareBinaryDto instantiates a new SearchFirmwareBinaryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchFirmwareBinaryDto(vendor FirmwareVendorType, baselineFilter BaselineFilter) *SearchFirmwareBinaryDto {
	this := SearchFirmwareBinaryDto{}
	this.Vendor = vendor
	this.BaselineFilter = baselineFilter
	return &this
}

// NewSearchFirmwareBinaryDtoWithDefaults instantiates a new SearchFirmwareBinaryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchFirmwareBinaryDtoWithDefaults() *SearchFirmwareBinaryDto {
	this := SearchFirmwareBinaryDto{}
	return &this
}

// GetVendor returns the Vendor field value
func (o *SearchFirmwareBinaryDto) GetVendor() FirmwareVendorType {
	if o == nil {
		var ret FirmwareVendorType
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *SearchFirmwareBinaryDto) GetVendorOk() (*FirmwareVendorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *SearchFirmwareBinaryDto) SetVendor(v FirmwareVendorType) {
	o.Vendor = v
}

// GetBaselineFilter returns the BaselineFilter field value
func (o *SearchFirmwareBinaryDto) GetBaselineFilter() BaselineFilter {
	if o == nil {
		var ret BaselineFilter
		return ret
	}

	return o.BaselineFilter
}

// GetBaselineFilterOk returns a tuple with the BaselineFilter field value
// and a boolean to check if the value has been set.
func (o *SearchFirmwareBinaryDto) GetBaselineFilterOk() (*BaselineFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaselineFilter, true
}

// SetBaselineFilter sets field value
func (o *SearchFirmwareBinaryDto) SetBaselineFilter(v BaselineFilter) {
	o.BaselineFilter = v
}

// GetServerComponentFilter returns the ServerComponentFilter field value if set, zero value otherwise.
func (o *SearchFirmwareBinaryDto) GetServerComponentFilter() []ServerComponentFilterInner {
	if o == nil || IsNil(o.ServerComponentFilter) {
		var ret []ServerComponentFilterInner
		return ret
	}
	return o.ServerComponentFilter
}

// GetServerComponentFilterOk returns a tuple with the ServerComponentFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchFirmwareBinaryDto) GetServerComponentFilterOk() ([]ServerComponentFilterInner, bool) {
	if o == nil || IsNil(o.ServerComponentFilter) {
		return nil, false
	}
	return o.ServerComponentFilter, true
}

// HasServerComponentFilter returns a boolean if a field has been set.
func (o *SearchFirmwareBinaryDto) HasServerComponentFilter() bool {
	if o != nil && !IsNil(o.ServerComponentFilter) {
		return true
	}

	return false
}

// SetServerComponentFilter gets a reference to the given []ServerComponentFilterInner and assigns it to the ServerComponentFilter field.
func (o *SearchFirmwareBinaryDto) SetServerComponentFilter(v []ServerComponentFilterInner) {
	o.ServerComponentFilter = v
}

func (o SearchFirmwareBinaryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchFirmwareBinaryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vendor"] = o.Vendor
	toSerialize["baselineFilter"] = o.BaselineFilter
	if !IsNil(o.ServerComponentFilter) {
		toSerialize["serverComponentFilter"] = o.ServerComponentFilter
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SearchFirmwareBinaryDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vendor",
		"baselineFilter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchFirmwareBinaryDto := _SearchFirmwareBinaryDto{}

	err = json.Unmarshal(data, &varSearchFirmwareBinaryDto)

	if err != nil {
		return err
	}

	*o = SearchFirmwareBinaryDto(varSearchFirmwareBinaryDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "baselineFilter")
		delete(additionalProperties, "serverComponentFilter")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSearchFirmwareBinaryDto struct {
	value *SearchFirmwareBinaryDto
	isSet bool
}

func (v NullableSearchFirmwareBinaryDto) Get() *SearchFirmwareBinaryDto {
	return v.value
}

func (v *NullableSearchFirmwareBinaryDto) Set(val *SearchFirmwareBinaryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFirmwareBinaryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFirmwareBinaryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFirmwareBinaryDto(val *SearchFirmwareBinaryDto) *NullableSearchFirmwareBinaryDto {
	return &NullableSearchFirmwareBinaryDto{value: val, isSet: true}
}

func (v NullableSearchFirmwareBinaryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFirmwareBinaryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


