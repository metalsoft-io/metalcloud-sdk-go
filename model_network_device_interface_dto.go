/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkDeviceInterfaceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDeviceInterfaceDto{}

// NetworkDeviceInterfaceDto struct for NetworkDeviceInterfaceDto
type NetworkDeviceInterfaceDto struct {
	// The ID of the network equipment interface
	InterfaceId string `json:"interfaceId"`
	// The ID of the network device
	NetworkDeviceId string `json:"networkDeviceId"`
	// The name of the network equipment interface
	InterfaceName string `json:"interfaceName"`
	// The index of the network interface
	InterfaceIndex *float32 `json:"interfaceIndex,omitempty"`
	// LAG identifier
	LagIdentifier *float32 `json:"lagIdentifier,omitempty"`
	// The server interface ID
	ServerInterfaceId *float32 `json:"serverInterfaceId,omitempty"`
	// The server ID
	ServerId *float32 `json:"serverId,omitempty"`
	// Dirty bit flag
	DirtyBit float32 `json:"dirtyBit"`
	// LLDP information
	LldpInformation *string `json:"lldpInformation,omitempty"`
	// MAC address
	MacAddress *string `json:"macAddress,omitempty"`
	// Driver dump cached JSON
	DriverDumpCachedJson map[string]interface{} `json:"driverDumpCachedJson,omitempty"`
	// Cached update timestamp
	CachedUpdatedTimestamp string `json:"cachedUpdatedTimestamp"`
	// LLDP information of server interface in JSON format
	InterfaceLLDPInformationServerInterface map[string]interface{} `json:"interfaceLLDPInformationServerInterface,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkDeviceInterfaceDto NetworkDeviceInterfaceDto

// NewNetworkDeviceInterfaceDto instantiates a new NetworkDeviceInterfaceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDeviceInterfaceDto(interfaceId string, networkDeviceId string, interfaceName string, dirtyBit float32, cachedUpdatedTimestamp string) *NetworkDeviceInterfaceDto {
	this := NetworkDeviceInterfaceDto{}
	this.InterfaceId = interfaceId
	this.NetworkDeviceId = networkDeviceId
	this.InterfaceName = interfaceName
	this.DirtyBit = dirtyBit
	this.CachedUpdatedTimestamp = cachedUpdatedTimestamp
	return &this
}

// NewNetworkDeviceInterfaceDtoWithDefaults instantiates a new NetworkDeviceInterfaceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDeviceInterfaceDtoWithDefaults() *NetworkDeviceInterfaceDto {
	this := NetworkDeviceInterfaceDto{}
	return &this
}

// GetInterfaceId returns the InterfaceId field value
func (o *NetworkDeviceInterfaceDto) GetInterfaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetInterfaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterfaceId, true
}

// SetInterfaceId sets field value
func (o *NetworkDeviceInterfaceDto) SetInterfaceId(v string) {
	o.InterfaceId = v
}

// GetNetworkDeviceId returns the NetworkDeviceId field value
func (o *NetworkDeviceInterfaceDto) GetNetworkDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDeviceId
}

// GetNetworkDeviceIdOk returns a tuple with the NetworkDeviceId field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetNetworkDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDeviceId, true
}

// SetNetworkDeviceId sets field value
func (o *NetworkDeviceInterfaceDto) SetNetworkDeviceId(v string) {
	o.NetworkDeviceId = v
}

// GetInterfaceName returns the InterfaceName field value
func (o *NetworkDeviceInterfaceDto) GetInterfaceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetInterfaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterfaceName, true
}

// SetInterfaceName sets field value
func (o *NetworkDeviceInterfaceDto) SetInterfaceName(v string) {
	o.InterfaceName = v
}

// GetInterfaceIndex returns the InterfaceIndex field value if set, zero value otherwise.
func (o *NetworkDeviceInterfaceDto) GetInterfaceIndex() float32 {
	if o == nil || IsNil(o.InterfaceIndex) {
		var ret float32
		return ret
	}
	return *o.InterfaceIndex
}

// GetInterfaceIndexOk returns a tuple with the InterfaceIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetInterfaceIndexOk() (*float32, bool) {
	if o == nil || IsNil(o.InterfaceIndex) {
		return nil, false
	}
	return o.InterfaceIndex, true
}

// HasInterfaceIndex returns a boolean if a field has been set.
func (o *NetworkDeviceInterfaceDto) HasInterfaceIndex() bool {
	if o != nil && !IsNil(o.InterfaceIndex) {
		return true
	}

	return false
}

// SetInterfaceIndex gets a reference to the given float32 and assigns it to the InterfaceIndex field.
func (o *NetworkDeviceInterfaceDto) SetInterfaceIndex(v float32) {
	o.InterfaceIndex = &v
}

// GetLagIdentifier returns the LagIdentifier field value if set, zero value otherwise.
func (o *NetworkDeviceInterfaceDto) GetLagIdentifier() float32 {
	if o == nil || IsNil(o.LagIdentifier) {
		var ret float32
		return ret
	}
	return *o.LagIdentifier
}

// GetLagIdentifierOk returns a tuple with the LagIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetLagIdentifierOk() (*float32, bool) {
	if o == nil || IsNil(o.LagIdentifier) {
		return nil, false
	}
	return o.LagIdentifier, true
}

// HasLagIdentifier returns a boolean if a field has been set.
func (o *NetworkDeviceInterfaceDto) HasLagIdentifier() bool {
	if o != nil && !IsNil(o.LagIdentifier) {
		return true
	}

	return false
}

// SetLagIdentifier gets a reference to the given float32 and assigns it to the LagIdentifier field.
func (o *NetworkDeviceInterfaceDto) SetLagIdentifier(v float32) {
	o.LagIdentifier = &v
}

// GetServerInterfaceId returns the ServerInterfaceId field value if set, zero value otherwise.
func (o *NetworkDeviceInterfaceDto) GetServerInterfaceId() float32 {
	if o == nil || IsNil(o.ServerInterfaceId) {
		var ret float32
		return ret
	}
	return *o.ServerInterfaceId
}

// GetServerInterfaceIdOk returns a tuple with the ServerInterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetServerInterfaceIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerInterfaceId) {
		return nil, false
	}
	return o.ServerInterfaceId, true
}

// HasServerInterfaceId returns a boolean if a field has been set.
func (o *NetworkDeviceInterfaceDto) HasServerInterfaceId() bool {
	if o != nil && !IsNil(o.ServerInterfaceId) {
		return true
	}

	return false
}

// SetServerInterfaceId gets a reference to the given float32 and assigns it to the ServerInterfaceId field.
func (o *NetworkDeviceInterfaceDto) SetServerInterfaceId(v float32) {
	o.ServerInterfaceId = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *NetworkDeviceInterfaceDto) GetServerId() float32 {
	if o == nil || IsNil(o.ServerId) {
		var ret float32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetServerIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *NetworkDeviceInterfaceDto) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given float32 and assigns it to the ServerId field.
func (o *NetworkDeviceInterfaceDto) SetServerId(v float32) {
	o.ServerId = &v
}

// GetDirtyBit returns the DirtyBit field value
func (o *NetworkDeviceInterfaceDto) GetDirtyBit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DirtyBit
}

// GetDirtyBitOk returns a tuple with the DirtyBit field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetDirtyBitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DirtyBit, true
}

// SetDirtyBit sets field value
func (o *NetworkDeviceInterfaceDto) SetDirtyBit(v float32) {
	o.DirtyBit = v
}

// GetLldpInformation returns the LldpInformation field value if set, zero value otherwise.
func (o *NetworkDeviceInterfaceDto) GetLldpInformation() string {
	if o == nil || IsNil(o.LldpInformation) {
		var ret string
		return ret
	}
	return *o.LldpInformation
}

// GetLldpInformationOk returns a tuple with the LldpInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetLldpInformationOk() (*string, bool) {
	if o == nil || IsNil(o.LldpInformation) {
		return nil, false
	}
	return o.LldpInformation, true
}

// HasLldpInformation returns a boolean if a field has been set.
func (o *NetworkDeviceInterfaceDto) HasLldpInformation() bool {
	if o != nil && !IsNil(o.LldpInformation) {
		return true
	}

	return false
}

// SetLldpInformation gets a reference to the given string and assigns it to the LldpInformation field.
func (o *NetworkDeviceInterfaceDto) SetLldpInformation(v string) {
	o.LldpInformation = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *NetworkDeviceInterfaceDto) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *NetworkDeviceInterfaceDto) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *NetworkDeviceInterfaceDto) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetDriverDumpCachedJson returns the DriverDumpCachedJson field value if set, zero value otherwise.
func (o *NetworkDeviceInterfaceDto) GetDriverDumpCachedJson() map[string]interface{} {
	if o == nil || IsNil(o.DriverDumpCachedJson) {
		var ret map[string]interface{}
		return ret
	}
	return o.DriverDumpCachedJson
}

// GetDriverDumpCachedJsonOk returns a tuple with the DriverDumpCachedJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetDriverDumpCachedJsonOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DriverDumpCachedJson) {
		return map[string]interface{}{}, false
	}
	return o.DriverDumpCachedJson, true
}

// HasDriverDumpCachedJson returns a boolean if a field has been set.
func (o *NetworkDeviceInterfaceDto) HasDriverDumpCachedJson() bool {
	if o != nil && !IsNil(o.DriverDumpCachedJson) {
		return true
	}

	return false
}

// SetDriverDumpCachedJson gets a reference to the given map[string]interface{} and assigns it to the DriverDumpCachedJson field.
func (o *NetworkDeviceInterfaceDto) SetDriverDumpCachedJson(v map[string]interface{}) {
	o.DriverDumpCachedJson = v
}

// GetCachedUpdatedTimestamp returns the CachedUpdatedTimestamp field value
func (o *NetworkDeviceInterfaceDto) GetCachedUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CachedUpdatedTimestamp
}

// GetCachedUpdatedTimestampOk returns a tuple with the CachedUpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetCachedUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CachedUpdatedTimestamp, true
}

// SetCachedUpdatedTimestamp sets field value
func (o *NetworkDeviceInterfaceDto) SetCachedUpdatedTimestamp(v string) {
	o.CachedUpdatedTimestamp = v
}

// GetInterfaceLLDPInformationServerInterface returns the InterfaceLLDPInformationServerInterface field value if set, zero value otherwise.
func (o *NetworkDeviceInterfaceDto) GetInterfaceLLDPInformationServerInterface() map[string]interface{} {
	if o == nil || IsNil(o.InterfaceLLDPInformationServerInterface) {
		var ret map[string]interface{}
		return ret
	}
	return o.InterfaceLLDPInformationServerInterface
}

// GetInterfaceLLDPInformationServerInterfaceOk returns a tuple with the InterfaceLLDPInformationServerInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetInterfaceLLDPInformationServerInterfaceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InterfaceLLDPInformationServerInterface) {
		return map[string]interface{}{}, false
	}
	return o.InterfaceLLDPInformationServerInterface, true
}

// HasInterfaceLLDPInformationServerInterface returns a boolean if a field has been set.
func (o *NetworkDeviceInterfaceDto) HasInterfaceLLDPInformationServerInterface() bool {
	if o != nil && !IsNil(o.InterfaceLLDPInformationServerInterface) {
		return true
	}

	return false
}

// SetInterfaceLLDPInformationServerInterface gets a reference to the given map[string]interface{} and assigns it to the InterfaceLLDPInformationServerInterface field.
func (o *NetworkDeviceInterfaceDto) SetInterfaceLLDPInformationServerInterface(v map[string]interface{}) {
	o.InterfaceLLDPInformationServerInterface = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NetworkDeviceInterfaceDto) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceInterfaceDto) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NetworkDeviceInterfaceDto) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *NetworkDeviceInterfaceDto) SetLinks(v []Link) {
	o.Links = v
}

func (o NetworkDeviceInterfaceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDeviceInterfaceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interfaceId"] = o.InterfaceId
	toSerialize["networkDeviceId"] = o.NetworkDeviceId
	toSerialize["interfaceName"] = o.InterfaceName
	if !IsNil(o.InterfaceIndex) {
		toSerialize["interfaceIndex"] = o.InterfaceIndex
	}
	if !IsNil(o.LagIdentifier) {
		toSerialize["lagIdentifier"] = o.LagIdentifier
	}
	if !IsNil(o.ServerInterfaceId) {
		toSerialize["serverInterfaceId"] = o.ServerInterfaceId
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	toSerialize["dirtyBit"] = o.DirtyBit
	if !IsNil(o.LldpInformation) {
		toSerialize["lldpInformation"] = o.LldpInformation
	}
	if !IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	if !IsNil(o.DriverDumpCachedJson) {
		toSerialize["driverDumpCachedJson"] = o.DriverDumpCachedJson
	}
	toSerialize["cachedUpdatedTimestamp"] = o.CachedUpdatedTimestamp
	if !IsNil(o.InterfaceLLDPInformationServerInterface) {
		toSerialize["interfaceLLDPInformationServerInterface"] = o.InterfaceLLDPInformationServerInterface
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkDeviceInterfaceDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interfaceId",
		"networkDeviceId",
		"interfaceName",
		"dirtyBit",
		"cachedUpdatedTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkDeviceInterfaceDto := _NetworkDeviceInterfaceDto{}

	err = json.Unmarshal(data, &varNetworkDeviceInterfaceDto)

	if err != nil {
		return err
	}

	*o = NetworkDeviceInterfaceDto(varNetworkDeviceInterfaceDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "interfaceId")
		delete(additionalProperties, "networkDeviceId")
		delete(additionalProperties, "interfaceName")
		delete(additionalProperties, "interfaceIndex")
		delete(additionalProperties, "lagIdentifier")
		delete(additionalProperties, "serverInterfaceId")
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "dirtyBit")
		delete(additionalProperties, "lldpInformation")
		delete(additionalProperties, "macAddress")
		delete(additionalProperties, "driverDumpCachedJson")
		delete(additionalProperties, "cachedUpdatedTimestamp")
		delete(additionalProperties, "interfaceLLDPInformationServerInterface")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkDeviceInterfaceDto struct {
	value *NetworkDeviceInterfaceDto
	isSet bool
}

func (v NullableNetworkDeviceInterfaceDto) Get() *NetworkDeviceInterfaceDto {
	return v.value
}

func (v *NullableNetworkDeviceInterfaceDto) Set(val *NetworkDeviceInterfaceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDeviceInterfaceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDeviceInterfaceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDeviceInterfaceDto(val *NetworkDeviceInterfaceDto) *NullableNetworkDeviceInterfaceDto {
	return &NullableNetworkDeviceInterfaceDto{value: val, isSet: true}
}

func (v NullableNetworkDeviceInterfaceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDeviceInterfaceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


