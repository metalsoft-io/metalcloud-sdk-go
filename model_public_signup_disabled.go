/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the PublicSignupDisabled type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicSignupDisabled{}

// PublicSignupDisabled struct for PublicSignupDisabled
type PublicSignupDisabled struct {
	// Flag to indicate if public signup is disabled
	IsPublicSignupDisabled bool `json:"isPublicSignupDisabled"`
	AdditionalProperties map[string]interface{}
}

type _PublicSignupDisabled PublicSignupDisabled

// NewPublicSignupDisabled instantiates a new PublicSignupDisabled object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicSignupDisabled(isPublicSignupDisabled bool) *PublicSignupDisabled {
	this := PublicSignupDisabled{}
	this.IsPublicSignupDisabled = isPublicSignupDisabled
	return &this
}

// NewPublicSignupDisabledWithDefaults instantiates a new PublicSignupDisabled object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicSignupDisabledWithDefaults() *PublicSignupDisabled {
	this := PublicSignupDisabled{}
	var isPublicSignupDisabled bool = false
	this.IsPublicSignupDisabled = isPublicSignupDisabled
	return &this
}

// GetIsPublicSignupDisabled returns the IsPublicSignupDisabled field value
func (o *PublicSignupDisabled) GetIsPublicSignupDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublicSignupDisabled
}

// GetIsPublicSignupDisabledOk returns a tuple with the IsPublicSignupDisabled field value
// and a boolean to check if the value has been set.
func (o *PublicSignupDisabled) GetIsPublicSignupDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublicSignupDisabled, true
}

// SetIsPublicSignupDisabled sets field value
func (o *PublicSignupDisabled) SetIsPublicSignupDisabled(v bool) {
	o.IsPublicSignupDisabled = v
}

func (o PublicSignupDisabled) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicSignupDisabled) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isPublicSignupDisabled"] = o.IsPublicSignupDisabled

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PublicSignupDisabled) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isPublicSignupDisabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicSignupDisabled := _PublicSignupDisabled{}

	err = json.Unmarshal(data, &varPublicSignupDisabled)

	if err != nil {
		return err
	}

	*o = PublicSignupDisabled(varPublicSignupDisabled)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "isPublicSignupDisabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePublicSignupDisabled struct {
	value *PublicSignupDisabled
	isSet bool
}

func (v NullablePublicSignupDisabled) Get() *PublicSignupDisabled {
	return v.value
}

func (v *NullablePublicSignupDisabled) Set(val *PublicSignupDisabled) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicSignupDisabled) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicSignupDisabled) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicSignupDisabled(val *PublicSignupDisabled) *NullablePublicSignupDisabled {
	return &NullablePublicSignupDisabled{value: val, isSet: true}
}

func (v NullablePublicSignupDisabled) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicSignupDisabled) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


