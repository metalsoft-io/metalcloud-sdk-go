/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateEndpointInstanceGroupNetworkConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEndpointInstanceGroupNetworkConnection{}

// CreateEndpointInstanceGroupNetworkConnection struct for CreateEndpointInstanceGroupNetworkConnection
type CreateEndpointInstanceGroupNetworkConnection struct {
	// The logical network ID.
	LogicalNetworkId string `json:"logicalNetworkId"`
	// Whether the logical network is tagged.
	Tagged bool `json:"tagged"`
	// The access mode of the network endpoint group
	AccessMode NetworkEndpointGroupAllowedAccessMode `json:"accessMode"`
	// The MTU of the logical network
	Mtu *int32 `json:"mtu,omitempty"`
	// The redundancy configuration
	Redundancy NullableRedundancyConfig `json:"redundancy,omitempty"`
	// DNS records that are supposed to be provisioned for the server instance group.
	Dns NullableDnsRecordsEndpointGroupLogicalNetworkDto `json:"dns,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateEndpointInstanceGroupNetworkConnection CreateEndpointInstanceGroupNetworkConnection

// NewCreateEndpointInstanceGroupNetworkConnection instantiates a new CreateEndpointInstanceGroupNetworkConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEndpointInstanceGroupNetworkConnection(logicalNetworkId string, tagged bool, accessMode NetworkEndpointGroupAllowedAccessMode) *CreateEndpointInstanceGroupNetworkConnection {
	this := CreateEndpointInstanceGroupNetworkConnection{}
	this.LogicalNetworkId = logicalNetworkId
	this.Tagged = tagged
	this.AccessMode = accessMode
	return &this
}

// NewCreateEndpointInstanceGroupNetworkConnectionWithDefaults instantiates a new CreateEndpointInstanceGroupNetworkConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEndpointInstanceGroupNetworkConnectionWithDefaults() *CreateEndpointInstanceGroupNetworkConnection {
	this := CreateEndpointInstanceGroupNetworkConnection{}
	return &this
}

// GetLogicalNetworkId returns the LogicalNetworkId field value
func (o *CreateEndpointInstanceGroupNetworkConnection) GetLogicalNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogicalNetworkId
}

// GetLogicalNetworkIdOk returns a tuple with the LogicalNetworkId field value
// and a boolean to check if the value has been set.
func (o *CreateEndpointInstanceGroupNetworkConnection) GetLogicalNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogicalNetworkId, true
}

// SetLogicalNetworkId sets field value
func (o *CreateEndpointInstanceGroupNetworkConnection) SetLogicalNetworkId(v string) {
	o.LogicalNetworkId = v
}

// GetTagged returns the Tagged field value
func (o *CreateEndpointInstanceGroupNetworkConnection) GetTagged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Tagged
}

// GetTaggedOk returns a tuple with the Tagged field value
// and a boolean to check if the value has been set.
func (o *CreateEndpointInstanceGroupNetworkConnection) GetTaggedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tagged, true
}

// SetTagged sets field value
func (o *CreateEndpointInstanceGroupNetworkConnection) SetTagged(v bool) {
	o.Tagged = v
}

// GetAccessMode returns the AccessMode field value
func (o *CreateEndpointInstanceGroupNetworkConnection) GetAccessMode() NetworkEndpointGroupAllowedAccessMode {
	if o == nil {
		var ret NetworkEndpointGroupAllowedAccessMode
		return ret
	}

	return o.AccessMode
}

// GetAccessModeOk returns a tuple with the AccessMode field value
// and a boolean to check if the value has been set.
func (o *CreateEndpointInstanceGroupNetworkConnection) GetAccessModeOk() (*NetworkEndpointGroupAllowedAccessMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessMode, true
}

// SetAccessMode sets field value
func (o *CreateEndpointInstanceGroupNetworkConnection) SetAccessMode(v NetworkEndpointGroupAllowedAccessMode) {
	o.AccessMode = v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *CreateEndpointInstanceGroupNetworkConnection) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEndpointInstanceGroupNetworkConnection) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *CreateEndpointInstanceGroupNetworkConnection) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *CreateEndpointInstanceGroupNetworkConnection) SetMtu(v int32) {
	o.Mtu = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEndpointInstanceGroupNetworkConnection) GetRedundancy() RedundancyConfig {
	if o == nil || IsNil(o.Redundancy.Get()) {
		var ret RedundancyConfig
		return ret
	}
	return *o.Redundancy.Get()
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEndpointInstanceGroupNetworkConnection) GetRedundancyOk() (*RedundancyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Redundancy.Get(), o.Redundancy.IsSet()
}

// HasRedundancy returns a boolean if a field has been set.
func (o *CreateEndpointInstanceGroupNetworkConnection) HasRedundancy() bool {
	if o != nil && o.Redundancy.IsSet() {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given NullableRedundancyConfig and assigns it to the Redundancy field.
func (o *CreateEndpointInstanceGroupNetworkConnection) SetRedundancy(v RedundancyConfig) {
	o.Redundancy.Set(&v)
}
// SetRedundancyNil sets the value for Redundancy to be an explicit nil
func (o *CreateEndpointInstanceGroupNetworkConnection) SetRedundancyNil() {
	o.Redundancy.Set(nil)
}

// UnsetRedundancy ensures that no value is present for Redundancy, not even an explicit nil
func (o *CreateEndpointInstanceGroupNetworkConnection) UnsetRedundancy() {
	o.Redundancy.Unset()
}

// GetDns returns the Dns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEndpointInstanceGroupNetworkConnection) GetDns() DnsRecordsEndpointGroupLogicalNetworkDto {
	if o == nil || IsNil(o.Dns.Get()) {
		var ret DnsRecordsEndpointGroupLogicalNetworkDto
		return ret
	}
	return *o.Dns.Get()
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEndpointInstanceGroupNetworkConnection) GetDnsOk() (*DnsRecordsEndpointGroupLogicalNetworkDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dns.Get(), o.Dns.IsSet()
}

// HasDns returns a boolean if a field has been set.
func (o *CreateEndpointInstanceGroupNetworkConnection) HasDns() bool {
	if o != nil && o.Dns.IsSet() {
		return true
	}

	return false
}

// SetDns gets a reference to the given NullableDnsRecordsEndpointGroupLogicalNetworkDto and assigns it to the Dns field.
func (o *CreateEndpointInstanceGroupNetworkConnection) SetDns(v DnsRecordsEndpointGroupLogicalNetworkDto) {
	o.Dns.Set(&v)
}
// SetDnsNil sets the value for Dns to be an explicit nil
func (o *CreateEndpointInstanceGroupNetworkConnection) SetDnsNil() {
	o.Dns.Set(nil)
}

// UnsetDns ensures that no value is present for Dns, not even an explicit nil
func (o *CreateEndpointInstanceGroupNetworkConnection) UnsetDns() {
	o.Dns.Unset()
}

func (o CreateEndpointInstanceGroupNetworkConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEndpointInstanceGroupNetworkConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["logicalNetworkId"] = o.LogicalNetworkId
	toSerialize["tagged"] = o.Tagged
	toSerialize["accessMode"] = o.AccessMode
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if o.Redundancy.IsSet() {
		toSerialize["redundancy"] = o.Redundancy.Get()
	}
	if o.Dns.IsSet() {
		toSerialize["dns"] = o.Dns.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateEndpointInstanceGroupNetworkConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logicalNetworkId",
		"tagged",
		"accessMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateEndpointInstanceGroupNetworkConnection := _CreateEndpointInstanceGroupNetworkConnection{}

	err = json.Unmarshal(data, &varCreateEndpointInstanceGroupNetworkConnection)

	if err != nil {
		return err
	}

	*o = CreateEndpointInstanceGroupNetworkConnection(varCreateEndpointInstanceGroupNetworkConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "logicalNetworkId")
		delete(additionalProperties, "tagged")
		delete(additionalProperties, "accessMode")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "redundancy")
		delete(additionalProperties, "dns")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateEndpointInstanceGroupNetworkConnection struct {
	value *CreateEndpointInstanceGroupNetworkConnection
	isSet bool
}

func (v NullableCreateEndpointInstanceGroupNetworkConnection) Get() *CreateEndpointInstanceGroupNetworkConnection {
	return v.value
}

func (v *NullableCreateEndpointInstanceGroupNetworkConnection) Set(val *CreateEndpointInstanceGroupNetworkConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEndpointInstanceGroupNetworkConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEndpointInstanceGroupNetworkConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEndpointInstanceGroupNetworkConnection(val *CreateEndpointInstanceGroupNetworkConnection) *NullableCreateEndpointInstanceGroupNetworkConnection {
	return &NullableCreateEndpointInstanceGroupNetworkConnection{value: val, isSet: true}
}

func (v NullableCreateEndpointInstanceGroupNetworkConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEndpointInstanceGroupNetworkConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


