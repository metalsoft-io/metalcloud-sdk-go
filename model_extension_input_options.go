/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ExtensionInputOptions - Input options.
type ExtensionInputOptions struct {
	ExtensionInputBoolean *ExtensionInputBoolean
	ExtensionInputInteger *ExtensionInputInteger
	ExtensionInputOsTemplate *ExtensionInputOsTemplate
	ExtensionInputServerType *ExtensionInputServerType
	ExtensionInputString *ExtensionInputString
}

// ExtensionInputBooleanAsExtensionInputOptions is a convenience function that returns ExtensionInputBoolean wrapped in ExtensionInputOptions
func ExtensionInputBooleanAsExtensionInputOptions(v *ExtensionInputBoolean) ExtensionInputOptions {
	return ExtensionInputOptions{
		ExtensionInputBoolean: v,
	}
}

// ExtensionInputIntegerAsExtensionInputOptions is a convenience function that returns ExtensionInputInteger wrapped in ExtensionInputOptions
func ExtensionInputIntegerAsExtensionInputOptions(v *ExtensionInputInteger) ExtensionInputOptions {
	return ExtensionInputOptions{
		ExtensionInputInteger: v,
	}
}

// ExtensionInputOsTemplateAsExtensionInputOptions is a convenience function that returns ExtensionInputOsTemplate wrapped in ExtensionInputOptions
func ExtensionInputOsTemplateAsExtensionInputOptions(v *ExtensionInputOsTemplate) ExtensionInputOptions {
	return ExtensionInputOptions{
		ExtensionInputOsTemplate: v,
	}
}

// ExtensionInputServerTypeAsExtensionInputOptions is a convenience function that returns ExtensionInputServerType wrapped in ExtensionInputOptions
func ExtensionInputServerTypeAsExtensionInputOptions(v *ExtensionInputServerType) ExtensionInputOptions {
	return ExtensionInputOptions{
		ExtensionInputServerType: v,
	}
}

// ExtensionInputStringAsExtensionInputOptions is a convenience function that returns ExtensionInputString wrapped in ExtensionInputOptions
func ExtensionInputStringAsExtensionInputOptions(v *ExtensionInputString) ExtensionInputOptions {
	return ExtensionInputOptions{
		ExtensionInputString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ExtensionInputOptions) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'ExtensionInputBoolean'
	if jsonDict["inputType"] == "ExtensionInputBoolean" {
		// try to unmarshal JSON data into ExtensionInputBoolean
		err = json.Unmarshal(data, &dst.ExtensionInputBoolean)
		if err == nil {
			return nil // data stored in dst.ExtensionInputBoolean, return on the first match
		} else {
			dst.ExtensionInputBoolean = nil
			return fmt.Errorf("failed to unmarshal ExtensionInputOptions as ExtensionInputBoolean: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExtensionInputInteger'
	if jsonDict["inputType"] == "ExtensionInputInteger" {
		// try to unmarshal JSON data into ExtensionInputInteger
		err = json.Unmarshal(data, &dst.ExtensionInputInteger)
		if err == nil {
			return nil // data stored in dst.ExtensionInputInteger, return on the first match
		} else {
			dst.ExtensionInputInteger = nil
			return fmt.Errorf("failed to unmarshal ExtensionInputOptions as ExtensionInputInteger: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExtensionInputOsTemplate'
	if jsonDict["inputType"] == "ExtensionInputOsTemplate" {
		// try to unmarshal JSON data into ExtensionInputOsTemplate
		err = json.Unmarshal(data, &dst.ExtensionInputOsTemplate)
		if err == nil {
			return nil // data stored in dst.ExtensionInputOsTemplate, return on the first match
		} else {
			dst.ExtensionInputOsTemplate = nil
			return fmt.Errorf("failed to unmarshal ExtensionInputOptions as ExtensionInputOsTemplate: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExtensionInputServerType'
	if jsonDict["inputType"] == "ExtensionInputServerType" {
		// try to unmarshal JSON data into ExtensionInputServerType
		err = json.Unmarshal(data, &dst.ExtensionInputServerType)
		if err == nil {
			return nil // data stored in dst.ExtensionInputServerType, return on the first match
		} else {
			dst.ExtensionInputServerType = nil
			return fmt.Errorf("failed to unmarshal ExtensionInputOptions as ExtensionInputServerType: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExtensionInputString'
	if jsonDict["inputType"] == "ExtensionInputString" {
		// try to unmarshal JSON data into ExtensionInputString
		err = json.Unmarshal(data, &dst.ExtensionInputString)
		if err == nil {
			return nil // data stored in dst.ExtensionInputString, return on the first match
		} else {
			dst.ExtensionInputString = nil
			return fmt.Errorf("failed to unmarshal ExtensionInputOptions as ExtensionInputString: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ExtensionInputOptions) MarshalJSON() ([]byte, error) {
	if src.ExtensionInputBoolean != nil {
		return json.Marshal(&src.ExtensionInputBoolean)
	}

	if src.ExtensionInputInteger != nil {
		return json.Marshal(&src.ExtensionInputInteger)
	}

	if src.ExtensionInputOsTemplate != nil {
		return json.Marshal(&src.ExtensionInputOsTemplate)
	}

	if src.ExtensionInputServerType != nil {
		return json.Marshal(&src.ExtensionInputServerType)
	}

	if src.ExtensionInputString != nil {
		return json.Marshal(&src.ExtensionInputString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ExtensionInputOptions) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ExtensionInputBoolean != nil {
		return obj.ExtensionInputBoolean
	}

	if obj.ExtensionInputInteger != nil {
		return obj.ExtensionInputInteger
	}

	if obj.ExtensionInputOsTemplate != nil {
		return obj.ExtensionInputOsTemplate
	}

	if obj.ExtensionInputServerType != nil {
		return obj.ExtensionInputServerType
	}

	if obj.ExtensionInputString != nil {
		return obj.ExtensionInputString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ExtensionInputOptions) GetActualInstanceValue() (interface{}) {
	if obj.ExtensionInputBoolean != nil {
		return *obj.ExtensionInputBoolean
	}

	if obj.ExtensionInputInteger != nil {
		return *obj.ExtensionInputInteger
	}

	if obj.ExtensionInputOsTemplate != nil {
		return *obj.ExtensionInputOsTemplate
	}

	if obj.ExtensionInputServerType != nil {
		return *obj.ExtensionInputServerType
	}

	if obj.ExtensionInputString != nil {
		return *obj.ExtensionInputString
	}

	// all schemas are nil
	return nil
}

type NullableExtensionInputOptions struct {
	value *ExtensionInputOptions
	isSet bool
}

func (v NullableExtensionInputOptions) Get() *ExtensionInputOptions {
	return v.value
}

func (v *NullableExtensionInputOptions) Set(val *ExtensionInputOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionInputOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionInputOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionInputOptions(val *ExtensionInputOptions) *NullableExtensionInputOptions {
	return &NullableExtensionInputOptions{value: val, isSet: true}
}

func (v NullableExtensionInputOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionInputOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


