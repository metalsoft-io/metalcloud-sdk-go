/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UserUpdatePassword type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserUpdatePassword{}

// UserUpdatePassword struct for UserUpdatePassword
type UserUpdatePassword struct {
	// The new password of the user
	NewPassword string `json:"newPassword"`
	// The old password of the user
	OldPassword *string `json:"oldPassword,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserUpdatePassword UserUpdatePassword

// NewUserUpdatePassword instantiates a new UserUpdatePassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdatePassword(newPassword string) *UserUpdatePassword {
	this := UserUpdatePassword{}
	this.NewPassword = newPassword
	return &this
}

// NewUserUpdatePasswordWithDefaults instantiates a new UserUpdatePassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdatePasswordWithDefaults() *UserUpdatePassword {
	this := UserUpdatePassword{}
	return &this
}

// GetNewPassword returns the NewPassword field value
func (o *UserUpdatePassword) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *UserUpdatePassword) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *UserUpdatePassword) SetNewPassword(v string) {
	o.NewPassword = v
}

// GetOldPassword returns the OldPassword field value if set, zero value otherwise.
func (o *UserUpdatePassword) GetOldPassword() string {
	if o == nil || IsNil(o.OldPassword) {
		var ret string
		return ret
	}
	return *o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdatePassword) GetOldPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.OldPassword) {
		return nil, false
	}
	return o.OldPassword, true
}

// HasOldPassword returns a boolean if a field has been set.
func (o *UserUpdatePassword) HasOldPassword() bool {
	if o != nil && !IsNil(o.OldPassword) {
		return true
	}

	return false
}

// SetOldPassword gets a reference to the given string and assigns it to the OldPassword field.
func (o *UserUpdatePassword) SetOldPassword(v string) {
	o.OldPassword = &v
}

func (o UserUpdatePassword) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserUpdatePassword) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["newPassword"] = o.NewPassword
	if !IsNil(o.OldPassword) {
		toSerialize["oldPassword"] = o.OldPassword
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserUpdatePassword) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"newPassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserUpdatePassword := _UserUpdatePassword{}

	err = json.Unmarshal(data, &varUserUpdatePassword)

	if err != nil {
		return err
	}

	*o = UserUpdatePassword(varUserUpdatePassword)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "newPassword")
		delete(additionalProperties, "oldPassword")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserUpdatePassword struct {
	value *UserUpdatePassword
	isSet bool
}

func (v NullableUserUpdatePassword) Get() *UserUpdatePassword {
	return v.value
}

func (v *NullableUserUpdatePassword) Set(val *UserUpdatePassword) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdatePassword) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdatePassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdatePassword(val *UserUpdatePassword) *NullableUserUpdatePassword {
	return &NullableUserUpdatePassword{value: val, isSet: true}
}

func (v NullableUserUpdatePassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdatePassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


