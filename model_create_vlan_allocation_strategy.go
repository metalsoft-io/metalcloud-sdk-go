/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// CreateVlanAllocationStrategy - struct for CreateVlanAllocationStrategy
type CreateVlanAllocationStrategy struct {
	CreateAutoVlanAllocationStrategy *CreateAutoVlanAllocationStrategy
	CreateManualVlanAllocationStrategy *CreateManualVlanAllocationStrategy
}

// CreateAutoVlanAllocationStrategyAsCreateVlanAllocationStrategy is a convenience function that returns CreateAutoVlanAllocationStrategy wrapped in CreateVlanAllocationStrategy
func CreateAutoVlanAllocationStrategyAsCreateVlanAllocationStrategy(v *CreateAutoVlanAllocationStrategy) CreateVlanAllocationStrategy {
	return CreateVlanAllocationStrategy{
		CreateAutoVlanAllocationStrategy: v,
	}
}

// CreateManualVlanAllocationStrategyAsCreateVlanAllocationStrategy is a convenience function that returns CreateManualVlanAllocationStrategy wrapped in CreateVlanAllocationStrategy
func CreateManualVlanAllocationStrategyAsCreateVlanAllocationStrategy(v *CreateManualVlanAllocationStrategy) CreateVlanAllocationStrategy {
	return CreateVlanAllocationStrategy{
		CreateManualVlanAllocationStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateVlanAllocationStrategy) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'auto'
	if jsonDict["kind"] == "auto" {
		// try to unmarshal JSON data into CreateAutoVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoVlanAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateVlanAllocationStrategy as CreateAutoVlanAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'manual'
	if jsonDict["kind"] == "manual" {
		// try to unmarshal JSON data into CreateManualVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualVlanAllocationStrategy, return on the first match
		} else {
			dst.CreateManualVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateVlanAllocationStrategy as CreateManualVlanAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateAutoVlanAllocationStrategy'
	if jsonDict["kind"] == "CreateAutoVlanAllocationStrategy" {
		// try to unmarshal JSON data into CreateAutoVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoVlanAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateVlanAllocationStrategy as CreateAutoVlanAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateManualVlanAllocationStrategy'
	if jsonDict["kind"] == "CreateManualVlanAllocationStrategy" {
		// try to unmarshal JSON data into CreateManualVlanAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualVlanAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualVlanAllocationStrategy, return on the first match
		} else {
			dst.CreateManualVlanAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateVlanAllocationStrategy as CreateManualVlanAllocationStrategy: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateVlanAllocationStrategy) MarshalJSON() ([]byte, error) {
	if src.CreateAutoVlanAllocationStrategy != nil {
		return json.Marshal(&src.CreateAutoVlanAllocationStrategy)
	}

	if src.CreateManualVlanAllocationStrategy != nil {
		return json.Marshal(&src.CreateManualVlanAllocationStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateVlanAllocationStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateAutoVlanAllocationStrategy != nil {
		return obj.CreateAutoVlanAllocationStrategy
	}

	if obj.CreateManualVlanAllocationStrategy != nil {
		return obj.CreateManualVlanAllocationStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateVlanAllocationStrategy) GetActualInstanceValue() (interface{}) {
	if obj.CreateAutoVlanAllocationStrategy != nil {
		return *obj.CreateAutoVlanAllocationStrategy
	}

	if obj.CreateManualVlanAllocationStrategy != nil {
		return *obj.CreateManualVlanAllocationStrategy
	}

	// all schemas are nil
	return nil
}

type NullableCreateVlanAllocationStrategy struct {
	value *CreateVlanAllocationStrategy
	isSet bool
}

func (v NullableCreateVlanAllocationStrategy) Get() *CreateVlanAllocationStrategy {
	return v.value
}

func (v *NullableCreateVlanAllocationStrategy) Set(val *CreateVlanAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVlanAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVlanAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVlanAllocationStrategy(val *CreateVlanAllocationStrategy) *NullableCreateVlanAllocationStrategy {
	return &NullableCreateVlanAllocationStrategy{value: val, isSet: true}
}

func (v NullableCreateVlanAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVlanAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


