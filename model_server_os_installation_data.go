/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerOSInstallationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerOSInstallationData{}

// ServerOSInstallationData struct for ServerOSInstallationData
type ServerOSInstallationData struct {
	// The id of the server.
	ServerId float32 `json:"serverId"`
	// The id of the server type.
	ServerTypeId *float32 `json:"serverTypeId,omitempty"`
	// The UUID of the server.
	ServerUUID *string `json:"serverUUID,omitempty"`
	// The Serial Number of the server.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// The Management Address of the server.
	ManagementAddress *string `json:"managementAddress,omitempty"`
	// The username to use.
	Username *string `json:"username,omitempty"`
	// The encrypted password.
	PasswordEncrypted string `json:"passwordEncrypted"`
	// The disk count of the server.
	DiskCount *float32 `json:"diskCount,omitempty"`
	// The MAC address of the server.
	BmcMacAddress *string `json:"bmcMacAddress,omitempty"`
	// The vendor of the server.
	Vendor *string `json:"vendor,omitempty"`
	// The vendor sku id of the server.
	VendorSkuId *string `json:"vendorSkuId,omitempty"`
	// The model of the server.
	Model *string `json:"model,omitempty"`
	// The chassis rack name of the server.
	RackName *string `json:"rackName,omitempty"`
	// The interfaces of the server.
	Interfaces []ServerInterface `json:"interfaces,omitempty"`
	// The disks of the server.
	Disks []ServerDisk `json:"disks,omitempty"`
	// The storage controllers of the server.
	StorageControllers []ServerStorageController `json:"storageControllers,omitempty"`
	// Tags for the Server.
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerOSInstallationData ServerOSInstallationData

// NewServerOSInstallationData instantiates a new ServerOSInstallationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerOSInstallationData(serverId float32, passwordEncrypted string) *ServerOSInstallationData {
	this := ServerOSInstallationData{}
	this.ServerId = serverId
	this.PasswordEncrypted = passwordEncrypted
	return &this
}

// NewServerOSInstallationDataWithDefaults instantiates a new ServerOSInstallationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerOSInstallationDataWithDefaults() *ServerOSInstallationData {
	this := ServerOSInstallationData{}
	return &this
}

// GetServerId returns the ServerId field value
func (o *ServerOSInstallationData) GetServerId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetServerIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerId, true
}

// SetServerId sets field value
func (o *ServerOSInstallationData) SetServerId(v float32) {
	o.ServerId = v
}

// GetServerTypeId returns the ServerTypeId field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetServerTypeId() float32 {
	if o == nil || IsNil(o.ServerTypeId) {
		var ret float32
		return ret
	}
	return *o.ServerTypeId
}

// GetServerTypeIdOk returns a tuple with the ServerTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetServerTypeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerTypeId) {
		return nil, false
	}
	return o.ServerTypeId, true
}

// HasServerTypeId returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasServerTypeId() bool {
	if o != nil && !IsNil(o.ServerTypeId) {
		return true
	}

	return false
}

// SetServerTypeId gets a reference to the given float32 and assigns it to the ServerTypeId field.
func (o *ServerOSInstallationData) SetServerTypeId(v float32) {
	o.ServerTypeId = &v
}

// GetServerUUID returns the ServerUUID field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetServerUUID() string {
	if o == nil || IsNil(o.ServerUUID) {
		var ret string
		return ret
	}
	return *o.ServerUUID
}

// GetServerUUIDOk returns a tuple with the ServerUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetServerUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.ServerUUID) {
		return nil, false
	}
	return o.ServerUUID, true
}

// HasServerUUID returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasServerUUID() bool {
	if o != nil && !IsNil(o.ServerUUID) {
		return true
	}

	return false
}

// SetServerUUID gets a reference to the given string and assigns it to the ServerUUID field.
func (o *ServerOSInstallationData) SetServerUUID(v string) {
	o.ServerUUID = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *ServerOSInstallationData) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetManagementAddress returns the ManagementAddress field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetManagementAddress() string {
	if o == nil || IsNil(o.ManagementAddress) {
		var ret string
		return ret
	}
	return *o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetManagementAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddress) {
		return nil, false
	}
	return o.ManagementAddress, true
}

// HasManagementAddress returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasManagementAddress() bool {
	if o != nil && !IsNil(o.ManagementAddress) {
		return true
	}

	return false
}

// SetManagementAddress gets a reference to the given string and assigns it to the ManagementAddress field.
func (o *ServerOSInstallationData) SetManagementAddress(v string) {
	o.ManagementAddress = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ServerOSInstallationData) SetUsername(v string) {
	o.Username = &v
}

// GetPasswordEncrypted returns the PasswordEncrypted field value
func (o *ServerOSInstallationData) GetPasswordEncrypted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PasswordEncrypted
}

// GetPasswordEncryptedOk returns a tuple with the PasswordEncrypted field value
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetPasswordEncryptedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordEncrypted, true
}

// SetPasswordEncrypted sets field value
func (o *ServerOSInstallationData) SetPasswordEncrypted(v string) {
	o.PasswordEncrypted = v
}

// GetDiskCount returns the DiskCount field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetDiskCount() float32 {
	if o == nil || IsNil(o.DiskCount) {
		var ret float32
		return ret
	}
	return *o.DiskCount
}

// GetDiskCountOk returns a tuple with the DiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetDiskCountOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskCount) {
		return nil, false
	}
	return o.DiskCount, true
}

// HasDiskCount returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasDiskCount() bool {
	if o != nil && !IsNil(o.DiskCount) {
		return true
	}

	return false
}

// SetDiskCount gets a reference to the given float32 and assigns it to the DiskCount field.
func (o *ServerOSInstallationData) SetDiskCount(v float32) {
	o.DiskCount = &v
}

// GetBmcMacAddress returns the BmcMacAddress field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetBmcMacAddress() string {
	if o == nil || IsNil(o.BmcMacAddress) {
		var ret string
		return ret
	}
	return *o.BmcMacAddress
}

// GetBmcMacAddressOk returns a tuple with the BmcMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetBmcMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.BmcMacAddress) {
		return nil, false
	}
	return o.BmcMacAddress, true
}

// HasBmcMacAddress returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasBmcMacAddress() bool {
	if o != nil && !IsNil(o.BmcMacAddress) {
		return true
	}

	return false
}

// SetBmcMacAddress gets a reference to the given string and assigns it to the BmcMacAddress field.
func (o *ServerOSInstallationData) SetBmcMacAddress(v string) {
	o.BmcMacAddress = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *ServerOSInstallationData) SetVendor(v string) {
	o.Vendor = &v
}

// GetVendorSkuId returns the VendorSkuId field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetVendorSkuId() string {
	if o == nil || IsNil(o.VendorSkuId) {
		var ret string
		return ret
	}
	return *o.VendorSkuId
}

// GetVendorSkuIdOk returns a tuple with the VendorSkuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetVendorSkuIdOk() (*string, bool) {
	if o == nil || IsNil(o.VendorSkuId) {
		return nil, false
	}
	return o.VendorSkuId, true
}

// HasVendorSkuId returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasVendorSkuId() bool {
	if o != nil && !IsNil(o.VendorSkuId) {
		return true
	}

	return false
}

// SetVendorSkuId gets a reference to the given string and assigns it to the VendorSkuId field.
func (o *ServerOSInstallationData) SetVendorSkuId(v string) {
	o.VendorSkuId = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ServerOSInstallationData) SetModel(v string) {
	o.Model = &v
}

// GetRackName returns the RackName field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetRackName() string {
	if o == nil || IsNil(o.RackName) {
		var ret string
		return ret
	}
	return *o.RackName
}

// GetRackNameOk returns a tuple with the RackName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetRackNameOk() (*string, bool) {
	if o == nil || IsNil(o.RackName) {
		return nil, false
	}
	return o.RackName, true
}

// HasRackName returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasRackName() bool {
	if o != nil && !IsNil(o.RackName) {
		return true
	}

	return false
}

// SetRackName gets a reference to the given string and assigns it to the RackName field.
func (o *ServerOSInstallationData) SetRackName(v string) {
	o.RackName = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetInterfaces() []ServerInterface {
	if o == nil || IsNil(o.Interfaces) {
		var ret []ServerInterface
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetInterfacesOk() ([]ServerInterface, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []ServerInterface and assigns it to the Interfaces field.
func (o *ServerOSInstallationData) SetInterfaces(v []ServerInterface) {
	o.Interfaces = v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetDisks() []ServerDisk {
	if o == nil || IsNil(o.Disks) {
		var ret []ServerDisk
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetDisksOk() ([]ServerDisk, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []ServerDisk and assigns it to the Disks field.
func (o *ServerOSInstallationData) SetDisks(v []ServerDisk) {
	o.Disks = v
}

// GetStorageControllers returns the StorageControllers field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetStorageControllers() []ServerStorageController {
	if o == nil || IsNil(o.StorageControllers) {
		var ret []ServerStorageController
		return ret
	}
	return o.StorageControllers
}

// GetStorageControllersOk returns a tuple with the StorageControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetStorageControllersOk() ([]ServerStorageController, bool) {
	if o == nil || IsNil(o.StorageControllers) {
		return nil, false
	}
	return o.StorageControllers, true
}

// HasStorageControllers returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasStorageControllers() bool {
	if o != nil && !IsNil(o.StorageControllers) {
		return true
	}

	return false
}

// SetStorageControllers gets a reference to the given []ServerStorageController and assigns it to the StorageControllers field.
func (o *ServerOSInstallationData) SetStorageControllers(v []ServerStorageController) {
	o.StorageControllers = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ServerOSInstallationData) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerOSInstallationData) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ServerOSInstallationData) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ServerOSInstallationData) SetTags(v []string) {
	o.Tags = v
}

func (o ServerOSInstallationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerOSInstallationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverId"] = o.ServerId
	if !IsNil(o.ServerTypeId) {
		toSerialize["serverTypeId"] = o.ServerTypeId
	}
	if !IsNil(o.ServerUUID) {
		toSerialize["serverUUID"] = o.ServerUUID
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.ManagementAddress) {
		toSerialize["managementAddress"] = o.ManagementAddress
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	toSerialize["passwordEncrypted"] = o.PasswordEncrypted
	if !IsNil(o.DiskCount) {
		toSerialize["diskCount"] = o.DiskCount
	}
	if !IsNil(o.BmcMacAddress) {
		toSerialize["bmcMacAddress"] = o.BmcMacAddress
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.VendorSkuId) {
		toSerialize["vendorSkuId"] = o.VendorSkuId
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.RackName) {
		toSerialize["rackName"] = o.RackName
	}
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	if !IsNil(o.StorageControllers) {
		toSerialize["storageControllers"] = o.StorageControllers
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerOSInstallationData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverId",
		"passwordEncrypted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerOSInstallationData := _ServerOSInstallationData{}

	err = json.Unmarshal(data, &varServerOSInstallationData)

	if err != nil {
		return err
	}

	*o = ServerOSInstallationData(varServerOSInstallationData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "serverTypeId")
		delete(additionalProperties, "serverUUID")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "username")
		delete(additionalProperties, "passwordEncrypted")
		delete(additionalProperties, "diskCount")
		delete(additionalProperties, "bmcMacAddress")
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "vendorSkuId")
		delete(additionalProperties, "model")
		delete(additionalProperties, "rackName")
		delete(additionalProperties, "interfaces")
		delete(additionalProperties, "disks")
		delete(additionalProperties, "storageControllers")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerOSInstallationData struct {
	value *ServerOSInstallationData
	isSet bool
}

func (v NullableServerOSInstallationData) Get() *ServerOSInstallationData {
	return v.value
}

func (v *NullableServerOSInstallationData) Set(val *ServerOSInstallationData) {
	v.value = val
	v.isSet = true
}

func (v NullableServerOSInstallationData) IsSet() bool {
	return v.isSet
}

func (v *NullableServerOSInstallationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerOSInstallationData(val *ServerOSInstallationData) *NullableServerOSInstallationData {
	return &NullableServerOSInstallationData{value: val, isSet: true}
}

func (v NullableServerOSInstallationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerOSInstallationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


