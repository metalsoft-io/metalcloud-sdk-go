/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InstancesSetPowerState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstancesSetPowerState{}

// InstancesSetPowerState struct for InstancesSetPowerState
type InstancesSetPowerState struct {
	// The list of instances to set the power state.
	Instances []string `json:"instances"`
	// The power state to set.
	PowerCommand string `json:"powerCommand"`
	AdditionalProperties map[string]interface{}
}

type _InstancesSetPowerState InstancesSetPowerState

// NewInstancesSetPowerState instantiates a new InstancesSetPowerState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstancesSetPowerState(instances []string, powerCommand string) *InstancesSetPowerState {
	this := InstancesSetPowerState{}
	this.Instances = instances
	this.PowerCommand = powerCommand
	return &this
}

// NewInstancesSetPowerStateWithDefaults instantiates a new InstancesSetPowerState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstancesSetPowerStateWithDefaults() *InstancesSetPowerState {
	this := InstancesSetPowerState{}
	return &this
}

// GetInstances returns the Instances field value
func (o *InstancesSetPowerState) GetInstances() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *InstancesSetPowerState) GetInstancesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *InstancesSetPowerState) SetInstances(v []string) {
	o.Instances = v
}

// GetPowerCommand returns the PowerCommand field value
func (o *InstancesSetPowerState) GetPowerCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PowerCommand
}

// GetPowerCommandOk returns a tuple with the PowerCommand field value
// and a boolean to check if the value has been set.
func (o *InstancesSetPowerState) GetPowerCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PowerCommand, true
}

// SetPowerCommand sets field value
func (o *InstancesSetPowerState) SetPowerCommand(v string) {
	o.PowerCommand = v
}

func (o InstancesSetPowerState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstancesSetPowerState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instances"] = o.Instances
	toSerialize["powerCommand"] = o.PowerCommand

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstancesSetPowerState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instances",
		"powerCommand",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstancesSetPowerState := _InstancesSetPowerState{}

	err = json.Unmarshal(data, &varInstancesSetPowerState)

	if err != nil {
		return err
	}

	*o = InstancesSetPowerState(varInstancesSetPowerState)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instances")
		delete(additionalProperties, "powerCommand")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstancesSetPowerState struct {
	value *InstancesSetPowerState
	isSet bool
}

func (v NullableInstancesSetPowerState) Get() *InstancesSetPowerState {
	return v.value
}

func (v *NullableInstancesSetPowerState) Set(val *InstancesSetPowerState) {
	v.value = val
	v.isSet = true
}

func (v NullableInstancesSetPowerState) IsSet() bool {
	return v.isSet
}

func (v *NullableInstancesSetPowerState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstancesSetPowerState(val *InstancesSetPowerState) *NullableInstancesSetPowerState {
	return &NullableInstancesSetPowerState{value: val, isSet: true}
}

func (v NullableInstancesSetPowerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstancesSetPowerState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


