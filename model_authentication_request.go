/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthenticationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationRequest{}

// AuthenticationRequest struct for AuthenticationRequest
type AuthenticationRequest struct {
	// Type of the authentication request.
	Provider string `json:"provider"`
	Properties AuthenticationRequestProperties `json:"properties"`
	AdditionalProperties map[string]interface{}
}

type _AuthenticationRequest AuthenticationRequest

// NewAuthenticationRequest instantiates a new AuthenticationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationRequest(provider string, properties AuthenticationRequestProperties) *AuthenticationRequest {
	this := AuthenticationRequest{}
	this.Provider = provider
	this.Properties = properties
	return &this
}

// NewAuthenticationRequestWithDefaults instantiates a new AuthenticationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationRequestWithDefaults() *AuthenticationRequest {
	this := AuthenticationRequest{}
	var provider string = "mysql"
	this.Provider = provider
	return &this
}

// GetProvider returns the Provider field value
func (o *AuthenticationRequest) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *AuthenticationRequest) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *AuthenticationRequest) SetProvider(v string) {
	o.Provider = v
}

// GetProperties returns the Properties field value
func (o *AuthenticationRequest) GetProperties() AuthenticationRequestProperties {
	if o == nil {
		var ret AuthenticationRequestProperties
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *AuthenticationRequest) GetPropertiesOk() (*AuthenticationRequestProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *AuthenticationRequest) SetProperties(v AuthenticationRequestProperties) {
	o.Properties = v
}

func (o AuthenticationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider"] = o.Provider
	toSerialize["properties"] = o.Properties

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthenticationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthenticationRequest := _AuthenticationRequest{}

	err = json.Unmarshal(data, &varAuthenticationRequest)

	if err != nil {
		return err
	}

	*o = AuthenticationRequest(varAuthenticationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "provider")
		delete(additionalProperties, "properties")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthenticationRequest struct {
	value *AuthenticationRequest
	isSet bool
}

func (v NullableAuthenticationRequest) Get() *AuthenticationRequest {
	return v.value
}

func (v *NullableAuthenticationRequest) Set(val *AuthenticationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationRequest(val *AuthenticationRequest) *NullableAuthenticationRequest {
	return &NullableAuthenticationRequest{value: val, isSet: true}
}

func (v NullableAuthenticationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


