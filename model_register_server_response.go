/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the RegisterServerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterServerResponse{}

// RegisterServerResponse struct for RegisterServerResponse
type RegisterServerResponse struct {
	// The id of the server.
	ServerId float32 `json:"serverId"`
	// Revision number
	Revision float32 `json:"revision"`
	// The UUID of the server.
	ServerUUID *string `json:"serverUUID,omitempty"`
	// The Serial Number of the server.
	SerialNumber *string `json:"serialNumber,omitempty"`
	JobInfo *JobInfo `json:"jobInfo,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RegisterServerResponse RegisterServerResponse

// NewRegisterServerResponse instantiates a new RegisterServerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterServerResponse(serverId float32, revision float32) *RegisterServerResponse {
	this := RegisterServerResponse{}
	this.ServerId = serverId
	this.Revision = revision
	return &this
}

// NewRegisterServerResponseWithDefaults instantiates a new RegisterServerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterServerResponseWithDefaults() *RegisterServerResponse {
	this := RegisterServerResponse{}
	return &this
}

// GetServerId returns the ServerId field value
func (o *RegisterServerResponse) GetServerId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value
// and a boolean to check if the value has been set.
func (o *RegisterServerResponse) GetServerIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerId, true
}

// SetServerId sets field value
func (o *RegisterServerResponse) SetServerId(v float32) {
	o.ServerId = v
}

// GetRevision returns the Revision field value
func (o *RegisterServerResponse) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *RegisterServerResponse) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *RegisterServerResponse) SetRevision(v float32) {
	o.Revision = v
}

// GetServerUUID returns the ServerUUID field value if set, zero value otherwise.
func (o *RegisterServerResponse) GetServerUUID() string {
	if o == nil || IsNil(o.ServerUUID) {
		var ret string
		return ret
	}
	return *o.ServerUUID
}

// GetServerUUIDOk returns a tuple with the ServerUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterServerResponse) GetServerUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.ServerUUID) {
		return nil, false
	}
	return o.ServerUUID, true
}

// HasServerUUID returns a boolean if a field has been set.
func (o *RegisterServerResponse) HasServerUUID() bool {
	if o != nil && !IsNil(o.ServerUUID) {
		return true
	}

	return false
}

// SetServerUUID gets a reference to the given string and assigns it to the ServerUUID field.
func (o *RegisterServerResponse) SetServerUUID(v string) {
	o.ServerUUID = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *RegisterServerResponse) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterServerResponse) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *RegisterServerResponse) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *RegisterServerResponse) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetJobInfo returns the JobInfo field value if set, zero value otherwise.
func (o *RegisterServerResponse) GetJobInfo() JobInfo {
	if o == nil || IsNil(o.JobInfo) {
		var ret JobInfo
		return ret
	}
	return *o.JobInfo
}

// GetJobInfoOk returns a tuple with the JobInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterServerResponse) GetJobInfoOk() (*JobInfo, bool) {
	if o == nil || IsNil(o.JobInfo) {
		return nil, false
	}
	return o.JobInfo, true
}

// HasJobInfo returns a boolean if a field has been set.
func (o *RegisterServerResponse) HasJobInfo() bool {
	if o != nil && !IsNil(o.JobInfo) {
		return true
	}

	return false
}

// SetJobInfo gets a reference to the given JobInfo and assigns it to the JobInfo field.
func (o *RegisterServerResponse) SetJobInfo(v JobInfo) {
	o.JobInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RegisterServerResponse) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterServerResponse) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RegisterServerResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *RegisterServerResponse) SetLinks(v []Link) {
	o.Links = v
}

func (o RegisterServerResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterServerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverId"] = o.ServerId
	toSerialize["revision"] = o.Revision
	if !IsNil(o.ServerUUID) {
		toSerialize["serverUUID"] = o.ServerUUID
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.JobInfo) {
		toSerialize["jobInfo"] = o.JobInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RegisterServerResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverId",
		"revision",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterServerResponse := _RegisterServerResponse{}

	err = json.Unmarshal(data, &varRegisterServerResponse)

	if err != nil {
		return err
	}

	*o = RegisterServerResponse(varRegisterServerResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "serverUUID")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "jobInfo")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRegisterServerResponse struct {
	value *RegisterServerResponse
	isSet bool
}

func (v NullableRegisterServerResponse) Get() *RegisterServerResponse {
	return v.value
}

func (v *NullableRegisterServerResponse) Set(val *RegisterServerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterServerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterServerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterServerResponse(val *RegisterServerResponse) *NullableRegisterServerResponse {
	return &NullableRegisterServerResponse{value: val, isSet: true}
}

func (v NullableRegisterServerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterServerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


