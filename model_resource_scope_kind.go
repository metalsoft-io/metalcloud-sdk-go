/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ResourceScopeKind the model 'ResourceScopeKind'
type ResourceScopeKind string

// List of ResourceScopeKind
const (
	RESOURCESCOPEKIND_GLOBAL ResourceScopeKind = "global"
	RESOURCESCOPEKIND_SITE_GROUP ResourceScopeKind = "site_group"
	RESOURCESCOPEKIND_SITE ResourceScopeKind = "site"
	RESOURCESCOPEKIND_FABRIC_GROUP ResourceScopeKind = "fabric_group"
	RESOURCESCOPEKIND_FABRIC ResourceScopeKind = "fabric"
	RESOURCESCOPEKIND_RACK ResourceScopeKind = "rack"
	RESOURCESCOPEKIND_DEVICE_GROUP ResourceScopeKind = "device_group"
	RESOURCESCOPEKIND_NETWORK_DEVICE ResourceScopeKind = "network_device"
)

// All allowed values of ResourceScopeKind enum
var AllowedResourceScopeKindEnumValues = []ResourceScopeKind{
	"global",
	"site_group",
	"site",
	"fabric_group",
	"fabric",
	"rack",
	"device_group",
	"network_device",
}

func (v *ResourceScopeKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceScopeKind(value)
	for _, existing := range AllowedResourceScopeKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceScopeKind", value)
}

// NewResourceScopeKindFromValue returns a pointer to a valid ResourceScopeKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceScopeKindFromValue(v string) (*ResourceScopeKind, error) {
	ev := ResourceScopeKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceScopeKind: valid values are %v", v, AllowedResourceScopeKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceScopeKind) IsValid() bool {
	for _, existing := range AllowedResourceScopeKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceScopeKind value
func (v ResourceScopeKind) Ptr() *ResourceScopeKind {
	return &v
}

type NullableResourceScopeKind struct {
	value *ResourceScopeKind
	isSet bool
}

func (v NullableResourceScopeKind) Get() *ResourceScopeKind {
	return v.value
}

func (v *NullableResourceScopeKind) Set(val *ResourceScopeKind) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceScopeKind) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceScopeKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceScopeKind(val *ResourceScopeKind) *NullableResourceScopeKind {
	return &NullableResourceScopeKind{value: val, isSet: true}
}

func (v NullableResourceScopeKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceScopeKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

