/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateNetworkDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkDevice{}

// UpdateNetworkDevice struct for UpdateNetworkDevice
type UpdateNetworkDevice struct {
	// Name of the datacenter
	DatacenterName *string `json:"datacenterName,omitempty"`
	// Identifier string
	IdentifierString *string `json:"identifierString,omitempty"`
	// Chassis rack ID
	ChassisRackId *float32 `json:"chassisRackId,omitempty"`
	// Chassis identifier
	ChassisIdentifier *string `json:"chassisIdentifier,omitempty"`
	// Provisioner type
	ProvisionerType *string `json:"provisionerType,omitempty"`
	// Driver
	Driver *string `json:"driver,omitempty"`
	// Position
	Position *string `json:"position,omitempty"`
	// TOR Linked ID
	TorLinkedId *float32 `json:"torLinkedId,omitempty"`
	// Is Gateway
	IsGateway *bool `json:"isGateway,omitempty"`
	// Is Syslog Enabled
	SyslogEnabled *bool `json:"syslogEnabled,omitempty"`
	// Is storage network device
	IsStorageSwitch *bool `json:"isStorageSwitch,omitempty"`
	// Is border device
	IsBorderDevice *bool `json:"isBorderDevice,omitempty"`
	// Primary WAN IPV4 Subnet Pool
	PrimaryWanIpv4SubnetPool *string `json:"primaryWanIpv4SubnetPool,omitempty"`
	// Primary WAN IPV4 Subnet Prefix Size
	PrimaryWanIpv4SubnetPrefixSize *float32 `json:"primaryWanIpv4SubnetPrefixSize,omitempty"`
	// Primary WAN IPV6 Subnet Pool
	PrimaryWanIpv6SubnetPool *string `json:"primaryWanIpv6SubnetPool,omitempty"`
	// Primary WAN IPV6 Subnet Prefix Size
	PrimaryWanIpv6SubnetPrefixSize *float32 `json:"primaryWanIpv6SubnetPrefixSize,omitempty"`
	// Primary SAN Subnet Pool
	PrimarySanSubnetPool *string `json:"primarySanSubnetPool,omitempty"`
	// Primary SAN Subnet Prefix Size
	PrimarySanSubnetPrefixSize *float32 `json:"primarySanSubnetPrefixSize,omitempty"`
	// Quarantine Subnet Start
	QuarantineSubnetStart *string `json:"quarantineSubnetStart,omitempty"`
	// Quarantine Subnet End
	QuarantineSubnetEnd *string `json:"quarantineSubnetEnd,omitempty"`
	// Quarantine Subnet Prefix Size
	QuarantineSubnetPrefixSize *float32 `json:"quarantineSubnetPrefixSize,omitempty"`
	// Quarantine Subnet Gateway
	QuarantineSubnetGateway *string `json:"quarantineSubnetGateway,omitempty"`
	// Quarantine VLAN
	QuarantineVlan *float32 `json:"quarantineVlan,omitempty"`
	// Management Protocol
	ManagementProtocol *string `json:"managementProtocol,omitempty"`
	// Management Address
	ManagementAddress *string `json:"managementAddress,omitempty"`
	// Management Port
	ManagementPort *float32 `json:"managementPort,omitempty"`
	// Management Username
	Username *string `json:"username,omitempty"`
	// Management Password
	ManagementPassword *string `json:"managementPassword,omitempty"`
	// Management Address Gateway
	ManagementAddressGateway *string `json:"managementAddressGateway,omitempty"`
	// Management Address Mask
	ManagementAddressMask *string `json:"managementAddressMask,omitempty"`
	// Management MAC Address
	ManagementMAC *string `json:"managementMAC,omitempty"`
	// Loopback Address
	LoopbackAddress *string `json:"loopbackAddress,omitempty"`
	// VTEP Address
	VtepAddress *string `json:"vtepAddress,omitempty"`
	// ASN
	Asn *float32 `json:"asn,omitempty"`
	// Network types allowed
	NetworkTypesAllowed []string `json:"networkTypesAllowed,omitempty"`
	// Description
	Description *string `json:"description,omitempty"`
	// Country
	Country *string `json:"country,omitempty"`
	// City
	City *string `json:"city,omitempty"`
	// Datacenter metadata
	DatacenterMeta *string `json:"datacenterMeta,omitempty"`
	// Datacenter room
	DatacenterRoom *string `json:"datacenterRoom,omitempty"`
	// Datacenter rack
	DatacenterRack *string `json:"datacenterRack,omitempty"`
	// Upper rack position
	RackPositionUpperUnit *float32 `json:"rackPositionUpperUnit,omitempty"`
	// Lower rack position
	RackPositionLowerUnit *float32 `json:"rackPositionLowerUnit,omitempty"`
	// Serial number
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Order index
	OrderIndex *float32 `json:"orderIndex,omitempty"`
	// Default MTU
	DefaultMtu *float32 `json:"defaultMtu,omitempty"`
	// Tags
	Tags []string `json:"tags,omitempty"`
	// Requires OS install
	RequiresOsInstall *bool `json:"requiresOsInstall,omitempty"`
	// Site Id
	SiteId *float32 `json:"siteId,omitempty"`
	// Primary WAN IPV6 Subnet Pool Id
	PrimaryWanIpv6SubnetPoolId *float32 `json:"primaryWanIpv6SubnetPoolId,omitempty"`
	// Overwrite With Hostname From Fetched Network Device
	OverwriteWithHostnameFromFetchedSwitch *bool `json:"overwriteWithHostnameFromFetchedSwitch,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateNetworkDevice UpdateNetworkDevice

// NewUpdateNetworkDevice instantiates a new UpdateNetworkDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkDevice() *UpdateNetworkDevice {
	this := UpdateNetworkDevice{}
	return &this
}

// NewUpdateNetworkDeviceWithDefaults instantiates a new UpdateNetworkDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkDeviceWithDefaults() *UpdateNetworkDevice {
	this := UpdateNetworkDevice{}
	return &this
}

// GetDatacenterName returns the DatacenterName field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetDatacenterName() string {
	if o == nil || IsNil(o.DatacenterName) {
		var ret string
		return ret
	}
	return *o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetDatacenterNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterName) {
		return nil, false
	}
	return o.DatacenterName, true
}

// HasDatacenterName returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasDatacenterName() bool {
	if o != nil && !IsNil(o.DatacenterName) {
		return true
	}

	return false
}

// SetDatacenterName gets a reference to the given string and assigns it to the DatacenterName field.
func (o *UpdateNetworkDevice) SetDatacenterName(v string) {
	o.DatacenterName = &v
}

// GetIdentifierString returns the IdentifierString field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetIdentifierString() string {
	if o == nil || IsNil(o.IdentifierString) {
		var ret string
		return ret
	}
	return *o.IdentifierString
}

// GetIdentifierStringOk returns a tuple with the IdentifierString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetIdentifierStringOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifierString) {
		return nil, false
	}
	return o.IdentifierString, true
}

// HasIdentifierString returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasIdentifierString() bool {
	if o != nil && !IsNil(o.IdentifierString) {
		return true
	}

	return false
}

// SetIdentifierString gets a reference to the given string and assigns it to the IdentifierString field.
func (o *UpdateNetworkDevice) SetIdentifierString(v string) {
	o.IdentifierString = &v
}

// GetChassisRackId returns the ChassisRackId field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetChassisRackId() float32 {
	if o == nil || IsNil(o.ChassisRackId) {
		var ret float32
		return ret
	}
	return *o.ChassisRackId
}

// GetChassisRackIdOk returns a tuple with the ChassisRackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetChassisRackIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ChassisRackId) {
		return nil, false
	}
	return o.ChassisRackId, true
}

// HasChassisRackId returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasChassisRackId() bool {
	if o != nil && !IsNil(o.ChassisRackId) {
		return true
	}

	return false
}

// SetChassisRackId gets a reference to the given float32 and assigns it to the ChassisRackId field.
func (o *UpdateNetworkDevice) SetChassisRackId(v float32) {
	o.ChassisRackId = &v
}

// GetChassisIdentifier returns the ChassisIdentifier field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetChassisIdentifier() string {
	if o == nil || IsNil(o.ChassisIdentifier) {
		var ret string
		return ret
	}
	return *o.ChassisIdentifier
}

// GetChassisIdentifierOk returns a tuple with the ChassisIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetChassisIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ChassisIdentifier) {
		return nil, false
	}
	return o.ChassisIdentifier, true
}

// HasChassisIdentifier returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasChassisIdentifier() bool {
	if o != nil && !IsNil(o.ChassisIdentifier) {
		return true
	}

	return false
}

// SetChassisIdentifier gets a reference to the given string and assigns it to the ChassisIdentifier field.
func (o *UpdateNetworkDevice) SetChassisIdentifier(v string) {
	o.ChassisIdentifier = &v
}

// GetProvisionerType returns the ProvisionerType field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetProvisionerType() string {
	if o == nil || IsNil(o.ProvisionerType) {
		var ret string
		return ret
	}
	return *o.ProvisionerType
}

// GetProvisionerTypeOk returns a tuple with the ProvisionerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetProvisionerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProvisionerType) {
		return nil, false
	}
	return o.ProvisionerType, true
}

// HasProvisionerType returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasProvisionerType() bool {
	if o != nil && !IsNil(o.ProvisionerType) {
		return true
	}

	return false
}

// SetProvisionerType gets a reference to the given string and assigns it to the ProvisionerType field.
func (o *UpdateNetworkDevice) SetProvisionerType(v string) {
	o.ProvisionerType = &v
}

// GetDriver returns the Driver field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetDriver() string {
	if o == nil || IsNil(o.Driver) {
		var ret string
		return ret
	}
	return *o.Driver
}

// GetDriverOk returns a tuple with the Driver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetDriverOk() (*string, bool) {
	if o == nil || IsNil(o.Driver) {
		return nil, false
	}
	return o.Driver, true
}

// HasDriver returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasDriver() bool {
	if o != nil && !IsNil(o.Driver) {
		return true
	}

	return false
}

// SetDriver gets a reference to the given string and assigns it to the Driver field.
func (o *UpdateNetworkDevice) SetDriver(v string) {
	o.Driver = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetPosition() string {
	if o == nil || IsNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetPositionOk() (*string, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *UpdateNetworkDevice) SetPosition(v string) {
	o.Position = &v
}

// GetTorLinkedId returns the TorLinkedId field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetTorLinkedId() float32 {
	if o == nil || IsNil(o.TorLinkedId) {
		var ret float32
		return ret
	}
	return *o.TorLinkedId
}

// GetTorLinkedIdOk returns a tuple with the TorLinkedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetTorLinkedIdOk() (*float32, bool) {
	if o == nil || IsNil(o.TorLinkedId) {
		return nil, false
	}
	return o.TorLinkedId, true
}

// HasTorLinkedId returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasTorLinkedId() bool {
	if o != nil && !IsNil(o.TorLinkedId) {
		return true
	}

	return false
}

// SetTorLinkedId gets a reference to the given float32 and assigns it to the TorLinkedId field.
func (o *UpdateNetworkDevice) SetTorLinkedId(v float32) {
	o.TorLinkedId = &v
}

// GetIsGateway returns the IsGateway field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetIsGateway() bool {
	if o == nil || IsNil(o.IsGateway) {
		var ret bool
		return ret
	}
	return *o.IsGateway
}

// GetIsGatewayOk returns a tuple with the IsGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetIsGatewayOk() (*bool, bool) {
	if o == nil || IsNil(o.IsGateway) {
		return nil, false
	}
	return o.IsGateway, true
}

// HasIsGateway returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasIsGateway() bool {
	if o != nil && !IsNil(o.IsGateway) {
		return true
	}

	return false
}

// SetIsGateway gets a reference to the given bool and assigns it to the IsGateway field.
func (o *UpdateNetworkDevice) SetIsGateway(v bool) {
	o.IsGateway = &v
}

// GetSyslogEnabled returns the SyslogEnabled field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetSyslogEnabled() bool {
	if o == nil || IsNil(o.SyslogEnabled) {
		var ret bool
		return ret
	}
	return *o.SyslogEnabled
}

// GetSyslogEnabledOk returns a tuple with the SyslogEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetSyslogEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SyslogEnabled) {
		return nil, false
	}
	return o.SyslogEnabled, true
}

// HasSyslogEnabled returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasSyslogEnabled() bool {
	if o != nil && !IsNil(o.SyslogEnabled) {
		return true
	}

	return false
}

// SetSyslogEnabled gets a reference to the given bool and assigns it to the SyslogEnabled field.
func (o *UpdateNetworkDevice) SetSyslogEnabled(v bool) {
	o.SyslogEnabled = &v
}

// GetIsStorageSwitch returns the IsStorageSwitch field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetIsStorageSwitch() bool {
	if o == nil || IsNil(o.IsStorageSwitch) {
		var ret bool
		return ret
	}
	return *o.IsStorageSwitch
}

// GetIsStorageSwitchOk returns a tuple with the IsStorageSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetIsStorageSwitchOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStorageSwitch) {
		return nil, false
	}
	return o.IsStorageSwitch, true
}

// HasIsStorageSwitch returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasIsStorageSwitch() bool {
	if o != nil && !IsNil(o.IsStorageSwitch) {
		return true
	}

	return false
}

// SetIsStorageSwitch gets a reference to the given bool and assigns it to the IsStorageSwitch field.
func (o *UpdateNetworkDevice) SetIsStorageSwitch(v bool) {
	o.IsStorageSwitch = &v
}

// GetIsBorderDevice returns the IsBorderDevice field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetIsBorderDevice() bool {
	if o == nil || IsNil(o.IsBorderDevice) {
		var ret bool
		return ret
	}
	return *o.IsBorderDevice
}

// GetIsBorderDeviceOk returns a tuple with the IsBorderDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetIsBorderDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBorderDevice) {
		return nil, false
	}
	return o.IsBorderDevice, true
}

// HasIsBorderDevice returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasIsBorderDevice() bool {
	if o != nil && !IsNil(o.IsBorderDevice) {
		return true
	}

	return false
}

// SetIsBorderDevice gets a reference to the given bool and assigns it to the IsBorderDevice field.
func (o *UpdateNetworkDevice) SetIsBorderDevice(v bool) {
	o.IsBorderDevice = &v
}

// GetPrimaryWanIpv4SubnetPool returns the PrimaryWanIpv4SubnetPool field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv4SubnetPool() string {
	if o == nil || IsNil(o.PrimaryWanIpv4SubnetPool) {
		var ret string
		return ret
	}
	return *o.PrimaryWanIpv4SubnetPool
}

// GetPrimaryWanIpv4SubnetPoolOk returns a tuple with the PrimaryWanIpv4SubnetPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv4SubnetPoolOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryWanIpv4SubnetPool) {
		return nil, false
	}
	return o.PrimaryWanIpv4SubnetPool, true
}

// HasPrimaryWanIpv4SubnetPool returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasPrimaryWanIpv4SubnetPool() bool {
	if o != nil && !IsNil(o.PrimaryWanIpv4SubnetPool) {
		return true
	}

	return false
}

// SetPrimaryWanIpv4SubnetPool gets a reference to the given string and assigns it to the PrimaryWanIpv4SubnetPool field.
func (o *UpdateNetworkDevice) SetPrimaryWanIpv4SubnetPool(v string) {
	o.PrimaryWanIpv4SubnetPool = &v
}

// GetPrimaryWanIpv4SubnetPrefixSize returns the PrimaryWanIpv4SubnetPrefixSize field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv4SubnetPrefixSize() float32 {
	if o == nil || IsNil(o.PrimaryWanIpv4SubnetPrefixSize) {
		var ret float32
		return ret
	}
	return *o.PrimaryWanIpv4SubnetPrefixSize
}

// GetPrimaryWanIpv4SubnetPrefixSizeOk returns a tuple with the PrimaryWanIpv4SubnetPrefixSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv4SubnetPrefixSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.PrimaryWanIpv4SubnetPrefixSize) {
		return nil, false
	}
	return o.PrimaryWanIpv4SubnetPrefixSize, true
}

// HasPrimaryWanIpv4SubnetPrefixSize returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasPrimaryWanIpv4SubnetPrefixSize() bool {
	if o != nil && !IsNil(o.PrimaryWanIpv4SubnetPrefixSize) {
		return true
	}

	return false
}

// SetPrimaryWanIpv4SubnetPrefixSize gets a reference to the given float32 and assigns it to the PrimaryWanIpv4SubnetPrefixSize field.
func (o *UpdateNetworkDevice) SetPrimaryWanIpv4SubnetPrefixSize(v float32) {
	o.PrimaryWanIpv4SubnetPrefixSize = &v
}

// GetPrimaryWanIpv6SubnetPool returns the PrimaryWanIpv6SubnetPool field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv6SubnetPool() string {
	if o == nil || IsNil(o.PrimaryWanIpv6SubnetPool) {
		var ret string
		return ret
	}
	return *o.PrimaryWanIpv6SubnetPool
}

// GetPrimaryWanIpv6SubnetPoolOk returns a tuple with the PrimaryWanIpv6SubnetPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv6SubnetPoolOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryWanIpv6SubnetPool) {
		return nil, false
	}
	return o.PrimaryWanIpv6SubnetPool, true
}

// HasPrimaryWanIpv6SubnetPool returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasPrimaryWanIpv6SubnetPool() bool {
	if o != nil && !IsNil(o.PrimaryWanIpv6SubnetPool) {
		return true
	}

	return false
}

// SetPrimaryWanIpv6SubnetPool gets a reference to the given string and assigns it to the PrimaryWanIpv6SubnetPool field.
func (o *UpdateNetworkDevice) SetPrimaryWanIpv6SubnetPool(v string) {
	o.PrimaryWanIpv6SubnetPool = &v
}

// GetPrimaryWanIpv6SubnetPrefixSize returns the PrimaryWanIpv6SubnetPrefixSize field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv6SubnetPrefixSize() float32 {
	if o == nil || IsNil(o.PrimaryWanIpv6SubnetPrefixSize) {
		var ret float32
		return ret
	}
	return *o.PrimaryWanIpv6SubnetPrefixSize
}

// GetPrimaryWanIpv6SubnetPrefixSizeOk returns a tuple with the PrimaryWanIpv6SubnetPrefixSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv6SubnetPrefixSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.PrimaryWanIpv6SubnetPrefixSize) {
		return nil, false
	}
	return o.PrimaryWanIpv6SubnetPrefixSize, true
}

// HasPrimaryWanIpv6SubnetPrefixSize returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasPrimaryWanIpv6SubnetPrefixSize() bool {
	if o != nil && !IsNil(o.PrimaryWanIpv6SubnetPrefixSize) {
		return true
	}

	return false
}

// SetPrimaryWanIpv6SubnetPrefixSize gets a reference to the given float32 and assigns it to the PrimaryWanIpv6SubnetPrefixSize field.
func (o *UpdateNetworkDevice) SetPrimaryWanIpv6SubnetPrefixSize(v float32) {
	o.PrimaryWanIpv6SubnetPrefixSize = &v
}

// GetPrimarySanSubnetPool returns the PrimarySanSubnetPool field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetPrimarySanSubnetPool() string {
	if o == nil || IsNil(o.PrimarySanSubnetPool) {
		var ret string
		return ret
	}
	return *o.PrimarySanSubnetPool
}

// GetPrimarySanSubnetPoolOk returns a tuple with the PrimarySanSubnetPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetPrimarySanSubnetPoolOk() (*string, bool) {
	if o == nil || IsNil(o.PrimarySanSubnetPool) {
		return nil, false
	}
	return o.PrimarySanSubnetPool, true
}

// HasPrimarySanSubnetPool returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasPrimarySanSubnetPool() bool {
	if o != nil && !IsNil(o.PrimarySanSubnetPool) {
		return true
	}

	return false
}

// SetPrimarySanSubnetPool gets a reference to the given string and assigns it to the PrimarySanSubnetPool field.
func (o *UpdateNetworkDevice) SetPrimarySanSubnetPool(v string) {
	o.PrimarySanSubnetPool = &v
}

// GetPrimarySanSubnetPrefixSize returns the PrimarySanSubnetPrefixSize field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetPrimarySanSubnetPrefixSize() float32 {
	if o == nil || IsNil(o.PrimarySanSubnetPrefixSize) {
		var ret float32
		return ret
	}
	return *o.PrimarySanSubnetPrefixSize
}

// GetPrimarySanSubnetPrefixSizeOk returns a tuple with the PrimarySanSubnetPrefixSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetPrimarySanSubnetPrefixSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.PrimarySanSubnetPrefixSize) {
		return nil, false
	}
	return o.PrimarySanSubnetPrefixSize, true
}

// HasPrimarySanSubnetPrefixSize returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasPrimarySanSubnetPrefixSize() bool {
	if o != nil && !IsNil(o.PrimarySanSubnetPrefixSize) {
		return true
	}

	return false
}

// SetPrimarySanSubnetPrefixSize gets a reference to the given float32 and assigns it to the PrimarySanSubnetPrefixSize field.
func (o *UpdateNetworkDevice) SetPrimarySanSubnetPrefixSize(v float32) {
	o.PrimarySanSubnetPrefixSize = &v
}

// GetQuarantineSubnetStart returns the QuarantineSubnetStart field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetQuarantineSubnetStart() string {
	if o == nil || IsNil(o.QuarantineSubnetStart) {
		var ret string
		return ret
	}
	return *o.QuarantineSubnetStart
}

// GetQuarantineSubnetStartOk returns a tuple with the QuarantineSubnetStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetQuarantineSubnetStartOk() (*string, bool) {
	if o == nil || IsNil(o.QuarantineSubnetStart) {
		return nil, false
	}
	return o.QuarantineSubnetStart, true
}

// HasQuarantineSubnetStart returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasQuarantineSubnetStart() bool {
	if o != nil && !IsNil(o.QuarantineSubnetStart) {
		return true
	}

	return false
}

// SetQuarantineSubnetStart gets a reference to the given string and assigns it to the QuarantineSubnetStart field.
func (o *UpdateNetworkDevice) SetQuarantineSubnetStart(v string) {
	o.QuarantineSubnetStart = &v
}

// GetQuarantineSubnetEnd returns the QuarantineSubnetEnd field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetQuarantineSubnetEnd() string {
	if o == nil || IsNil(o.QuarantineSubnetEnd) {
		var ret string
		return ret
	}
	return *o.QuarantineSubnetEnd
}

// GetQuarantineSubnetEndOk returns a tuple with the QuarantineSubnetEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetQuarantineSubnetEndOk() (*string, bool) {
	if o == nil || IsNil(o.QuarantineSubnetEnd) {
		return nil, false
	}
	return o.QuarantineSubnetEnd, true
}

// HasQuarantineSubnetEnd returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasQuarantineSubnetEnd() bool {
	if o != nil && !IsNil(o.QuarantineSubnetEnd) {
		return true
	}

	return false
}

// SetQuarantineSubnetEnd gets a reference to the given string and assigns it to the QuarantineSubnetEnd field.
func (o *UpdateNetworkDevice) SetQuarantineSubnetEnd(v string) {
	o.QuarantineSubnetEnd = &v
}

// GetQuarantineSubnetPrefixSize returns the QuarantineSubnetPrefixSize field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetQuarantineSubnetPrefixSize() float32 {
	if o == nil || IsNil(o.QuarantineSubnetPrefixSize) {
		var ret float32
		return ret
	}
	return *o.QuarantineSubnetPrefixSize
}

// GetQuarantineSubnetPrefixSizeOk returns a tuple with the QuarantineSubnetPrefixSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetQuarantineSubnetPrefixSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.QuarantineSubnetPrefixSize) {
		return nil, false
	}
	return o.QuarantineSubnetPrefixSize, true
}

// HasQuarantineSubnetPrefixSize returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasQuarantineSubnetPrefixSize() bool {
	if o != nil && !IsNil(o.QuarantineSubnetPrefixSize) {
		return true
	}

	return false
}

// SetQuarantineSubnetPrefixSize gets a reference to the given float32 and assigns it to the QuarantineSubnetPrefixSize field.
func (o *UpdateNetworkDevice) SetQuarantineSubnetPrefixSize(v float32) {
	o.QuarantineSubnetPrefixSize = &v
}

// GetQuarantineSubnetGateway returns the QuarantineSubnetGateway field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetQuarantineSubnetGateway() string {
	if o == nil || IsNil(o.QuarantineSubnetGateway) {
		var ret string
		return ret
	}
	return *o.QuarantineSubnetGateway
}

// GetQuarantineSubnetGatewayOk returns a tuple with the QuarantineSubnetGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetQuarantineSubnetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.QuarantineSubnetGateway) {
		return nil, false
	}
	return o.QuarantineSubnetGateway, true
}

// HasQuarantineSubnetGateway returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasQuarantineSubnetGateway() bool {
	if o != nil && !IsNil(o.QuarantineSubnetGateway) {
		return true
	}

	return false
}

// SetQuarantineSubnetGateway gets a reference to the given string and assigns it to the QuarantineSubnetGateway field.
func (o *UpdateNetworkDevice) SetQuarantineSubnetGateway(v string) {
	o.QuarantineSubnetGateway = &v
}

// GetQuarantineVlan returns the QuarantineVlan field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetQuarantineVlan() float32 {
	if o == nil || IsNil(o.QuarantineVlan) {
		var ret float32
		return ret
	}
	return *o.QuarantineVlan
}

// GetQuarantineVlanOk returns a tuple with the QuarantineVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetQuarantineVlanOk() (*float32, bool) {
	if o == nil || IsNil(o.QuarantineVlan) {
		return nil, false
	}
	return o.QuarantineVlan, true
}

// HasQuarantineVlan returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasQuarantineVlan() bool {
	if o != nil && !IsNil(o.QuarantineVlan) {
		return true
	}

	return false
}

// SetQuarantineVlan gets a reference to the given float32 and assigns it to the QuarantineVlan field.
func (o *UpdateNetworkDevice) SetQuarantineVlan(v float32) {
	o.QuarantineVlan = &v
}

// GetManagementProtocol returns the ManagementProtocol field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetManagementProtocol() string {
	if o == nil || IsNil(o.ManagementProtocol) {
		var ret string
		return ret
	}
	return *o.ManagementProtocol
}

// GetManagementProtocolOk returns a tuple with the ManagementProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetManagementProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementProtocol) {
		return nil, false
	}
	return o.ManagementProtocol, true
}

// HasManagementProtocol returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasManagementProtocol() bool {
	if o != nil && !IsNil(o.ManagementProtocol) {
		return true
	}

	return false
}

// SetManagementProtocol gets a reference to the given string and assigns it to the ManagementProtocol field.
func (o *UpdateNetworkDevice) SetManagementProtocol(v string) {
	o.ManagementProtocol = &v
}

// GetManagementAddress returns the ManagementAddress field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetManagementAddress() string {
	if o == nil || IsNil(o.ManagementAddress) {
		var ret string
		return ret
	}
	return *o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetManagementAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddress) {
		return nil, false
	}
	return o.ManagementAddress, true
}

// HasManagementAddress returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasManagementAddress() bool {
	if o != nil && !IsNil(o.ManagementAddress) {
		return true
	}

	return false
}

// SetManagementAddress gets a reference to the given string and assigns it to the ManagementAddress field.
func (o *UpdateNetworkDevice) SetManagementAddress(v string) {
	o.ManagementAddress = &v
}

// GetManagementPort returns the ManagementPort field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetManagementPort() float32 {
	if o == nil || IsNil(o.ManagementPort) {
		var ret float32
		return ret
	}
	return *o.ManagementPort
}

// GetManagementPortOk returns a tuple with the ManagementPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetManagementPortOk() (*float32, bool) {
	if o == nil || IsNil(o.ManagementPort) {
		return nil, false
	}
	return o.ManagementPort, true
}

// HasManagementPort returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasManagementPort() bool {
	if o != nil && !IsNil(o.ManagementPort) {
		return true
	}

	return false
}

// SetManagementPort gets a reference to the given float32 and assigns it to the ManagementPort field.
func (o *UpdateNetworkDevice) SetManagementPort(v float32) {
	o.ManagementPort = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UpdateNetworkDevice) SetUsername(v string) {
	o.Username = &v
}

// GetManagementPassword returns the ManagementPassword field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetManagementPassword() string {
	if o == nil || IsNil(o.ManagementPassword) {
		var ret string
		return ret
	}
	return *o.ManagementPassword
}

// GetManagementPasswordOk returns a tuple with the ManagementPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetManagementPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementPassword) {
		return nil, false
	}
	return o.ManagementPassword, true
}

// HasManagementPassword returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasManagementPassword() bool {
	if o != nil && !IsNil(o.ManagementPassword) {
		return true
	}

	return false
}

// SetManagementPassword gets a reference to the given string and assigns it to the ManagementPassword field.
func (o *UpdateNetworkDevice) SetManagementPassword(v string) {
	o.ManagementPassword = &v
}

// GetManagementAddressGateway returns the ManagementAddressGateway field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetManagementAddressGateway() string {
	if o == nil || IsNil(o.ManagementAddressGateway) {
		var ret string
		return ret
	}
	return *o.ManagementAddressGateway
}

// GetManagementAddressGatewayOk returns a tuple with the ManagementAddressGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetManagementAddressGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddressGateway) {
		return nil, false
	}
	return o.ManagementAddressGateway, true
}

// HasManagementAddressGateway returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasManagementAddressGateway() bool {
	if o != nil && !IsNil(o.ManagementAddressGateway) {
		return true
	}

	return false
}

// SetManagementAddressGateway gets a reference to the given string and assigns it to the ManagementAddressGateway field.
func (o *UpdateNetworkDevice) SetManagementAddressGateway(v string) {
	o.ManagementAddressGateway = &v
}

// GetManagementAddressMask returns the ManagementAddressMask field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetManagementAddressMask() string {
	if o == nil || IsNil(o.ManagementAddressMask) {
		var ret string
		return ret
	}
	return *o.ManagementAddressMask
}

// GetManagementAddressMaskOk returns a tuple with the ManagementAddressMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetManagementAddressMaskOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddressMask) {
		return nil, false
	}
	return o.ManagementAddressMask, true
}

// HasManagementAddressMask returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasManagementAddressMask() bool {
	if o != nil && !IsNil(o.ManagementAddressMask) {
		return true
	}

	return false
}

// SetManagementAddressMask gets a reference to the given string and assigns it to the ManagementAddressMask field.
func (o *UpdateNetworkDevice) SetManagementAddressMask(v string) {
	o.ManagementAddressMask = &v
}

// GetManagementMAC returns the ManagementMAC field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetManagementMAC() string {
	if o == nil || IsNil(o.ManagementMAC) {
		var ret string
		return ret
	}
	return *o.ManagementMAC
}

// GetManagementMACOk returns a tuple with the ManagementMAC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetManagementMACOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementMAC) {
		return nil, false
	}
	return o.ManagementMAC, true
}

// HasManagementMAC returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasManagementMAC() bool {
	if o != nil && !IsNil(o.ManagementMAC) {
		return true
	}

	return false
}

// SetManagementMAC gets a reference to the given string and assigns it to the ManagementMAC field.
func (o *UpdateNetworkDevice) SetManagementMAC(v string) {
	o.ManagementMAC = &v
}

// GetLoopbackAddress returns the LoopbackAddress field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetLoopbackAddress() string {
	if o == nil || IsNil(o.LoopbackAddress) {
		var ret string
		return ret
	}
	return *o.LoopbackAddress
}

// GetLoopbackAddressOk returns a tuple with the LoopbackAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetLoopbackAddressOk() (*string, bool) {
	if o == nil || IsNil(o.LoopbackAddress) {
		return nil, false
	}
	return o.LoopbackAddress, true
}

// HasLoopbackAddress returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasLoopbackAddress() bool {
	if o != nil && !IsNil(o.LoopbackAddress) {
		return true
	}

	return false
}

// SetLoopbackAddress gets a reference to the given string and assigns it to the LoopbackAddress field.
func (o *UpdateNetworkDevice) SetLoopbackAddress(v string) {
	o.LoopbackAddress = &v
}

// GetVtepAddress returns the VtepAddress field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetVtepAddress() string {
	if o == nil || IsNil(o.VtepAddress) {
		var ret string
		return ret
	}
	return *o.VtepAddress
}

// GetVtepAddressOk returns a tuple with the VtepAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetVtepAddressOk() (*string, bool) {
	if o == nil || IsNil(o.VtepAddress) {
		return nil, false
	}
	return o.VtepAddress, true
}

// HasVtepAddress returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasVtepAddress() bool {
	if o != nil && !IsNil(o.VtepAddress) {
		return true
	}

	return false
}

// SetVtepAddress gets a reference to the given string and assigns it to the VtepAddress field.
func (o *UpdateNetworkDevice) SetVtepAddress(v string) {
	o.VtepAddress = &v
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetAsn() float32 {
	if o == nil || IsNil(o.Asn) {
		var ret float32
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetAsnOk() (*float32, bool) {
	if o == nil || IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasAsn() bool {
	if o != nil && !IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given float32 and assigns it to the Asn field.
func (o *UpdateNetworkDevice) SetAsn(v float32) {
	o.Asn = &v
}

// GetNetworkTypesAllowed returns the NetworkTypesAllowed field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetNetworkTypesAllowed() []string {
	if o == nil || IsNil(o.NetworkTypesAllowed) {
		var ret []string
		return ret
	}
	return o.NetworkTypesAllowed
}

// GetNetworkTypesAllowedOk returns a tuple with the NetworkTypesAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetNetworkTypesAllowedOk() ([]string, bool) {
	if o == nil || IsNil(o.NetworkTypesAllowed) {
		return nil, false
	}
	return o.NetworkTypesAllowed, true
}

// HasNetworkTypesAllowed returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasNetworkTypesAllowed() bool {
	if o != nil && !IsNil(o.NetworkTypesAllowed) {
		return true
	}

	return false
}

// SetNetworkTypesAllowed gets a reference to the given []string and assigns it to the NetworkTypesAllowed field.
func (o *UpdateNetworkDevice) SetNetworkTypesAllowed(v []string) {
	o.NetworkTypesAllowed = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateNetworkDevice) SetDescription(v string) {
	o.Description = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UpdateNetworkDevice) SetCountry(v string) {
	o.Country = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *UpdateNetworkDevice) SetCity(v string) {
	o.City = &v
}

// GetDatacenterMeta returns the DatacenterMeta field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetDatacenterMeta() string {
	if o == nil || IsNil(o.DatacenterMeta) {
		var ret string
		return ret
	}
	return *o.DatacenterMeta
}

// GetDatacenterMetaOk returns a tuple with the DatacenterMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetDatacenterMetaOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterMeta) {
		return nil, false
	}
	return o.DatacenterMeta, true
}

// HasDatacenterMeta returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasDatacenterMeta() bool {
	if o != nil && !IsNil(o.DatacenterMeta) {
		return true
	}

	return false
}

// SetDatacenterMeta gets a reference to the given string and assigns it to the DatacenterMeta field.
func (o *UpdateNetworkDevice) SetDatacenterMeta(v string) {
	o.DatacenterMeta = &v
}

// GetDatacenterRoom returns the DatacenterRoom field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetDatacenterRoom() string {
	if o == nil || IsNil(o.DatacenterRoom) {
		var ret string
		return ret
	}
	return *o.DatacenterRoom
}

// GetDatacenterRoomOk returns a tuple with the DatacenterRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetDatacenterRoomOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterRoom) {
		return nil, false
	}
	return o.DatacenterRoom, true
}

// HasDatacenterRoom returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasDatacenterRoom() bool {
	if o != nil && !IsNil(o.DatacenterRoom) {
		return true
	}

	return false
}

// SetDatacenterRoom gets a reference to the given string and assigns it to the DatacenterRoom field.
func (o *UpdateNetworkDevice) SetDatacenterRoom(v string) {
	o.DatacenterRoom = &v
}

// GetDatacenterRack returns the DatacenterRack field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetDatacenterRack() string {
	if o == nil || IsNil(o.DatacenterRack) {
		var ret string
		return ret
	}
	return *o.DatacenterRack
}

// GetDatacenterRackOk returns a tuple with the DatacenterRack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetDatacenterRackOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterRack) {
		return nil, false
	}
	return o.DatacenterRack, true
}

// HasDatacenterRack returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasDatacenterRack() bool {
	if o != nil && !IsNil(o.DatacenterRack) {
		return true
	}

	return false
}

// SetDatacenterRack gets a reference to the given string and assigns it to the DatacenterRack field.
func (o *UpdateNetworkDevice) SetDatacenterRack(v string) {
	o.DatacenterRack = &v
}

// GetRackPositionUpperUnit returns the RackPositionUpperUnit field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetRackPositionUpperUnit() float32 {
	if o == nil || IsNil(o.RackPositionUpperUnit) {
		var ret float32
		return ret
	}
	return *o.RackPositionUpperUnit
}

// GetRackPositionUpperUnitOk returns a tuple with the RackPositionUpperUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetRackPositionUpperUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.RackPositionUpperUnit) {
		return nil, false
	}
	return o.RackPositionUpperUnit, true
}

// HasRackPositionUpperUnit returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasRackPositionUpperUnit() bool {
	if o != nil && !IsNil(o.RackPositionUpperUnit) {
		return true
	}

	return false
}

// SetRackPositionUpperUnit gets a reference to the given float32 and assigns it to the RackPositionUpperUnit field.
func (o *UpdateNetworkDevice) SetRackPositionUpperUnit(v float32) {
	o.RackPositionUpperUnit = &v
}

// GetRackPositionLowerUnit returns the RackPositionLowerUnit field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetRackPositionLowerUnit() float32 {
	if o == nil || IsNil(o.RackPositionLowerUnit) {
		var ret float32
		return ret
	}
	return *o.RackPositionLowerUnit
}

// GetRackPositionLowerUnitOk returns a tuple with the RackPositionLowerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetRackPositionLowerUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.RackPositionLowerUnit) {
		return nil, false
	}
	return o.RackPositionLowerUnit, true
}

// HasRackPositionLowerUnit returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasRackPositionLowerUnit() bool {
	if o != nil && !IsNil(o.RackPositionLowerUnit) {
		return true
	}

	return false
}

// SetRackPositionLowerUnit gets a reference to the given float32 and assigns it to the RackPositionLowerUnit field.
func (o *UpdateNetworkDevice) SetRackPositionLowerUnit(v float32) {
	o.RackPositionLowerUnit = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *UpdateNetworkDevice) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetOrderIndex returns the OrderIndex field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetOrderIndex() float32 {
	if o == nil || IsNil(o.OrderIndex) {
		var ret float32
		return ret
	}
	return *o.OrderIndex
}

// GetOrderIndexOk returns a tuple with the OrderIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetOrderIndexOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderIndex) {
		return nil, false
	}
	return o.OrderIndex, true
}

// HasOrderIndex returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasOrderIndex() bool {
	if o != nil && !IsNil(o.OrderIndex) {
		return true
	}

	return false
}

// SetOrderIndex gets a reference to the given float32 and assigns it to the OrderIndex field.
func (o *UpdateNetworkDevice) SetOrderIndex(v float32) {
	o.OrderIndex = &v
}

// GetDefaultMtu returns the DefaultMtu field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetDefaultMtu() float32 {
	if o == nil || IsNil(o.DefaultMtu) {
		var ret float32
		return ret
	}
	return *o.DefaultMtu
}

// GetDefaultMtuOk returns a tuple with the DefaultMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetDefaultMtuOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultMtu) {
		return nil, false
	}
	return o.DefaultMtu, true
}

// HasDefaultMtu returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasDefaultMtu() bool {
	if o != nil && !IsNil(o.DefaultMtu) {
		return true
	}

	return false
}

// SetDefaultMtu gets a reference to the given float32 and assigns it to the DefaultMtu field.
func (o *UpdateNetworkDevice) SetDefaultMtu(v float32) {
	o.DefaultMtu = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateNetworkDevice) SetTags(v []string) {
	o.Tags = v
}

// GetRequiresOsInstall returns the RequiresOsInstall field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetRequiresOsInstall() bool {
	if o == nil || IsNil(o.RequiresOsInstall) {
		var ret bool
		return ret
	}
	return *o.RequiresOsInstall
}

// GetRequiresOsInstallOk returns a tuple with the RequiresOsInstall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetRequiresOsInstallOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresOsInstall) {
		return nil, false
	}
	return o.RequiresOsInstall, true
}

// HasRequiresOsInstall returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasRequiresOsInstall() bool {
	if o != nil && !IsNil(o.RequiresOsInstall) {
		return true
	}

	return false
}

// SetRequiresOsInstall gets a reference to the given bool and assigns it to the RequiresOsInstall field.
func (o *UpdateNetworkDevice) SetRequiresOsInstall(v bool) {
	o.RequiresOsInstall = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetSiteId() float32 {
	if o == nil || IsNil(o.SiteId) {
		var ret float32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetSiteIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given float32 and assigns it to the SiteId field.
func (o *UpdateNetworkDevice) SetSiteId(v float32) {
	o.SiteId = &v
}

// GetPrimaryWanIpv6SubnetPoolId returns the PrimaryWanIpv6SubnetPoolId field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv6SubnetPoolId() float32 {
	if o == nil || IsNil(o.PrimaryWanIpv6SubnetPoolId) {
		var ret float32
		return ret
	}
	return *o.PrimaryWanIpv6SubnetPoolId
}

// GetPrimaryWanIpv6SubnetPoolIdOk returns a tuple with the PrimaryWanIpv6SubnetPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetPrimaryWanIpv6SubnetPoolIdOk() (*float32, bool) {
	if o == nil || IsNil(o.PrimaryWanIpv6SubnetPoolId) {
		return nil, false
	}
	return o.PrimaryWanIpv6SubnetPoolId, true
}

// HasPrimaryWanIpv6SubnetPoolId returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasPrimaryWanIpv6SubnetPoolId() bool {
	if o != nil && !IsNil(o.PrimaryWanIpv6SubnetPoolId) {
		return true
	}

	return false
}

// SetPrimaryWanIpv6SubnetPoolId gets a reference to the given float32 and assigns it to the PrimaryWanIpv6SubnetPoolId field.
func (o *UpdateNetworkDevice) SetPrimaryWanIpv6SubnetPoolId(v float32) {
	o.PrimaryWanIpv6SubnetPoolId = &v
}

// GetOverwriteWithHostnameFromFetchedSwitch returns the OverwriteWithHostnameFromFetchedSwitch field value if set, zero value otherwise.
func (o *UpdateNetworkDevice) GetOverwriteWithHostnameFromFetchedSwitch() bool {
	if o == nil || IsNil(o.OverwriteWithHostnameFromFetchedSwitch) {
		var ret bool
		return ret
	}
	return *o.OverwriteWithHostnameFromFetchedSwitch
}

// GetOverwriteWithHostnameFromFetchedSwitchOk returns a tuple with the OverwriteWithHostnameFromFetchedSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDevice) GetOverwriteWithHostnameFromFetchedSwitchOk() (*bool, bool) {
	if o == nil || IsNil(o.OverwriteWithHostnameFromFetchedSwitch) {
		return nil, false
	}
	return o.OverwriteWithHostnameFromFetchedSwitch, true
}

// HasOverwriteWithHostnameFromFetchedSwitch returns a boolean if a field has been set.
func (o *UpdateNetworkDevice) HasOverwriteWithHostnameFromFetchedSwitch() bool {
	if o != nil && !IsNil(o.OverwriteWithHostnameFromFetchedSwitch) {
		return true
	}

	return false
}

// SetOverwriteWithHostnameFromFetchedSwitch gets a reference to the given bool and assigns it to the OverwriteWithHostnameFromFetchedSwitch field.
func (o *UpdateNetworkDevice) SetOverwriteWithHostnameFromFetchedSwitch(v bool) {
	o.OverwriteWithHostnameFromFetchedSwitch = &v
}

func (o UpdateNetworkDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatacenterName) {
		toSerialize["datacenterName"] = o.DatacenterName
	}
	if !IsNil(o.IdentifierString) {
		toSerialize["identifierString"] = o.IdentifierString
	}
	if !IsNil(o.ChassisRackId) {
		toSerialize["chassisRackId"] = o.ChassisRackId
	}
	if !IsNil(o.ChassisIdentifier) {
		toSerialize["chassisIdentifier"] = o.ChassisIdentifier
	}
	if !IsNil(o.ProvisionerType) {
		toSerialize["provisionerType"] = o.ProvisionerType
	}
	if !IsNil(o.Driver) {
		toSerialize["driver"] = o.Driver
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.TorLinkedId) {
		toSerialize["torLinkedId"] = o.TorLinkedId
	}
	if !IsNil(o.IsGateway) {
		toSerialize["isGateway"] = o.IsGateway
	}
	if !IsNil(o.SyslogEnabled) {
		toSerialize["syslogEnabled"] = o.SyslogEnabled
	}
	if !IsNil(o.IsStorageSwitch) {
		toSerialize["isStorageSwitch"] = o.IsStorageSwitch
	}
	if !IsNil(o.IsBorderDevice) {
		toSerialize["isBorderDevice"] = o.IsBorderDevice
	}
	if !IsNil(o.PrimaryWanIpv4SubnetPool) {
		toSerialize["primaryWanIpv4SubnetPool"] = o.PrimaryWanIpv4SubnetPool
	}
	if !IsNil(o.PrimaryWanIpv4SubnetPrefixSize) {
		toSerialize["primaryWanIpv4SubnetPrefixSize"] = o.PrimaryWanIpv4SubnetPrefixSize
	}
	if !IsNil(o.PrimaryWanIpv6SubnetPool) {
		toSerialize["primaryWanIpv6SubnetPool"] = o.PrimaryWanIpv6SubnetPool
	}
	if !IsNil(o.PrimaryWanIpv6SubnetPrefixSize) {
		toSerialize["primaryWanIpv6SubnetPrefixSize"] = o.PrimaryWanIpv6SubnetPrefixSize
	}
	if !IsNil(o.PrimarySanSubnetPool) {
		toSerialize["primarySanSubnetPool"] = o.PrimarySanSubnetPool
	}
	if !IsNil(o.PrimarySanSubnetPrefixSize) {
		toSerialize["primarySanSubnetPrefixSize"] = o.PrimarySanSubnetPrefixSize
	}
	if !IsNil(o.QuarantineSubnetStart) {
		toSerialize["quarantineSubnetStart"] = o.QuarantineSubnetStart
	}
	if !IsNil(o.QuarantineSubnetEnd) {
		toSerialize["quarantineSubnetEnd"] = o.QuarantineSubnetEnd
	}
	if !IsNil(o.QuarantineSubnetPrefixSize) {
		toSerialize["quarantineSubnetPrefixSize"] = o.QuarantineSubnetPrefixSize
	}
	if !IsNil(o.QuarantineSubnetGateway) {
		toSerialize["quarantineSubnetGateway"] = o.QuarantineSubnetGateway
	}
	if !IsNil(o.QuarantineVlan) {
		toSerialize["quarantineVlan"] = o.QuarantineVlan
	}
	if !IsNil(o.ManagementProtocol) {
		toSerialize["managementProtocol"] = o.ManagementProtocol
	}
	if !IsNil(o.ManagementAddress) {
		toSerialize["managementAddress"] = o.ManagementAddress
	}
	if !IsNil(o.ManagementPort) {
		toSerialize["managementPort"] = o.ManagementPort
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.ManagementPassword) {
		toSerialize["managementPassword"] = o.ManagementPassword
	}
	if !IsNil(o.ManagementAddressGateway) {
		toSerialize["managementAddressGateway"] = o.ManagementAddressGateway
	}
	if !IsNil(o.ManagementAddressMask) {
		toSerialize["managementAddressMask"] = o.ManagementAddressMask
	}
	if !IsNil(o.ManagementMAC) {
		toSerialize["managementMAC"] = o.ManagementMAC
	}
	if !IsNil(o.LoopbackAddress) {
		toSerialize["loopbackAddress"] = o.LoopbackAddress
	}
	if !IsNil(o.VtepAddress) {
		toSerialize["vtepAddress"] = o.VtepAddress
	}
	if !IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	if !IsNil(o.NetworkTypesAllowed) {
		toSerialize["networkTypesAllowed"] = o.NetworkTypesAllowed
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.DatacenterMeta) {
		toSerialize["datacenterMeta"] = o.DatacenterMeta
	}
	if !IsNil(o.DatacenterRoom) {
		toSerialize["datacenterRoom"] = o.DatacenterRoom
	}
	if !IsNil(o.DatacenterRack) {
		toSerialize["datacenterRack"] = o.DatacenterRack
	}
	if !IsNil(o.RackPositionUpperUnit) {
		toSerialize["rackPositionUpperUnit"] = o.RackPositionUpperUnit
	}
	if !IsNil(o.RackPositionLowerUnit) {
		toSerialize["rackPositionLowerUnit"] = o.RackPositionLowerUnit
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.OrderIndex) {
		toSerialize["orderIndex"] = o.OrderIndex
	}
	if !IsNil(o.DefaultMtu) {
		toSerialize["defaultMtu"] = o.DefaultMtu
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.RequiresOsInstall) {
		toSerialize["requiresOsInstall"] = o.RequiresOsInstall
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.PrimaryWanIpv6SubnetPoolId) {
		toSerialize["primaryWanIpv6SubnetPoolId"] = o.PrimaryWanIpv6SubnetPoolId
	}
	if !IsNil(o.OverwriteWithHostnameFromFetchedSwitch) {
		toSerialize["overwriteWithHostnameFromFetchedSwitch"] = o.OverwriteWithHostnameFromFetchedSwitch
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateNetworkDevice) UnmarshalJSON(data []byte) (err error) {
	varUpdateNetworkDevice := _UpdateNetworkDevice{}

	err = json.Unmarshal(data, &varUpdateNetworkDevice)

	if err != nil {
		return err
	}

	*o = UpdateNetworkDevice(varUpdateNetworkDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "datacenterName")
		delete(additionalProperties, "identifierString")
		delete(additionalProperties, "chassisRackId")
		delete(additionalProperties, "chassisIdentifier")
		delete(additionalProperties, "provisionerType")
		delete(additionalProperties, "driver")
		delete(additionalProperties, "position")
		delete(additionalProperties, "torLinkedId")
		delete(additionalProperties, "isGateway")
		delete(additionalProperties, "syslogEnabled")
		delete(additionalProperties, "isStorageSwitch")
		delete(additionalProperties, "isBorderDevice")
		delete(additionalProperties, "primaryWanIpv4SubnetPool")
		delete(additionalProperties, "primaryWanIpv4SubnetPrefixSize")
		delete(additionalProperties, "primaryWanIpv6SubnetPool")
		delete(additionalProperties, "primaryWanIpv6SubnetPrefixSize")
		delete(additionalProperties, "primarySanSubnetPool")
		delete(additionalProperties, "primarySanSubnetPrefixSize")
		delete(additionalProperties, "quarantineSubnetStart")
		delete(additionalProperties, "quarantineSubnetEnd")
		delete(additionalProperties, "quarantineSubnetPrefixSize")
		delete(additionalProperties, "quarantineSubnetGateway")
		delete(additionalProperties, "quarantineVlan")
		delete(additionalProperties, "managementProtocol")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "managementPort")
		delete(additionalProperties, "username")
		delete(additionalProperties, "managementPassword")
		delete(additionalProperties, "managementAddressGateway")
		delete(additionalProperties, "managementAddressMask")
		delete(additionalProperties, "managementMAC")
		delete(additionalProperties, "loopbackAddress")
		delete(additionalProperties, "vtepAddress")
		delete(additionalProperties, "asn")
		delete(additionalProperties, "networkTypesAllowed")
		delete(additionalProperties, "description")
		delete(additionalProperties, "country")
		delete(additionalProperties, "city")
		delete(additionalProperties, "datacenterMeta")
		delete(additionalProperties, "datacenterRoom")
		delete(additionalProperties, "datacenterRack")
		delete(additionalProperties, "rackPositionUpperUnit")
		delete(additionalProperties, "rackPositionLowerUnit")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "orderIndex")
		delete(additionalProperties, "defaultMtu")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "requiresOsInstall")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "primaryWanIpv6SubnetPoolId")
		delete(additionalProperties, "overwriteWithHostnameFromFetchedSwitch")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateNetworkDevice struct {
	value *UpdateNetworkDevice
	isSet bool
}

func (v NullableUpdateNetworkDevice) Get() *UpdateNetworkDevice {
	return v.value
}

func (v *NullableUpdateNetworkDevice) Set(val *UpdateNetworkDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkDevice(val *UpdateNetworkDevice) *NullableUpdateNetworkDevice {
	return &NullableUpdateNetworkDevice{value: val, isSet: true}
}

func (v NullableUpdateNetworkDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


