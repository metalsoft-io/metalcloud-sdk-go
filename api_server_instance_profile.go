/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ServerInstanceProfileAPIService ServerInstanceProfileAPI service
type ServerInstanceProfileAPIService service

type ServerInstanceProfileAPICreateServerInstanceProfileRequest struct {
	ctx context.Context
	ApiService *ServerInstanceProfileAPIService
	serverInstanceProfileCreate *ServerInstanceProfileCreate
}

// The Server Instance Profile to create
func (r ServerInstanceProfileAPICreateServerInstanceProfileRequest) ServerInstanceProfileCreate(serverInstanceProfileCreate ServerInstanceProfileCreate) ServerInstanceProfileAPICreateServerInstanceProfileRequest {
	r.serverInstanceProfileCreate = &serverInstanceProfileCreate
	return r
}

func (r ServerInstanceProfileAPICreateServerInstanceProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateServerInstanceProfileExecute(r)
}

/*
CreateServerInstanceProfile Create Server Instance Profile

Creates new Server Instance Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerInstanceProfileAPICreateServerInstanceProfileRequest
*/
func (a *ServerInstanceProfileAPIService) CreateServerInstanceProfile(ctx context.Context) ServerInstanceProfileAPICreateServerInstanceProfileRequest {
	return ServerInstanceProfileAPICreateServerInstanceProfileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ServerInstanceProfileAPIService) CreateServerInstanceProfileExecute(r ServerInstanceProfileAPICreateServerInstanceProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerInstanceProfileAPIService.CreateServerInstanceProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-instance-profiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serverInstanceProfileCreate == nil {
		return nil, reportError("serverInstanceProfileCreate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serverInstanceProfileCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ServerInstanceProfileAPIDeleteServerInstanceProfileRequest struct {
	ctx context.Context
	ApiService *ServerInstanceProfileAPIService
	serverInstanceProfileId int32
	ifMatch *string
}

// Entity tag
func (r ServerInstanceProfileAPIDeleteServerInstanceProfileRequest) IfMatch(ifMatch string) ServerInstanceProfileAPIDeleteServerInstanceProfileRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ServerInstanceProfileAPIDeleteServerInstanceProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServerInstanceProfileExecute(r)
}

/*
DeleteServerInstanceProfile Delete Server Instance Profile

Deletes the specified Server Instance Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverInstanceProfileId
 @return ServerInstanceProfileAPIDeleteServerInstanceProfileRequest
*/
func (a *ServerInstanceProfileAPIService) DeleteServerInstanceProfile(ctx context.Context, serverInstanceProfileId int32) ServerInstanceProfileAPIDeleteServerInstanceProfileRequest {
	return ServerInstanceProfileAPIDeleteServerInstanceProfileRequest{
		ApiService: a,
		ctx: ctx,
		serverInstanceProfileId: serverInstanceProfileId,
	}
}

// Execute executes the request
func (a *ServerInstanceProfileAPIService) DeleteServerInstanceProfileExecute(r ServerInstanceProfileAPIDeleteServerInstanceProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerInstanceProfileAPIService.DeleteServerInstanceProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-instance-profiles/{serverInstanceProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverInstanceProfileId"+"}", url.PathEscape(parameterValueToString(r.serverInstanceProfileId, "serverInstanceProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ServerInstanceProfileAPIGetServerInstanceProfileRequest struct {
	ctx context.Context
	ApiService *ServerInstanceProfileAPIService
	serverInstanceProfileId int32
}

func (r ServerInstanceProfileAPIGetServerInstanceProfileRequest) Execute() (*ServerInstanceProfile, *http.Response, error) {
	return r.ApiService.GetServerInstanceProfileExecute(r)
}

/*
GetServerInstanceProfile Get Server Instance Profile details

Returns details of the specified Server Instance Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverInstanceProfileId
 @return ServerInstanceProfileAPIGetServerInstanceProfileRequest
*/
func (a *ServerInstanceProfileAPIService) GetServerInstanceProfile(ctx context.Context, serverInstanceProfileId int32) ServerInstanceProfileAPIGetServerInstanceProfileRequest {
	return ServerInstanceProfileAPIGetServerInstanceProfileRequest{
		ApiService: a,
		ctx: ctx,
		serverInstanceProfileId: serverInstanceProfileId,
	}
}

// Execute executes the request
//  @return ServerInstanceProfile
func (a *ServerInstanceProfileAPIService) GetServerInstanceProfileExecute(r ServerInstanceProfileAPIGetServerInstanceProfileRequest) (*ServerInstanceProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerInstanceProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerInstanceProfileAPIService.GetServerInstanceProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-instance-profiles/{serverInstanceProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverInstanceProfileId"+"}", url.PathEscape(parameterValueToString(r.serverInstanceProfileId, "serverInstanceProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerInstanceProfileAPIGetServerInstanceProfilesRequest struct {
	ctx context.Context
	ApiService *ServerInstanceProfileAPIService
	page *float32
	limit *float32
	filterLabel *[]string
	filterOwnerId *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
	select_ *string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) Page(page float32) ServerInstanceProfileAPIGetServerInstanceProfilesRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) Limit(limit float32) ServerInstanceProfileAPIGetServerInstanceProfilesRequest {
	r.limit = &limit
	return r
}

// Filter by label query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.label&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.label&#x3D;$not:$like:John Doe&amp;filter.label&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) FilterLabel(filterLabel []string) ServerInstanceProfileAPIGetServerInstanceProfilesRequest {
	r.filterLabel = &filterLabel
	return r
}

// Filter by ownerId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.ownerId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.ownerId&#x3D;$not:$like:John Doe&amp;filter.ownerId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) FilterOwnerId(filterOwnerId []string) ServerInstanceProfileAPIGetServerInstanceProfilesRequest {
	r.filterOwnerId = &filterOwnerId
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; label:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;label&lt;/li&gt; &lt;li&gt;ownerId&lt;/li&gt;&lt;/ul&gt;       
func (r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) SortBy(sortBy []string) ServerInstanceProfileAPIGetServerInstanceProfilesRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) Search(search string) ServerInstanceProfileAPIGetServerInstanceProfilesRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; label,ownerId           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;label&lt;/li&gt; &lt;li&gt;ownerId&lt;/li&gt;&lt;/ul&gt;         
func (r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) SearchBy(searchBy []string) ServerInstanceProfileAPIGetServerInstanceProfilesRequest {
	r.searchBy = &searchBy
	return r
}

// List of fields to select.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; id,label,ownerId           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields returns. If you want to select only some fields, provide them in query param           &lt;/p&gt;       
func (r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) Select_(select_ string) ServerInstanceProfileAPIGetServerInstanceProfilesRequest {
	r.select_ = &select_
	return r
}

func (r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) Execute() (*ServerInstanceProfilePaginatedList, *http.Response, error) {
	return r.ApiService.GetServerInstanceProfilesExecute(r)
}

/*
GetServerInstanceProfiles List all Server Instance Profiles



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerInstanceProfileAPIGetServerInstanceProfilesRequest
*/
func (a *ServerInstanceProfileAPIService) GetServerInstanceProfiles(ctx context.Context) ServerInstanceProfileAPIGetServerInstanceProfilesRequest {
	return ServerInstanceProfileAPIGetServerInstanceProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerInstanceProfilePaginatedList
func (a *ServerInstanceProfileAPIService) GetServerInstanceProfilesExecute(r ServerInstanceProfileAPIGetServerInstanceProfilesRequest) (*ServerInstanceProfilePaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerInstanceProfilePaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerInstanceProfileAPIService.GetServerInstanceProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-instance-profiles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterLabel != nil {
		t := *r.filterLabel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", t, "form", "multi")
		}
	}
	if r.filterOwnerId != nil {
		t := *r.filterOwnerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.ownerId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.ownerId", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerInstanceProfileAPIUpdateServerInstanceProfileRequest struct {
	ctx context.Context
	ApiService *ServerInstanceProfileAPIService
	serverInstanceProfileId int32
	serverInstanceProfileUpdate *ServerInstanceProfileUpdate
	ifMatch *string
}

// The Server Instance Profile changes
func (r ServerInstanceProfileAPIUpdateServerInstanceProfileRequest) ServerInstanceProfileUpdate(serverInstanceProfileUpdate ServerInstanceProfileUpdate) ServerInstanceProfileAPIUpdateServerInstanceProfileRequest {
	r.serverInstanceProfileUpdate = &serverInstanceProfileUpdate
	return r
}

// Entity tag
func (r ServerInstanceProfileAPIUpdateServerInstanceProfileRequest) IfMatch(ifMatch string) ServerInstanceProfileAPIUpdateServerInstanceProfileRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ServerInstanceProfileAPIUpdateServerInstanceProfileRequest) Execute() (*ServerInstanceProfile, *http.Response, error) {
	return r.ApiService.UpdateServerInstanceProfileExecute(r)
}

/*
UpdateServerInstanceProfile Update Server Instance Profile

Returns details of the updated Server Instance Profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverInstanceProfileId
 @return ServerInstanceProfileAPIUpdateServerInstanceProfileRequest
*/
func (a *ServerInstanceProfileAPIService) UpdateServerInstanceProfile(ctx context.Context, serverInstanceProfileId int32) ServerInstanceProfileAPIUpdateServerInstanceProfileRequest {
	return ServerInstanceProfileAPIUpdateServerInstanceProfileRequest{
		ApiService: a,
		ctx: ctx,
		serverInstanceProfileId: serverInstanceProfileId,
	}
}

// Execute executes the request
//  @return ServerInstanceProfile
func (a *ServerInstanceProfileAPIService) UpdateServerInstanceProfileExecute(r ServerInstanceProfileAPIUpdateServerInstanceProfileRequest) (*ServerInstanceProfile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerInstanceProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerInstanceProfileAPIService.UpdateServerInstanceProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-instance-profiles/{serverInstanceProfileId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverInstanceProfileId"+"}", url.PathEscape(parameterValueToString(r.serverInstanceProfileId, "serverInstanceProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serverInstanceProfileUpdate == nil {
		return localVarReturnValue, nil, reportError("serverInstanceProfileUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "simple", "")
	}
	// body params
	localVarPostBody = r.serverInstanceProfileUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
