/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the InfrastructureConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureConfig{}

// InfrastructureConfig struct for InfrastructureConfig
type InfrastructureConfig struct {
	// Revision of the Infrastructure
	Revision *float32 `json:"revision,omitempty"`
	Label *string `json:"label,omitempty"`
	// Deploy type of the Infrastructure
	DeployType *string `json:"deployType,omitempty"`
	// Deploy status of the Infrastructure
	DeployStatus *string `json:"deployStatus,omitempty"`
	// An object having as key the server type id and as value an array of preferred server ids
	ServerTypeIdToPreferredServerIds map[string]interface{} `json:"serverTypeIdToPreferredServerIds,omitempty"`
	// Id of the deployment for the Infrastructure
	InfrastructureDeployId *float32 `json:"infrastructureDeployId,omitempty"`
	// DNS Subdomain Change ID
	DnsSubdomainChangeId *float32 `json:"dnsSubdomainChangeId,omitempty"`
	// Datacenter name where the Infrastructure is located.
	DatacenterName *string `json:"datacenterName,omitempty"`
	// The ID of the site where the Infrastructure is located.
	SiteId *float32 `json:"siteId,omitempty"`
	// Custom variables in JSON format.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// User ID of the owner of the Infrastructure.
	UserIdOwner *float32 `json:"userIdOwner,omitempty"`
	// Subdomain associated with the Infrastructure.
	Subdomain *string `json:"subdomain,omitempty"`
	// Number of active instances.
	InstancesCountActive *float32 `json:"instancesCountActive,omitempty"`
	// Number of active drives.
	DrivesCountActive *float32 `json:"drivesCountActive,omitempty"`
	// Number of active IPv4 subnets.
	Ipv4SubnetsCountActive *float32 `json:"ipv4SubnetsCountActive,omitempty"`
	// Number of active IPv6 subnets.
	Ipv6SubnetsCountActive *float32 `json:"ipv6SubnetsCountActive,omitempty"`
	// Number of unused IPv4 addresses.
	Ipv4UnusedIpAddresses *float32 `json:"ipv4UnusedIpAddresses,omitempty"`
	// Description of the infrastructure.
	Description *string `json:"description,omitempty"`
	// Settings in JSON format.
	Settings map[string]interface{} `json:"settings,omitempty"`
	// Whether the infrastructure API is private.
	IsApiPrivate *float32 `json:"isApiPrivate,omitempty"`
	// Experimental priority.
	ExperimentalPriority *string `json:"experimentalPriority,omitempty"`
	// Whether the infrastructure is a member of public designs.
	IsPublicDesignsMember *float32 `json:"isPublicDesignsMember,omitempty"`
	// Certificates in JSON format.
	CertificatesJson *string `json:"certificatesJson,omitempty"`
	// Deploy cookie jar JSON.
	DeployCookieJarJson map[string]interface{} `json:"deployCookieJarJson,omitempty"`
	// Last error of deferred deploy attempt.
	DeferredDeployAttemptLastErrorJson map[string]interface{} `json:"deferredDeployAttemptLastErrorJson,omitempty"`
	// Whether the infrastructure is automanaged.
	IsAutomanaged *float32 `json:"isAutomanaged,omitempty"`
	// Number of empty edits
	EmptyEdit *float32 `json:"emptyEdit,omitempty"`
	// Reserved LAN IP ranges in JSON format.
	ReservedLanIpRanges map[string]interface{} `json:"reservedLanIpRanges,omitempty"`
	// Subnet pool for LAN in JSON format.
	SubnetPoolLan map[string]interface{} `json:"subnetPoolLan,omitempty"`
	// Timestamp of the latest update for the Infrastructure.
	UpdatedTimestamp *string `json:"updatedTimestamp,omitempty"`
	// DNS Subdomain ID.
	DnsSubdomainId *float32 `json:"dnsSubdomainId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureConfig InfrastructureConfig

// NewInfrastructureConfig instantiates a new InfrastructureConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureConfig() *InfrastructureConfig {
	this := InfrastructureConfig{}
	var deployType string = "create"
	this.DeployType = &deployType
	var deployStatus string = "not_started"
	this.DeployStatus = &deployStatus
	return &this
}

// NewInfrastructureConfigWithDefaults instantiates a new InfrastructureConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureConfigWithDefaults() *InfrastructureConfig {
	this := InfrastructureConfig{}
	var deployType string = "create"
	this.DeployType = &deployType
	var deployStatus string = "not_started"
	this.DeployStatus = &deployStatus
	return &this
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetRevision() float32 {
	if o == nil || IsNil(o.Revision) {
		var ret float32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetRevisionOk() (*float32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given float32 and assigns it to the Revision field.
func (o *InfrastructureConfig) SetRevision(v float32) {
	o.Revision = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *InfrastructureConfig) SetLabel(v string) {
	o.Label = &v
}

// GetDeployType returns the DeployType field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetDeployType() string {
	if o == nil || IsNil(o.DeployType) {
		var ret string
		return ret
	}
	return *o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetDeployTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeployType) {
		return nil, false
	}
	return o.DeployType, true
}

// HasDeployType returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasDeployType() bool {
	if o != nil && !IsNil(o.DeployType) {
		return true
	}

	return false
}

// SetDeployType gets a reference to the given string and assigns it to the DeployType field.
func (o *InfrastructureConfig) SetDeployType(v string) {
	o.DeployType = &v
}

// GetDeployStatus returns the DeployStatus field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetDeployStatus() string {
	if o == nil || IsNil(o.DeployStatus) {
		var ret string
		return ret
	}
	return *o.DeployStatus
}

// GetDeployStatusOk returns a tuple with the DeployStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetDeployStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DeployStatus) {
		return nil, false
	}
	return o.DeployStatus, true
}

// HasDeployStatus returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasDeployStatus() bool {
	if o != nil && !IsNil(o.DeployStatus) {
		return true
	}

	return false
}

// SetDeployStatus gets a reference to the given string and assigns it to the DeployStatus field.
func (o *InfrastructureConfig) SetDeployStatus(v string) {
	o.DeployStatus = &v
}

// GetServerTypeIdToPreferredServerIds returns the ServerTypeIdToPreferredServerIds field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetServerTypeIdToPreferredServerIds() map[string]interface{} {
	if o == nil || IsNil(o.ServerTypeIdToPreferredServerIds) {
		var ret map[string]interface{}
		return ret
	}
	return o.ServerTypeIdToPreferredServerIds
}

// GetServerTypeIdToPreferredServerIdsOk returns a tuple with the ServerTypeIdToPreferredServerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetServerTypeIdToPreferredServerIdsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ServerTypeIdToPreferredServerIds) {
		return map[string]interface{}{}, false
	}
	return o.ServerTypeIdToPreferredServerIds, true
}

// HasServerTypeIdToPreferredServerIds returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasServerTypeIdToPreferredServerIds() bool {
	if o != nil && !IsNil(o.ServerTypeIdToPreferredServerIds) {
		return true
	}

	return false
}

// SetServerTypeIdToPreferredServerIds gets a reference to the given map[string]interface{} and assigns it to the ServerTypeIdToPreferredServerIds field.
func (o *InfrastructureConfig) SetServerTypeIdToPreferredServerIds(v map[string]interface{}) {
	o.ServerTypeIdToPreferredServerIds = v
}

// GetInfrastructureDeployId returns the InfrastructureDeployId field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetInfrastructureDeployId() float32 {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		var ret float32
		return ret
	}
	return *o.InfrastructureDeployId
}

// GetInfrastructureDeployIdOk returns a tuple with the InfrastructureDeployId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetInfrastructureDeployIdOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureDeployId) {
		return nil, false
	}
	return o.InfrastructureDeployId, true
}

// HasInfrastructureDeployId returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasInfrastructureDeployId() bool {
	if o != nil && !IsNil(o.InfrastructureDeployId) {
		return true
	}

	return false
}

// SetInfrastructureDeployId gets a reference to the given float32 and assigns it to the InfrastructureDeployId field.
func (o *InfrastructureConfig) SetInfrastructureDeployId(v float32) {
	o.InfrastructureDeployId = &v
}

// GetDnsSubdomainChangeId returns the DnsSubdomainChangeId field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetDnsSubdomainChangeId() float32 {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainChangeId
}

// GetDnsSubdomainChangeIdOk returns a tuple with the DnsSubdomainChangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetDnsSubdomainChangeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainChangeId) {
		return nil, false
	}
	return o.DnsSubdomainChangeId, true
}

// HasDnsSubdomainChangeId returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasDnsSubdomainChangeId() bool {
	if o != nil && !IsNil(o.DnsSubdomainChangeId) {
		return true
	}

	return false
}

// SetDnsSubdomainChangeId gets a reference to the given float32 and assigns it to the DnsSubdomainChangeId field.
func (o *InfrastructureConfig) SetDnsSubdomainChangeId(v float32) {
	o.DnsSubdomainChangeId = &v
}

// GetDatacenterName returns the DatacenterName field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetDatacenterName() string {
	if o == nil || IsNil(o.DatacenterName) {
		var ret string
		return ret
	}
	return *o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetDatacenterNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterName) {
		return nil, false
	}
	return o.DatacenterName, true
}

// HasDatacenterName returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasDatacenterName() bool {
	if o != nil && !IsNil(o.DatacenterName) {
		return true
	}

	return false
}

// SetDatacenterName gets a reference to the given string and assigns it to the DatacenterName field.
func (o *InfrastructureConfig) SetDatacenterName(v string) {
	o.DatacenterName = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetSiteId() float32 {
	if o == nil || IsNil(o.SiteId) {
		var ret float32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetSiteIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given float32 and assigns it to the SiteId field.
func (o *InfrastructureConfig) SetSiteId(v float32) {
	o.SiteId = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *InfrastructureConfig) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetUserIdOwner returns the UserIdOwner field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetUserIdOwner() float32 {
	if o == nil || IsNil(o.UserIdOwner) {
		var ret float32
		return ret
	}
	return *o.UserIdOwner
}

// GetUserIdOwnerOk returns a tuple with the UserIdOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetUserIdOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.UserIdOwner) {
		return nil, false
	}
	return o.UserIdOwner, true
}

// HasUserIdOwner returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasUserIdOwner() bool {
	if o != nil && !IsNil(o.UserIdOwner) {
		return true
	}

	return false
}

// SetUserIdOwner gets a reference to the given float32 and assigns it to the UserIdOwner field.
func (o *InfrastructureConfig) SetUserIdOwner(v float32) {
	o.UserIdOwner = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *InfrastructureConfig) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetInstancesCountActive returns the InstancesCountActive field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetInstancesCountActive() float32 {
	if o == nil || IsNil(o.InstancesCountActive) {
		var ret float32
		return ret
	}
	return *o.InstancesCountActive
}

// GetInstancesCountActiveOk returns a tuple with the InstancesCountActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetInstancesCountActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.InstancesCountActive) {
		return nil, false
	}
	return o.InstancesCountActive, true
}

// HasInstancesCountActive returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasInstancesCountActive() bool {
	if o != nil && !IsNil(o.InstancesCountActive) {
		return true
	}

	return false
}

// SetInstancesCountActive gets a reference to the given float32 and assigns it to the InstancesCountActive field.
func (o *InfrastructureConfig) SetInstancesCountActive(v float32) {
	o.InstancesCountActive = &v
}

// GetDrivesCountActive returns the DrivesCountActive field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetDrivesCountActive() float32 {
	if o == nil || IsNil(o.DrivesCountActive) {
		var ret float32
		return ret
	}
	return *o.DrivesCountActive
}

// GetDrivesCountActiveOk returns a tuple with the DrivesCountActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetDrivesCountActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.DrivesCountActive) {
		return nil, false
	}
	return o.DrivesCountActive, true
}

// HasDrivesCountActive returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasDrivesCountActive() bool {
	if o != nil && !IsNil(o.DrivesCountActive) {
		return true
	}

	return false
}

// SetDrivesCountActive gets a reference to the given float32 and assigns it to the DrivesCountActive field.
func (o *InfrastructureConfig) SetDrivesCountActive(v float32) {
	o.DrivesCountActive = &v
}

// GetIpv4SubnetsCountActive returns the Ipv4SubnetsCountActive field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetIpv4SubnetsCountActive() float32 {
	if o == nil || IsNil(o.Ipv4SubnetsCountActive) {
		var ret float32
		return ret
	}
	return *o.Ipv4SubnetsCountActive
}

// GetIpv4SubnetsCountActiveOk returns a tuple with the Ipv4SubnetsCountActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetIpv4SubnetsCountActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.Ipv4SubnetsCountActive) {
		return nil, false
	}
	return o.Ipv4SubnetsCountActive, true
}

// HasIpv4SubnetsCountActive returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasIpv4SubnetsCountActive() bool {
	if o != nil && !IsNil(o.Ipv4SubnetsCountActive) {
		return true
	}

	return false
}

// SetIpv4SubnetsCountActive gets a reference to the given float32 and assigns it to the Ipv4SubnetsCountActive field.
func (o *InfrastructureConfig) SetIpv4SubnetsCountActive(v float32) {
	o.Ipv4SubnetsCountActive = &v
}

// GetIpv6SubnetsCountActive returns the Ipv6SubnetsCountActive field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetIpv6SubnetsCountActive() float32 {
	if o == nil || IsNil(o.Ipv6SubnetsCountActive) {
		var ret float32
		return ret
	}
	return *o.Ipv6SubnetsCountActive
}

// GetIpv6SubnetsCountActiveOk returns a tuple with the Ipv6SubnetsCountActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetIpv6SubnetsCountActiveOk() (*float32, bool) {
	if o == nil || IsNil(o.Ipv6SubnetsCountActive) {
		return nil, false
	}
	return o.Ipv6SubnetsCountActive, true
}

// HasIpv6SubnetsCountActive returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasIpv6SubnetsCountActive() bool {
	if o != nil && !IsNil(o.Ipv6SubnetsCountActive) {
		return true
	}

	return false
}

// SetIpv6SubnetsCountActive gets a reference to the given float32 and assigns it to the Ipv6SubnetsCountActive field.
func (o *InfrastructureConfig) SetIpv6SubnetsCountActive(v float32) {
	o.Ipv6SubnetsCountActive = &v
}

// GetIpv4UnusedIpAddresses returns the Ipv4UnusedIpAddresses field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetIpv4UnusedIpAddresses() float32 {
	if o == nil || IsNil(o.Ipv4UnusedIpAddresses) {
		var ret float32
		return ret
	}
	return *o.Ipv4UnusedIpAddresses
}

// GetIpv4UnusedIpAddressesOk returns a tuple with the Ipv4UnusedIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetIpv4UnusedIpAddressesOk() (*float32, bool) {
	if o == nil || IsNil(o.Ipv4UnusedIpAddresses) {
		return nil, false
	}
	return o.Ipv4UnusedIpAddresses, true
}

// HasIpv4UnusedIpAddresses returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasIpv4UnusedIpAddresses() bool {
	if o != nil && !IsNil(o.Ipv4UnusedIpAddresses) {
		return true
	}

	return false
}

// SetIpv4UnusedIpAddresses gets a reference to the given float32 and assigns it to the Ipv4UnusedIpAddresses field.
func (o *InfrastructureConfig) SetIpv4UnusedIpAddresses(v float32) {
	o.Ipv4UnusedIpAddresses = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InfrastructureConfig) SetDescription(v string) {
	o.Description = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetSettings() map[string]interface{} {
	if o == nil || IsNil(o.Settings) {
		var ret map[string]interface{}
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Settings) {
		return map[string]interface{}{}, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given map[string]interface{} and assigns it to the Settings field.
func (o *InfrastructureConfig) SetSettings(v map[string]interface{}) {
	o.Settings = v
}

// GetIsApiPrivate returns the IsApiPrivate field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetIsApiPrivate() float32 {
	if o == nil || IsNil(o.IsApiPrivate) {
		var ret float32
		return ret
	}
	return *o.IsApiPrivate
}

// GetIsApiPrivateOk returns a tuple with the IsApiPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetIsApiPrivateOk() (*float32, bool) {
	if o == nil || IsNil(o.IsApiPrivate) {
		return nil, false
	}
	return o.IsApiPrivate, true
}

// HasIsApiPrivate returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasIsApiPrivate() bool {
	if o != nil && !IsNil(o.IsApiPrivate) {
		return true
	}

	return false
}

// SetIsApiPrivate gets a reference to the given float32 and assigns it to the IsApiPrivate field.
func (o *InfrastructureConfig) SetIsApiPrivate(v float32) {
	o.IsApiPrivate = &v
}

// GetExperimentalPriority returns the ExperimentalPriority field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetExperimentalPriority() string {
	if o == nil || IsNil(o.ExperimentalPriority) {
		var ret string
		return ret
	}
	return *o.ExperimentalPriority
}

// GetExperimentalPriorityOk returns a tuple with the ExperimentalPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetExperimentalPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.ExperimentalPriority) {
		return nil, false
	}
	return o.ExperimentalPriority, true
}

// HasExperimentalPriority returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasExperimentalPriority() bool {
	if o != nil && !IsNil(o.ExperimentalPriority) {
		return true
	}

	return false
}

// SetExperimentalPriority gets a reference to the given string and assigns it to the ExperimentalPriority field.
func (o *InfrastructureConfig) SetExperimentalPriority(v string) {
	o.ExperimentalPriority = &v
}

// GetIsPublicDesignsMember returns the IsPublicDesignsMember field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetIsPublicDesignsMember() float32 {
	if o == nil || IsNil(o.IsPublicDesignsMember) {
		var ret float32
		return ret
	}
	return *o.IsPublicDesignsMember
}

// GetIsPublicDesignsMemberOk returns a tuple with the IsPublicDesignsMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetIsPublicDesignsMemberOk() (*float32, bool) {
	if o == nil || IsNil(o.IsPublicDesignsMember) {
		return nil, false
	}
	return o.IsPublicDesignsMember, true
}

// HasIsPublicDesignsMember returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasIsPublicDesignsMember() bool {
	if o != nil && !IsNil(o.IsPublicDesignsMember) {
		return true
	}

	return false
}

// SetIsPublicDesignsMember gets a reference to the given float32 and assigns it to the IsPublicDesignsMember field.
func (o *InfrastructureConfig) SetIsPublicDesignsMember(v float32) {
	o.IsPublicDesignsMember = &v
}

// GetCertificatesJson returns the CertificatesJson field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetCertificatesJson() string {
	if o == nil || IsNil(o.CertificatesJson) {
		var ret string
		return ret
	}
	return *o.CertificatesJson
}

// GetCertificatesJsonOk returns a tuple with the CertificatesJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetCertificatesJsonOk() (*string, bool) {
	if o == nil || IsNil(o.CertificatesJson) {
		return nil, false
	}
	return o.CertificatesJson, true
}

// HasCertificatesJson returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasCertificatesJson() bool {
	if o != nil && !IsNil(o.CertificatesJson) {
		return true
	}

	return false
}

// SetCertificatesJson gets a reference to the given string and assigns it to the CertificatesJson field.
func (o *InfrastructureConfig) SetCertificatesJson(v string) {
	o.CertificatesJson = &v
}

// GetDeployCookieJarJson returns the DeployCookieJarJson field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetDeployCookieJarJson() map[string]interface{} {
	if o == nil || IsNil(o.DeployCookieJarJson) {
		var ret map[string]interface{}
		return ret
	}
	return o.DeployCookieJarJson
}

// GetDeployCookieJarJsonOk returns a tuple with the DeployCookieJarJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetDeployCookieJarJsonOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DeployCookieJarJson) {
		return map[string]interface{}{}, false
	}
	return o.DeployCookieJarJson, true
}

// HasDeployCookieJarJson returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasDeployCookieJarJson() bool {
	if o != nil && !IsNil(o.DeployCookieJarJson) {
		return true
	}

	return false
}

// SetDeployCookieJarJson gets a reference to the given map[string]interface{} and assigns it to the DeployCookieJarJson field.
func (o *InfrastructureConfig) SetDeployCookieJarJson(v map[string]interface{}) {
	o.DeployCookieJarJson = v
}

// GetDeferredDeployAttemptLastErrorJson returns the DeferredDeployAttemptLastErrorJson field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetDeferredDeployAttemptLastErrorJson() map[string]interface{} {
	if o == nil || IsNil(o.DeferredDeployAttemptLastErrorJson) {
		var ret map[string]interface{}
		return ret
	}
	return o.DeferredDeployAttemptLastErrorJson
}

// GetDeferredDeployAttemptLastErrorJsonOk returns a tuple with the DeferredDeployAttemptLastErrorJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetDeferredDeployAttemptLastErrorJsonOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DeferredDeployAttemptLastErrorJson) {
		return map[string]interface{}{}, false
	}
	return o.DeferredDeployAttemptLastErrorJson, true
}

// HasDeferredDeployAttemptLastErrorJson returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasDeferredDeployAttemptLastErrorJson() bool {
	if o != nil && !IsNil(o.DeferredDeployAttemptLastErrorJson) {
		return true
	}

	return false
}

// SetDeferredDeployAttemptLastErrorJson gets a reference to the given map[string]interface{} and assigns it to the DeferredDeployAttemptLastErrorJson field.
func (o *InfrastructureConfig) SetDeferredDeployAttemptLastErrorJson(v map[string]interface{}) {
	o.DeferredDeployAttemptLastErrorJson = v
}

// GetIsAutomanaged returns the IsAutomanaged field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetIsAutomanaged() float32 {
	if o == nil || IsNil(o.IsAutomanaged) {
		var ret float32
		return ret
	}
	return *o.IsAutomanaged
}

// GetIsAutomanagedOk returns a tuple with the IsAutomanaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetIsAutomanagedOk() (*float32, bool) {
	if o == nil || IsNil(o.IsAutomanaged) {
		return nil, false
	}
	return o.IsAutomanaged, true
}

// HasIsAutomanaged returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasIsAutomanaged() bool {
	if o != nil && !IsNil(o.IsAutomanaged) {
		return true
	}

	return false
}

// SetIsAutomanaged gets a reference to the given float32 and assigns it to the IsAutomanaged field.
func (o *InfrastructureConfig) SetIsAutomanaged(v float32) {
	o.IsAutomanaged = &v
}

// GetEmptyEdit returns the EmptyEdit field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetEmptyEdit() float32 {
	if o == nil || IsNil(o.EmptyEdit) {
		var ret float32
		return ret
	}
	return *o.EmptyEdit
}

// GetEmptyEditOk returns a tuple with the EmptyEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetEmptyEditOk() (*float32, bool) {
	if o == nil || IsNil(o.EmptyEdit) {
		return nil, false
	}
	return o.EmptyEdit, true
}

// HasEmptyEdit returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasEmptyEdit() bool {
	if o != nil && !IsNil(o.EmptyEdit) {
		return true
	}

	return false
}

// SetEmptyEdit gets a reference to the given float32 and assigns it to the EmptyEdit field.
func (o *InfrastructureConfig) SetEmptyEdit(v float32) {
	o.EmptyEdit = &v
}

// GetReservedLanIpRanges returns the ReservedLanIpRanges field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetReservedLanIpRanges() map[string]interface{} {
	if o == nil || IsNil(o.ReservedLanIpRanges) {
		var ret map[string]interface{}
		return ret
	}
	return o.ReservedLanIpRanges
}

// GetReservedLanIpRangesOk returns a tuple with the ReservedLanIpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetReservedLanIpRangesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ReservedLanIpRanges) {
		return map[string]interface{}{}, false
	}
	return o.ReservedLanIpRanges, true
}

// HasReservedLanIpRanges returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasReservedLanIpRanges() bool {
	if o != nil && !IsNil(o.ReservedLanIpRanges) {
		return true
	}

	return false
}

// SetReservedLanIpRanges gets a reference to the given map[string]interface{} and assigns it to the ReservedLanIpRanges field.
func (o *InfrastructureConfig) SetReservedLanIpRanges(v map[string]interface{}) {
	o.ReservedLanIpRanges = v
}

// GetSubnetPoolLan returns the SubnetPoolLan field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetSubnetPoolLan() map[string]interface{} {
	if o == nil || IsNil(o.SubnetPoolLan) {
		var ret map[string]interface{}
		return ret
	}
	return o.SubnetPoolLan
}

// GetSubnetPoolLanOk returns a tuple with the SubnetPoolLan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetSubnetPoolLanOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SubnetPoolLan) {
		return map[string]interface{}{}, false
	}
	return o.SubnetPoolLan, true
}

// HasSubnetPoolLan returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasSubnetPoolLan() bool {
	if o != nil && !IsNil(o.SubnetPoolLan) {
		return true
	}

	return false
}

// SetSubnetPoolLan gets a reference to the given map[string]interface{} and assigns it to the SubnetPoolLan field.
func (o *InfrastructureConfig) SetSubnetPoolLan(v map[string]interface{}) {
	o.SubnetPoolLan = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetUpdatedTimestamp() string {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret string
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given string and assigns it to the UpdatedTimestamp field.
func (o *InfrastructureConfig) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = &v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value if set, zero value otherwise.
func (o *InfrastructureConfig) GetDnsSubdomainId() float32 {
	if o == nil || IsNil(o.DnsSubdomainId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureConfig) GetDnsSubdomainIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainId) {
		return nil, false
	}
	return o.DnsSubdomainId, true
}

// HasDnsSubdomainId returns a boolean if a field has been set.
func (o *InfrastructureConfig) HasDnsSubdomainId() bool {
	if o != nil && !IsNil(o.DnsSubdomainId) {
		return true
	}

	return false
}

// SetDnsSubdomainId gets a reference to the given float32 and assigns it to the DnsSubdomainId field.
func (o *InfrastructureConfig) SetDnsSubdomainId(v float32) {
	o.DnsSubdomainId = &v
}

func (o InfrastructureConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.DeployType) {
		toSerialize["deployType"] = o.DeployType
	}
	if !IsNil(o.DeployStatus) {
		toSerialize["deployStatus"] = o.DeployStatus
	}
	if !IsNil(o.ServerTypeIdToPreferredServerIds) {
		toSerialize["serverTypeIdToPreferredServerIds"] = o.ServerTypeIdToPreferredServerIds
	}
	if !IsNil(o.InfrastructureDeployId) {
		toSerialize["infrastructureDeployId"] = o.InfrastructureDeployId
	}
	if !IsNil(o.DnsSubdomainChangeId) {
		toSerialize["dnsSubdomainChangeId"] = o.DnsSubdomainChangeId
	}
	if !IsNil(o.DatacenterName) {
		toSerialize["datacenterName"] = o.DatacenterName
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	if !IsNil(o.UserIdOwner) {
		toSerialize["userIdOwner"] = o.UserIdOwner
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.InstancesCountActive) {
		toSerialize["instancesCountActive"] = o.InstancesCountActive
	}
	if !IsNil(o.DrivesCountActive) {
		toSerialize["drivesCountActive"] = o.DrivesCountActive
	}
	if !IsNil(o.Ipv4SubnetsCountActive) {
		toSerialize["ipv4SubnetsCountActive"] = o.Ipv4SubnetsCountActive
	}
	if !IsNil(o.Ipv6SubnetsCountActive) {
		toSerialize["ipv6SubnetsCountActive"] = o.Ipv6SubnetsCountActive
	}
	if !IsNil(o.Ipv4UnusedIpAddresses) {
		toSerialize["ipv4UnusedIpAddresses"] = o.Ipv4UnusedIpAddresses
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.IsApiPrivate) {
		toSerialize["isApiPrivate"] = o.IsApiPrivate
	}
	if !IsNil(o.ExperimentalPriority) {
		toSerialize["experimentalPriority"] = o.ExperimentalPriority
	}
	if !IsNil(o.IsPublicDesignsMember) {
		toSerialize["isPublicDesignsMember"] = o.IsPublicDesignsMember
	}
	if !IsNil(o.CertificatesJson) {
		toSerialize["certificatesJson"] = o.CertificatesJson
	}
	if !IsNil(o.DeployCookieJarJson) {
		toSerialize["deployCookieJarJson"] = o.DeployCookieJarJson
	}
	if !IsNil(o.DeferredDeployAttemptLastErrorJson) {
		toSerialize["deferredDeployAttemptLastErrorJson"] = o.DeferredDeployAttemptLastErrorJson
	}
	if !IsNil(o.IsAutomanaged) {
		toSerialize["isAutomanaged"] = o.IsAutomanaged
	}
	if !IsNil(o.EmptyEdit) {
		toSerialize["emptyEdit"] = o.EmptyEdit
	}
	if !IsNil(o.ReservedLanIpRanges) {
		toSerialize["reservedLanIpRanges"] = o.ReservedLanIpRanges
	}
	if !IsNil(o.SubnetPoolLan) {
		toSerialize["subnetPoolLan"] = o.SubnetPoolLan
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.DnsSubdomainId) {
		toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureConfig) UnmarshalJSON(data []byte) (err error) {
	varInfrastructureConfig := _InfrastructureConfig{}

	err = json.Unmarshal(data, &varInfrastructureConfig)

	if err != nil {
		return err
	}

	*o = InfrastructureConfig(varInfrastructureConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "deployType")
		delete(additionalProperties, "deployStatus")
		delete(additionalProperties, "serverTypeIdToPreferredServerIds")
		delete(additionalProperties, "infrastructureDeployId")
		delete(additionalProperties, "dnsSubdomainChangeId")
		delete(additionalProperties, "datacenterName")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "userIdOwner")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "instancesCountActive")
		delete(additionalProperties, "drivesCountActive")
		delete(additionalProperties, "ipv4SubnetsCountActive")
		delete(additionalProperties, "ipv6SubnetsCountActive")
		delete(additionalProperties, "ipv4UnusedIpAddresses")
		delete(additionalProperties, "description")
		delete(additionalProperties, "settings")
		delete(additionalProperties, "isApiPrivate")
		delete(additionalProperties, "experimentalPriority")
		delete(additionalProperties, "isPublicDesignsMember")
		delete(additionalProperties, "certificatesJson")
		delete(additionalProperties, "deployCookieJarJson")
		delete(additionalProperties, "deferredDeployAttemptLastErrorJson")
		delete(additionalProperties, "isAutomanaged")
		delete(additionalProperties, "emptyEdit")
		delete(additionalProperties, "reservedLanIpRanges")
		delete(additionalProperties, "subnetPoolLan")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "dnsSubdomainId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureConfig struct {
	value *InfrastructureConfig
	isSet bool
}

func (v NullableInfrastructureConfig) Get() *InfrastructureConfig {
	return v.value
}

func (v *NullableInfrastructureConfig) Set(val *InfrastructureConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureConfig(val *InfrastructureConfig) *NullableInfrastructureConfig {
	return &NullableInfrastructureConfig{value: val, isSet: true}
}

func (v NullableInfrastructureConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


