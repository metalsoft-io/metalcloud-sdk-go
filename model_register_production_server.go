/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the RegisterProductionServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterProductionServer{}

// RegisterProductionServer struct for RegisterProductionServer
type RegisterProductionServer struct {
	// The site id where the server is located.
	SiteId float32 `json:"siteId"`
	// The UUID of the server.
	ServerUUID *string `json:"serverUUID,omitempty"`
	// The Serial Number of the server.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// The Management Address of the server.
	ManagementAddress *string `json:"managementAddress,omitempty"`
	// The username to use.
	Username *string `json:"username,omitempty"`
	// The MAC address of the server.
	BmcMacAddress *string `json:"bmcMacAddress,omitempty"`
	// The vendor of the server.
	Vendor *string `json:"vendor,omitempty"`
	// The model of the server.
	Model *string `json:"model,omitempty"`
	// The password to use.
	Password *string `json:"password,omitempty"`
	// The additional settings for the production server.
	Settings RegisterProductionServerSettings `json:"settings"`
	AdditionalProperties map[string]interface{}
}

type _RegisterProductionServer RegisterProductionServer

// NewRegisterProductionServer instantiates a new RegisterProductionServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterProductionServer(siteId float32, settings RegisterProductionServerSettings) *RegisterProductionServer {
	this := RegisterProductionServer{}
	this.SiteId = siteId
	this.Settings = settings
	return &this
}

// NewRegisterProductionServerWithDefaults instantiates a new RegisterProductionServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterProductionServerWithDefaults() *RegisterProductionServer {
	this := RegisterProductionServer{}
	return &this
}

// GetSiteId returns the SiteId field value
func (o *RegisterProductionServer) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *RegisterProductionServer) SetSiteId(v float32) {
	o.SiteId = v
}

// GetServerUUID returns the ServerUUID field value if set, zero value otherwise.
func (o *RegisterProductionServer) GetServerUUID() string {
	if o == nil || IsNil(o.ServerUUID) {
		var ret string
		return ret
	}
	return *o.ServerUUID
}

// GetServerUUIDOk returns a tuple with the ServerUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetServerUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.ServerUUID) {
		return nil, false
	}
	return o.ServerUUID, true
}

// HasServerUUID returns a boolean if a field has been set.
func (o *RegisterProductionServer) HasServerUUID() bool {
	if o != nil && !IsNil(o.ServerUUID) {
		return true
	}

	return false
}

// SetServerUUID gets a reference to the given string and assigns it to the ServerUUID field.
func (o *RegisterProductionServer) SetServerUUID(v string) {
	o.ServerUUID = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *RegisterProductionServer) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *RegisterProductionServer) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *RegisterProductionServer) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetManagementAddress returns the ManagementAddress field value if set, zero value otherwise.
func (o *RegisterProductionServer) GetManagementAddress() string {
	if o == nil || IsNil(o.ManagementAddress) {
		var ret string
		return ret
	}
	return *o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetManagementAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddress) {
		return nil, false
	}
	return o.ManagementAddress, true
}

// HasManagementAddress returns a boolean if a field has been set.
func (o *RegisterProductionServer) HasManagementAddress() bool {
	if o != nil && !IsNil(o.ManagementAddress) {
		return true
	}

	return false
}

// SetManagementAddress gets a reference to the given string and assigns it to the ManagementAddress field.
func (o *RegisterProductionServer) SetManagementAddress(v string) {
	o.ManagementAddress = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *RegisterProductionServer) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *RegisterProductionServer) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *RegisterProductionServer) SetUsername(v string) {
	o.Username = &v
}

// GetBmcMacAddress returns the BmcMacAddress field value if set, zero value otherwise.
func (o *RegisterProductionServer) GetBmcMacAddress() string {
	if o == nil || IsNil(o.BmcMacAddress) {
		var ret string
		return ret
	}
	return *o.BmcMacAddress
}

// GetBmcMacAddressOk returns a tuple with the BmcMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetBmcMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.BmcMacAddress) {
		return nil, false
	}
	return o.BmcMacAddress, true
}

// HasBmcMacAddress returns a boolean if a field has been set.
func (o *RegisterProductionServer) HasBmcMacAddress() bool {
	if o != nil && !IsNil(o.BmcMacAddress) {
		return true
	}

	return false
}

// SetBmcMacAddress gets a reference to the given string and assigns it to the BmcMacAddress field.
func (o *RegisterProductionServer) SetBmcMacAddress(v string) {
	o.BmcMacAddress = &v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *RegisterProductionServer) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *RegisterProductionServer) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *RegisterProductionServer) SetVendor(v string) {
	o.Vendor = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *RegisterProductionServer) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *RegisterProductionServer) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *RegisterProductionServer) SetModel(v string) {
	o.Model = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *RegisterProductionServer) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *RegisterProductionServer) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *RegisterProductionServer) SetPassword(v string) {
	o.Password = &v
}

// GetSettings returns the Settings field value
func (o *RegisterProductionServer) GetSettings() RegisterProductionServerSettings {
	if o == nil {
		var ret RegisterProductionServerSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *RegisterProductionServer) GetSettingsOk() (*RegisterProductionServerSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *RegisterProductionServer) SetSettings(v RegisterProductionServerSettings) {
	o.Settings = v
}

func (o RegisterProductionServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterProductionServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["siteId"] = o.SiteId
	if !IsNil(o.ServerUUID) {
		toSerialize["serverUUID"] = o.ServerUUID
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.ManagementAddress) {
		toSerialize["managementAddress"] = o.ManagementAddress
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.BmcMacAddress) {
		toSerialize["bmcMacAddress"] = o.BmcMacAddress
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	toSerialize["settings"] = o.Settings

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RegisterProductionServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"siteId",
		"settings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterProductionServer := _RegisterProductionServer{}

	err = json.Unmarshal(data, &varRegisterProductionServer)

	if err != nil {
		return err
	}

	*o = RegisterProductionServer(varRegisterProductionServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "serverUUID")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "username")
		delete(additionalProperties, "bmcMacAddress")
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "model")
		delete(additionalProperties, "password")
		delete(additionalProperties, "settings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRegisterProductionServer struct {
	value *RegisterProductionServer
	isSet bool
}

func (v NullableRegisterProductionServer) Get() *RegisterProductionServer {
	return v.value
}

func (v *NullableRegisterProductionServer) Set(val *RegisterProductionServer) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterProductionServer) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterProductionServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterProductionServer(val *RegisterProductionServer) *NullableRegisterProductionServer {
	return &NullableRegisterProductionServer{value: val, isSet: true}
}

func (v NullableRegisterProductionServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterProductionServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


