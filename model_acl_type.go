/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ACLType The type of the rule such as ipv4, ipv6, mac
type ACLType string

// List of ACLType
const (
	ACLTYPE_IPV4 ACLType = "ipv4"
	ACLTYPE_IPV6 ACLType = "ipv6"
	ACLTYPE_MAC ACLType = "mac"
)

// All allowed values of ACLType enum
var AllowedACLTypeEnumValues = []ACLType{
	"ipv4",
	"ipv6",
	"mac",
}

func (v *ACLType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ACLType(value)
	for _, existing := range AllowedACLTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ACLType", value)
}

// NewACLTypeFromValue returns a pointer to a valid ACLType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewACLTypeFromValue(v string) (*ACLType, error) {
	ev := ACLType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ACLType: valid values are %v", v, AllowedACLTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ACLType) IsValid() bool {
	for _, existing := range AllowedACLTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ACLType value
func (v ACLType) Ptr() *ACLType {
	return &v
}

type NullableACLType struct {
	value *ACLType
	isSet bool
}

func (v NullableACLType) Get() *ACLType {
	return v.value
}

func (v *NullableACLType) Set(val *ACLType) {
	v.value = val
	v.isSet = true
}

func (v NullableACLType) IsSet() bool {
	return v.isSet
}

func (v *NullableACLType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLType(val *ACLType) *NullableACLType {
	return &NullableACLType{value: val, isSet: true}
}

func (v NullableACLType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

