/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// CreateIpv6SubnetAllocationStrategy - struct for CreateIpv6SubnetAllocationStrategy
type CreateIpv6SubnetAllocationStrategy struct {
	CreateAutoIpv6SubnetAllocationStrategy *CreateAutoIpv6SubnetAllocationStrategy
	CreateManualIpv6SubnetAllocationStrategy *CreateManualIpv6SubnetAllocationStrategy
}

// CreateAutoIpv6SubnetAllocationStrategyAsCreateIpv6SubnetAllocationStrategy is a convenience function that returns CreateAutoIpv6SubnetAllocationStrategy wrapped in CreateIpv6SubnetAllocationStrategy
func CreateAutoIpv6SubnetAllocationStrategyAsCreateIpv6SubnetAllocationStrategy(v *CreateAutoIpv6SubnetAllocationStrategy) CreateIpv6SubnetAllocationStrategy {
	return CreateIpv6SubnetAllocationStrategy{
		CreateAutoIpv6SubnetAllocationStrategy: v,
	}
}

// CreateManualIpv6SubnetAllocationStrategyAsCreateIpv6SubnetAllocationStrategy is a convenience function that returns CreateManualIpv6SubnetAllocationStrategy wrapped in CreateIpv6SubnetAllocationStrategy
func CreateManualIpv6SubnetAllocationStrategyAsCreateIpv6SubnetAllocationStrategy(v *CreateManualIpv6SubnetAllocationStrategy) CreateIpv6SubnetAllocationStrategy {
	return CreateIpv6SubnetAllocationStrategy{
		CreateManualIpv6SubnetAllocationStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateIpv6SubnetAllocationStrategy) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'auto'
	if jsonDict["kind"] == "auto" {
		// try to unmarshal JSON data into CreateAutoIpv6SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoIpv6SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoIpv6SubnetAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoIpv6SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateIpv6SubnetAllocationStrategy as CreateAutoIpv6SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'manual'
	if jsonDict["kind"] == "manual" {
		// try to unmarshal JSON data into CreateManualIpv6SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualIpv6SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualIpv6SubnetAllocationStrategy, return on the first match
		} else {
			dst.CreateManualIpv6SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateIpv6SubnetAllocationStrategy as CreateManualIpv6SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateAutoIpv6SubnetAllocationStrategy'
	if jsonDict["kind"] == "CreateAutoIpv6SubnetAllocationStrategy" {
		// try to unmarshal JSON data into CreateAutoIpv6SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoIpv6SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoIpv6SubnetAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoIpv6SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateIpv6SubnetAllocationStrategy as CreateAutoIpv6SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateManualIpv6SubnetAllocationStrategy'
	if jsonDict["kind"] == "CreateManualIpv6SubnetAllocationStrategy" {
		// try to unmarshal JSON data into CreateManualIpv6SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualIpv6SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualIpv6SubnetAllocationStrategy, return on the first match
		} else {
			dst.CreateManualIpv6SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateIpv6SubnetAllocationStrategy as CreateManualIpv6SubnetAllocationStrategy: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateIpv6SubnetAllocationStrategy) MarshalJSON() ([]byte, error) {
	if src.CreateAutoIpv6SubnetAllocationStrategy != nil {
		return json.Marshal(&src.CreateAutoIpv6SubnetAllocationStrategy)
	}

	if src.CreateManualIpv6SubnetAllocationStrategy != nil {
		return json.Marshal(&src.CreateManualIpv6SubnetAllocationStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateIpv6SubnetAllocationStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateAutoIpv6SubnetAllocationStrategy != nil {
		return obj.CreateAutoIpv6SubnetAllocationStrategy
	}

	if obj.CreateManualIpv6SubnetAllocationStrategy != nil {
		return obj.CreateManualIpv6SubnetAllocationStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateIpv6SubnetAllocationStrategy) GetActualInstanceValue() (interface{}) {
	if obj.CreateAutoIpv6SubnetAllocationStrategy != nil {
		return *obj.CreateAutoIpv6SubnetAllocationStrategy
	}

	if obj.CreateManualIpv6SubnetAllocationStrategy != nil {
		return *obj.CreateManualIpv6SubnetAllocationStrategy
	}

	// all schemas are nil
	return nil
}

type NullableCreateIpv6SubnetAllocationStrategy struct {
	value *CreateIpv6SubnetAllocationStrategy
	isSet bool
}

func (v NullableCreateIpv6SubnetAllocationStrategy) Get() *CreateIpv6SubnetAllocationStrategy {
	return v.value
}

func (v *NullableCreateIpv6SubnetAllocationStrategy) Set(val *CreateIpv6SubnetAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIpv6SubnetAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIpv6SubnetAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIpv6SubnetAllocationStrategy(val *CreateIpv6SubnetAllocationStrategy) *NullableCreateIpv6SubnetAllocationStrategy {
	return &NullableCreateIpv6SubnetAllocationStrategy{value: val, isSet: true}
}

func (v NullableCreateIpv6SubnetAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIpv6SubnetAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


