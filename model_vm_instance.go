/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMInstance{}

// VMInstance struct for VMInstance
type VMInstance struct {
	// VM Instance ID
	Id float32 `json:"id"`
	// Id of the VM Instance Group.
	GroupId float32 `json:"groupId"`
	// Id of the Infrastructure.
	InfrastructureId float32 `json:"infrastructureId"`
	// Name of the VM Instance.
	Label string `json:"label"`
	// Id of the VM.
	VmId float32 `json:"vmId"`
	// Id of the VM Type.
	TypeId float32 `json:"typeId"`
	// Tags for the VM Instance.
	Tags []string `json:"tags,omitempty"`
	// Service status of the VM Instance.
	ServiceStatus string `json:"serviceStatus"`
	// Id of the VM Instance change object.
	ChangeId float32 `json:"changeId"`
	// Timestamp of the VM Instance creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Timestamp of the VM Instance last update.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// VM Instance change object.
	Operation map[string]interface{} `json:"operation"`
	// Custom variables for the VM Instance.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// Disk size in GB of the VM Instance.
	DiskSizeGB float32 `json:"diskSizeGB"`
	// Id of the template used by the VM Instance.
	TemplateIdOrigin *float32 `json:"templateIdOrigin,omitempty"`
	// Id of the VM Pool.
	VmPoolId *float32 `json:"vmPoolId,omitempty"`
	// Links to other resources
	Links map[string]interface{} `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _VMInstance VMInstance

// NewVMInstance instantiates a new VMInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMInstance(id float32, groupId float32, infrastructureId float32, label string, vmId float32, typeId float32, serviceStatus string, changeId float32, createdTimestamp string, updatedTimestamp string, operation map[string]interface{}, diskSizeGB float32, links map[string]interface{}) *VMInstance {
	this := VMInstance{}
	this.Id = id
	this.GroupId = groupId
	this.InfrastructureId = infrastructureId
	this.Label = label
	this.VmId = vmId
	this.TypeId = typeId
	this.ServiceStatus = serviceStatus
	this.ChangeId = changeId
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.Operation = operation
	this.DiskSizeGB = diskSizeGB
	this.Links = links
	return &this
}

// NewVMInstanceWithDefaults instantiates a new VMInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMInstanceWithDefaults() *VMInstance {
	this := VMInstance{}
	return &this
}

// GetId returns the Id field value
func (o *VMInstance) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VMInstance) SetId(v float32) {
	o.Id = v
}

// GetGroupId returns the GroupId field value
func (o *VMInstance) GetGroupId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetGroupIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *VMInstance) SetGroupId(v float32) {
	o.GroupId = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *VMInstance) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *VMInstance) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetLabel returns the Label field value
func (o *VMInstance) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *VMInstance) SetLabel(v string) {
	o.Label = v
}

// GetVmId returns the VmId field value
func (o *VMInstance) GetVmId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VmId
}

// GetVmIdOk returns a tuple with the VmId field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetVmIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmId, true
}

// SetVmId sets field value
func (o *VMInstance) SetVmId(v float32) {
	o.VmId = v
}

// GetTypeId returns the TypeId field value
func (o *VMInstance) GetTypeId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetTypeIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *VMInstance) SetTypeId(v float32) {
	o.TypeId = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VMInstance) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstance) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VMInstance) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VMInstance) SetTags(v []string) {
	o.Tags = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *VMInstance) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *VMInstance) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetChangeId returns the ChangeId field value
func (o *VMInstance) GetChangeId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ChangeId
}

// GetChangeIdOk returns a tuple with the ChangeId field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetChangeIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeId, true
}

// SetChangeId sets field value
func (o *VMInstance) SetChangeId(v float32) {
	o.ChangeId = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *VMInstance) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *VMInstance) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *VMInstance) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *VMInstance) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetOperation returns the Operation field value
func (o *VMInstance) GetOperation() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetOperationOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Operation, true
}

// SetOperation sets field value
func (o *VMInstance) SetOperation(v map[string]interface{}) {
	o.Operation = v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *VMInstance) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstance) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *VMInstance) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *VMInstance) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetDiskSizeGB returns the DiskSizeGB field value
func (o *VMInstance) GetDiskSizeGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DiskSizeGB
}

// GetDiskSizeGBOk returns a tuple with the DiskSizeGB field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetDiskSizeGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSizeGB, true
}

// SetDiskSizeGB sets field value
func (o *VMInstance) SetDiskSizeGB(v float32) {
	o.DiskSizeGB = v
}

// GetTemplateIdOrigin returns the TemplateIdOrigin field value if set, zero value otherwise.
func (o *VMInstance) GetTemplateIdOrigin() float32 {
	if o == nil || IsNil(o.TemplateIdOrigin) {
		var ret float32
		return ret
	}
	return *o.TemplateIdOrigin
}

// GetTemplateIdOriginOk returns a tuple with the TemplateIdOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstance) GetTemplateIdOriginOk() (*float32, bool) {
	if o == nil || IsNil(o.TemplateIdOrigin) {
		return nil, false
	}
	return o.TemplateIdOrigin, true
}

// HasTemplateIdOrigin returns a boolean if a field has been set.
func (o *VMInstance) HasTemplateIdOrigin() bool {
	if o != nil && !IsNil(o.TemplateIdOrigin) {
		return true
	}

	return false
}

// SetTemplateIdOrigin gets a reference to the given float32 and assigns it to the TemplateIdOrigin field.
func (o *VMInstance) SetTemplateIdOrigin(v float32) {
	o.TemplateIdOrigin = &v
}

// GetVmPoolId returns the VmPoolId field value if set, zero value otherwise.
func (o *VMInstance) GetVmPoolId() float32 {
	if o == nil || IsNil(o.VmPoolId) {
		var ret float32
		return ret
	}
	return *o.VmPoolId
}

// GetVmPoolIdOk returns a tuple with the VmPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstance) GetVmPoolIdOk() (*float32, bool) {
	if o == nil || IsNil(o.VmPoolId) {
		return nil, false
	}
	return o.VmPoolId, true
}

// HasVmPoolId returns a boolean if a field has been set.
func (o *VMInstance) HasVmPoolId() bool {
	if o != nil && !IsNil(o.VmPoolId) {
		return true
	}

	return false
}

// SetVmPoolId gets a reference to the given float32 and assigns it to the VmPoolId field.
func (o *VMInstance) SetVmPoolId(v float32) {
	o.VmPoolId = &v
}

// GetLinks returns the Links field value
func (o *VMInstance) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *VMInstance) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *VMInstance) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o VMInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["groupId"] = o.GroupId
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["label"] = o.Label
	toSerialize["vmId"] = o.VmId
	toSerialize["typeId"] = o.TypeId
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["serviceStatus"] = o.ServiceStatus
	toSerialize["changeId"] = o.ChangeId
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	toSerialize["operation"] = o.Operation
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	toSerialize["diskSizeGB"] = o.DiskSizeGB
	if !IsNil(o.TemplateIdOrigin) {
		toSerialize["templateIdOrigin"] = o.TemplateIdOrigin
	}
	if !IsNil(o.VmPoolId) {
		toSerialize["vmPoolId"] = o.VmPoolId
	}
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"groupId",
		"infrastructureId",
		"label",
		"vmId",
		"typeId",
		"serviceStatus",
		"changeId",
		"createdTimestamp",
		"updatedTimestamp",
		"operation",
		"diskSizeGB",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMInstance := _VMInstance{}

	err = json.Unmarshal(data, &varVMInstance)

	if err != nil {
		return err
	}

	*o = VMInstance(varVMInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "groupId")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "label")
		delete(additionalProperties, "vmId")
		delete(additionalProperties, "typeId")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "changeId")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "operation")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "diskSizeGB")
		delete(additionalProperties, "templateIdOrigin")
		delete(additionalProperties, "vmPoolId")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMInstance struct {
	value *VMInstance
	isSet bool
}

func (v NullableVMInstance) Get() *VMInstance {
	return v.value
}

func (v *NullableVMInstance) Set(val *VMInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableVMInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableVMInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMInstance(val *VMInstance) *NullableVMInstance {
	return &NullableVMInstance{value: val, isSet: true}
}

func (v NullableVMInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


