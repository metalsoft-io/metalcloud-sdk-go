/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateLogicalNetworkProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateLogicalNetworkProfile{}

// CreateLogicalNetworkProfile struct for CreateLogicalNetworkProfile
type CreateLogicalNetworkProfile struct {
	Label *string `json:"label,omitempty"`
	Name *string `json:"name,omitempty"`
	Annotations *map[string]string `json:"annotations,omitempty"`
	Kind LogicalNetworkKind `json:"kind"`
	FabricId int32 `json:"fabricId"`
	Vlan *CreateLogicalNetworkVlanProperties `json:"vlan,omitempty"`
	Vxlan *CreateLogicalNetworkVxlanProperties `json:"vxlan,omitempty"`
	Ipv4 *CreateLogicalNetworkIpv4Properties `json:"ipv4,omitempty"`
	Ipv6 *CreateLogicalNetworkIpv6Properties `json:"ipv6,omitempty"`
	RouteDomainId NullableInt32 `json:"routeDomainId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateLogicalNetworkProfile CreateLogicalNetworkProfile

// NewCreateLogicalNetworkProfile instantiates a new CreateLogicalNetworkProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLogicalNetworkProfile(kind LogicalNetworkKind, fabricId int32) *CreateLogicalNetworkProfile {
	this := CreateLogicalNetworkProfile{}
	this.Kind = kind
	this.FabricId = fabricId
	return &this
}

// NewCreateLogicalNetworkProfileWithDefaults instantiates a new CreateLogicalNetworkProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLogicalNetworkProfileWithDefaults() *CreateLogicalNetworkProfile {
	this := CreateLogicalNetworkProfile{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CreateLogicalNetworkProfile) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkProfile) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CreateLogicalNetworkProfile) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CreateLogicalNetworkProfile) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateLogicalNetworkProfile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkProfile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateLogicalNetworkProfile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateLogicalNetworkProfile) SetName(v string) {
	o.Name = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *CreateLogicalNetworkProfile) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkProfile) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *CreateLogicalNetworkProfile) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *CreateLogicalNetworkProfile) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetKind returns the Kind field value
func (o *CreateLogicalNetworkProfile) GetKind() LogicalNetworkKind {
	if o == nil {
		var ret LogicalNetworkKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkProfile) GetKindOk() (*LogicalNetworkKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CreateLogicalNetworkProfile) SetKind(v LogicalNetworkKind) {
	o.Kind = v
}

// GetFabricId returns the FabricId field value
func (o *CreateLogicalNetworkProfile) GetFabricId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FabricId
}

// GetFabricIdOk returns a tuple with the FabricId field value
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkProfile) GetFabricIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FabricId, true
}

// SetFabricId sets field value
func (o *CreateLogicalNetworkProfile) SetFabricId(v int32) {
	o.FabricId = v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *CreateLogicalNetworkProfile) GetVlan() CreateLogicalNetworkVlanProperties {
	if o == nil || IsNil(o.Vlan) {
		var ret CreateLogicalNetworkVlanProperties
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkProfile) GetVlanOk() (*CreateLogicalNetworkVlanProperties, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *CreateLogicalNetworkProfile) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given CreateLogicalNetworkVlanProperties and assigns it to the Vlan field.
func (o *CreateLogicalNetworkProfile) SetVlan(v CreateLogicalNetworkVlanProperties) {
	o.Vlan = &v
}

// GetVxlan returns the Vxlan field value if set, zero value otherwise.
func (o *CreateLogicalNetworkProfile) GetVxlan() CreateLogicalNetworkVxlanProperties {
	if o == nil || IsNil(o.Vxlan) {
		var ret CreateLogicalNetworkVxlanProperties
		return ret
	}
	return *o.Vxlan
}

// GetVxlanOk returns a tuple with the Vxlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkProfile) GetVxlanOk() (*CreateLogicalNetworkVxlanProperties, bool) {
	if o == nil || IsNil(o.Vxlan) {
		return nil, false
	}
	return o.Vxlan, true
}

// HasVxlan returns a boolean if a field has been set.
func (o *CreateLogicalNetworkProfile) HasVxlan() bool {
	if o != nil && !IsNil(o.Vxlan) {
		return true
	}

	return false
}

// SetVxlan gets a reference to the given CreateLogicalNetworkVxlanProperties and assigns it to the Vxlan field.
func (o *CreateLogicalNetworkProfile) SetVxlan(v CreateLogicalNetworkVxlanProperties) {
	o.Vxlan = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *CreateLogicalNetworkProfile) GetIpv4() CreateLogicalNetworkIpv4Properties {
	if o == nil || IsNil(o.Ipv4) {
		var ret CreateLogicalNetworkIpv4Properties
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkProfile) GetIpv4Ok() (*CreateLogicalNetworkIpv4Properties, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *CreateLogicalNetworkProfile) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given CreateLogicalNetworkIpv4Properties and assigns it to the Ipv4 field.
func (o *CreateLogicalNetworkProfile) SetIpv4(v CreateLogicalNetworkIpv4Properties) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *CreateLogicalNetworkProfile) GetIpv6() CreateLogicalNetworkIpv6Properties {
	if o == nil || IsNil(o.Ipv6) {
		var ret CreateLogicalNetworkIpv6Properties
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLogicalNetworkProfile) GetIpv6Ok() (*CreateLogicalNetworkIpv6Properties, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *CreateLogicalNetworkProfile) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given CreateLogicalNetworkIpv6Properties and assigns it to the Ipv6 field.
func (o *CreateLogicalNetworkProfile) SetIpv6(v CreateLogicalNetworkIpv6Properties) {
	o.Ipv6 = &v
}

// GetRouteDomainId returns the RouteDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLogicalNetworkProfile) GetRouteDomainId() int32 {
	if o == nil || IsNil(o.RouteDomainId.Get()) {
		var ret int32
		return ret
	}
	return *o.RouteDomainId.Get()
}

// GetRouteDomainIdOk returns a tuple with the RouteDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLogicalNetworkProfile) GetRouteDomainIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RouteDomainId.Get(), o.RouteDomainId.IsSet()
}

// HasRouteDomainId returns a boolean if a field has been set.
func (o *CreateLogicalNetworkProfile) HasRouteDomainId() bool {
	if o != nil && o.RouteDomainId.IsSet() {
		return true
	}

	return false
}

// SetRouteDomainId gets a reference to the given NullableInt32 and assigns it to the RouteDomainId field.
func (o *CreateLogicalNetworkProfile) SetRouteDomainId(v int32) {
	o.RouteDomainId.Set(&v)
}
// SetRouteDomainIdNil sets the value for RouteDomainId to be an explicit nil
func (o *CreateLogicalNetworkProfile) SetRouteDomainIdNil() {
	o.RouteDomainId.Set(nil)
}

// UnsetRouteDomainId ensures that no value is present for RouteDomainId, not even an explicit nil
func (o *CreateLogicalNetworkProfile) UnsetRouteDomainId() {
	o.RouteDomainId.Unset()
}

func (o CreateLogicalNetworkProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateLogicalNetworkProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	toSerialize["kind"] = o.Kind
	toSerialize["fabricId"] = o.FabricId
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}
	if !IsNil(o.Vxlan) {
		toSerialize["vxlan"] = o.Vxlan
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if o.RouteDomainId.IsSet() {
		toSerialize["routeDomainId"] = o.RouteDomainId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateLogicalNetworkProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"fabricId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateLogicalNetworkProfile := _CreateLogicalNetworkProfile{}

	err = json.Unmarshal(data, &varCreateLogicalNetworkProfile)

	if err != nil {
		return err
	}

	*o = CreateLogicalNetworkProfile(varCreateLogicalNetworkProfile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "name")
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "fabricId")
		delete(additionalProperties, "vlan")
		delete(additionalProperties, "vxlan")
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "ipv6")
		delete(additionalProperties, "routeDomainId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateLogicalNetworkProfile struct {
	value *CreateLogicalNetworkProfile
	isSet bool
}

func (v NullableCreateLogicalNetworkProfile) Get() *CreateLogicalNetworkProfile {
	return v.value
}

func (v *NullableCreateLogicalNetworkProfile) Set(val *CreateLogicalNetworkProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLogicalNetworkProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLogicalNetworkProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLogicalNetworkProfile(val *CreateLogicalNetworkProfile) *NullableCreateLogicalNetworkProfile {
	return &NullableCreateLogicalNetworkProfile{value: val, isSet: true}
}

func (v NullableCreateLogicalNetworkProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLogicalNetworkProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


