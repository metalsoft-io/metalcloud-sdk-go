/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SiteCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteCreate{}

// SiteCreate struct for SiteCreate
type SiteCreate struct {
	// The site unique slug
	Slug string `json:"slug"`
	// The site name
	Name string `json:"name"`
	// Location details
	Location *Location `json:"location,omitempty"`
	// True if the site is hidden
	IsHidden *bool `json:"isHidden,omitempty"`
	// True if the site is in maintenance mode
	IsInMaintenance *bool `json:"isInMaintenance,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteCreate SiteCreate

// NewSiteCreate instantiates a new SiteCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteCreate(slug string, name string) *SiteCreate {
	this := SiteCreate{}
	this.Slug = slug
	this.Name = name
	return &this
}

// NewSiteCreateWithDefaults instantiates a new SiteCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteCreateWithDefaults() *SiteCreate {
	this := SiteCreate{}
	return &this
}

// GetSlug returns the Slug field value
func (o *SiteCreate) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *SiteCreate) SetSlug(v string) {
	o.Slug = v
}

// GetName returns the Name field value
func (o *SiteCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SiteCreate) SetName(v string) {
	o.Name = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SiteCreate) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SiteCreate) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *SiteCreate) SetLocation(v Location) {
	o.Location = &v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *SiteCreate) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *SiteCreate) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *SiteCreate) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetIsInMaintenance returns the IsInMaintenance field value if set, zero value otherwise.
func (o *SiteCreate) GetIsInMaintenance() bool {
	if o == nil || IsNil(o.IsInMaintenance) {
		var ret bool
		return ret
	}
	return *o.IsInMaintenance
}

// GetIsInMaintenanceOk returns a tuple with the IsInMaintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetIsInMaintenanceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInMaintenance) {
		return nil, false
	}
	return o.IsInMaintenance, true
}

// HasIsInMaintenance returns a boolean if a field has been set.
func (o *SiteCreate) HasIsInMaintenance() bool {
	if o != nil && !IsNil(o.IsInMaintenance) {
		return true
	}

	return false
}

// SetIsInMaintenance gets a reference to the given bool and assigns it to the IsInMaintenance field.
func (o *SiteCreate) SetIsInMaintenance(v bool) {
	o.IsInMaintenance = &v
}

func (o SiteCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["slug"] = o.Slug
	toSerialize["name"] = o.Name
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.IsHidden) {
		toSerialize["isHidden"] = o.IsHidden
	}
	if !IsNil(o.IsInMaintenance) {
		toSerialize["isInMaintenance"] = o.IsInMaintenance
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"slug",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSiteCreate := _SiteCreate{}

	err = json.Unmarshal(data, &varSiteCreate)

	if err != nil {
		return err
	}

	*o = SiteCreate(varSiteCreate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "slug")
		delete(additionalProperties, "name")
		delete(additionalProperties, "location")
		delete(additionalProperties, "isHidden")
		delete(additionalProperties, "isInMaintenance")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteCreate struct {
	value *SiteCreate
	isSet bool
}

func (v NullableSiteCreate) Get() *SiteCreate {
	return v.value
}

func (v *NullableSiteCreate) Set(val *SiteCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteCreate(val *SiteCreate) *NullableSiteCreate {
	return &NullableSiteCreate{value: val, isSet: true}
}

func (v NullableSiteCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


