/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// VMInstanceAPIService VMInstanceAPI service
type VMInstanceAPIService service

type VMInstanceAPIApplyVMTypeOnVMInstanceRequest struct {
	ctx context.Context
	ApiService *VMInstanceAPIService
	infrastructureId float32
	vmInstanceId float32
	vmTypeId float32
}

func (r VMInstanceAPIApplyVMTypeOnVMInstanceRequest) Execute() (*VMInstance, *http.Response, error) {
	return r.ApiService.ApplyVMTypeOnVMInstanceExecute(r)
}

/*
ApplyVMTypeOnVMInstance Applies a VM Type to a VM Instance

Applies a VM Type to a VM Instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param vmInstanceId
 @param vmTypeId
 @return VMInstanceAPIApplyVMTypeOnVMInstanceRequest
*/
func (a *VMInstanceAPIService) ApplyVMTypeOnVMInstance(ctx context.Context, infrastructureId float32, vmInstanceId float32, vmTypeId float32) VMInstanceAPIApplyVMTypeOnVMInstanceRequest {
	return VMInstanceAPIApplyVMTypeOnVMInstanceRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		vmInstanceId: vmInstanceId,
		vmTypeId: vmTypeId,
	}
}

// Execute executes the request
//  @return VMInstance
func (a *VMInstanceAPIService) ApplyVMTypeOnVMInstanceExecute(r VMInstanceAPIApplyVMTypeOnVMInstanceRequest) (*VMInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VMInstanceAPIService.ApplyVMTypeOnVMInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/actions/apply-type/{vmTypeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vmInstanceId"+"}", url.PathEscape(parameterValueToString(r.vmInstanceId, "vmInstanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vmTypeId"+"}", url.PathEscape(parameterValueToString(r.vmTypeId, "vmTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VMInstanceAPICreateVMInstanceRequest struct {
	ctx context.Context
	ApiService *VMInstanceAPIService
	infrastructureId float32
	createVMInstance *CreateVMInstance
}

// The VM Instance create object
func (r VMInstanceAPICreateVMInstanceRequest) CreateVMInstance(createVMInstance CreateVMInstance) VMInstanceAPICreateVMInstanceRequest {
	r.createVMInstance = &createVMInstance
	return r
}

func (r VMInstanceAPICreateVMInstanceRequest) Execute() (*VMInstance, *http.Response, error) {
	return r.ApiService.CreateVMInstanceExecute(r)
}

/*
CreateVMInstance Creates a VM Instance

Creates a VM Instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @return VMInstanceAPICreateVMInstanceRequest
*/
func (a *VMInstanceAPIService) CreateVMInstance(ctx context.Context, infrastructureId float32) VMInstanceAPICreateVMInstanceRequest {
	return VMInstanceAPICreateVMInstanceRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
	}
}

// Execute executes the request
//  @return VMInstance
func (a *VMInstanceAPIService) CreateVMInstanceExecute(r VMInstanceAPICreateVMInstanceRequest) (*VMInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VMInstanceAPIService.CreateVMInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/vm-instances"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createVMInstance == nil {
		return localVarReturnValue, nil, reportError("createVMInstance is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createVMInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VMInstanceAPIDeleteVMInstanceRequest struct {
	ctx context.Context
	ApiService *VMInstanceAPIService
	infrastructureId float32
	vmInstanceId float32
}

func (r VMInstanceAPIDeleteVMInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVMInstanceExecute(r)
}

/*
DeleteVMInstance Deletes a VM Instance

Deletes a VM Instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param vmInstanceId
 @return VMInstanceAPIDeleteVMInstanceRequest
*/
func (a *VMInstanceAPIService) DeleteVMInstance(ctx context.Context, infrastructureId float32, vmInstanceId float32) VMInstanceAPIDeleteVMInstanceRequest {
	return VMInstanceAPIDeleteVMInstanceRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		vmInstanceId: vmInstanceId,
	}
}

// Execute executes the request
func (a *VMInstanceAPIService) DeleteVMInstanceExecute(r VMInstanceAPIDeleteVMInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VMInstanceAPIService.DeleteVMInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vmInstanceId"+"}", url.PathEscape(parameterValueToString(r.vmInstanceId, "vmInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VMInstanceAPIGetVMInstanceRequest struct {
	ctx context.Context
	ApiService *VMInstanceAPIService
	infrastructureId float32
	vmInstanceId float32
}

func (r VMInstanceAPIGetVMInstanceRequest) Execute() (*VMInstance, *http.Response, error) {
	return r.ApiService.GetVMInstanceExecute(r)
}

/*
GetVMInstance Get VM Instance information

Returns VM Instance information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param vmInstanceId
 @return VMInstanceAPIGetVMInstanceRequest
*/
func (a *VMInstanceAPIService) GetVMInstance(ctx context.Context, infrastructureId float32, vmInstanceId float32) VMInstanceAPIGetVMInstanceRequest {
	return VMInstanceAPIGetVMInstanceRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		vmInstanceId: vmInstanceId,
	}
}

// Execute executes the request
//  @return VMInstance
func (a *VMInstanceAPIService) GetVMInstanceExecute(r VMInstanceAPIGetVMInstanceRequest) (*VMInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VMInstanceAPIService.GetVMInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vmInstanceId"+"}", url.PathEscape(parameterValueToString(r.vmInstanceId, "vmInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VMInstanceAPIGetVMInstancePowerStatusRequest struct {
	ctx context.Context
	ApiService *VMInstanceAPIService
	infrastructureId float32
	vmInstanceId float32
}

func (r VMInstanceAPIGetVMInstancePowerStatusRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetVMInstancePowerStatusExecute(r)
}

/*
GetVMInstancePowerStatus Retrieves the power status of the VM Instance

Retrieves the power status of the VM Instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param vmInstanceId
 @return VMInstanceAPIGetVMInstancePowerStatusRequest
*/
func (a *VMInstanceAPIService) GetVMInstancePowerStatus(ctx context.Context, infrastructureId float32, vmInstanceId float32) VMInstanceAPIGetVMInstancePowerStatusRequest {
	return VMInstanceAPIGetVMInstancePowerStatusRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		vmInstanceId: vmInstanceId,
	}
}

// Execute executes the request
//  @return string
func (a *VMInstanceAPIService) GetVMInstancePowerStatusExecute(r VMInstanceAPIGetVMInstancePowerStatusRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VMInstanceAPIService.GetVMInstancePowerStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/power-status"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vmInstanceId"+"}", url.PathEscape(parameterValueToString(r.vmInstanceId, "vmInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VMInstanceAPIRebootVMInstanceRequest struct {
	ctx context.Context
	ApiService *VMInstanceAPIService
	infrastructureId float32
	vmInstanceId float32
}

func (r VMInstanceAPIRebootVMInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.RebootVMInstanceExecute(r)
}

/*
RebootVMInstance Reboots the VM Instance

Reboots the VM Instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param vmInstanceId
 @return VMInstanceAPIRebootVMInstanceRequest
*/
func (a *VMInstanceAPIService) RebootVMInstance(ctx context.Context, infrastructureId float32, vmInstanceId float32) VMInstanceAPIRebootVMInstanceRequest {
	return VMInstanceAPIRebootVMInstanceRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		vmInstanceId: vmInstanceId,
	}
}

// Execute executes the request
func (a *VMInstanceAPIService) RebootVMInstanceExecute(r VMInstanceAPIRebootVMInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VMInstanceAPIService.RebootVMInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/reboot"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vmInstanceId"+"}", url.PathEscape(parameterValueToString(r.vmInstanceId, "vmInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VMInstanceAPIShutdownVMInstanceRequest struct {
	ctx context.Context
	ApiService *VMInstanceAPIService
	infrastructureId float32
	vmInstanceId float32
}

func (r VMInstanceAPIShutdownVMInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.ShutdownVMInstanceExecute(r)
}

/*
ShutdownVMInstance Shuts down the VM Instance

Shuts down the VM Instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param vmInstanceId
 @return VMInstanceAPIShutdownVMInstanceRequest
*/
func (a *VMInstanceAPIService) ShutdownVMInstance(ctx context.Context, infrastructureId float32, vmInstanceId float32) VMInstanceAPIShutdownVMInstanceRequest {
	return VMInstanceAPIShutdownVMInstanceRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		vmInstanceId: vmInstanceId,
	}
}

// Execute executes the request
func (a *VMInstanceAPIService) ShutdownVMInstanceExecute(r VMInstanceAPIShutdownVMInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VMInstanceAPIService.ShutdownVMInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/shutdown"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vmInstanceId"+"}", url.PathEscape(parameterValueToString(r.vmInstanceId, "vmInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VMInstanceAPIStartVMInstanceRequest struct {
	ctx context.Context
	ApiService *VMInstanceAPIService
	infrastructureId float32
	vmInstanceId float32
}

func (r VMInstanceAPIStartVMInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.StartVMInstanceExecute(r)
}

/*
StartVMInstance Starts the VM Instance

Starts the VM Instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param vmInstanceId
 @return VMInstanceAPIStartVMInstanceRequest
*/
func (a *VMInstanceAPIService) StartVMInstance(ctx context.Context, infrastructureId float32, vmInstanceId float32) VMInstanceAPIStartVMInstanceRequest {
	return VMInstanceAPIStartVMInstanceRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		vmInstanceId: vmInstanceId,
	}
}

// Execute executes the request
func (a *VMInstanceAPIService) StartVMInstanceExecute(r VMInstanceAPIStartVMInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VMInstanceAPIService.StartVMInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}/start"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vmInstanceId"+"}", url.PathEscape(parameterValueToString(r.vmInstanceId, "vmInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VMInstanceAPIUpdateVMInstanceRequest struct {
	ctx context.Context
	ApiService *VMInstanceAPIService
	infrastructureId float32
	vmInstanceId float32
	updateVMInstance *UpdateVMInstance
}

// The VM Instance update object
func (r VMInstanceAPIUpdateVMInstanceRequest) UpdateVMInstance(updateVMInstance UpdateVMInstance) VMInstanceAPIUpdateVMInstanceRequest {
	r.updateVMInstance = &updateVMInstance
	return r
}

func (r VMInstanceAPIUpdateVMInstanceRequest) Execute() (*VMInstance, *http.Response, error) {
	return r.ApiService.UpdateVMInstanceExecute(r)
}

/*
UpdateVMInstance Updates VM Instance information

Updates VM Instance information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param vmInstanceId
 @return VMInstanceAPIUpdateVMInstanceRequest
*/
func (a *VMInstanceAPIService) UpdateVMInstance(ctx context.Context, infrastructureId float32, vmInstanceId float32) VMInstanceAPIUpdateVMInstanceRequest {
	return VMInstanceAPIUpdateVMInstanceRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		vmInstanceId: vmInstanceId,
	}
}

// Execute executes the request
//  @return VMInstance
func (a *VMInstanceAPIService) UpdateVMInstanceExecute(r VMInstanceAPIUpdateVMInstanceRequest) (*VMInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VMInstanceAPIService.UpdateVMInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/vm-instances/{vmInstanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vmInstanceId"+"}", url.PathEscape(parameterValueToString(r.vmInstanceId, "vmInstanceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateVMInstance == nil {
		return localVarReturnValue, nil, reportError("updateVMInstance is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateVMInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
