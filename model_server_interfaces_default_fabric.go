/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInterfacesDefaultFabric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInterfacesDefaultFabric{}

// ServerInterfacesDefaultFabric struct for ServerInterfacesDefaultFabric
type ServerInterfacesDefaultFabric struct {
	// The id of the server interfaces
	ServerInterfaceIds []float32 `json:"serverInterfaceIds"`
	// The default fabric id
	DefaultFabricId NullableFloat32 `json:"defaultFabricId"`
	AdditionalProperties map[string]interface{}
}

type _ServerInterfacesDefaultFabric ServerInterfacesDefaultFabric

// NewServerInterfacesDefaultFabric instantiates a new ServerInterfacesDefaultFabric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInterfacesDefaultFabric(serverInterfaceIds []float32, defaultFabricId NullableFloat32) *ServerInterfacesDefaultFabric {
	this := ServerInterfacesDefaultFabric{}
	this.ServerInterfaceIds = serverInterfaceIds
	this.DefaultFabricId = defaultFabricId
	return &this
}

// NewServerInterfacesDefaultFabricWithDefaults instantiates a new ServerInterfacesDefaultFabric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInterfacesDefaultFabricWithDefaults() *ServerInterfacesDefaultFabric {
	this := ServerInterfacesDefaultFabric{}
	return &this
}

// GetServerInterfaceIds returns the ServerInterfaceIds field value
func (o *ServerInterfacesDefaultFabric) GetServerInterfaceIds() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.ServerInterfaceIds
}

// GetServerInterfaceIdsOk returns a tuple with the ServerInterfaceIds field value
// and a boolean to check if the value has been set.
func (o *ServerInterfacesDefaultFabric) GetServerInterfaceIdsOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerInterfaceIds, true
}

// SetServerInterfaceIds sets field value
func (o *ServerInterfacesDefaultFabric) SetServerInterfaceIds(v []float32) {
	o.ServerInterfaceIds = v
}

// GetDefaultFabricId returns the DefaultFabricId field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *ServerInterfacesDefaultFabric) GetDefaultFabricId() float32 {
	if o == nil || o.DefaultFabricId.Get() == nil {
		var ret float32
		return ret
	}

	return *o.DefaultFabricId.Get()
}

// GetDefaultFabricIdOk returns a tuple with the DefaultFabricId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerInterfacesDefaultFabric) GetDefaultFabricIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultFabricId.Get(), o.DefaultFabricId.IsSet()
}

// SetDefaultFabricId sets field value
func (o *ServerInterfacesDefaultFabric) SetDefaultFabricId(v float32) {
	o.DefaultFabricId.Set(&v)
}

func (o ServerInterfacesDefaultFabric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInterfacesDefaultFabric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverInterfaceIds"] = o.ServerInterfaceIds
	toSerialize["defaultFabricId"] = o.DefaultFabricId.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInterfacesDefaultFabric) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverInterfaceIds",
		"defaultFabricId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInterfacesDefaultFabric := _ServerInterfacesDefaultFabric{}

	err = json.Unmarshal(data, &varServerInterfacesDefaultFabric)

	if err != nil {
		return err
	}

	*o = ServerInterfacesDefaultFabric(varServerInterfacesDefaultFabric)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverInterfaceIds")
		delete(additionalProperties, "defaultFabricId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInterfacesDefaultFabric struct {
	value *ServerInterfacesDefaultFabric
	isSet bool
}

func (v NullableServerInterfacesDefaultFabric) Get() *ServerInterfacesDefaultFabric {
	return v.value
}

func (v *NullableServerInterfacesDefaultFabric) Set(val *ServerInterfacesDefaultFabric) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInterfacesDefaultFabric) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInterfacesDefaultFabric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInterfacesDefaultFabric(val *ServerInterfacesDefaultFabric) *NullableServerInterfacesDefaultFabric {
	return &NullableServerInterfacesDefaultFabric{value: val, isSet: true}
}

func (v NullableServerInterfacesDefaultFabric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInterfacesDefaultFabric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


