/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ExtensionActions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionActions{}

// ExtensionActions struct for ExtensionActions
type ExtensionActions struct {
	// Pre-deploy tasks.
	PreDeploy []ExtensionTask `json:"preDeploy,omitempty"`
	// Post-deploy tasks.
	PostDeploy []ExtensionTask `json:"postDeploy,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionActions ExtensionActions

// NewExtensionActions instantiates a new ExtensionActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionActions() *ExtensionActions {
	this := ExtensionActions{}
	return &this
}

// NewExtensionActionsWithDefaults instantiates a new ExtensionActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionActionsWithDefaults() *ExtensionActions {
	this := ExtensionActions{}
	return &this
}

// GetPreDeploy returns the PreDeploy field value if set, zero value otherwise.
func (o *ExtensionActions) GetPreDeploy() []ExtensionTask {
	if o == nil || IsNil(o.PreDeploy) {
		var ret []ExtensionTask
		return ret
	}
	return o.PreDeploy
}

// GetPreDeployOk returns a tuple with the PreDeploy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionActions) GetPreDeployOk() ([]ExtensionTask, bool) {
	if o == nil || IsNil(o.PreDeploy) {
		return nil, false
	}
	return o.PreDeploy, true
}

// HasPreDeploy returns a boolean if a field has been set.
func (o *ExtensionActions) HasPreDeploy() bool {
	if o != nil && !IsNil(o.PreDeploy) {
		return true
	}

	return false
}

// SetPreDeploy gets a reference to the given []ExtensionTask and assigns it to the PreDeploy field.
func (o *ExtensionActions) SetPreDeploy(v []ExtensionTask) {
	o.PreDeploy = v
}

// GetPostDeploy returns the PostDeploy field value if set, zero value otherwise.
func (o *ExtensionActions) GetPostDeploy() []ExtensionTask {
	if o == nil || IsNil(o.PostDeploy) {
		var ret []ExtensionTask
		return ret
	}
	return o.PostDeploy
}

// GetPostDeployOk returns a tuple with the PostDeploy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionActions) GetPostDeployOk() ([]ExtensionTask, bool) {
	if o == nil || IsNil(o.PostDeploy) {
		return nil, false
	}
	return o.PostDeploy, true
}

// HasPostDeploy returns a boolean if a field has been set.
func (o *ExtensionActions) HasPostDeploy() bool {
	if o != nil && !IsNil(o.PostDeploy) {
		return true
	}

	return false
}

// SetPostDeploy gets a reference to the given []ExtensionTask and assigns it to the PostDeploy field.
func (o *ExtensionActions) SetPostDeploy(v []ExtensionTask) {
	o.PostDeploy = v
}

func (o ExtensionActions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionActions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PreDeploy) {
		toSerialize["preDeploy"] = o.PreDeploy
	}
	if !IsNil(o.PostDeploy) {
		toSerialize["postDeploy"] = o.PostDeploy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionActions) UnmarshalJSON(data []byte) (err error) {
	varExtensionActions := _ExtensionActions{}

	err = json.Unmarshal(data, &varExtensionActions)

	if err != nil {
		return err
	}

	*o = ExtensionActions(varExtensionActions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "preDeploy")
		delete(additionalProperties, "postDeploy")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionActions struct {
	value *ExtensionActions
	isSet bool
}

func (v NullableExtensionActions) Get() *ExtensionActions {
	return v.value
}

func (v *NullableExtensionActions) Set(val *ExtensionActions) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionActions) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionActions(val *ExtensionActions) *NullableExtensionActions {
	return &NullableExtensionActions{value: val, isSet: true}
}

func (v NullableExtensionActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


