/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateManualIpv4SubnetAllocationStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateManualIpv4SubnetAllocationStrategy{}

// CreateManualIpv4SubnetAllocationStrategy struct for CreateManualIpv4SubnetAllocationStrategy
type CreateManualIpv4SubnetAllocationStrategy struct {
	Kind AllocationStrategyKind `json:"kind"`
	Scope CreateResourceScope `json:"scope"`
	GatewayPlacement *SubnetGatewayPlacement `json:"gatewayPlacement,omitempty"`
	SubnetId int32 `json:"subnetId"`
	AdditionalProperties map[string]interface{}
}

type _CreateManualIpv4SubnetAllocationStrategy CreateManualIpv4SubnetAllocationStrategy

// NewCreateManualIpv4SubnetAllocationStrategy instantiates a new CreateManualIpv4SubnetAllocationStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateManualIpv4SubnetAllocationStrategy(kind AllocationStrategyKind, scope CreateResourceScope, subnetId int32) *CreateManualIpv4SubnetAllocationStrategy {
	this := CreateManualIpv4SubnetAllocationStrategy{}
	this.Kind = kind
	this.Scope = scope
	var gatewayPlacement SubnetGatewayPlacement = SUBNETGATEWAYPLACEMENT_DEFAULT
	this.GatewayPlacement = &gatewayPlacement
	this.SubnetId = subnetId
	return &this
}

// NewCreateManualIpv4SubnetAllocationStrategyWithDefaults instantiates a new CreateManualIpv4SubnetAllocationStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateManualIpv4SubnetAllocationStrategyWithDefaults() *CreateManualIpv4SubnetAllocationStrategy {
	this := CreateManualIpv4SubnetAllocationStrategy{}
	var gatewayPlacement SubnetGatewayPlacement = SUBNETGATEWAYPLACEMENT_DEFAULT
	this.GatewayPlacement = &gatewayPlacement
	return &this
}

// GetKind returns the Kind field value
func (o *CreateManualIpv4SubnetAllocationStrategy) GetKind() AllocationStrategyKind {
	if o == nil {
		var ret AllocationStrategyKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CreateManualIpv4SubnetAllocationStrategy) GetKindOk() (*AllocationStrategyKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CreateManualIpv4SubnetAllocationStrategy) SetKind(v AllocationStrategyKind) {
	o.Kind = v
}

// GetScope returns the Scope field value
func (o *CreateManualIpv4SubnetAllocationStrategy) GetScope() CreateResourceScope {
	if o == nil {
		var ret CreateResourceScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *CreateManualIpv4SubnetAllocationStrategy) GetScopeOk() (*CreateResourceScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *CreateManualIpv4SubnetAllocationStrategy) SetScope(v CreateResourceScope) {
	o.Scope = v
}

// GetGatewayPlacement returns the GatewayPlacement field value if set, zero value otherwise.
func (o *CreateManualIpv4SubnetAllocationStrategy) GetGatewayPlacement() SubnetGatewayPlacement {
	if o == nil || IsNil(o.GatewayPlacement) {
		var ret SubnetGatewayPlacement
		return ret
	}
	return *o.GatewayPlacement
}

// GetGatewayPlacementOk returns a tuple with the GatewayPlacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateManualIpv4SubnetAllocationStrategy) GetGatewayPlacementOk() (*SubnetGatewayPlacement, bool) {
	if o == nil || IsNil(o.GatewayPlacement) {
		return nil, false
	}
	return o.GatewayPlacement, true
}

// HasGatewayPlacement returns a boolean if a field has been set.
func (o *CreateManualIpv4SubnetAllocationStrategy) HasGatewayPlacement() bool {
	if o != nil && !IsNil(o.GatewayPlacement) {
		return true
	}

	return false
}

// SetGatewayPlacement gets a reference to the given SubnetGatewayPlacement and assigns it to the GatewayPlacement field.
func (o *CreateManualIpv4SubnetAllocationStrategy) SetGatewayPlacement(v SubnetGatewayPlacement) {
	o.GatewayPlacement = &v
}

// GetSubnetId returns the SubnetId field value
func (o *CreateManualIpv4SubnetAllocationStrategy) GetSubnetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value
// and a boolean to check if the value has been set.
func (o *CreateManualIpv4SubnetAllocationStrategy) GetSubnetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetId, true
}

// SetSubnetId sets field value
func (o *CreateManualIpv4SubnetAllocationStrategy) SetSubnetId(v int32) {
	o.SubnetId = v
}

func (o CreateManualIpv4SubnetAllocationStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateManualIpv4SubnetAllocationStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["scope"] = o.Scope
	if !IsNil(o.GatewayPlacement) {
		toSerialize["gatewayPlacement"] = o.GatewayPlacement
	}
	toSerialize["subnetId"] = o.SubnetId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateManualIpv4SubnetAllocationStrategy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"scope",
		"subnetId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateManualIpv4SubnetAllocationStrategy := _CreateManualIpv4SubnetAllocationStrategy{}

	err = json.Unmarshal(data, &varCreateManualIpv4SubnetAllocationStrategy)

	if err != nil {
		return err
	}

	*o = CreateManualIpv4SubnetAllocationStrategy(varCreateManualIpv4SubnetAllocationStrategy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kind")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "gatewayPlacement")
		delete(additionalProperties, "subnetId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateManualIpv4SubnetAllocationStrategy struct {
	value *CreateManualIpv4SubnetAllocationStrategy
	isSet bool
}

func (v NullableCreateManualIpv4SubnetAllocationStrategy) Get() *CreateManualIpv4SubnetAllocationStrategy {
	return v.value
}

func (v *NullableCreateManualIpv4SubnetAllocationStrategy) Set(val *CreateManualIpv4SubnetAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateManualIpv4SubnetAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateManualIpv4SubnetAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateManualIpv4SubnetAllocationStrategy(val *CreateManualIpv4SubnetAllocationStrategy) *NullableCreateManualIpv4SubnetAllocationStrategy {
	return &NullableCreateManualIpv4SubnetAllocationStrategy{value: val, isSet: true}
}

func (v NullableCreateManualIpv4SubnetAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateManualIpv4SubnetAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


