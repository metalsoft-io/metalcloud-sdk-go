/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the LogicalNetworkConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalNetworkConfig{}

// LogicalNetworkConfig struct for LogicalNetworkConfig
type LogicalNetworkConfig struct {
	Id int32 `json:"id"`
	DeployType string `json:"deployType"`
	DeployStatus string `json:"deployStatus"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Revision int32 `json:"revision"`
	Kind LogicalNetworkKind `json:"kind"`
	Vlan *LogicalNetworkConfigVlanProperties `json:"vlan,omitempty"`
	Vxlan *LogicalNetworkConfigVxlanProperties `json:"vxlan,omitempty"`
	Ipv4 *LogicalNetworkConfigIpv4Properties `json:"ipv4,omitempty"`
	Ipv6 *LogicalNetworkConfigIpv6Properties `json:"ipv6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogicalNetworkConfig LogicalNetworkConfig

// NewLogicalNetworkConfig instantiates a new LogicalNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalNetworkConfig(id int32, deployType string, deployStatus string, createdAt time.Time, updatedAt time.Time, revision int32, kind LogicalNetworkKind) *LogicalNetworkConfig {
	this := LogicalNetworkConfig{}
	this.Id = id
	this.DeployType = deployType
	this.DeployStatus = deployStatus
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Revision = revision
	this.Kind = kind
	return &this
}

// NewLogicalNetworkConfigWithDefaults instantiates a new LogicalNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalNetworkConfigWithDefaults() *LogicalNetworkConfig {
	this := LogicalNetworkConfig{}
	return &this
}

// GetId returns the Id field value
func (o *LogicalNetworkConfig) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogicalNetworkConfig) SetId(v int32) {
	o.Id = v
}

// GetDeployType returns the DeployType field value
func (o *LogicalNetworkConfig) GetDeployType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetDeployTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployType, true
}

// SetDeployType sets field value
func (o *LogicalNetworkConfig) SetDeployType(v string) {
	o.DeployType = v
}

// GetDeployStatus returns the DeployStatus field value
func (o *LogicalNetworkConfig) GetDeployStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeployStatus
}

// GetDeployStatusOk returns a tuple with the DeployStatus field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetDeployStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeployStatus, true
}

// SetDeployStatus sets field value
func (o *LogicalNetworkConfig) SetDeployStatus(v string) {
	o.DeployStatus = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *LogicalNetworkConfig) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *LogicalNetworkConfig) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *LogicalNetworkConfig) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *LogicalNetworkConfig) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetRevision returns the Revision field value
func (o *LogicalNetworkConfig) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *LogicalNetworkConfig) SetRevision(v int32) {
	o.Revision = v
}

// GetKind returns the Kind field value
func (o *LogicalNetworkConfig) GetKind() LogicalNetworkKind {
	if o == nil {
		var ret LogicalNetworkKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetKindOk() (*LogicalNetworkKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *LogicalNetworkConfig) SetKind(v LogicalNetworkKind) {
	o.Kind = v
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *LogicalNetworkConfig) GetVlan() LogicalNetworkConfigVlanProperties {
	if o == nil || IsNil(o.Vlan) {
		var ret LogicalNetworkConfigVlanProperties
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetVlanOk() (*LogicalNetworkConfigVlanProperties, bool) {
	if o == nil || IsNil(o.Vlan) {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *LogicalNetworkConfig) HasVlan() bool {
	if o != nil && !IsNil(o.Vlan) {
		return true
	}

	return false
}

// SetVlan gets a reference to the given LogicalNetworkConfigVlanProperties and assigns it to the Vlan field.
func (o *LogicalNetworkConfig) SetVlan(v LogicalNetworkConfigVlanProperties) {
	o.Vlan = &v
}

// GetVxlan returns the Vxlan field value if set, zero value otherwise.
func (o *LogicalNetworkConfig) GetVxlan() LogicalNetworkConfigVxlanProperties {
	if o == nil || IsNil(o.Vxlan) {
		var ret LogicalNetworkConfigVxlanProperties
		return ret
	}
	return *o.Vxlan
}

// GetVxlanOk returns a tuple with the Vxlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetVxlanOk() (*LogicalNetworkConfigVxlanProperties, bool) {
	if o == nil || IsNil(o.Vxlan) {
		return nil, false
	}
	return o.Vxlan, true
}

// HasVxlan returns a boolean if a field has been set.
func (o *LogicalNetworkConfig) HasVxlan() bool {
	if o != nil && !IsNil(o.Vxlan) {
		return true
	}

	return false
}

// SetVxlan gets a reference to the given LogicalNetworkConfigVxlanProperties and assigns it to the Vxlan field.
func (o *LogicalNetworkConfig) SetVxlan(v LogicalNetworkConfigVxlanProperties) {
	o.Vxlan = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *LogicalNetworkConfig) GetIpv4() LogicalNetworkConfigIpv4Properties {
	if o == nil || IsNil(o.Ipv4) {
		var ret LogicalNetworkConfigIpv4Properties
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetIpv4Ok() (*LogicalNetworkConfigIpv4Properties, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *LogicalNetworkConfig) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given LogicalNetworkConfigIpv4Properties and assigns it to the Ipv4 field.
func (o *LogicalNetworkConfig) SetIpv4(v LogicalNetworkConfigIpv4Properties) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *LogicalNetworkConfig) GetIpv6() LogicalNetworkConfigIpv6Properties {
	if o == nil || IsNil(o.Ipv6) {
		var ret LogicalNetworkConfigIpv6Properties
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfig) GetIpv6Ok() (*LogicalNetworkConfigIpv6Properties, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *LogicalNetworkConfig) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given LogicalNetworkConfigIpv6Properties and assigns it to the Ipv6 field.
func (o *LogicalNetworkConfig) SetIpv6(v LogicalNetworkConfigIpv6Properties) {
	o.Ipv6 = &v
}

func (o LogicalNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalNetworkConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["deployType"] = o.DeployType
	toSerialize["deployStatus"] = o.DeployStatus
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["revision"] = o.Revision
	toSerialize["kind"] = o.Kind
	if !IsNil(o.Vlan) {
		toSerialize["vlan"] = o.Vlan
	}
	if !IsNil(o.Vxlan) {
		toSerialize["vxlan"] = o.Vxlan
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalNetworkConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"deployType",
		"deployStatus",
		"createdAt",
		"updatedAt",
		"revision",
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogicalNetworkConfig := _LogicalNetworkConfig{}

	err = json.Unmarshal(data, &varLogicalNetworkConfig)

	if err != nil {
		return err
	}

	*o = LogicalNetworkConfig(varLogicalNetworkConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "deployType")
		delete(additionalProperties, "deployStatus")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "vlan")
		delete(additionalProperties, "vxlan")
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "ipv6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalNetworkConfig struct {
	value *LogicalNetworkConfig
	isSet bool
}

func (v NullableLogicalNetworkConfig) Get() *LogicalNetworkConfig {
	return v.value
}

func (v *NullableLogicalNetworkConfig) Set(val *LogicalNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalNetworkConfig(val *LogicalNetworkConfig) *NullableLogicalNetworkConfig {
	return &NullableLogicalNetworkConfig{value: val, isSet: true}
}

func (v NullableLogicalNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


