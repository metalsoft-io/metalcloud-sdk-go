/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateExternalConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateExternalConnection{}

// UpdateExternalConnection struct for UpdateExternalConnection
type UpdateExternalConnection struct {
	// The external connection name
	Name *string `json:"name,omitempty"`
	// The external connection unique label
	Label *string `json:"label,omitempty" validate:"regexp=^(?!.*-$)[a-z]{1}[a-z0-9-]{0,62}$"`
	AdditionalProperties map[string]interface{}
}

type _UpdateExternalConnection UpdateExternalConnection

// NewUpdateExternalConnection instantiates a new UpdateExternalConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateExternalConnection() *UpdateExternalConnection {
	this := UpdateExternalConnection{}
	return &this
}

// NewUpdateExternalConnectionWithDefaults instantiates a new UpdateExternalConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateExternalConnectionWithDefaults() *UpdateExternalConnection {
	this := UpdateExternalConnection{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateExternalConnection) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExternalConnection) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateExternalConnection) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateExternalConnection) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateExternalConnection) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateExternalConnection) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateExternalConnection) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateExternalConnection) SetLabel(v string) {
	o.Label = &v
}

func (o UpdateExternalConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateExternalConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateExternalConnection) UnmarshalJSON(data []byte) (err error) {
	varUpdateExternalConnection := _UpdateExternalConnection{}

	err = json.Unmarshal(data, &varUpdateExternalConnection)

	if err != nil {
		return err
	}

	*o = UpdateExternalConnection(varUpdateExternalConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "label")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateExternalConnection struct {
	value *UpdateExternalConnection
	isSet bool
}

func (v NullableUpdateExternalConnection) Get() *UpdateExternalConnection {
	return v.value
}

func (v *NullableUpdateExternalConnection) Set(val *UpdateExternalConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateExternalConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateExternalConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateExternalConnection(val *UpdateExternalConnection) *NullableUpdateExternalConnection {
	return &NullableUpdateExternalConnection{value: val, isSet: true}
}

func (v NullableUpdateExternalConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateExternalConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


