/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UserPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPermissions{}

// UserPermissions struct for UserPermissions
type UserPermissions struct {
	// Admin password reveal permissions
	AdminPasswordReveal map[string]interface{} `json:"admin_password_reveal"`
	// Special permissions
	SpecialPermissions map[string]interface{} `json:"special_permissions"`
	AdditionalProperties map[string]interface{}
}

type _UserPermissions UserPermissions

// NewUserPermissions instantiates a new UserPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPermissions(adminPasswordReveal map[string]interface{}, specialPermissions map[string]interface{}) *UserPermissions {
	this := UserPermissions{}
	this.AdminPasswordReveal = adminPasswordReveal
	this.SpecialPermissions = specialPermissions
	return &this
}

// NewUserPermissionsWithDefaults instantiates a new UserPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPermissionsWithDefaults() *UserPermissions {
	this := UserPermissions{}
	return &this
}

// GetAdminPasswordReveal returns the AdminPasswordReveal field value
func (o *UserPermissions) GetAdminPasswordReveal() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.AdminPasswordReveal
}

// GetAdminPasswordRevealOk returns a tuple with the AdminPasswordReveal field value
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetAdminPasswordRevealOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.AdminPasswordReveal, true
}

// SetAdminPasswordReveal sets field value
func (o *UserPermissions) SetAdminPasswordReveal(v map[string]interface{}) {
	o.AdminPasswordReveal = v
}

// GetSpecialPermissions returns the SpecialPermissions field value
func (o *UserPermissions) GetSpecialPermissions() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.SpecialPermissions
}

// GetSpecialPermissionsOk returns a tuple with the SpecialPermissions field value
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetSpecialPermissionsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.SpecialPermissions, true
}

// SetSpecialPermissions sets field value
func (o *UserPermissions) SetSpecialPermissions(v map[string]interface{}) {
	o.SpecialPermissions = v
}

func (o UserPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["admin_password_reveal"] = o.AdminPasswordReveal
	toSerialize["special_permissions"] = o.SpecialPermissions

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserPermissions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"admin_password_reveal",
		"special_permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPermissions := _UserPermissions{}

	err = json.Unmarshal(data, &varUserPermissions)

	if err != nil {
		return err
	}

	*o = UserPermissions(varUserPermissions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "admin_password_reveal")
		delete(additionalProperties, "special_permissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserPermissions struct {
	value *UserPermissions
	isSet bool
}

func (v NullableUserPermissions) Get() *UserPermissions {
	return v.value
}

func (v *NullableUserPermissions) Set(val *UserPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPermissions(val *UserPermissions) *NullableUserPermissions {
	return &NullableUserPermissions{value: val, isSet: true}
}

func (v NullableUserPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


