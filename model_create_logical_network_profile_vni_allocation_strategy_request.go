/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// CreateLogicalNetworkProfileVniAllocationStrategyRequest - struct for CreateLogicalNetworkProfileVniAllocationStrategyRequest
type CreateLogicalNetworkProfileVniAllocationStrategyRequest struct {
	CreateAutoVniAllocationStrategy *CreateAutoVniAllocationStrategy
	CreateManualVniAllocationStrategy *CreateManualVniAllocationStrategy
}

// CreateAutoVniAllocationStrategyAsCreateLogicalNetworkProfileVniAllocationStrategyRequest is a convenience function that returns CreateAutoVniAllocationStrategy wrapped in CreateLogicalNetworkProfileVniAllocationStrategyRequest
func CreateAutoVniAllocationStrategyAsCreateLogicalNetworkProfileVniAllocationStrategyRequest(v *CreateAutoVniAllocationStrategy) CreateLogicalNetworkProfileVniAllocationStrategyRequest {
	return CreateLogicalNetworkProfileVniAllocationStrategyRequest{
		CreateAutoVniAllocationStrategy: v,
	}
}

// CreateManualVniAllocationStrategyAsCreateLogicalNetworkProfileVniAllocationStrategyRequest is a convenience function that returns CreateManualVniAllocationStrategy wrapped in CreateLogicalNetworkProfileVniAllocationStrategyRequest
func CreateManualVniAllocationStrategyAsCreateLogicalNetworkProfileVniAllocationStrategyRequest(v *CreateManualVniAllocationStrategy) CreateLogicalNetworkProfileVniAllocationStrategyRequest {
	return CreateLogicalNetworkProfileVniAllocationStrategyRequest{
		CreateManualVniAllocationStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateLogicalNetworkProfileVniAllocationStrategyRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'auto'
	if jsonDict["kind"] == "auto" {
		// try to unmarshal JSON data into CreateAutoVniAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoVniAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoVniAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoVniAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileVniAllocationStrategyRequest as CreateAutoVniAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'manual'
	if jsonDict["kind"] == "manual" {
		// try to unmarshal JSON data into CreateManualVniAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualVniAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualVniAllocationStrategy, return on the first match
		} else {
			dst.CreateManualVniAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileVniAllocationStrategyRequest as CreateManualVniAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateAutoVniAllocationStrategy'
	if jsonDict["kind"] == "CreateAutoVniAllocationStrategy" {
		// try to unmarshal JSON data into CreateAutoVniAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoVniAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoVniAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoVniAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileVniAllocationStrategyRequest as CreateAutoVniAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateManualVniAllocationStrategy'
	if jsonDict["kind"] == "CreateManualVniAllocationStrategy" {
		// try to unmarshal JSON data into CreateManualVniAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualVniAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualVniAllocationStrategy, return on the first match
		} else {
			dst.CreateManualVniAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateLogicalNetworkProfileVniAllocationStrategyRequest as CreateManualVniAllocationStrategy: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateLogicalNetworkProfileVniAllocationStrategyRequest) MarshalJSON() ([]byte, error) {
	if src.CreateAutoVniAllocationStrategy != nil {
		return json.Marshal(&src.CreateAutoVniAllocationStrategy)
	}

	if src.CreateManualVniAllocationStrategy != nil {
		return json.Marshal(&src.CreateManualVniAllocationStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateLogicalNetworkProfileVniAllocationStrategyRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateAutoVniAllocationStrategy != nil {
		return obj.CreateAutoVniAllocationStrategy
	}

	if obj.CreateManualVniAllocationStrategy != nil {
		return obj.CreateManualVniAllocationStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateLogicalNetworkProfileVniAllocationStrategyRequest) GetActualInstanceValue() (interface{}) {
	if obj.CreateAutoVniAllocationStrategy != nil {
		return *obj.CreateAutoVniAllocationStrategy
	}

	if obj.CreateManualVniAllocationStrategy != nil {
		return *obj.CreateManualVniAllocationStrategy
	}

	// all schemas are nil
	return nil
}

type NullableCreateLogicalNetworkProfileVniAllocationStrategyRequest struct {
	value *CreateLogicalNetworkProfileVniAllocationStrategyRequest
	isSet bool
}

func (v NullableCreateLogicalNetworkProfileVniAllocationStrategyRequest) Get() *CreateLogicalNetworkProfileVniAllocationStrategyRequest {
	return v.value
}

func (v *NullableCreateLogicalNetworkProfileVniAllocationStrategyRequest) Set(val *CreateLogicalNetworkProfileVniAllocationStrategyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLogicalNetworkProfileVniAllocationStrategyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLogicalNetworkProfileVniAllocationStrategyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLogicalNetworkProfileVniAllocationStrategyRequest(val *CreateLogicalNetworkProfileVniAllocationStrategyRequest) *NullableCreateLogicalNetworkProfileVniAllocationStrategyRequest {
	return &NullableCreateLogicalNetworkProfileVniAllocationStrategyRequest{value: val, isSet: true}
}

func (v NullableCreateLogicalNetworkProfileVniAllocationStrategyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLogicalNetworkProfileVniAllocationStrategyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


