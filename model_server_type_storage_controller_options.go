/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerTypeStorageControllerOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTypeStorageControllerOptions{}

// ServerTypeStorageControllerOptions struct for ServerTypeStorageControllerOptions
type ServerTypeStorageControllerOptions struct {
	// The list of supported RAID types for the storage controller.
	RaidTypesSupported []string `json:"raidTypesSupported"`
	// The list of supported controller modes for the storage controller.
	ControllerModesSupported []string `json:"controllerModesSupported"`
	AdditionalProperties map[string]interface{}
}

type _ServerTypeStorageControllerOptions ServerTypeStorageControllerOptions

// NewServerTypeStorageControllerOptions instantiates a new ServerTypeStorageControllerOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTypeStorageControllerOptions(raidTypesSupported []string, controllerModesSupported []string) *ServerTypeStorageControllerOptions {
	this := ServerTypeStorageControllerOptions{}
	this.RaidTypesSupported = raidTypesSupported
	this.ControllerModesSupported = controllerModesSupported
	return &this
}

// NewServerTypeStorageControllerOptionsWithDefaults instantiates a new ServerTypeStorageControllerOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeStorageControllerOptionsWithDefaults() *ServerTypeStorageControllerOptions {
	this := ServerTypeStorageControllerOptions{}
	return &this
}

// GetRaidTypesSupported returns the RaidTypesSupported field value
func (o *ServerTypeStorageControllerOptions) GetRaidTypesSupported() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RaidTypesSupported
}

// GetRaidTypesSupportedOk returns a tuple with the RaidTypesSupported field value
// and a boolean to check if the value has been set.
func (o *ServerTypeStorageControllerOptions) GetRaidTypesSupportedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RaidTypesSupported, true
}

// SetRaidTypesSupported sets field value
func (o *ServerTypeStorageControllerOptions) SetRaidTypesSupported(v []string) {
	o.RaidTypesSupported = v
}

// GetControllerModesSupported returns the ControllerModesSupported field value
func (o *ServerTypeStorageControllerOptions) GetControllerModesSupported() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ControllerModesSupported
}

// GetControllerModesSupportedOk returns a tuple with the ControllerModesSupported field value
// and a boolean to check if the value has been set.
func (o *ServerTypeStorageControllerOptions) GetControllerModesSupportedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControllerModesSupported, true
}

// SetControllerModesSupported sets field value
func (o *ServerTypeStorageControllerOptions) SetControllerModesSupported(v []string) {
	o.ControllerModesSupported = v
}

func (o ServerTypeStorageControllerOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTypeStorageControllerOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["raidTypesSupported"] = o.RaidTypesSupported
	toSerialize["controllerModesSupported"] = o.ControllerModesSupported

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerTypeStorageControllerOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"raidTypesSupported",
		"controllerModesSupported",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerTypeStorageControllerOptions := _ServerTypeStorageControllerOptions{}

	err = json.Unmarshal(data, &varServerTypeStorageControllerOptions)

	if err != nil {
		return err
	}

	*o = ServerTypeStorageControllerOptions(varServerTypeStorageControllerOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "raidTypesSupported")
		delete(additionalProperties, "controllerModesSupported")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerTypeStorageControllerOptions struct {
	value *ServerTypeStorageControllerOptions
	isSet bool
}

func (v NullableServerTypeStorageControllerOptions) Get() *ServerTypeStorageControllerOptions {
	return v.value
}

func (v *NullableServerTypeStorageControllerOptions) Set(val *ServerTypeStorageControllerOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTypeStorageControllerOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTypeStorageControllerOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTypeStorageControllerOptions(val *ServerTypeStorageControllerOptions) *NullableServerTypeStorageControllerOptions {
	return &NullableServerTypeStorageControllerOptions{value: val, isSet: true}
}

func (v NullableServerTypeStorageControllerOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTypeStorageControllerOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


