/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceReinstallOS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceReinstallOS{}

// ServerInstanceReinstallOS struct for ServerInstanceReinstallOS
type ServerInstanceReinstallOS struct {
	// Whether to perform the reinstall at next deploy. (always true at the moment)
	PerformAtNextDeploy bool `json:"performAtNextDeploy"`
	// Whether to reinstall the OS.
	ReinstallOS bool `json:"reinstallOS"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceReinstallOS ServerInstanceReinstallOS

// NewServerInstanceReinstallOS instantiates a new ServerInstanceReinstallOS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceReinstallOS(performAtNextDeploy bool, reinstallOS bool) *ServerInstanceReinstallOS {
	this := ServerInstanceReinstallOS{}
	this.PerformAtNextDeploy = performAtNextDeploy
	this.ReinstallOS = reinstallOS
	return &this
}

// NewServerInstanceReinstallOSWithDefaults instantiates a new ServerInstanceReinstallOS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceReinstallOSWithDefaults() *ServerInstanceReinstallOS {
	this := ServerInstanceReinstallOS{}
	return &this
}

// GetPerformAtNextDeploy returns the PerformAtNextDeploy field value
func (o *ServerInstanceReinstallOS) GetPerformAtNextDeploy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PerformAtNextDeploy
}

// GetPerformAtNextDeployOk returns a tuple with the PerformAtNextDeploy field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceReinstallOS) GetPerformAtNextDeployOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerformAtNextDeploy, true
}

// SetPerformAtNextDeploy sets field value
func (o *ServerInstanceReinstallOS) SetPerformAtNextDeploy(v bool) {
	o.PerformAtNextDeploy = v
}

// GetReinstallOS returns the ReinstallOS field value
func (o *ServerInstanceReinstallOS) GetReinstallOS() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReinstallOS
}

// GetReinstallOSOk returns a tuple with the ReinstallOS field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceReinstallOS) GetReinstallOSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReinstallOS, true
}

// SetReinstallOS sets field value
func (o *ServerInstanceReinstallOS) SetReinstallOS(v bool) {
	o.ReinstallOS = v
}

func (o ServerInstanceReinstallOS) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceReinstallOS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["performAtNextDeploy"] = o.PerformAtNextDeploy
	toSerialize["reinstallOS"] = o.ReinstallOS

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceReinstallOS) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"performAtNextDeploy",
		"reinstallOS",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceReinstallOS := _ServerInstanceReinstallOS{}

	err = json.Unmarshal(data, &varServerInstanceReinstallOS)

	if err != nil {
		return err
	}

	*o = ServerInstanceReinstallOS(varServerInstanceReinstallOS)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "performAtNextDeploy")
		delete(additionalProperties, "reinstallOS")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceReinstallOS struct {
	value *ServerInstanceReinstallOS
	isSet bool
}

func (v NullableServerInstanceReinstallOS) Get() *ServerInstanceReinstallOS {
	return v.value
}

func (v *NullableServerInstanceReinstallOS) Set(val *ServerInstanceReinstallOS) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceReinstallOS) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceReinstallOS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceReinstallOS(val *ServerInstanceReinstallOS) *NullableServerInstanceReinstallOS {
	return &NullableServerInstanceReinstallOS{value: val, isSet: true}
}

func (v NullableServerInstanceReinstallOS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceReinstallOS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


