/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateServerComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateServerComponent{}

// UpdateServerComponent struct for UpdateServerComponent
type UpdateServerComponent struct {
	// The target firmware version of the server component.
	FirmwareTargetVersion *string `json:"firmwareTargetVersion,omitempty"`
	// The flag indicating if the firmware upgrade of the server component requires confirmation.
	FirmwareUpgradeNeedsConfirmation *float32 `json:"firmwareUpgradeNeedsConfirmation,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateServerComponent UpdateServerComponent

// NewUpdateServerComponent instantiates a new UpdateServerComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateServerComponent() *UpdateServerComponent {
	this := UpdateServerComponent{}
	return &this
}

// NewUpdateServerComponentWithDefaults instantiates a new UpdateServerComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServerComponentWithDefaults() *UpdateServerComponent {
	this := UpdateServerComponent{}
	return &this
}

// GetFirmwareTargetVersion returns the FirmwareTargetVersion field value if set, zero value otherwise.
func (o *UpdateServerComponent) GetFirmwareTargetVersion() string {
	if o == nil || IsNil(o.FirmwareTargetVersion) {
		var ret string
		return ret
	}
	return *o.FirmwareTargetVersion
}

// GetFirmwareTargetVersionOk returns a tuple with the FirmwareTargetVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerComponent) GetFirmwareTargetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.FirmwareTargetVersion) {
		return nil, false
	}
	return o.FirmwareTargetVersion, true
}

// HasFirmwareTargetVersion returns a boolean if a field has been set.
func (o *UpdateServerComponent) HasFirmwareTargetVersion() bool {
	if o != nil && !IsNil(o.FirmwareTargetVersion) {
		return true
	}

	return false
}

// SetFirmwareTargetVersion gets a reference to the given string and assigns it to the FirmwareTargetVersion field.
func (o *UpdateServerComponent) SetFirmwareTargetVersion(v string) {
	o.FirmwareTargetVersion = &v
}

// GetFirmwareUpgradeNeedsConfirmation returns the FirmwareUpgradeNeedsConfirmation field value if set, zero value otherwise.
func (o *UpdateServerComponent) GetFirmwareUpgradeNeedsConfirmation() float32 {
	if o == nil || IsNil(o.FirmwareUpgradeNeedsConfirmation) {
		var ret float32
		return ret
	}
	return *o.FirmwareUpgradeNeedsConfirmation
}

// GetFirmwareUpgradeNeedsConfirmationOk returns a tuple with the FirmwareUpgradeNeedsConfirmation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerComponent) GetFirmwareUpgradeNeedsConfirmationOk() (*float32, bool) {
	if o == nil || IsNil(o.FirmwareUpgradeNeedsConfirmation) {
		return nil, false
	}
	return o.FirmwareUpgradeNeedsConfirmation, true
}

// HasFirmwareUpgradeNeedsConfirmation returns a boolean if a field has been set.
func (o *UpdateServerComponent) HasFirmwareUpgradeNeedsConfirmation() bool {
	if o != nil && !IsNil(o.FirmwareUpgradeNeedsConfirmation) {
		return true
	}

	return false
}

// SetFirmwareUpgradeNeedsConfirmation gets a reference to the given float32 and assigns it to the FirmwareUpgradeNeedsConfirmation field.
func (o *UpdateServerComponent) SetFirmwareUpgradeNeedsConfirmation(v float32) {
	o.FirmwareUpgradeNeedsConfirmation = &v
}

func (o UpdateServerComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateServerComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirmwareTargetVersion) {
		toSerialize["firmwareTargetVersion"] = o.FirmwareTargetVersion
	}
	if !IsNil(o.FirmwareUpgradeNeedsConfirmation) {
		toSerialize["firmwareUpgradeNeedsConfirmation"] = o.FirmwareUpgradeNeedsConfirmation
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateServerComponent) UnmarshalJSON(data []byte) (err error) {
	varUpdateServerComponent := _UpdateServerComponent{}

	err = json.Unmarshal(data, &varUpdateServerComponent)

	if err != nil {
		return err
	}

	*o = UpdateServerComponent(varUpdateServerComponent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "firmwareTargetVersion")
		delete(additionalProperties, "firmwareUpgradeNeedsConfirmation")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateServerComponent struct {
	value *UpdateServerComponent
	isSet bool
}

func (v NullableUpdateServerComponent) Get() *UpdateServerComponent {
	return v.value
}

func (v *NullableUpdateServerComponent) Set(val *UpdateServerComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateServerComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateServerComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateServerComponent(val *UpdateServerComponent) *NullableUpdateServerComponent {
	return &NullableUpdateServerComponent{value: val, isSet: true}
}

func (v NullableUpdateServerComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateServerComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


