/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateUserPermissionsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserPermissionsDto{}

// UpdateUserPermissionsDto struct for UpdateUserPermissionsDto
type UpdateUserPermissionsDto struct {
	// Admin password reveal permissions
	AdminPasswordRevealPermissions *AdminPasswordRevealPermissions `json:"adminPasswordRevealPermissions,omitempty"`
	// Special permissions
	SpecialPermissions *SpecialPermissions `json:"specialPermissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateUserPermissionsDto UpdateUserPermissionsDto

// NewUpdateUserPermissionsDto instantiates a new UpdateUserPermissionsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserPermissionsDto() *UpdateUserPermissionsDto {
	this := UpdateUserPermissionsDto{}
	return &this
}

// NewUpdateUserPermissionsDtoWithDefaults instantiates a new UpdateUserPermissionsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserPermissionsDtoWithDefaults() *UpdateUserPermissionsDto {
	this := UpdateUserPermissionsDto{}
	return &this
}

// GetAdminPasswordRevealPermissions returns the AdminPasswordRevealPermissions field value if set, zero value otherwise.
func (o *UpdateUserPermissionsDto) GetAdminPasswordRevealPermissions() AdminPasswordRevealPermissions {
	if o == nil || IsNil(o.AdminPasswordRevealPermissions) {
		var ret AdminPasswordRevealPermissions
		return ret
	}
	return *o.AdminPasswordRevealPermissions
}

// GetAdminPasswordRevealPermissionsOk returns a tuple with the AdminPasswordRevealPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPermissionsDto) GetAdminPasswordRevealPermissionsOk() (*AdminPasswordRevealPermissions, bool) {
	if o == nil || IsNil(o.AdminPasswordRevealPermissions) {
		return nil, false
	}
	return o.AdminPasswordRevealPermissions, true
}

// HasAdminPasswordRevealPermissions returns a boolean if a field has been set.
func (o *UpdateUserPermissionsDto) HasAdminPasswordRevealPermissions() bool {
	if o != nil && !IsNil(o.AdminPasswordRevealPermissions) {
		return true
	}

	return false
}

// SetAdminPasswordRevealPermissions gets a reference to the given AdminPasswordRevealPermissions and assigns it to the AdminPasswordRevealPermissions field.
func (o *UpdateUserPermissionsDto) SetAdminPasswordRevealPermissions(v AdminPasswordRevealPermissions) {
	o.AdminPasswordRevealPermissions = &v
}

// GetSpecialPermissions returns the SpecialPermissions field value if set, zero value otherwise.
func (o *UpdateUserPermissionsDto) GetSpecialPermissions() SpecialPermissions {
	if o == nil || IsNil(o.SpecialPermissions) {
		var ret SpecialPermissions
		return ret
	}
	return *o.SpecialPermissions
}

// GetSpecialPermissionsOk returns a tuple with the SpecialPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPermissionsDto) GetSpecialPermissionsOk() (*SpecialPermissions, bool) {
	if o == nil || IsNil(o.SpecialPermissions) {
		return nil, false
	}
	return o.SpecialPermissions, true
}

// HasSpecialPermissions returns a boolean if a field has been set.
func (o *UpdateUserPermissionsDto) HasSpecialPermissions() bool {
	if o != nil && !IsNil(o.SpecialPermissions) {
		return true
	}

	return false
}

// SetSpecialPermissions gets a reference to the given SpecialPermissions and assigns it to the SpecialPermissions field.
func (o *UpdateUserPermissionsDto) SetSpecialPermissions(v SpecialPermissions) {
	o.SpecialPermissions = &v
}

func (o UpdateUserPermissionsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserPermissionsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminPasswordRevealPermissions) {
		toSerialize["adminPasswordRevealPermissions"] = o.AdminPasswordRevealPermissions
	}
	if !IsNil(o.SpecialPermissions) {
		toSerialize["specialPermissions"] = o.SpecialPermissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateUserPermissionsDto) UnmarshalJSON(data []byte) (err error) {
	varUpdateUserPermissionsDto := _UpdateUserPermissionsDto{}

	err = json.Unmarshal(data, &varUpdateUserPermissionsDto)

	if err != nil {
		return err
	}

	*o = UpdateUserPermissionsDto(varUpdateUserPermissionsDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "adminPasswordRevealPermissions")
		delete(additionalProperties, "specialPermissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateUserPermissionsDto struct {
	value *UpdateUserPermissionsDto
	isSet bool
}

func (v NullableUpdateUserPermissionsDto) Get() *UpdateUserPermissionsDto {
	return v.value
}

func (v *NullableUpdateUserPermissionsDto) Set(val *UpdateUserPermissionsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserPermissionsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserPermissionsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserPermissionsDto(val *UpdateUserPermissionsDto) *NullableUpdateUserPermissionsDto {
	return &NullableUpdateUserPermissionsDto{value: val, isSet: true}
}

func (v NullableUpdateUserPermissionsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserPermissionsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


