/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// LogicalNetworkKind the model 'LogicalNetworkKind'
type LogicalNetworkKind string

// List of LogicalNetworkKind
const (
	LOGICALNETWORKKIND_VLAN LogicalNetworkKind = "vlan"
	LOGICALNETWORKKIND_VXLAN LogicalNetworkKind = "vxlan"
)

// All allowed values of LogicalNetworkKind enum
var AllowedLogicalNetworkKindEnumValues = []LogicalNetworkKind{
	"vlan",
	"vxlan",
}

func (v *LogicalNetworkKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogicalNetworkKind(value)
	for _, existing := range AllowedLogicalNetworkKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogicalNetworkKind", value)
}

// NewLogicalNetworkKindFromValue returns a pointer to a valid LogicalNetworkKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogicalNetworkKindFromValue(v string) (*LogicalNetworkKind, error) {
	ev := LogicalNetworkKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogicalNetworkKind: valid values are %v", v, AllowedLogicalNetworkKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogicalNetworkKind) IsValid() bool {
	for _, existing := range AllowedLogicalNetworkKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogicalNetworkKind value
func (v LogicalNetworkKind) Ptr() *LogicalNetworkKind {
	return &v
}

type NullableLogicalNetworkKind struct {
	value *LogicalNetworkKind
	isSet bool
}

func (v NullableLogicalNetworkKind) Get() *LogicalNetworkKind {
	return v.value
}

func (v *NullableLogicalNetworkKind) Set(val *LogicalNetworkKind) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalNetworkKind) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalNetworkKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalNetworkKind(val *LogicalNetworkKind) *NullableLogicalNetworkKind {
	return &NullableLogicalNetworkKind{value: val, isSet: true}
}

func (v NullableLogicalNetworkKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalNetworkKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

