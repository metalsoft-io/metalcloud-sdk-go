/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// FirmwareBaselineAPIService FirmwareBaselineAPI service
type FirmwareBaselineAPIService service

type FirmwareBaselineAPICreateFirmwareBaselineRequest struct {
	ctx context.Context
	ApiService *FirmwareBaselineAPIService
	createFirmwareBaseline *CreateFirmwareBaseline
}

func (r FirmwareBaselineAPICreateFirmwareBaselineRequest) CreateFirmwareBaseline(createFirmwareBaseline CreateFirmwareBaseline) FirmwareBaselineAPICreateFirmwareBaselineRequest {
	r.createFirmwareBaseline = &createFirmwareBaseline
	return r
}

func (r FirmwareBaselineAPICreateFirmwareBaselineRequest) Execute() (*CreateFirmwareBaseline, *http.Response, error) {
	return r.ApiService.CreateFirmwareBaselineExecute(r)
}

/*
CreateFirmwareBaseline Create a new firmware baseline

Creates a new firmware baseline and returns it

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwareBaselineAPICreateFirmwareBaselineRequest
*/
func (a *FirmwareBaselineAPIService) CreateFirmwareBaseline(ctx context.Context) FirmwareBaselineAPICreateFirmwareBaselineRequest {
	return FirmwareBaselineAPICreateFirmwareBaselineRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateFirmwareBaseline
func (a *FirmwareBaselineAPIService) CreateFirmwareBaselineExecute(r FirmwareBaselineAPICreateFirmwareBaselineRequest) (*CreateFirmwareBaseline, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateFirmwareBaseline
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBaselineAPIService.CreateFirmwareBaseline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/baseline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createFirmwareBaseline == nil {
		return localVarReturnValue, nil, reportError("createFirmwareBaseline is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createFirmwareBaseline
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwareBaselineAPIDeleteFirmwareBaselineRequest struct {
	ctx context.Context
	ApiService *FirmwareBaselineAPIService
	firmwareBaselineId float32
}

func (r FirmwareBaselineAPIDeleteFirmwareBaselineRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFirmwareBaselineExecute(r)
}

/*
DeleteFirmwareBaseline Delete Firmware Baseline

Deletes a firmware baseline

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwareBaselineId The firmware baseline id
 @return FirmwareBaselineAPIDeleteFirmwareBaselineRequest
*/
func (a *FirmwareBaselineAPIService) DeleteFirmwareBaseline(ctx context.Context, firmwareBaselineId float32) FirmwareBaselineAPIDeleteFirmwareBaselineRequest {
	return FirmwareBaselineAPIDeleteFirmwareBaselineRequest{
		ApiService: a,
		ctx: ctx,
		firmwareBaselineId: firmwareBaselineId,
	}
}

// Execute executes the request
func (a *FirmwareBaselineAPIService) DeleteFirmwareBaselineExecute(r FirmwareBaselineAPIDeleteFirmwareBaselineRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBaselineAPIService.DeleteFirmwareBaseline")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/baseline/{firmwareBaselineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwareBaselineId"+"}", url.PathEscape(parameterValueToString(r.firmwareBaselineId, "firmwareBaselineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FirmwareBaselineAPIGetFirmwareBaselineRequest struct {
	ctx context.Context
	ApiService *FirmwareBaselineAPIService
	firmwareBaselineId float32
}

func (r FirmwareBaselineAPIGetFirmwareBaselineRequest) Execute() (*FirmwareBaseline, *http.Response, error) {
	return r.ApiService.GetFirmwareBaselineExecute(r)
}

/*
GetFirmwareBaseline Get Firmware Baseline

Returns a firmware baseline

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwareBaselineId The firmware baseline id
 @return FirmwareBaselineAPIGetFirmwareBaselineRequest
*/
func (a *FirmwareBaselineAPIService) GetFirmwareBaseline(ctx context.Context, firmwareBaselineId float32) FirmwareBaselineAPIGetFirmwareBaselineRequest {
	return FirmwareBaselineAPIGetFirmwareBaselineRequest{
		ApiService: a,
		ctx: ctx,
		firmwareBaselineId: firmwareBaselineId,
	}
}

// Execute executes the request
//  @return FirmwareBaseline
func (a *FirmwareBaselineAPIService) GetFirmwareBaselineExecute(r FirmwareBaselineAPIGetFirmwareBaselineRequest) (*FirmwareBaseline, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirmwareBaseline
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBaselineAPIService.GetFirmwareBaseline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/baseline/{firmwareBaselineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwareBaselineId"+"}", url.PathEscape(parameterValueToString(r.firmwareBaselineId, "firmwareBaselineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwareBaselineAPIGetFirmwareBaselinesRequest struct {
	ctx context.Context
	ApiService *FirmwareBaselineAPIService
	page *float32
	limit *float32
	filterLevel *[]string
	filterLevelFilter *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
	select_ *string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r FirmwareBaselineAPIGetFirmwareBaselinesRequest) Page(page float32) FirmwareBaselineAPIGetFirmwareBaselinesRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r FirmwareBaselineAPIGetFirmwareBaselinesRequest) Limit(limit float32) FirmwareBaselineAPIGetFirmwareBaselinesRequest {
	r.limit = &limit
	return r
}

// Filter by level query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.level&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.level&#x3D;$not:$like:John Doe&amp;filter.level&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBaselineAPIGetFirmwareBaselinesRequest) FilterLevel(filterLevel []string) FirmwareBaselineAPIGetFirmwareBaselinesRequest {
	r.filterLevel = &filterLevel
	return r
}

// Filter by levelFilter query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.levelFilter&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.levelFilter&#x3D;$not:$like:John Doe&amp;filter.levelFilter&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r FirmwareBaselineAPIGetFirmwareBaselinesRequest) FilterLevelFilter(filterLevelFilter []string) FirmwareBaselineAPIGetFirmwareBaselinesRequest {
	r.filterLevelFilter = &filterLevelFilter
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;name&lt;/li&gt;&lt;/ul&gt;       
func (r FirmwareBaselineAPIGetFirmwareBaselinesRequest) SortBy(sortBy []string) FirmwareBaselineAPIGetFirmwareBaselinesRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r FirmwareBaselineAPIGetFirmwareBaselinesRequest) Search(search string) FirmwareBaselineAPIGetFirmwareBaselinesRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; name,levelFilter           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;name&lt;/li&gt; &lt;li&gt;levelFilter&lt;/li&gt;&lt;/ul&gt;         
func (r FirmwareBaselineAPIGetFirmwareBaselinesRequest) SearchBy(searchBy []string) FirmwareBaselineAPIGetFirmwareBaselinesRequest {
	r.searchBy = &searchBy
	return r
}

// List of fields to select.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; id,name,description,catalog,level           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields returns. If you want to select only some fields, provide them in query param           &lt;/p&gt;       
func (r FirmwareBaselineAPIGetFirmwareBaselinesRequest) Select_(select_ string) FirmwareBaselineAPIGetFirmwareBaselinesRequest {
	r.select_ = &select_
	return r
}

func (r FirmwareBaselineAPIGetFirmwareBaselinesRequest) Execute() (*FirmwareBaselinePaginatedList, *http.Response, error) {
	return r.ApiService.GetFirmwareBaselinesExecute(r)
}

/*
GetFirmwareBaselines Get Firmware Baselines

Returns a list of firmware baselines

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FirmwareBaselineAPIGetFirmwareBaselinesRequest
*/
func (a *FirmwareBaselineAPIService) GetFirmwareBaselines(ctx context.Context) FirmwareBaselineAPIGetFirmwareBaselinesRequest {
	return FirmwareBaselineAPIGetFirmwareBaselinesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FirmwareBaselinePaginatedList
func (a *FirmwareBaselineAPIService) GetFirmwareBaselinesExecute(r FirmwareBaselineAPIGetFirmwareBaselinesRequest) (*FirmwareBaselinePaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirmwareBaselinePaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBaselineAPIService.GetFirmwareBaselines")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/baseline"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterLevel != nil {
		t := *r.filterLevel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.level", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.level", t, "form", "multi")
		}
	}
	if r.filterLevelFilter != nil {
		t := *r.filterLevelFilter
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.levelFilter", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.levelFilter", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FirmwareBaselineAPIUpdateFirmwareBaselineRequest struct {
	ctx context.Context
	ApiService *FirmwareBaselineAPIService
	firmwareBaselineId float32
	updateFirmwareBaseline *UpdateFirmwareBaseline
}

func (r FirmwareBaselineAPIUpdateFirmwareBaselineRequest) UpdateFirmwareBaseline(updateFirmwareBaseline UpdateFirmwareBaseline) FirmwareBaselineAPIUpdateFirmwareBaselineRequest {
	r.updateFirmwareBaseline = &updateFirmwareBaseline
	return r
}

func (r FirmwareBaselineAPIUpdateFirmwareBaselineRequest) Execute() (*FirmwareBaseline, *http.Response, error) {
	return r.ApiService.UpdateFirmwareBaselineExecute(r)
}

/*
UpdateFirmwareBaseline Update Firmware Baseline

Updates a firmware baseline

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param firmwareBaselineId The firmware baseline id
 @return FirmwareBaselineAPIUpdateFirmwareBaselineRequest
*/
func (a *FirmwareBaselineAPIService) UpdateFirmwareBaseline(ctx context.Context, firmwareBaselineId float32) FirmwareBaselineAPIUpdateFirmwareBaselineRequest {
	return FirmwareBaselineAPIUpdateFirmwareBaselineRequest{
		ApiService: a,
		ctx: ctx,
		firmwareBaselineId: firmwareBaselineId,
	}
}

// Execute executes the request
//  @return FirmwareBaseline
func (a *FirmwareBaselineAPIService) UpdateFirmwareBaselineExecute(r FirmwareBaselineAPIUpdateFirmwareBaselineRequest) (*FirmwareBaseline, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FirmwareBaseline
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FirmwareBaselineAPIService.UpdateFirmwareBaseline")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/firmware/baseline/{firmwareBaselineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"firmwareBaselineId"+"}", url.PathEscape(parameterValueToString(r.firmwareBaselineId, "firmwareBaselineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateFirmwareBaseline == nil {
		return localVarReturnValue, nil, reportError("updateFirmwareBaseline is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateFirmwareBaseline
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
