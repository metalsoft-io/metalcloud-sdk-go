/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ServerInstanceUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceUpdate{}

// ServerInstanceUpdate struct for ServerInstanceUpdate
type ServerInstanceUpdate struct {
	// The server instance label.
	Label *string `json:"label,omitempty"`
	// The server type ID.
	ServerTypeId *int32 `json:"serverTypeId,omitempty"`
	// Custom hostname for the DNS record name. If set, this will be used as part of the DNS record name instead of the default \"instance\". The hostname must be a valid DNS subdomain and can only contain alphanumeric characters, hyphens, and underscores. This will only take effect if the property \"provisionInstanceDnsRecords\" is true. It will be automatically suffixed with the server instance ID (e.g., \"-34\") to ensure the uniqueness of the resulting DNS name.
	Hostname *string `json:"hostname,omitempty"`
	// The template id of the operating system to deploy on the server. Can be null in which case no OS will be deployed but all operations will continue as normal. 
	OsTemplateId *int32 `json:"osTemplateId,omitempty"`
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// Custom Storage Profile for the Instance.
	CustomStorageProfile *ServerInstanceStorageProfile `json:"customStorageProfile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceUpdate ServerInstanceUpdate

// NewServerInstanceUpdate instantiates a new ServerInstanceUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceUpdate() *ServerInstanceUpdate {
	this := ServerInstanceUpdate{}
	return &this
}

// NewServerInstanceUpdateWithDefaults instantiates a new ServerInstanceUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceUpdateWithDefaults() *ServerInstanceUpdate {
	this := ServerInstanceUpdate{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ServerInstanceUpdate) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceUpdate) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ServerInstanceUpdate) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ServerInstanceUpdate) SetLabel(v string) {
	o.Label = &v
}

// GetServerTypeId returns the ServerTypeId field value if set, zero value otherwise.
func (o *ServerInstanceUpdate) GetServerTypeId() int32 {
	if o == nil || IsNil(o.ServerTypeId) {
		var ret int32
		return ret
	}
	return *o.ServerTypeId
}

// GetServerTypeIdOk returns a tuple with the ServerTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceUpdate) GetServerTypeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerTypeId) {
		return nil, false
	}
	return o.ServerTypeId, true
}

// HasServerTypeId returns a boolean if a field has been set.
func (o *ServerInstanceUpdate) HasServerTypeId() bool {
	if o != nil && !IsNil(o.ServerTypeId) {
		return true
	}

	return false
}

// SetServerTypeId gets a reference to the given int32 and assigns it to the ServerTypeId field.
func (o *ServerInstanceUpdate) SetServerTypeId(v int32) {
	o.ServerTypeId = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ServerInstanceUpdate) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceUpdate) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ServerInstanceUpdate) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ServerInstanceUpdate) SetHostname(v string) {
	o.Hostname = &v
}

// GetOsTemplateId returns the OsTemplateId field value if set, zero value otherwise.
func (o *ServerInstanceUpdate) GetOsTemplateId() int32 {
	if o == nil || IsNil(o.OsTemplateId) {
		var ret int32
		return ret
	}
	return *o.OsTemplateId
}

// GetOsTemplateIdOk returns a tuple with the OsTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceUpdate) GetOsTemplateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OsTemplateId) {
		return nil, false
	}
	return o.OsTemplateId, true
}

// HasOsTemplateId returns a boolean if a field has been set.
func (o *ServerInstanceUpdate) HasOsTemplateId() bool {
	if o != nil && !IsNil(o.OsTemplateId) {
		return true
	}

	return false
}

// SetOsTemplateId gets a reference to the given int32 and assigns it to the OsTemplateId field.
func (o *ServerInstanceUpdate) SetOsTemplateId(v int32) {
	o.OsTemplateId = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *ServerInstanceUpdate) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceUpdate) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *ServerInstanceUpdate) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *ServerInstanceUpdate) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetCustomStorageProfile returns the CustomStorageProfile field value if set, zero value otherwise.
func (o *ServerInstanceUpdate) GetCustomStorageProfile() ServerInstanceStorageProfile {
	if o == nil || IsNil(o.CustomStorageProfile) {
		var ret ServerInstanceStorageProfile
		return ret
	}
	return *o.CustomStorageProfile
}

// GetCustomStorageProfileOk returns a tuple with the CustomStorageProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceUpdate) GetCustomStorageProfileOk() (*ServerInstanceStorageProfile, bool) {
	if o == nil || IsNil(o.CustomStorageProfile) {
		return nil, false
	}
	return o.CustomStorageProfile, true
}

// HasCustomStorageProfile returns a boolean if a field has been set.
func (o *ServerInstanceUpdate) HasCustomStorageProfile() bool {
	if o != nil && !IsNil(o.CustomStorageProfile) {
		return true
	}

	return false
}

// SetCustomStorageProfile gets a reference to the given ServerInstanceStorageProfile and assigns it to the CustomStorageProfile field.
func (o *ServerInstanceUpdate) SetCustomStorageProfile(v ServerInstanceStorageProfile) {
	o.CustomStorageProfile = &v
}

func (o ServerInstanceUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.ServerTypeId) {
		toSerialize["serverTypeId"] = o.ServerTypeId
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.OsTemplateId) {
		toSerialize["osTemplateId"] = o.OsTemplateId
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	if !IsNil(o.CustomStorageProfile) {
		toSerialize["customStorageProfile"] = o.CustomStorageProfile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceUpdate) UnmarshalJSON(data []byte) (err error) {
	varServerInstanceUpdate := _ServerInstanceUpdate{}

	err = json.Unmarshal(data, &varServerInstanceUpdate)

	if err != nil {
		return err
	}

	*o = ServerInstanceUpdate(varServerInstanceUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "serverTypeId")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "osTemplateId")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "customStorageProfile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceUpdate struct {
	value *ServerInstanceUpdate
	isSet bool
}

func (v NullableServerInstanceUpdate) Get() *ServerInstanceUpdate {
	return v.value
}

func (v *NullableServerInstanceUpdate) Set(val *ServerInstanceUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceUpdate(val *ServerInstanceUpdate) *NullableServerInstanceUpdate {
	return &NullableServerInstanceUpdate{value: val, isSet: true}
}

func (v NullableServerInstanceUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


