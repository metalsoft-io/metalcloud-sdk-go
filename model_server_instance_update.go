/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ServerInstanceUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceUpdate{}

// ServerInstanceUpdate struct for ServerInstanceUpdate
type ServerInstanceUpdate struct {
	// The server instance label.
	Label *string `json:"label,omitempty"`
	// The server type ID.
	ServerTypeId *int32 `json:"serverTypeId,omitempty"`
	// The template id of the operating system to deploy on the server. Can be null in which case no OS will be deployed but all operations will continue as normal. 
	TemplateId *int32 `json:"templateId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceUpdate ServerInstanceUpdate

// NewServerInstanceUpdate instantiates a new ServerInstanceUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceUpdate() *ServerInstanceUpdate {
	this := ServerInstanceUpdate{}
	return &this
}

// NewServerInstanceUpdateWithDefaults instantiates a new ServerInstanceUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceUpdateWithDefaults() *ServerInstanceUpdate {
	this := ServerInstanceUpdate{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ServerInstanceUpdate) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceUpdate) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ServerInstanceUpdate) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ServerInstanceUpdate) SetLabel(v string) {
	o.Label = &v
}

// GetServerTypeId returns the ServerTypeId field value if set, zero value otherwise.
func (o *ServerInstanceUpdate) GetServerTypeId() int32 {
	if o == nil || IsNil(o.ServerTypeId) {
		var ret int32
		return ret
	}
	return *o.ServerTypeId
}

// GetServerTypeIdOk returns a tuple with the ServerTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceUpdate) GetServerTypeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerTypeId) {
		return nil, false
	}
	return o.ServerTypeId, true
}

// HasServerTypeId returns a boolean if a field has been set.
func (o *ServerInstanceUpdate) HasServerTypeId() bool {
	if o != nil && !IsNil(o.ServerTypeId) {
		return true
	}

	return false
}

// SetServerTypeId gets a reference to the given int32 and assigns it to the ServerTypeId field.
func (o *ServerInstanceUpdate) SetServerTypeId(v int32) {
	o.ServerTypeId = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *ServerInstanceUpdate) GetTemplateId() int32 {
	if o == nil || IsNil(o.TemplateId) {
		var ret int32
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceUpdate) GetTemplateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TemplateId) {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *ServerInstanceUpdate) HasTemplateId() bool {
	if o != nil && !IsNil(o.TemplateId) {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given int32 and assigns it to the TemplateId field.
func (o *ServerInstanceUpdate) SetTemplateId(v int32) {
	o.TemplateId = &v
}

func (o ServerInstanceUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.ServerTypeId) {
		toSerialize["serverTypeId"] = o.ServerTypeId
	}
	if !IsNil(o.TemplateId) {
		toSerialize["templateId"] = o.TemplateId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceUpdate) UnmarshalJSON(data []byte) (err error) {
	varServerInstanceUpdate := _ServerInstanceUpdate{}

	err = json.Unmarshal(data, &varServerInstanceUpdate)

	if err != nil {
		return err
	}

	*o = ServerInstanceUpdate(varServerInstanceUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "serverTypeId")
		delete(additionalProperties, "templateId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceUpdate struct {
	value *ServerInstanceUpdate
	isSet bool
}

func (v NullableServerInstanceUpdate) Get() *ServerInstanceUpdate {
	return v.value
}

func (v *NullableServerInstanceUpdate) Set(val *ServerInstanceUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceUpdate(val *ServerInstanceUpdate) *NullableServerInstanceUpdate {
	return &NullableServerInstanceUpdate{value: val, isSet: true}
}

func (v NullableServerInstanceUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


