/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the DetailedReportEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetailedReportEntry{}

// DetailedReportEntry struct for DetailedReportEntry
type DetailedReportEntry struct {
	// Shared drive resources
	SharedDrive []SharedDriveResourceItem `json:"sharedDrive,omitempty"`
	// Drive resources
	Drive []DriveResourceItem `json:"drive,omitempty"`
	// Instance resources
	Instance []InstanceResourceItem `json:"instance,omitempty"`
	// Subnet resources
	Subnet []SubnetResourceItem `json:"subnet,omitempty"`
	// Instance license resources
	InstanceLicense []InstanceLicenseResourceItem `json:"instanceLicense,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DetailedReportEntry DetailedReportEntry

// NewDetailedReportEntry instantiates a new DetailedReportEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetailedReportEntry() *DetailedReportEntry {
	this := DetailedReportEntry{}
	return &this
}

// NewDetailedReportEntryWithDefaults instantiates a new DetailedReportEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetailedReportEntryWithDefaults() *DetailedReportEntry {
	this := DetailedReportEntry{}
	return &this
}

// GetSharedDrive returns the SharedDrive field value if set, zero value otherwise.
func (o *DetailedReportEntry) GetSharedDrive() []SharedDriveResourceItem {
	if o == nil || IsNil(o.SharedDrive) {
		var ret []SharedDriveResourceItem
		return ret
	}
	return o.SharedDrive
}

// GetSharedDriveOk returns a tuple with the SharedDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedReportEntry) GetSharedDriveOk() ([]SharedDriveResourceItem, bool) {
	if o == nil || IsNil(o.SharedDrive) {
		return nil, false
	}
	return o.SharedDrive, true
}

// HasSharedDrive returns a boolean if a field has been set.
func (o *DetailedReportEntry) HasSharedDrive() bool {
	if o != nil && !IsNil(o.SharedDrive) {
		return true
	}

	return false
}

// SetSharedDrive gets a reference to the given []SharedDriveResourceItem and assigns it to the SharedDrive field.
func (o *DetailedReportEntry) SetSharedDrive(v []SharedDriveResourceItem) {
	o.SharedDrive = v
}

// GetDrive returns the Drive field value if set, zero value otherwise.
func (o *DetailedReportEntry) GetDrive() []DriveResourceItem {
	if o == nil || IsNil(o.Drive) {
		var ret []DriveResourceItem
		return ret
	}
	return o.Drive
}

// GetDriveOk returns a tuple with the Drive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedReportEntry) GetDriveOk() ([]DriveResourceItem, bool) {
	if o == nil || IsNil(o.Drive) {
		return nil, false
	}
	return o.Drive, true
}

// HasDrive returns a boolean if a field has been set.
func (o *DetailedReportEntry) HasDrive() bool {
	if o != nil && !IsNil(o.Drive) {
		return true
	}

	return false
}

// SetDrive gets a reference to the given []DriveResourceItem and assigns it to the Drive field.
func (o *DetailedReportEntry) SetDrive(v []DriveResourceItem) {
	o.Drive = v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *DetailedReportEntry) GetInstance() []InstanceResourceItem {
	if o == nil || IsNil(o.Instance) {
		var ret []InstanceResourceItem
		return ret
	}
	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedReportEntry) GetInstanceOk() ([]InstanceResourceItem, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *DetailedReportEntry) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given []InstanceResourceItem and assigns it to the Instance field.
func (o *DetailedReportEntry) SetInstance(v []InstanceResourceItem) {
	o.Instance = v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *DetailedReportEntry) GetSubnet() []SubnetResourceItem {
	if o == nil || IsNil(o.Subnet) {
		var ret []SubnetResourceItem
		return ret
	}
	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedReportEntry) GetSubnetOk() ([]SubnetResourceItem, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *DetailedReportEntry) HasSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given []SubnetResourceItem and assigns it to the Subnet field.
func (o *DetailedReportEntry) SetSubnet(v []SubnetResourceItem) {
	o.Subnet = v
}

// GetInstanceLicense returns the InstanceLicense field value if set, zero value otherwise.
func (o *DetailedReportEntry) GetInstanceLicense() []InstanceLicenseResourceItem {
	if o == nil || IsNil(o.InstanceLicense) {
		var ret []InstanceLicenseResourceItem
		return ret
	}
	return o.InstanceLicense
}

// GetInstanceLicenseOk returns a tuple with the InstanceLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetailedReportEntry) GetInstanceLicenseOk() ([]InstanceLicenseResourceItem, bool) {
	if o == nil || IsNil(o.InstanceLicense) {
		return nil, false
	}
	return o.InstanceLicense, true
}

// HasInstanceLicense returns a boolean if a field has been set.
func (o *DetailedReportEntry) HasInstanceLicense() bool {
	if o != nil && !IsNil(o.InstanceLicense) {
		return true
	}

	return false
}

// SetInstanceLicense gets a reference to the given []InstanceLicenseResourceItem and assigns it to the InstanceLicense field.
func (o *DetailedReportEntry) SetInstanceLicense(v []InstanceLicenseResourceItem) {
	o.InstanceLicense = v
}

func (o DetailedReportEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetailedReportEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SharedDrive) {
		toSerialize["sharedDrive"] = o.SharedDrive
	}
	if !IsNil(o.Drive) {
		toSerialize["drive"] = o.Drive
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if !IsNil(o.InstanceLicense) {
		toSerialize["instanceLicense"] = o.InstanceLicense
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DetailedReportEntry) UnmarshalJSON(data []byte) (err error) {
	varDetailedReportEntry := _DetailedReportEntry{}

	err = json.Unmarshal(data, &varDetailedReportEntry)

	if err != nil {
		return err
	}

	*o = DetailedReportEntry(varDetailedReportEntry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sharedDrive")
		delete(additionalProperties, "drive")
		delete(additionalProperties, "instance")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "instanceLicense")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDetailedReportEntry struct {
	value *DetailedReportEntry
	isSet bool
}

func (v NullableDetailedReportEntry) Get() *DetailedReportEntry {
	return v.value
}

func (v *NullableDetailedReportEntry) Set(val *DetailedReportEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableDetailedReportEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableDetailedReportEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetailedReportEntry(val *DetailedReportEntry) *NullableDetailedReportEntry {
	return &NullableDetailedReportEntry{value: val, isSet: true}
}

func (v NullableDetailedReportEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetailedReportEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


