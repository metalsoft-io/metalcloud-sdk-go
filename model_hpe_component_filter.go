/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the HpeComponentFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HpeComponentFilter{}

// HpeComponentFilter struct for HpeComponentFilter
type HpeComponentFilter struct {
	// Discriminator field set to hpe
	Vendor string `json:"vendor"`
	// ID of the HP component filter
	Id float32 `json:"id"`
	// Device class for HP
	DeviceClass string `json:"deviceClass"`
	// Targets for HP
	Targets []string `json:"targets"`
	AdditionalProperties map[string]interface{}
}

type _HpeComponentFilter HpeComponentFilter

// NewHpeComponentFilter instantiates a new HpeComponentFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHpeComponentFilter(vendor string, id float32, deviceClass string, targets []string) *HpeComponentFilter {
	this := HpeComponentFilter{}
	this.Vendor = vendor
	this.Id = id
	this.DeviceClass = deviceClass
	this.Targets = targets
	return &this
}

// NewHpeComponentFilterWithDefaults instantiates a new HpeComponentFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHpeComponentFilterWithDefaults() *HpeComponentFilter {
	this := HpeComponentFilter{}
	return &this
}

// GetVendor returns the Vendor field value
func (o *HpeComponentFilter) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *HpeComponentFilter) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *HpeComponentFilter) SetVendor(v string) {
	o.Vendor = v
}

// GetId returns the Id field value
func (o *HpeComponentFilter) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HpeComponentFilter) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HpeComponentFilter) SetId(v float32) {
	o.Id = v
}

// GetDeviceClass returns the DeviceClass field value
func (o *HpeComponentFilter) GetDeviceClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceClass
}

// GetDeviceClassOk returns a tuple with the DeviceClass field value
// and a boolean to check if the value has been set.
func (o *HpeComponentFilter) GetDeviceClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceClass, true
}

// SetDeviceClass sets field value
func (o *HpeComponentFilter) SetDeviceClass(v string) {
	o.DeviceClass = v
}

// GetTargets returns the Targets field value
func (o *HpeComponentFilter) GetTargets() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value
// and a boolean to check if the value has been set.
func (o *HpeComponentFilter) GetTargetsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Targets, true
}

// SetTargets sets field value
func (o *HpeComponentFilter) SetTargets(v []string) {
	o.Targets = v
}

func (o HpeComponentFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HpeComponentFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vendor"] = o.Vendor
	toSerialize["id"] = o.Id
	toSerialize["deviceClass"] = o.DeviceClass
	toSerialize["targets"] = o.Targets

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HpeComponentFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vendor",
		"id",
		"deviceClass",
		"targets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHpeComponentFilter := _HpeComponentFilter{}

	err = json.Unmarshal(data, &varHpeComponentFilter)

	if err != nil {
		return err
	}

	*o = HpeComponentFilter(varHpeComponentFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "id")
		delete(additionalProperties, "deviceClass")
		delete(additionalProperties, "targets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHpeComponentFilter struct {
	value *HpeComponentFilter
	isSet bool
}

func (v NullableHpeComponentFilter) Get() *HpeComponentFilter {
	return v.value
}

func (v *NullableHpeComponentFilter) Set(val *HpeComponentFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableHpeComponentFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableHpeComponentFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHpeComponentFilter(val *HpeComponentFilter) *NullableHpeComponentFilter {
	return &NullableHpeComponentFilter{value: val, isSet: true}
}

func (v NullableHpeComponentFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHpeComponentFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


