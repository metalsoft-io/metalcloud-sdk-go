/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the EndpointInstanceUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointInstanceUpdate{}

// EndpointInstanceUpdate struct for EndpointInstanceUpdate
type EndpointInstanceUpdate struct {
	// The endpoint instance label.
	Label *string `json:"label,omitempty"`
	// Id of endpoint for this Instance.
	EndpointId *int32 `json:"endpointId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EndpointInstanceUpdate EndpointInstanceUpdate

// NewEndpointInstanceUpdate instantiates a new EndpointInstanceUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointInstanceUpdate() *EndpointInstanceUpdate {
	this := EndpointInstanceUpdate{}
	return &this
}

// NewEndpointInstanceUpdateWithDefaults instantiates a new EndpointInstanceUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointInstanceUpdateWithDefaults() *EndpointInstanceUpdate {
	this := EndpointInstanceUpdate{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *EndpointInstanceUpdate) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceUpdate) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *EndpointInstanceUpdate) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *EndpointInstanceUpdate) SetLabel(v string) {
	o.Label = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *EndpointInstanceUpdate) GetEndpointId() int32 {
	if o == nil || IsNil(o.EndpointId) {
		var ret int32
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointInstanceUpdate) GetEndpointIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EndpointId) {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *EndpointInstanceUpdate) HasEndpointId() bool {
	if o != nil && !IsNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given int32 and assigns it to the EndpointId field.
func (o *EndpointInstanceUpdate) SetEndpointId(v int32) {
	o.EndpointId = &v
}

func (o EndpointInstanceUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointInstanceUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.EndpointId) {
		toSerialize["endpointId"] = o.EndpointId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EndpointInstanceUpdate) UnmarshalJSON(data []byte) (err error) {
	varEndpointInstanceUpdate := _EndpointInstanceUpdate{}

	err = json.Unmarshal(data, &varEndpointInstanceUpdate)

	if err != nil {
		return err
	}

	*o = EndpointInstanceUpdate(varEndpointInstanceUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "endpointId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEndpointInstanceUpdate struct {
	value *EndpointInstanceUpdate
	isSet bool
}

func (v NullableEndpointInstanceUpdate) Get() *EndpointInstanceUpdate {
	return v.value
}

func (v *NullableEndpointInstanceUpdate) Set(val *EndpointInstanceUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointInstanceUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointInstanceUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointInstanceUpdate(val *EndpointInstanceUpdate) *NullableEndpointInstanceUpdate {
	return &NullableEndpointInstanceUpdate{value: val, isSet: true}
}

func (v NullableEndpointInstanceUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointInstanceUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


