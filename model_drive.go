/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the Drive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Drive{}

// Drive struct for Drive
type Drive struct {
	// Label of the Drive.
	Label string `json:"label"`
	// Id of the storage pool the Drive is assigned to
	StoragePoolId *float32 `json:"storagePoolId,omitempty"`
	// Disk size in MB for Drive
	SizeMb float32 `json:"sizeMb"`
	// The name of the storage image used by the Drive.
	StorageImageName *string `json:"storageImageName,omitempty"`
	// Service status of the Drive
	StorageType string `json:"storageType"`
	// The IO limit policy of the Drive.
	IoLimitPolicy *string `json:"ioLimitPolicy,omitempty"`
	// Subdomain of the Drive.
	Subdomain *string `json:"subdomain,omitempty"`
	// Id of the Logical Network for the Drive.
	LogicalNetworkId *float32 `json:"logicalNetworkId,omitempty"`
	// Timestamp of the Drive last update.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Id of the Drive
	Id float32 `json:"id"`
	// Revision of the Drive State
	Revision float32 `json:"revision"`
	// Infrastructure id of the Drive
	InfrastructureId float32 `json:"infrastructureId"`
	// Service status of the Drive
	ServiceStatus string `json:"serviceStatus"`
	// Cached information of the real size of the storage in MB.
	StorageRealSizeCachedMb *float32 `json:"storageRealSizeCachedMb,omitempty"`
	// Cached information of the real size of the storage (including snapshots) in MB.
	StorageRealSizeWithSnapshotsCachedMb *float32 `json:"storageRealSizeWithSnapshotsCachedMb,omitempty"`
	// Cached information of the virtual size of the storage in MB.
	StorageVirtualSizeCachedMb *float32 `json:"storageVirtualSizeCachedMb,omitempty"`
	// Timestamp of the latest update of cached information for the Drive.
	StorageUpdatedTimestamp string `json:"storageUpdatedTimestamp"`
	// Targets of the Drive.
	Targets []map[string]interface{} `json:"targets,omitempty"`
	Wwn *string `json:"wwn,omitempty"`
	// Allocation affinity of the Drive
	AllocationAffinity string `json:"allocationAffinity"`
	// Provisioning protocol of the Drive
	ProvisioningProtocol string `json:"provisioningProtocol"`
	// Subdomain permanent of the Drive.
	SubdomainPermanent *string `json:"subdomainPermanent,omitempty"`
	// Id of the DNS subdomain for the Drive.
	DnsSubdomainId *float32 `json:"dnsSubdomainId,omitempty"`
	// Id of the permanent DNS subdomain for the Drive.
	DnsSubdomainPermanentId *float32 `json:"dnsSubdomainPermanentId,omitempty"`
	// The current changes to be deployed for the Drive.
	Config DriveConfiguration `json:"config"`
	// Timestamp of the Drive creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Meta information of the Drive.
	Meta DriveMeta `json:"meta"`
	AdditionalProperties map[string]interface{}
}

type _Drive Drive

// NewDrive instantiates a new Drive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDrive(label string, sizeMb float32, storageType string, updatedTimestamp string, id float32, revision float32, infrastructureId float32, serviceStatus string, storageUpdatedTimestamp string, allocationAffinity string, provisioningProtocol string, config DriveConfiguration, createdTimestamp string, meta DriveMeta) *Drive {
	this := Drive{}
	this.Label = label
	this.SizeMb = sizeMb
	this.StorageType = storageType
	this.UpdatedTimestamp = updatedTimestamp
	this.Id = id
	this.Revision = revision
	this.InfrastructureId = infrastructureId
	this.ServiceStatus = serviceStatus
	this.StorageUpdatedTimestamp = storageUpdatedTimestamp
	this.AllocationAffinity = allocationAffinity
	this.ProvisioningProtocol = provisioningProtocol
	this.Config = config
	this.CreatedTimestamp = createdTimestamp
	this.Meta = meta
	return &this
}

// NewDriveWithDefaults instantiates a new Drive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriveWithDefaults() *Drive {
	this := Drive{}
	var storageType string = "iscsi_ssd"
	this.StorageType = storageType
	return &this
}

// GetLabel returns the Label field value
func (o *Drive) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *Drive) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *Drive) SetLabel(v string) {
	o.Label = v
}

// GetStoragePoolId returns the StoragePoolId field value if set, zero value otherwise.
func (o *Drive) GetStoragePoolId() float32 {
	if o == nil || IsNil(o.StoragePoolId) {
		var ret float32
		return ret
	}
	return *o.StoragePoolId
}

// GetStoragePoolIdOk returns a tuple with the StoragePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetStoragePoolIdOk() (*float32, bool) {
	if o == nil || IsNil(o.StoragePoolId) {
		return nil, false
	}
	return o.StoragePoolId, true
}

// HasStoragePoolId returns a boolean if a field has been set.
func (o *Drive) HasStoragePoolId() bool {
	if o != nil && !IsNil(o.StoragePoolId) {
		return true
	}

	return false
}

// SetStoragePoolId gets a reference to the given float32 and assigns it to the StoragePoolId field.
func (o *Drive) SetStoragePoolId(v float32) {
	o.StoragePoolId = &v
}

// GetSizeMb returns the SizeMb field value
func (o *Drive) GetSizeMb() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SizeMb
}

// GetSizeMbOk returns a tuple with the SizeMb field value
// and a boolean to check if the value has been set.
func (o *Drive) GetSizeMbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeMb, true
}

// SetSizeMb sets field value
func (o *Drive) SetSizeMb(v float32) {
	o.SizeMb = v
}

// GetStorageImageName returns the StorageImageName field value if set, zero value otherwise.
func (o *Drive) GetStorageImageName() string {
	if o == nil || IsNil(o.StorageImageName) {
		var ret string
		return ret
	}
	return *o.StorageImageName
}

// GetStorageImageNameOk returns a tuple with the StorageImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetStorageImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.StorageImageName) {
		return nil, false
	}
	return o.StorageImageName, true
}

// HasStorageImageName returns a boolean if a field has been set.
func (o *Drive) HasStorageImageName() bool {
	if o != nil && !IsNil(o.StorageImageName) {
		return true
	}

	return false
}

// SetStorageImageName gets a reference to the given string and assigns it to the StorageImageName field.
func (o *Drive) SetStorageImageName(v string) {
	o.StorageImageName = &v
}

// GetStorageType returns the StorageType field value
func (o *Drive) GetStorageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value
// and a boolean to check if the value has been set.
func (o *Drive) GetStorageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageType, true
}

// SetStorageType sets field value
func (o *Drive) SetStorageType(v string) {
	o.StorageType = v
}

// GetIoLimitPolicy returns the IoLimitPolicy field value if set, zero value otherwise.
func (o *Drive) GetIoLimitPolicy() string {
	if o == nil || IsNil(o.IoLimitPolicy) {
		var ret string
		return ret
	}
	return *o.IoLimitPolicy
}

// GetIoLimitPolicyOk returns a tuple with the IoLimitPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetIoLimitPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.IoLimitPolicy) {
		return nil, false
	}
	return o.IoLimitPolicy, true
}

// HasIoLimitPolicy returns a boolean if a field has been set.
func (o *Drive) HasIoLimitPolicy() bool {
	if o != nil && !IsNil(o.IoLimitPolicy) {
		return true
	}

	return false
}

// SetIoLimitPolicy gets a reference to the given string and assigns it to the IoLimitPolicy field.
func (o *Drive) SetIoLimitPolicy(v string) {
	o.IoLimitPolicy = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *Drive) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *Drive) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *Drive) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetLogicalNetworkId returns the LogicalNetworkId field value if set, zero value otherwise.
func (o *Drive) GetLogicalNetworkId() float32 {
	if o == nil || IsNil(o.LogicalNetworkId) {
		var ret float32
		return ret
	}
	return *o.LogicalNetworkId
}

// GetLogicalNetworkIdOk returns a tuple with the LogicalNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetLogicalNetworkIdOk() (*float32, bool) {
	if o == nil || IsNil(o.LogicalNetworkId) {
		return nil, false
	}
	return o.LogicalNetworkId, true
}

// HasLogicalNetworkId returns a boolean if a field has been set.
func (o *Drive) HasLogicalNetworkId() bool {
	if o != nil && !IsNil(o.LogicalNetworkId) {
		return true
	}

	return false
}

// SetLogicalNetworkId gets a reference to the given float32 and assigns it to the LogicalNetworkId field.
func (o *Drive) SetLogicalNetworkId(v float32) {
	o.LogicalNetworkId = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *Drive) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *Drive) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *Drive) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetId returns the Id field value
func (o *Drive) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Drive) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Drive) SetId(v float32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *Drive) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *Drive) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *Drive) SetRevision(v float32) {
	o.Revision = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *Drive) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *Drive) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *Drive) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *Drive) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *Drive) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *Drive) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetStorageRealSizeCachedMb returns the StorageRealSizeCachedMb field value if set, zero value otherwise.
func (o *Drive) GetStorageRealSizeCachedMb() float32 {
	if o == nil || IsNil(o.StorageRealSizeCachedMb) {
		var ret float32
		return ret
	}
	return *o.StorageRealSizeCachedMb
}

// GetStorageRealSizeCachedMbOk returns a tuple with the StorageRealSizeCachedMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetStorageRealSizeCachedMbOk() (*float32, bool) {
	if o == nil || IsNil(o.StorageRealSizeCachedMb) {
		return nil, false
	}
	return o.StorageRealSizeCachedMb, true
}

// HasStorageRealSizeCachedMb returns a boolean if a field has been set.
func (o *Drive) HasStorageRealSizeCachedMb() bool {
	if o != nil && !IsNil(o.StorageRealSizeCachedMb) {
		return true
	}

	return false
}

// SetStorageRealSizeCachedMb gets a reference to the given float32 and assigns it to the StorageRealSizeCachedMb field.
func (o *Drive) SetStorageRealSizeCachedMb(v float32) {
	o.StorageRealSizeCachedMb = &v
}

// GetStorageRealSizeWithSnapshotsCachedMb returns the StorageRealSizeWithSnapshotsCachedMb field value if set, zero value otherwise.
func (o *Drive) GetStorageRealSizeWithSnapshotsCachedMb() float32 {
	if o == nil || IsNil(o.StorageRealSizeWithSnapshotsCachedMb) {
		var ret float32
		return ret
	}
	return *o.StorageRealSizeWithSnapshotsCachedMb
}

// GetStorageRealSizeWithSnapshotsCachedMbOk returns a tuple with the StorageRealSizeWithSnapshotsCachedMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetStorageRealSizeWithSnapshotsCachedMbOk() (*float32, bool) {
	if o == nil || IsNil(o.StorageRealSizeWithSnapshotsCachedMb) {
		return nil, false
	}
	return o.StorageRealSizeWithSnapshotsCachedMb, true
}

// HasStorageRealSizeWithSnapshotsCachedMb returns a boolean if a field has been set.
func (o *Drive) HasStorageRealSizeWithSnapshotsCachedMb() bool {
	if o != nil && !IsNil(o.StorageRealSizeWithSnapshotsCachedMb) {
		return true
	}

	return false
}

// SetStorageRealSizeWithSnapshotsCachedMb gets a reference to the given float32 and assigns it to the StorageRealSizeWithSnapshotsCachedMb field.
func (o *Drive) SetStorageRealSizeWithSnapshotsCachedMb(v float32) {
	o.StorageRealSizeWithSnapshotsCachedMb = &v
}

// GetStorageVirtualSizeCachedMb returns the StorageVirtualSizeCachedMb field value if set, zero value otherwise.
func (o *Drive) GetStorageVirtualSizeCachedMb() float32 {
	if o == nil || IsNil(o.StorageVirtualSizeCachedMb) {
		var ret float32
		return ret
	}
	return *o.StorageVirtualSizeCachedMb
}

// GetStorageVirtualSizeCachedMbOk returns a tuple with the StorageVirtualSizeCachedMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetStorageVirtualSizeCachedMbOk() (*float32, bool) {
	if o == nil || IsNil(o.StorageVirtualSizeCachedMb) {
		return nil, false
	}
	return o.StorageVirtualSizeCachedMb, true
}

// HasStorageVirtualSizeCachedMb returns a boolean if a field has been set.
func (o *Drive) HasStorageVirtualSizeCachedMb() bool {
	if o != nil && !IsNil(o.StorageVirtualSizeCachedMb) {
		return true
	}

	return false
}

// SetStorageVirtualSizeCachedMb gets a reference to the given float32 and assigns it to the StorageVirtualSizeCachedMb field.
func (o *Drive) SetStorageVirtualSizeCachedMb(v float32) {
	o.StorageVirtualSizeCachedMb = &v
}

// GetStorageUpdatedTimestamp returns the StorageUpdatedTimestamp field value
func (o *Drive) GetStorageUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StorageUpdatedTimestamp
}

// GetStorageUpdatedTimestampOk returns a tuple with the StorageUpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *Drive) GetStorageUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageUpdatedTimestamp, true
}

// SetStorageUpdatedTimestamp sets field value
func (o *Drive) SetStorageUpdatedTimestamp(v string) {
	o.StorageUpdatedTimestamp = v
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *Drive) GetTargets() []map[string]interface{} {
	if o == nil || IsNil(o.Targets) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetTargetsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Targets) {
		return nil, false
	}
	return o.Targets, true
}

// HasTargets returns a boolean if a field has been set.
func (o *Drive) HasTargets() bool {
	if o != nil && !IsNil(o.Targets) {
		return true
	}

	return false
}

// SetTargets gets a reference to the given []map[string]interface{} and assigns it to the Targets field.
func (o *Drive) SetTargets(v []map[string]interface{}) {
	o.Targets = v
}

// GetWwn returns the Wwn field value if set, zero value otherwise.
func (o *Drive) GetWwn() string {
	if o == nil || IsNil(o.Wwn) {
		var ret string
		return ret
	}
	return *o.Wwn
}

// GetWwnOk returns a tuple with the Wwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetWwnOk() (*string, bool) {
	if o == nil || IsNil(o.Wwn) {
		return nil, false
	}
	return o.Wwn, true
}

// HasWwn returns a boolean if a field has been set.
func (o *Drive) HasWwn() bool {
	if o != nil && !IsNil(o.Wwn) {
		return true
	}

	return false
}

// SetWwn gets a reference to the given string and assigns it to the Wwn field.
func (o *Drive) SetWwn(v string) {
	o.Wwn = &v
}

// GetAllocationAffinity returns the AllocationAffinity field value
func (o *Drive) GetAllocationAffinity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AllocationAffinity
}

// GetAllocationAffinityOk returns a tuple with the AllocationAffinity field value
// and a boolean to check if the value has been set.
func (o *Drive) GetAllocationAffinityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocationAffinity, true
}

// SetAllocationAffinity sets field value
func (o *Drive) SetAllocationAffinity(v string) {
	o.AllocationAffinity = v
}

// GetProvisioningProtocol returns the ProvisioningProtocol field value
func (o *Drive) GetProvisioningProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProvisioningProtocol
}

// GetProvisioningProtocolOk returns a tuple with the ProvisioningProtocol field value
// and a boolean to check if the value has been set.
func (o *Drive) GetProvisioningProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProvisioningProtocol, true
}

// SetProvisioningProtocol sets field value
func (o *Drive) SetProvisioningProtocol(v string) {
	o.ProvisioningProtocol = v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value if set, zero value otherwise.
func (o *Drive) GetSubdomainPermanent() string {
	if o == nil || IsNil(o.SubdomainPermanent) {
		var ret string
		return ret
	}
	return *o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil || IsNil(o.SubdomainPermanent) {
		return nil, false
	}
	return o.SubdomainPermanent, true
}

// HasSubdomainPermanent returns a boolean if a field has been set.
func (o *Drive) HasSubdomainPermanent() bool {
	if o != nil && !IsNil(o.SubdomainPermanent) {
		return true
	}

	return false
}

// SetSubdomainPermanent gets a reference to the given string and assigns it to the SubdomainPermanent field.
func (o *Drive) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = &v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value if set, zero value otherwise.
func (o *Drive) GetDnsSubdomainId() float32 {
	if o == nil || IsNil(o.DnsSubdomainId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetDnsSubdomainIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainId) {
		return nil, false
	}
	return o.DnsSubdomainId, true
}

// HasDnsSubdomainId returns a boolean if a field has been set.
func (o *Drive) HasDnsSubdomainId() bool {
	if o != nil && !IsNil(o.DnsSubdomainId) {
		return true
	}

	return false
}

// SetDnsSubdomainId gets a reference to the given float32 and assigns it to the DnsSubdomainId field.
func (o *Drive) SetDnsSubdomainId(v float32) {
	o.DnsSubdomainId = &v
}

// GetDnsSubdomainPermanentId returns the DnsSubdomainPermanentId field value if set, zero value otherwise.
func (o *Drive) GetDnsSubdomainPermanentId() float32 {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainPermanentId
}

// GetDnsSubdomainPermanentIdOk returns a tuple with the DnsSubdomainPermanentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Drive) GetDnsSubdomainPermanentIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		return nil, false
	}
	return o.DnsSubdomainPermanentId, true
}

// HasDnsSubdomainPermanentId returns a boolean if a field has been set.
func (o *Drive) HasDnsSubdomainPermanentId() bool {
	if o != nil && !IsNil(o.DnsSubdomainPermanentId) {
		return true
	}

	return false
}

// SetDnsSubdomainPermanentId gets a reference to the given float32 and assigns it to the DnsSubdomainPermanentId field.
func (o *Drive) SetDnsSubdomainPermanentId(v float32) {
	o.DnsSubdomainPermanentId = &v
}

// GetConfig returns the Config field value
func (o *Drive) GetConfig() DriveConfiguration {
	if o == nil {
		var ret DriveConfiguration
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Drive) GetConfigOk() (*DriveConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Drive) SetConfig(v DriveConfiguration) {
	o.Config = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *Drive) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *Drive) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *Drive) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetMeta returns the Meta field value
func (o *Drive) GetMeta() DriveMeta {
	if o == nil {
		var ret DriveMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *Drive) GetMetaOk() (*DriveMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *Drive) SetMeta(v DriveMeta) {
	o.Meta = v
}

func (o Drive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Drive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	if !IsNil(o.StoragePoolId) {
		toSerialize["storagePoolId"] = o.StoragePoolId
	}
	toSerialize["sizeMb"] = o.SizeMb
	if !IsNil(o.StorageImageName) {
		toSerialize["storageImageName"] = o.StorageImageName
	}
	toSerialize["storageType"] = o.StorageType
	if !IsNil(o.IoLimitPolicy) {
		toSerialize["ioLimitPolicy"] = o.IoLimitPolicy
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.LogicalNetworkId) {
		toSerialize["logicalNetworkId"] = o.LogicalNetworkId
	}
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["serviceStatus"] = o.ServiceStatus
	if !IsNil(o.StorageRealSizeCachedMb) {
		toSerialize["storageRealSizeCachedMb"] = o.StorageRealSizeCachedMb
	}
	if !IsNil(o.StorageRealSizeWithSnapshotsCachedMb) {
		toSerialize["storageRealSizeWithSnapshotsCachedMb"] = o.StorageRealSizeWithSnapshotsCachedMb
	}
	if !IsNil(o.StorageVirtualSizeCachedMb) {
		toSerialize["storageVirtualSizeCachedMb"] = o.StorageVirtualSizeCachedMb
	}
	toSerialize["storageUpdatedTimestamp"] = o.StorageUpdatedTimestamp
	if !IsNil(o.Targets) {
		toSerialize["targets"] = o.Targets
	}
	if !IsNil(o.Wwn) {
		toSerialize["wwn"] = o.Wwn
	}
	toSerialize["allocationAffinity"] = o.AllocationAffinity
	toSerialize["provisioningProtocol"] = o.ProvisioningProtocol
	if !IsNil(o.SubdomainPermanent) {
		toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	}
	if !IsNil(o.DnsSubdomainId) {
		toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	}
	if !IsNil(o.DnsSubdomainPermanentId) {
		toSerialize["dnsSubdomainPermanentId"] = o.DnsSubdomainPermanentId
	}
	toSerialize["config"] = o.Config
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["meta"] = o.Meta

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Drive) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"sizeMb",
		"storageType",
		"updatedTimestamp",
		"id",
		"revision",
		"infrastructureId",
		"serviceStatus",
		"storageUpdatedTimestamp",
		"allocationAffinity",
		"provisioningProtocol",
		"config",
		"createdTimestamp",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDrive := _Drive{}

	err = json.Unmarshal(data, &varDrive)

	if err != nil {
		return err
	}

	*o = Drive(varDrive)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "storagePoolId")
		delete(additionalProperties, "sizeMb")
		delete(additionalProperties, "storageImageName")
		delete(additionalProperties, "storageType")
		delete(additionalProperties, "ioLimitPolicy")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "logicalNetworkId")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "storageRealSizeCachedMb")
		delete(additionalProperties, "storageRealSizeWithSnapshotsCachedMb")
		delete(additionalProperties, "storageVirtualSizeCachedMb")
		delete(additionalProperties, "storageUpdatedTimestamp")
		delete(additionalProperties, "targets")
		delete(additionalProperties, "wwn")
		delete(additionalProperties, "allocationAffinity")
		delete(additionalProperties, "provisioningProtocol")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "dnsSubdomainId")
		delete(additionalProperties, "dnsSubdomainPermanentId")
		delete(additionalProperties, "config")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "meta")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDrive struct {
	value *Drive
	isSet bool
}

func (v NullableDrive) Get() *Drive {
	return v.value
}

func (v *NullableDrive) Set(val *Drive) {
	v.value = val
	v.isSet = true
}

func (v NullableDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrive(val *Drive) *NullableDrive {
	return &NullableDrive{value: val, isSet: true}
}

func (v NullableDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


