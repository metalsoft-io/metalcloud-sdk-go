/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// InstanceInterfaceType the model 'InstanceInterfaceType'
type InstanceInterfaceType string

// List of InstanceInterfaceType
const (
	INSTANCEINTERFACETYPE_PHYSICAL InstanceInterfaceType = "physical"
	INSTANCEINTERFACETYPE_BOND InstanceInterfaceType = "bond"
	INSTANCEINTERFACETYPE_VLAN InstanceInterfaceType = "vlan"
)

// All allowed values of InstanceInterfaceType enum
var AllowedInstanceInterfaceTypeEnumValues = []InstanceInterfaceType{
	"physical",
	"bond",
	"vlan",
}

func (v *InstanceInterfaceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstanceInterfaceType(value)
	for _, existing := range AllowedInstanceInterfaceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstanceInterfaceType", value)
}

// NewInstanceInterfaceTypeFromValue returns a pointer to a valid InstanceInterfaceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceInterfaceTypeFromValue(v string) (*InstanceInterfaceType, error) {
	ev := InstanceInterfaceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceInterfaceType: valid values are %v", v, AllowedInstanceInterfaceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceInterfaceType) IsValid() bool {
	for _, existing := range AllowedInstanceInterfaceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstanceInterfaceType value
func (v InstanceInterfaceType) Ptr() *InstanceInterfaceType {
	return &v
}

type NullableInstanceInterfaceType struct {
	value *InstanceInterfaceType
	isSet bool
}

func (v NullableInstanceInterfaceType) Get() *InstanceInterfaceType {
	return v.value
}

func (v *NullableInstanceInterfaceType) Set(val *InstanceInterfaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceInterfaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceInterfaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceInterfaceType(val *InstanceInterfaceType) *NullableInstanceInterfaceType {
	return &NullableInstanceInterfaceType{value: val, isSet: true}
}

func (v NullableInstanceInterfaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceInterfaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

