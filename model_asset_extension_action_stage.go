/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// AssetExtensionActionStage the model 'AssetExtensionActionStage'
type AssetExtensionActionStage string

// List of AssetExtensionActionStage
const (
	ASSETEXTENSIONACTIONSTAGE_SERVER_REGISTERED AssetExtensionActionStage = "serverRegistered"
	ASSETEXTENSIONACTIONSTAGE_SERVER_DECOMMISSIONED AssetExtensionActionStage = "serverDecommissioned"
	ASSETEXTENSIONACTIONSTAGE_SERVER_CREATE_DNS AssetExtensionActionStage = "serverCreateDNS"
	ASSETEXTENSIONACTIONSTAGE_SERVER_DELETE_DNS AssetExtensionActionStage = "serverDeleteDNS"
	ASSETEXTENSIONACTIONSTAGE_SWITCH_REGISTERED AssetExtensionActionStage = "switchRegistered"
	ASSETEXTENSIONACTIONSTAGE_SWITCH_DECOMMISSIONED AssetExtensionActionStage = "switchDecommissioned"
	ASSETEXTENSIONACTIONSTAGE_SWITCH_CREATE_DNS AssetExtensionActionStage = "switchCreateDNS"
	ASSETEXTENSIONACTIONSTAGE_SWITCH_DELETE_DNS AssetExtensionActionStage = "switchDeleteDNS"
	ASSETEXTENSIONACTIONSTAGE_SERVER_INSTANCE_GROUP_CREATE_DNS AssetExtensionActionStage = "serverInstanceGroupCreateDNS"
	ASSETEXTENSIONACTIONSTAGE_SERVER_INSTANCE_GROUP_UPDATE_DNS AssetExtensionActionStage = "serverInstanceGroupUpdateDNS"
	ASSETEXTENSIONACTIONSTAGE_SERVER_INSTANCE_GROUP_DELETE_DNS AssetExtensionActionStage = "serverInstanceGroupDeleteDNS"
	ASSETEXTENSIONACTIONSTAGE_SERVER_INSTANCE_UPDATE_DNS AssetExtensionActionStage = "serverInstanceUpdateDNS"
	ASSETEXTENSIONACTIONSTAGE_SERVER_INSTANCE_DELETE_DNS AssetExtensionActionStage = "serverInstanceDeleteDNS"
)

// All allowed values of AssetExtensionActionStage enum
var AllowedAssetExtensionActionStageEnumValues = []AssetExtensionActionStage{
	"serverRegistered",
	"serverDecommissioned",
	"serverCreateDNS",
	"serverDeleteDNS",
	"switchRegistered",
	"switchDecommissioned",
	"switchCreateDNS",
	"switchDeleteDNS",
	"serverInstanceGroupCreateDNS",
	"serverInstanceGroupUpdateDNS",
	"serverInstanceGroupDeleteDNS",
	"serverInstanceUpdateDNS",
	"serverInstanceDeleteDNS",
}

func (v *AssetExtensionActionStage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetExtensionActionStage(value)
	for _, existing := range AllowedAssetExtensionActionStageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetExtensionActionStage", value)
}

// NewAssetExtensionActionStageFromValue returns a pointer to a valid AssetExtensionActionStage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetExtensionActionStageFromValue(v string) (*AssetExtensionActionStage, error) {
	ev := AssetExtensionActionStage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetExtensionActionStage: valid values are %v", v, AllowedAssetExtensionActionStageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetExtensionActionStage) IsValid() bool {
	for _, existing := range AllowedAssetExtensionActionStageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetExtensionActionStage value
func (v AssetExtensionActionStage) Ptr() *AssetExtensionActionStage {
	return &v
}

type NullableAssetExtensionActionStage struct {
	value *AssetExtensionActionStage
	isSet bool
}

func (v NullableAssetExtensionActionStage) Get() *AssetExtensionActionStage {
	return v.value
}

func (v *NullableAssetExtensionActionStage) Set(val *AssetExtensionActionStage) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetExtensionActionStage) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetExtensionActionStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetExtensionActionStage(val *AssetExtensionActionStage) *NullableAssetExtensionActionStage {
	return &NullableAssetExtensionActionStage{value: val, isSet: true}
}

func (v NullableAssetExtensionActionStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetExtensionActionStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

