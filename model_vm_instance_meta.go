/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the VMInstanceMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMInstanceMeta{}

// VMInstanceMeta struct for VMInstanceMeta
type VMInstanceMeta struct {
	// Tags for the VM Instance.
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VMInstanceMeta VMInstanceMeta

// NewVMInstanceMeta instantiates a new VMInstanceMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMInstanceMeta() *VMInstanceMeta {
	this := VMInstanceMeta{}
	return &this
}

// NewVMInstanceMetaWithDefaults instantiates a new VMInstanceMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMInstanceMetaWithDefaults() *VMInstanceMeta {
	this := VMInstanceMeta{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VMInstanceMeta) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceMeta) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VMInstanceMeta) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VMInstanceMeta) SetTags(v []string) {
	o.Tags = v
}

func (o VMInstanceMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMInstanceMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMInstanceMeta) UnmarshalJSON(data []byte) (err error) {
	varVMInstanceMeta := _VMInstanceMeta{}

	err = json.Unmarshal(data, &varVMInstanceMeta)

	if err != nil {
		return err
	}

	*o = VMInstanceMeta(varVMInstanceMeta)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMInstanceMeta struct {
	value *VMInstanceMeta
	isSet bool
}

func (v NullableVMInstanceMeta) Get() *VMInstanceMeta {
	return v.value
}

func (v *NullableVMInstanceMeta) Set(val *VMInstanceMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableVMInstanceMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableVMInstanceMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMInstanceMeta(val *VMInstanceMeta) *NullableVMInstanceMeta {
	return &NullableVMInstanceMeta{value: val, isSet: true}
}

func (v NullableVMInstanceMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMInstanceMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


