/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInterfaceConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInterfaceConnection{}

// ServerInterfaceConnection struct for ServerInterfaceConnection
type ServerInterfaceConnection struct {
	// The server interface MAC address
	ServerInterfaceMacAddress string `json:"serverInterfaceMacAddress"`
	// The network device port name
	NetworkDevicePortId string `json:"networkDevicePortId"`
	// The network device hostname
	NetworkDeviceHostname string `json:"networkDeviceHostname"`
	AdditionalProperties map[string]interface{}
}

type _ServerInterfaceConnection ServerInterfaceConnection

// NewServerInterfaceConnection instantiates a new ServerInterfaceConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInterfaceConnection(serverInterfaceMacAddress string, networkDevicePortId string, networkDeviceHostname string) *ServerInterfaceConnection {
	this := ServerInterfaceConnection{}
	this.ServerInterfaceMacAddress = serverInterfaceMacAddress
	this.NetworkDevicePortId = networkDevicePortId
	this.NetworkDeviceHostname = networkDeviceHostname
	return &this
}

// NewServerInterfaceConnectionWithDefaults instantiates a new ServerInterfaceConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInterfaceConnectionWithDefaults() *ServerInterfaceConnection {
	this := ServerInterfaceConnection{}
	return &this
}

// GetServerInterfaceMacAddress returns the ServerInterfaceMacAddress field value
func (o *ServerInterfaceConnection) GetServerInterfaceMacAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerInterfaceMacAddress
}

// GetServerInterfaceMacAddressOk returns a tuple with the ServerInterfaceMacAddress field value
// and a boolean to check if the value has been set.
func (o *ServerInterfaceConnection) GetServerInterfaceMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerInterfaceMacAddress, true
}

// SetServerInterfaceMacAddress sets field value
func (o *ServerInterfaceConnection) SetServerInterfaceMacAddress(v string) {
	o.ServerInterfaceMacAddress = v
}

// GetNetworkDevicePortId returns the NetworkDevicePortId field value
func (o *ServerInterfaceConnection) GetNetworkDevicePortId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDevicePortId
}

// GetNetworkDevicePortIdOk returns a tuple with the NetworkDevicePortId field value
// and a boolean to check if the value has been set.
func (o *ServerInterfaceConnection) GetNetworkDevicePortIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDevicePortId, true
}

// SetNetworkDevicePortId sets field value
func (o *ServerInterfaceConnection) SetNetworkDevicePortId(v string) {
	o.NetworkDevicePortId = v
}

// GetNetworkDeviceHostname returns the NetworkDeviceHostname field value
func (o *ServerInterfaceConnection) GetNetworkDeviceHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkDeviceHostname
}

// GetNetworkDeviceHostnameOk returns a tuple with the NetworkDeviceHostname field value
// and a boolean to check if the value has been set.
func (o *ServerInterfaceConnection) GetNetworkDeviceHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDeviceHostname, true
}

// SetNetworkDeviceHostname sets field value
func (o *ServerInterfaceConnection) SetNetworkDeviceHostname(v string) {
	o.NetworkDeviceHostname = v
}

func (o ServerInterfaceConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInterfaceConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverInterfaceMacAddress"] = o.ServerInterfaceMacAddress
	toSerialize["networkDevicePortId"] = o.NetworkDevicePortId
	toSerialize["networkDeviceHostname"] = o.NetworkDeviceHostname

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInterfaceConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverInterfaceMacAddress",
		"networkDevicePortId",
		"networkDeviceHostname",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInterfaceConnection := _ServerInterfaceConnection{}

	err = json.Unmarshal(data, &varServerInterfaceConnection)

	if err != nil {
		return err
	}

	*o = ServerInterfaceConnection(varServerInterfaceConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverInterfaceMacAddress")
		delete(additionalProperties, "networkDevicePortId")
		delete(additionalProperties, "networkDeviceHostname")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInterfaceConnection struct {
	value *ServerInterfaceConnection
	isSet bool
}

func (v NullableServerInterfaceConnection) Get() *ServerInterfaceConnection {
	return v.value
}

func (v *NullableServerInterfaceConnection) Set(val *ServerInterfaceConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInterfaceConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInterfaceConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInterfaceConnection(val *ServerInterfaceConnection) *NullableServerInterfaceConnection {
	return &NullableServerInterfaceConnection{value: val, isSet: true}
}

func (v NullableServerInterfaceConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInterfaceConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


