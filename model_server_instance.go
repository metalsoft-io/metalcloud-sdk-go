/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstance{}

// ServerInstance struct for ServerInstance
type ServerInstance struct {
	// The Product Instance ID.
	Id int32 `json:"id"`
	// Revision number
	Revision int32 `json:"revision"`
	// The Product Instance label. Will be automatically generated if not provided.
	Label string `json:"label"`
	// Timestamp of the Product Instance creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Timestamp of the latest update of the Product Instance.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Subdomain of the Product Instance.
	Subdomain *string `json:"subdomain,omitempty"`
	// Subdomain permanent of the Product Instance.
	SubdomainPermanent *string `json:"subdomainPermanent,omitempty"`
	// Id of the DNS subdomain for the Product Instance
	DnsSubdomainId *int32 `json:"dnsSubdomainId,omitempty"`
	// Id of the permanent DNS subdomain for the Product Instance
	DnsSubdomainPermanentId *int32 `json:"dnsSubdomainPermanentId,omitempty"`
	InfrastructureId int32 `json:"infrastructureId"`
	GroupId int32 `json:"groupId"`
	// The server type ID.
	ServerTypeId *int32 `json:"serverTypeId,omitempty"`
	// The ID of the server assigned to the instance.
	ServerId *int32 `json:"serverId,omitempty"`
	// Custom hostname(subdomain) part of the fully qualified domain name (FQDN). If set, this will be used as the subdomain record part of the DNS record name instead of the default \"instance\". The hostname must be a valid DNS subdomain and can only contain alphanumeric characters and hyphens. This will only take effect if the property \"provisionInstanceDnsRecords\" is true. 
	Hostname *string `json:"hostname,omitempty"`
	// The template id of the operating system to deploy on the server. Can be null in which case no OS will be deployed but all operations will continue as normal. 
	OsTemplateId *int32 `json:"osTemplateId,omitempty"`
	InstanceWanMlagId *int32 `json:"instanceWanMlagId,omitempty"`
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	PreferredServerIds []float32 `json:"preferredServerIds,omitempty"`
	// Custom Storage Profile for the Instance.
	CustomStorageProfile *ServerInstanceStorageProfile `json:"customStorageProfile,omitempty"`
	// Current status of the server instance.
	ServiceStatus string `json:"serviceStatus"`
	// Flag to indicate if this is a VM instance
	IsVmInstance int32 `json:"isVmInstance"`
	// The id of the linked VM instance
	VmInstanceId *int32 `json:"vmInstanceId,omitempty"`
	// Flag to indicate if this is an Endpoint Instance
	IsEndpointInstance int32 `json:"isEndpointInstance"`
	// The id of the Endpoint
	EndpointId *int32 `json:"endpointId,omitempty"`
	ClusterCustomInfo *ServerInstanceClusterCustomInfo `json:"clusterCustomInfo,omitempty"`
	// Last error message during OS install.
	OsInstallError *string `json:"osInstallError,omitempty"`
	// URL where the OS image is available.
	OsInstallImageUrl *string `json:"osInstallImageUrl,omitempty"`
	// Last error message during OS image build.
	OsInstallImageBuildError *string `json:"osInstallImageBuildError,omitempty"`
	// Build info regarding the OS image.
	OsInstallImageBuildInfo *ServerInstanceOsInstallImageBuildInfo `json:"osInstallImageBuildInfo,omitempty"`
	// OS reinstall is required.
	OsReinstallRequired *int32 `json:"osReinstallRequired,omitempty"`
	// NVMe Initiator NQN for the Instance.
	InitiatorNqn *string `json:"initiatorNqn,omitempty"`
	// iSCSI Initiator IQN for the Instance Interface.
	IscsiInitiatorIqn *string `json:"iscsiInitiatorIqn,omitempty"`
	// iSCSI Initiator Username for the Instance Interface.
	IscsiInitiatorUsername *string `json:"iscsiInitiatorUsername,omitempty"`
	// iSCSI Initiator Password for the Instance Interface.
	IscsiInitiatorPasswordEncrypted *string `json:"iscsiInitiatorPasswordEncrypted,omitempty"`
	// Control panel url for the Instance Interface.
	ControlPanelUrl *string `json:"controlPanelUrl,omitempty"`
	Meta GenericMeta `json:"meta"`
	Config *ServerInstanceConfiguration `json:"config,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstance ServerInstance

// NewServerInstance instantiates a new ServerInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstance(id int32, revision int32, label string, createdTimestamp string, updatedTimestamp string, infrastructureId int32, groupId int32, serviceStatus string, isVmInstance int32, isEndpointInstance int32, meta GenericMeta) *ServerInstance {
	this := ServerInstance{}
	this.Id = id
	this.Revision = revision
	this.Label = label
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.InfrastructureId = infrastructureId
	this.GroupId = groupId
	this.ServiceStatus = serviceStatus
	this.IsVmInstance = isVmInstance
	this.IsEndpointInstance = isEndpointInstance
	this.Meta = meta
	return &this
}

// NewServerInstanceWithDefaults instantiates a new ServerInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceWithDefaults() *ServerInstance {
	this := ServerInstance{}
	return &this
}

// GetId returns the Id field value
func (o *ServerInstance) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerInstance) SetId(v int32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *ServerInstance) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *ServerInstance) SetRevision(v int32) {
	o.Revision = v
}

// GetLabel returns the Label field value
func (o *ServerInstance) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ServerInstance) SetLabel(v string) {
	o.Label = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *ServerInstance) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *ServerInstance) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *ServerInstance) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *ServerInstance) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *ServerInstance) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *ServerInstance) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *ServerInstance) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value if set, zero value otherwise.
func (o *ServerInstance) GetSubdomainPermanent() string {
	if o == nil || IsNil(o.SubdomainPermanent) {
		var ret string
		return ret
	}
	return *o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil || IsNil(o.SubdomainPermanent) {
		return nil, false
	}
	return o.SubdomainPermanent, true
}

// HasSubdomainPermanent returns a boolean if a field has been set.
func (o *ServerInstance) HasSubdomainPermanent() bool {
	if o != nil && !IsNil(o.SubdomainPermanent) {
		return true
	}

	return false
}

// SetSubdomainPermanent gets a reference to the given string and assigns it to the SubdomainPermanent field.
func (o *ServerInstance) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = &v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value if set, zero value otherwise.
func (o *ServerInstance) GetDnsSubdomainId() int32 {
	if o == nil || IsNil(o.DnsSubdomainId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetDnsSubdomainIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainId) {
		return nil, false
	}
	return o.DnsSubdomainId, true
}

// HasDnsSubdomainId returns a boolean if a field has been set.
func (o *ServerInstance) HasDnsSubdomainId() bool {
	if o != nil && !IsNil(o.DnsSubdomainId) {
		return true
	}

	return false
}

// SetDnsSubdomainId gets a reference to the given int32 and assigns it to the DnsSubdomainId field.
func (o *ServerInstance) SetDnsSubdomainId(v int32) {
	o.DnsSubdomainId = &v
}

// GetDnsSubdomainPermanentId returns the DnsSubdomainPermanentId field value if set, zero value otherwise.
func (o *ServerInstance) GetDnsSubdomainPermanentId() int32 {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainPermanentId
}

// GetDnsSubdomainPermanentIdOk returns a tuple with the DnsSubdomainPermanentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetDnsSubdomainPermanentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		return nil, false
	}
	return o.DnsSubdomainPermanentId, true
}

// HasDnsSubdomainPermanentId returns a boolean if a field has been set.
func (o *ServerInstance) HasDnsSubdomainPermanentId() bool {
	if o != nil && !IsNil(o.DnsSubdomainPermanentId) {
		return true
	}

	return false
}

// SetDnsSubdomainPermanentId gets a reference to the given int32 and assigns it to the DnsSubdomainPermanentId field.
func (o *ServerInstance) SetDnsSubdomainPermanentId(v int32) {
	o.DnsSubdomainPermanentId = &v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *ServerInstance) GetInfrastructureId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetInfrastructureIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *ServerInstance) SetInfrastructureId(v int32) {
	o.InfrastructureId = v
}

// GetGroupId returns the GroupId field value
func (o *ServerInstance) GetGroupId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetGroupIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *ServerInstance) SetGroupId(v int32) {
	o.GroupId = v
}

// GetServerTypeId returns the ServerTypeId field value if set, zero value otherwise.
func (o *ServerInstance) GetServerTypeId() int32 {
	if o == nil || IsNil(o.ServerTypeId) {
		var ret int32
		return ret
	}
	return *o.ServerTypeId
}

// GetServerTypeIdOk returns a tuple with the ServerTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetServerTypeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerTypeId) {
		return nil, false
	}
	return o.ServerTypeId, true
}

// HasServerTypeId returns a boolean if a field has been set.
func (o *ServerInstance) HasServerTypeId() bool {
	if o != nil && !IsNil(o.ServerTypeId) {
		return true
	}

	return false
}

// SetServerTypeId gets a reference to the given int32 and assigns it to the ServerTypeId field.
func (o *ServerInstance) SetServerTypeId(v int32) {
	o.ServerTypeId = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *ServerInstance) GetServerId() int32 {
	if o == nil || IsNil(o.ServerId) {
		var ret int32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetServerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *ServerInstance) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int32 and assigns it to the ServerId field.
func (o *ServerInstance) SetServerId(v int32) {
	o.ServerId = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ServerInstance) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ServerInstance) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ServerInstance) SetHostname(v string) {
	o.Hostname = &v
}

// GetOsTemplateId returns the OsTemplateId field value if set, zero value otherwise.
func (o *ServerInstance) GetOsTemplateId() int32 {
	if o == nil || IsNil(o.OsTemplateId) {
		var ret int32
		return ret
	}
	return *o.OsTemplateId
}

// GetOsTemplateIdOk returns a tuple with the OsTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetOsTemplateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OsTemplateId) {
		return nil, false
	}
	return o.OsTemplateId, true
}

// HasOsTemplateId returns a boolean if a field has been set.
func (o *ServerInstance) HasOsTemplateId() bool {
	if o != nil && !IsNil(o.OsTemplateId) {
		return true
	}

	return false
}

// SetOsTemplateId gets a reference to the given int32 and assigns it to the OsTemplateId field.
func (o *ServerInstance) SetOsTemplateId(v int32) {
	o.OsTemplateId = &v
}

// GetInstanceWanMlagId returns the InstanceWanMlagId field value if set, zero value otherwise.
func (o *ServerInstance) GetInstanceWanMlagId() int32 {
	if o == nil || IsNil(o.InstanceWanMlagId) {
		var ret int32
		return ret
	}
	return *o.InstanceWanMlagId
}

// GetInstanceWanMlagIdOk returns a tuple with the InstanceWanMlagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetInstanceWanMlagIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InstanceWanMlagId) {
		return nil, false
	}
	return o.InstanceWanMlagId, true
}

// HasInstanceWanMlagId returns a boolean if a field has been set.
func (o *ServerInstance) HasInstanceWanMlagId() bool {
	if o != nil && !IsNil(o.InstanceWanMlagId) {
		return true
	}

	return false
}

// SetInstanceWanMlagId gets a reference to the given int32 and assigns it to the InstanceWanMlagId field.
func (o *ServerInstance) SetInstanceWanMlagId(v int32) {
	o.InstanceWanMlagId = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *ServerInstance) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *ServerInstance) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *ServerInstance) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetPreferredServerIds returns the PreferredServerIds field value if set, zero value otherwise.
func (o *ServerInstance) GetPreferredServerIds() []float32 {
	if o == nil || IsNil(o.PreferredServerIds) {
		var ret []float32
		return ret
	}
	return o.PreferredServerIds
}

// GetPreferredServerIdsOk returns a tuple with the PreferredServerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetPreferredServerIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.PreferredServerIds) {
		return nil, false
	}
	return o.PreferredServerIds, true
}

// HasPreferredServerIds returns a boolean if a field has been set.
func (o *ServerInstance) HasPreferredServerIds() bool {
	if o != nil && !IsNil(o.PreferredServerIds) {
		return true
	}

	return false
}

// SetPreferredServerIds gets a reference to the given []float32 and assigns it to the PreferredServerIds field.
func (o *ServerInstance) SetPreferredServerIds(v []float32) {
	o.PreferredServerIds = v
}

// GetCustomStorageProfile returns the CustomStorageProfile field value if set, zero value otherwise.
func (o *ServerInstance) GetCustomStorageProfile() ServerInstanceStorageProfile {
	if o == nil || IsNil(o.CustomStorageProfile) {
		var ret ServerInstanceStorageProfile
		return ret
	}
	return *o.CustomStorageProfile
}

// GetCustomStorageProfileOk returns a tuple with the CustomStorageProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetCustomStorageProfileOk() (*ServerInstanceStorageProfile, bool) {
	if o == nil || IsNil(o.CustomStorageProfile) {
		return nil, false
	}
	return o.CustomStorageProfile, true
}

// HasCustomStorageProfile returns a boolean if a field has been set.
func (o *ServerInstance) HasCustomStorageProfile() bool {
	if o != nil && !IsNil(o.CustomStorageProfile) {
		return true
	}

	return false
}

// SetCustomStorageProfile gets a reference to the given ServerInstanceStorageProfile and assigns it to the CustomStorageProfile field.
func (o *ServerInstance) SetCustomStorageProfile(v ServerInstanceStorageProfile) {
	o.CustomStorageProfile = &v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *ServerInstance) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *ServerInstance) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetIsVmInstance returns the IsVmInstance field value
func (o *ServerInstance) GetIsVmInstance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IsVmInstance
}

// GetIsVmInstanceOk returns a tuple with the IsVmInstance field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetIsVmInstanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsVmInstance, true
}

// SetIsVmInstance sets field value
func (o *ServerInstance) SetIsVmInstance(v int32) {
	o.IsVmInstance = v
}

// GetVmInstanceId returns the VmInstanceId field value if set, zero value otherwise.
func (o *ServerInstance) GetVmInstanceId() int32 {
	if o == nil || IsNil(o.VmInstanceId) {
		var ret int32
		return ret
	}
	return *o.VmInstanceId
}

// GetVmInstanceIdOk returns a tuple with the VmInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetVmInstanceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VmInstanceId) {
		return nil, false
	}
	return o.VmInstanceId, true
}

// HasVmInstanceId returns a boolean if a field has been set.
func (o *ServerInstance) HasVmInstanceId() bool {
	if o != nil && !IsNil(o.VmInstanceId) {
		return true
	}

	return false
}

// SetVmInstanceId gets a reference to the given int32 and assigns it to the VmInstanceId field.
func (o *ServerInstance) SetVmInstanceId(v int32) {
	o.VmInstanceId = &v
}

// GetIsEndpointInstance returns the IsEndpointInstance field value
func (o *ServerInstance) GetIsEndpointInstance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IsEndpointInstance
}

// GetIsEndpointInstanceOk returns a tuple with the IsEndpointInstance field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetIsEndpointInstanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsEndpointInstance, true
}

// SetIsEndpointInstance sets field value
func (o *ServerInstance) SetIsEndpointInstance(v int32) {
	o.IsEndpointInstance = v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *ServerInstance) GetEndpointId() int32 {
	if o == nil || IsNil(o.EndpointId) {
		var ret int32
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetEndpointIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EndpointId) {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *ServerInstance) HasEndpointId() bool {
	if o != nil && !IsNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given int32 and assigns it to the EndpointId field.
func (o *ServerInstance) SetEndpointId(v int32) {
	o.EndpointId = &v
}

// GetClusterCustomInfo returns the ClusterCustomInfo field value if set, zero value otherwise.
func (o *ServerInstance) GetClusterCustomInfo() ServerInstanceClusterCustomInfo {
	if o == nil || IsNil(o.ClusterCustomInfo) {
		var ret ServerInstanceClusterCustomInfo
		return ret
	}
	return *o.ClusterCustomInfo
}

// GetClusterCustomInfoOk returns a tuple with the ClusterCustomInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetClusterCustomInfoOk() (*ServerInstanceClusterCustomInfo, bool) {
	if o == nil || IsNil(o.ClusterCustomInfo) {
		return nil, false
	}
	return o.ClusterCustomInfo, true
}

// HasClusterCustomInfo returns a boolean if a field has been set.
func (o *ServerInstance) HasClusterCustomInfo() bool {
	if o != nil && !IsNil(o.ClusterCustomInfo) {
		return true
	}

	return false
}

// SetClusterCustomInfo gets a reference to the given ServerInstanceClusterCustomInfo and assigns it to the ClusterCustomInfo field.
func (o *ServerInstance) SetClusterCustomInfo(v ServerInstanceClusterCustomInfo) {
	o.ClusterCustomInfo = &v
}

// GetOsInstallError returns the OsInstallError field value if set, zero value otherwise.
func (o *ServerInstance) GetOsInstallError() string {
	if o == nil || IsNil(o.OsInstallError) {
		var ret string
		return ret
	}
	return *o.OsInstallError
}

// GetOsInstallErrorOk returns a tuple with the OsInstallError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetOsInstallErrorOk() (*string, bool) {
	if o == nil || IsNil(o.OsInstallError) {
		return nil, false
	}
	return o.OsInstallError, true
}

// HasOsInstallError returns a boolean if a field has been set.
func (o *ServerInstance) HasOsInstallError() bool {
	if o != nil && !IsNil(o.OsInstallError) {
		return true
	}

	return false
}

// SetOsInstallError gets a reference to the given string and assigns it to the OsInstallError field.
func (o *ServerInstance) SetOsInstallError(v string) {
	o.OsInstallError = &v
}

// GetOsInstallImageUrl returns the OsInstallImageUrl field value if set, zero value otherwise.
func (o *ServerInstance) GetOsInstallImageUrl() string {
	if o == nil || IsNil(o.OsInstallImageUrl) {
		var ret string
		return ret
	}
	return *o.OsInstallImageUrl
}

// GetOsInstallImageUrlOk returns a tuple with the OsInstallImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetOsInstallImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OsInstallImageUrl) {
		return nil, false
	}
	return o.OsInstallImageUrl, true
}

// HasOsInstallImageUrl returns a boolean if a field has been set.
func (o *ServerInstance) HasOsInstallImageUrl() bool {
	if o != nil && !IsNil(o.OsInstallImageUrl) {
		return true
	}

	return false
}

// SetOsInstallImageUrl gets a reference to the given string and assigns it to the OsInstallImageUrl field.
func (o *ServerInstance) SetOsInstallImageUrl(v string) {
	o.OsInstallImageUrl = &v
}

// GetOsInstallImageBuildError returns the OsInstallImageBuildError field value if set, zero value otherwise.
func (o *ServerInstance) GetOsInstallImageBuildError() string {
	if o == nil || IsNil(o.OsInstallImageBuildError) {
		var ret string
		return ret
	}
	return *o.OsInstallImageBuildError
}

// GetOsInstallImageBuildErrorOk returns a tuple with the OsInstallImageBuildError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetOsInstallImageBuildErrorOk() (*string, bool) {
	if o == nil || IsNil(o.OsInstallImageBuildError) {
		return nil, false
	}
	return o.OsInstallImageBuildError, true
}

// HasOsInstallImageBuildError returns a boolean if a field has been set.
func (o *ServerInstance) HasOsInstallImageBuildError() bool {
	if o != nil && !IsNil(o.OsInstallImageBuildError) {
		return true
	}

	return false
}

// SetOsInstallImageBuildError gets a reference to the given string and assigns it to the OsInstallImageBuildError field.
func (o *ServerInstance) SetOsInstallImageBuildError(v string) {
	o.OsInstallImageBuildError = &v
}

// GetOsInstallImageBuildInfo returns the OsInstallImageBuildInfo field value if set, zero value otherwise.
func (o *ServerInstance) GetOsInstallImageBuildInfo() ServerInstanceOsInstallImageBuildInfo {
	if o == nil || IsNil(o.OsInstallImageBuildInfo) {
		var ret ServerInstanceOsInstallImageBuildInfo
		return ret
	}
	return *o.OsInstallImageBuildInfo
}

// GetOsInstallImageBuildInfoOk returns a tuple with the OsInstallImageBuildInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetOsInstallImageBuildInfoOk() (*ServerInstanceOsInstallImageBuildInfo, bool) {
	if o == nil || IsNil(o.OsInstallImageBuildInfo) {
		return nil, false
	}
	return o.OsInstallImageBuildInfo, true
}

// HasOsInstallImageBuildInfo returns a boolean if a field has been set.
func (o *ServerInstance) HasOsInstallImageBuildInfo() bool {
	if o != nil && !IsNil(o.OsInstallImageBuildInfo) {
		return true
	}

	return false
}

// SetOsInstallImageBuildInfo gets a reference to the given ServerInstanceOsInstallImageBuildInfo and assigns it to the OsInstallImageBuildInfo field.
func (o *ServerInstance) SetOsInstallImageBuildInfo(v ServerInstanceOsInstallImageBuildInfo) {
	o.OsInstallImageBuildInfo = &v
}

// GetOsReinstallRequired returns the OsReinstallRequired field value if set, zero value otherwise.
func (o *ServerInstance) GetOsReinstallRequired() int32 {
	if o == nil || IsNil(o.OsReinstallRequired) {
		var ret int32
		return ret
	}
	return *o.OsReinstallRequired
}

// GetOsReinstallRequiredOk returns a tuple with the OsReinstallRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetOsReinstallRequiredOk() (*int32, bool) {
	if o == nil || IsNil(o.OsReinstallRequired) {
		return nil, false
	}
	return o.OsReinstallRequired, true
}

// HasOsReinstallRequired returns a boolean if a field has been set.
func (o *ServerInstance) HasOsReinstallRequired() bool {
	if o != nil && !IsNil(o.OsReinstallRequired) {
		return true
	}

	return false
}

// SetOsReinstallRequired gets a reference to the given int32 and assigns it to the OsReinstallRequired field.
func (o *ServerInstance) SetOsReinstallRequired(v int32) {
	o.OsReinstallRequired = &v
}

// GetInitiatorNqn returns the InitiatorNqn field value if set, zero value otherwise.
func (o *ServerInstance) GetInitiatorNqn() string {
	if o == nil || IsNil(o.InitiatorNqn) {
		var ret string
		return ret
	}
	return *o.InitiatorNqn
}

// GetInitiatorNqnOk returns a tuple with the InitiatorNqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetInitiatorNqnOk() (*string, bool) {
	if o == nil || IsNil(o.InitiatorNqn) {
		return nil, false
	}
	return o.InitiatorNqn, true
}

// HasInitiatorNqn returns a boolean if a field has been set.
func (o *ServerInstance) HasInitiatorNqn() bool {
	if o != nil && !IsNil(o.InitiatorNqn) {
		return true
	}

	return false
}

// SetInitiatorNqn gets a reference to the given string and assigns it to the InitiatorNqn field.
func (o *ServerInstance) SetInitiatorNqn(v string) {
	o.InitiatorNqn = &v
}

// GetIscsiInitiatorIqn returns the IscsiInitiatorIqn field value if set, zero value otherwise.
func (o *ServerInstance) GetIscsiInitiatorIqn() string {
	if o == nil || IsNil(o.IscsiInitiatorIqn) {
		var ret string
		return ret
	}
	return *o.IscsiInitiatorIqn
}

// GetIscsiInitiatorIqnOk returns a tuple with the IscsiInitiatorIqn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetIscsiInitiatorIqnOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiInitiatorIqn) {
		return nil, false
	}
	return o.IscsiInitiatorIqn, true
}

// HasIscsiInitiatorIqn returns a boolean if a field has been set.
func (o *ServerInstance) HasIscsiInitiatorIqn() bool {
	if o != nil && !IsNil(o.IscsiInitiatorIqn) {
		return true
	}

	return false
}

// SetIscsiInitiatorIqn gets a reference to the given string and assigns it to the IscsiInitiatorIqn field.
func (o *ServerInstance) SetIscsiInitiatorIqn(v string) {
	o.IscsiInitiatorIqn = &v
}

// GetIscsiInitiatorUsername returns the IscsiInitiatorUsername field value if set, zero value otherwise.
func (o *ServerInstance) GetIscsiInitiatorUsername() string {
	if o == nil || IsNil(o.IscsiInitiatorUsername) {
		var ret string
		return ret
	}
	return *o.IscsiInitiatorUsername
}

// GetIscsiInitiatorUsernameOk returns a tuple with the IscsiInitiatorUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetIscsiInitiatorUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiInitiatorUsername) {
		return nil, false
	}
	return o.IscsiInitiatorUsername, true
}

// HasIscsiInitiatorUsername returns a boolean if a field has been set.
func (o *ServerInstance) HasIscsiInitiatorUsername() bool {
	if o != nil && !IsNil(o.IscsiInitiatorUsername) {
		return true
	}

	return false
}

// SetIscsiInitiatorUsername gets a reference to the given string and assigns it to the IscsiInitiatorUsername field.
func (o *ServerInstance) SetIscsiInitiatorUsername(v string) {
	o.IscsiInitiatorUsername = &v
}

// GetIscsiInitiatorPasswordEncrypted returns the IscsiInitiatorPasswordEncrypted field value if set, zero value otherwise.
func (o *ServerInstance) GetIscsiInitiatorPasswordEncrypted() string {
	if o == nil || IsNil(o.IscsiInitiatorPasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.IscsiInitiatorPasswordEncrypted
}

// GetIscsiInitiatorPasswordEncryptedOk returns a tuple with the IscsiInitiatorPasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetIscsiInitiatorPasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.IscsiInitiatorPasswordEncrypted) {
		return nil, false
	}
	return o.IscsiInitiatorPasswordEncrypted, true
}

// HasIscsiInitiatorPasswordEncrypted returns a boolean if a field has been set.
func (o *ServerInstance) HasIscsiInitiatorPasswordEncrypted() bool {
	if o != nil && !IsNil(o.IscsiInitiatorPasswordEncrypted) {
		return true
	}

	return false
}

// SetIscsiInitiatorPasswordEncrypted gets a reference to the given string and assigns it to the IscsiInitiatorPasswordEncrypted field.
func (o *ServerInstance) SetIscsiInitiatorPasswordEncrypted(v string) {
	o.IscsiInitiatorPasswordEncrypted = &v
}

// GetControlPanelUrl returns the ControlPanelUrl field value if set, zero value otherwise.
func (o *ServerInstance) GetControlPanelUrl() string {
	if o == nil || IsNil(o.ControlPanelUrl) {
		var ret string
		return ret
	}
	return *o.ControlPanelUrl
}

// GetControlPanelUrlOk returns a tuple with the ControlPanelUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetControlPanelUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ControlPanelUrl) {
		return nil, false
	}
	return o.ControlPanelUrl, true
}

// HasControlPanelUrl returns a boolean if a field has been set.
func (o *ServerInstance) HasControlPanelUrl() bool {
	if o != nil && !IsNil(o.ControlPanelUrl) {
		return true
	}

	return false
}

// SetControlPanelUrl gets a reference to the given string and assigns it to the ControlPanelUrl field.
func (o *ServerInstance) SetControlPanelUrl(v string) {
	o.ControlPanelUrl = &v
}

// GetMeta returns the Meta field value
func (o *ServerInstance) GetMeta() GenericMeta {
	if o == nil {
		var ret GenericMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetMetaOk() (*GenericMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *ServerInstance) SetMeta(v GenericMeta) {
	o.Meta = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ServerInstance) GetConfig() ServerInstanceConfiguration {
	if o == nil || IsNil(o.Config) {
		var ret ServerInstanceConfiguration
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetConfigOk() (*ServerInstanceConfiguration, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ServerInstance) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ServerInstanceConfiguration and assigns it to the Config field.
func (o *ServerInstance) SetConfig(v ServerInstanceConfiguration) {
	o.Config = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ServerInstance) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstance) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ServerInstance) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ServerInstance) SetLinks(v []Link) {
	o.Links = v
}

func (o ServerInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	toSerialize["label"] = o.Label
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.SubdomainPermanent) {
		toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	}
	if !IsNil(o.DnsSubdomainId) {
		toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	}
	if !IsNil(o.DnsSubdomainPermanentId) {
		toSerialize["dnsSubdomainPermanentId"] = o.DnsSubdomainPermanentId
	}
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["groupId"] = o.GroupId
	if !IsNil(o.ServerTypeId) {
		toSerialize["serverTypeId"] = o.ServerTypeId
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.OsTemplateId) {
		toSerialize["osTemplateId"] = o.OsTemplateId
	}
	if !IsNil(o.InstanceWanMlagId) {
		toSerialize["instanceWanMlagId"] = o.InstanceWanMlagId
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	if !IsNil(o.PreferredServerIds) {
		toSerialize["preferredServerIds"] = o.PreferredServerIds
	}
	if !IsNil(o.CustomStorageProfile) {
		toSerialize["customStorageProfile"] = o.CustomStorageProfile
	}
	toSerialize["serviceStatus"] = o.ServiceStatus
	toSerialize["isVmInstance"] = o.IsVmInstance
	if !IsNil(o.VmInstanceId) {
		toSerialize["vmInstanceId"] = o.VmInstanceId
	}
	toSerialize["isEndpointInstance"] = o.IsEndpointInstance
	if !IsNil(o.EndpointId) {
		toSerialize["endpointId"] = o.EndpointId
	}
	if !IsNil(o.ClusterCustomInfo) {
		toSerialize["clusterCustomInfo"] = o.ClusterCustomInfo
	}
	if !IsNil(o.OsInstallError) {
		toSerialize["osInstallError"] = o.OsInstallError
	}
	if !IsNil(o.OsInstallImageUrl) {
		toSerialize["osInstallImageUrl"] = o.OsInstallImageUrl
	}
	if !IsNil(o.OsInstallImageBuildError) {
		toSerialize["osInstallImageBuildError"] = o.OsInstallImageBuildError
	}
	if !IsNil(o.OsInstallImageBuildInfo) {
		toSerialize["osInstallImageBuildInfo"] = o.OsInstallImageBuildInfo
	}
	if !IsNil(o.OsReinstallRequired) {
		toSerialize["osReinstallRequired"] = o.OsReinstallRequired
	}
	if !IsNil(o.InitiatorNqn) {
		toSerialize["initiatorNqn"] = o.InitiatorNqn
	}
	if !IsNil(o.IscsiInitiatorIqn) {
		toSerialize["iscsiInitiatorIqn"] = o.IscsiInitiatorIqn
	}
	if !IsNil(o.IscsiInitiatorUsername) {
		toSerialize["iscsiInitiatorUsername"] = o.IscsiInitiatorUsername
	}
	if !IsNil(o.IscsiInitiatorPasswordEncrypted) {
		toSerialize["iscsiInitiatorPasswordEncrypted"] = o.IscsiInitiatorPasswordEncrypted
	}
	if !IsNil(o.ControlPanelUrl) {
		toSerialize["controlPanelUrl"] = o.ControlPanelUrl
	}
	toSerialize["meta"] = o.Meta
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"revision",
		"label",
		"createdTimestamp",
		"updatedTimestamp",
		"infrastructureId",
		"groupId",
		"serviceStatus",
		"isVmInstance",
		"isEndpointInstance",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstance := _ServerInstance{}

	err = json.Unmarshal(data, &varServerInstance)

	if err != nil {
		return err
	}

	*o = ServerInstance(varServerInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "dnsSubdomainId")
		delete(additionalProperties, "dnsSubdomainPermanentId")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "groupId")
		delete(additionalProperties, "serverTypeId")
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "osTemplateId")
		delete(additionalProperties, "instanceWanMlagId")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "preferredServerIds")
		delete(additionalProperties, "customStorageProfile")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "isVmInstance")
		delete(additionalProperties, "vmInstanceId")
		delete(additionalProperties, "isEndpointInstance")
		delete(additionalProperties, "endpointId")
		delete(additionalProperties, "clusterCustomInfo")
		delete(additionalProperties, "osInstallError")
		delete(additionalProperties, "osInstallImageUrl")
		delete(additionalProperties, "osInstallImageBuildError")
		delete(additionalProperties, "osInstallImageBuildInfo")
		delete(additionalProperties, "osReinstallRequired")
		delete(additionalProperties, "initiatorNqn")
		delete(additionalProperties, "iscsiInitiatorIqn")
		delete(additionalProperties, "iscsiInitiatorUsername")
		delete(additionalProperties, "iscsiInitiatorPasswordEncrypted")
		delete(additionalProperties, "controlPanelUrl")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "config")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstance struct {
	value *ServerInstance
	isSet bool
}

func (v NullableServerInstance) Get() *ServerInstance {
	return v.value
}

func (v *NullableServerInstance) Set(val *ServerInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstance(val *ServerInstance) *NullableServerInstance {
	return &NullableServerInstance{value: val, isSet: true}
}

func (v NullableServerInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


