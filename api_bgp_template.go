/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// BGPTemplateAPIService BGPTemplateAPI service
type BGPTemplateAPIService service

type BGPTemplateAPICreateBgpTemplateRequest struct {
	ctx context.Context
	ApiService *BGPTemplateAPIService
	createBgpTemplate *CreateBgpTemplate
}

// The BGP Template create object
func (r BGPTemplateAPICreateBgpTemplateRequest) CreateBgpTemplate(createBgpTemplate CreateBgpTemplate) BGPTemplateAPICreateBgpTemplateRequest {
	r.createBgpTemplate = &createBgpTemplate
	return r
}

func (r BGPTemplateAPICreateBgpTemplateRequest) Execute() (*BgpTemplate, *http.Response, error) {
	return r.ApiService.CreateBgpTemplateExecute(r)
}

/*
CreateBgpTemplate Creates a BGP Template

Creates a BGP Template

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BGPTemplateAPICreateBgpTemplateRequest
*/
func (a *BGPTemplateAPIService) CreateBgpTemplate(ctx context.Context) BGPTemplateAPICreateBgpTemplateRequest {
	return BGPTemplateAPICreateBgpTemplateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BgpTemplate
func (a *BGPTemplateAPIService) CreateBgpTemplateExecute(r BGPTemplateAPICreateBgpTemplateRequest) (*BgpTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BgpTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BGPTemplateAPIService.CreateBgpTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bgp-templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createBgpTemplate == nil {
		return localVarReturnValue, nil, reportError("createBgpTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createBgpTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BGPTemplateAPIDeleteBgpTemplateRequest struct {
	ctx context.Context
	ApiService *BGPTemplateAPIService
	bgpTemplateId float32
}

func (r BGPTemplateAPIDeleteBgpTemplateRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBgpTemplateExecute(r)
}

/*
DeleteBgpTemplate Deletes a BGP Template

Deletes a BGP Template

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bgpTemplateId
 @return BGPTemplateAPIDeleteBgpTemplateRequest
*/
func (a *BGPTemplateAPIService) DeleteBgpTemplate(ctx context.Context, bgpTemplateId float32) BGPTemplateAPIDeleteBgpTemplateRequest {
	return BGPTemplateAPIDeleteBgpTemplateRequest{
		ApiService: a,
		ctx: ctx,
		bgpTemplateId: bgpTemplateId,
	}
}

// Execute executes the request
func (a *BGPTemplateAPIService) DeleteBgpTemplateExecute(r BGPTemplateAPIDeleteBgpTemplateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BGPTemplateAPIService.DeleteBgpTemplate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bgp-templates/{bgpTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bgpTemplateId"+"}", url.PathEscape(parameterValueToString(r.bgpTemplateId, "bgpTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BGPTemplateAPIGetBgpTemplateRequest struct {
	ctx context.Context
	ApiService *BGPTemplateAPIService
	bgpTemplateId float32
}

func (r BGPTemplateAPIGetBgpTemplateRequest) Execute() (*BgpTemplate, *http.Response, error) {
	return r.ApiService.GetBgpTemplateExecute(r)
}

/*
GetBgpTemplate Get BGP Template information

Returns BGP Template information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bgpTemplateId
 @return BGPTemplateAPIGetBgpTemplateRequest
*/
func (a *BGPTemplateAPIService) GetBgpTemplate(ctx context.Context, bgpTemplateId float32) BGPTemplateAPIGetBgpTemplateRequest {
	return BGPTemplateAPIGetBgpTemplateRequest{
		ApiService: a,
		ctx: ctx,
		bgpTemplateId: bgpTemplateId,
	}
}

// Execute executes the request
//  @return BgpTemplate
func (a *BGPTemplateAPIService) GetBgpTemplateExecute(r BGPTemplateAPIGetBgpTemplateRequest) (*BgpTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BgpTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BGPTemplateAPIService.GetBgpTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bgp-templates/{bgpTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bgpTemplateId"+"}", url.PathEscape(parameterValueToString(r.bgpTemplateId, "bgpTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BGPTemplateAPIGetBgpTemplatesRequest struct {
	ctx context.Context
	ApiService *BGPTemplateAPIService
	page *float32
	limit *float32
	filterId *[]string
	filterNetworkType *[]string
	filterNetworkDeviceDriver *[]string
	filterNetworkDevicePosition *[]string
	filterRemoteNetworkDevicePosition *[]string
	filterMlagPair *[]string
	filterBgpNumbering *[]string
	filterBgpLinkConfiguration *[]string
	filterExecutionType *[]string
	filterLibraryLabel *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r BGPTemplateAPIGetBgpTemplatesRequest) Page(page float32) BGPTemplateAPIGetBgpTemplatesRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r BGPTemplateAPIGetBgpTemplatesRequest) Limit(limit float32) BGPTemplateAPIGetBgpTemplatesRequest {
	r.limit = &limit
	return r
}

// Filter by id query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.id&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.id&#x3D;$not:$like:John Doe&amp;filter.id&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterId(filterId []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterId = &filterId
	return r
}

// Filter by networkType query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.networkType&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.networkType&#x3D;$not:$like:John Doe&amp;filter.networkType&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterNetworkType(filterNetworkType []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterNetworkType = &filterNetworkType
	return r
}

// Filter by networkDeviceDriver query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.networkDeviceDriver&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.networkDeviceDriver&#x3D;$not:$like:John Doe&amp;filter.networkDeviceDriver&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterNetworkDeviceDriver(filterNetworkDeviceDriver []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterNetworkDeviceDriver = &filterNetworkDeviceDriver
	return r
}

// Filter by networkDevicePosition query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.networkDevicePosition&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.networkDevicePosition&#x3D;$not:$like:John Doe&amp;filter.networkDevicePosition&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterNetworkDevicePosition(filterNetworkDevicePosition []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterNetworkDevicePosition = &filterNetworkDevicePosition
	return r
}

// Filter by remoteNetworkDevicePosition query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.remoteNetworkDevicePosition&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.remoteNetworkDevicePosition&#x3D;$not:$like:John Doe&amp;filter.remoteNetworkDevicePosition&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterRemoteNetworkDevicePosition(filterRemoteNetworkDevicePosition []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterRemoteNetworkDevicePosition = &filterRemoteNetworkDevicePosition
	return r
}

// Filter by mlagPair query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.mlagPair&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.mlagPair&#x3D;$not:$like:John Doe&amp;filter.mlagPair&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterMlagPair(filterMlagPair []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterMlagPair = &filterMlagPair
	return r
}

// Filter by bgpNumbering query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.bgpNumbering&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.bgpNumbering&#x3D;$not:$like:John Doe&amp;filter.bgpNumbering&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterBgpNumbering(filterBgpNumbering []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterBgpNumbering = &filterBgpNumbering
	return r
}

// Filter by bgpLinkConfiguration query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.bgpLinkConfiguration&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.bgpLinkConfiguration&#x3D;$not:$like:John Doe&amp;filter.bgpLinkConfiguration&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterBgpLinkConfiguration(filterBgpLinkConfiguration []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterBgpLinkConfiguration = &filterBgpLinkConfiguration
	return r
}

// Filter by executionType query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.executionType&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.executionType&#x3D;$not:$like:John Doe&amp;filter.executionType&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterExecutionType(filterExecutionType []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterExecutionType = &filterExecutionType
	return r
}

// Filter by libraryLabel query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.libraryLabel&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.libraryLabel&#x3D;$not:$like:John Doe&amp;filter.libraryLabel&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r BGPTemplateAPIGetBgpTemplatesRequest) FilterLibraryLabel(filterLibraryLabel []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.filterLibraryLabel = &filterLibraryLabel
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;networkType&lt;/li&gt; &lt;li&gt;networkDeviceDriver&lt;/li&gt; &lt;li&gt;networkDevicePosition&lt;/li&gt; &lt;li&gt;remoteNetworkDevicePosition&lt;/li&gt; &lt;li&gt;mlagPair&lt;/li&gt; &lt;li&gt;bgpNumbering&lt;/li&gt; &lt;li&gt;bgpLinkConfiguration&lt;/li&gt; &lt;li&gt;executionType&lt;/li&gt; &lt;li&gt;libraryLabel&lt;/li&gt;&lt;/ul&gt;       
func (r BGPTemplateAPIGetBgpTemplatesRequest) SortBy(sortBy []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r BGPTemplateAPIGetBgpTemplatesRequest) Search(search string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; id,networkType,networkDeviceDriver,networkDevicePosition,remoteNetworkDevicePosition           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;networkType&lt;/li&gt; &lt;li&gt;networkDeviceDriver&lt;/li&gt; &lt;li&gt;networkDevicePosition&lt;/li&gt; &lt;li&gt;remoteNetworkDevicePosition&lt;/li&gt; &lt;li&gt;mlagPair&lt;/li&gt; &lt;li&gt;bgpNumbering&lt;/li&gt; &lt;li&gt;bgpLinkConfiguration&lt;/li&gt; &lt;li&gt;executionType&lt;/li&gt; &lt;li&gt;libraryLabel&lt;/li&gt;&lt;/ul&gt;         
func (r BGPTemplateAPIGetBgpTemplatesRequest) SearchBy(searchBy []string) BGPTemplateAPIGetBgpTemplatesRequest {
	r.searchBy = &searchBy
	return r
}

func (r BGPTemplateAPIGetBgpTemplatesRequest) Execute() (*BgpTemplatePaginatedList, *http.Response, error) {
	return r.ApiService.GetBgpTemplatesExecute(r)
}

/*
GetBgpTemplates Get all BGP Templates

Returns list of all BGP Templates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BGPTemplateAPIGetBgpTemplatesRequest
*/
func (a *BGPTemplateAPIService) GetBgpTemplates(ctx context.Context) BGPTemplateAPIGetBgpTemplatesRequest {
	return BGPTemplateAPIGetBgpTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BgpTemplatePaginatedList
func (a *BGPTemplateAPIService) GetBgpTemplatesExecute(r BGPTemplateAPIGetBgpTemplatesRequest) (*BgpTemplatePaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BgpTemplatePaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BGPTemplateAPIService.GetBgpTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bgp-templates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterId != nil {
		t := *r.filterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.id", t, "form", "multi")
		}
	}
	if r.filterNetworkType != nil {
		t := *r.filterNetworkType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkType", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkType", t, "form", "multi")
		}
	}
	if r.filterNetworkDeviceDriver != nil {
		t := *r.filterNetworkDeviceDriver
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkDeviceDriver", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkDeviceDriver", t, "form", "multi")
		}
	}
	if r.filterNetworkDevicePosition != nil {
		t := *r.filterNetworkDevicePosition
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkDevicePosition", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkDevicePosition", t, "form", "multi")
		}
	}
	if r.filterRemoteNetworkDevicePosition != nil {
		t := *r.filterRemoteNetworkDevicePosition
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.remoteNetworkDevicePosition", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.remoteNetworkDevicePosition", t, "form", "multi")
		}
	}
	if r.filterMlagPair != nil {
		t := *r.filterMlagPair
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.mlagPair", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.mlagPair", t, "form", "multi")
		}
	}
	if r.filterBgpNumbering != nil {
		t := *r.filterBgpNumbering
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.bgpNumbering", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.bgpNumbering", t, "form", "multi")
		}
	}
	if r.filterBgpLinkConfiguration != nil {
		t := *r.filterBgpLinkConfiguration
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.bgpLinkConfiguration", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.bgpLinkConfiguration", t, "form", "multi")
		}
	}
	if r.filterExecutionType != nil {
		t := *r.filterExecutionType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.executionType", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.executionType", t, "form", "multi")
		}
	}
	if r.filterLibraryLabel != nil {
		t := *r.filterLibraryLabel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.libraryLabel", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.libraryLabel", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BGPTemplateAPIUpdateBgpTemplateRequest struct {
	ctx context.Context
	ApiService *BGPTemplateAPIService
	bgpTemplateId float32
	updateBgpTemplate *UpdateBgpTemplate
}

// The BGP Template update object
func (r BGPTemplateAPIUpdateBgpTemplateRequest) UpdateBgpTemplate(updateBgpTemplate UpdateBgpTemplate) BGPTemplateAPIUpdateBgpTemplateRequest {
	r.updateBgpTemplate = &updateBgpTemplate
	return r
}

func (r BGPTemplateAPIUpdateBgpTemplateRequest) Execute() (*BgpTemplate, *http.Response, error) {
	return r.ApiService.UpdateBgpTemplateExecute(r)
}

/*
UpdateBgpTemplate Updates BGP Template information

Updates BGP Template information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bgpTemplateId
 @return BGPTemplateAPIUpdateBgpTemplateRequest
*/
func (a *BGPTemplateAPIService) UpdateBgpTemplate(ctx context.Context, bgpTemplateId float32) BGPTemplateAPIUpdateBgpTemplateRequest {
	return BGPTemplateAPIUpdateBgpTemplateRequest{
		ApiService: a,
		ctx: ctx,
		bgpTemplateId: bgpTemplateId,
	}
}

// Execute executes the request
//  @return BgpTemplate
func (a *BGPTemplateAPIService) UpdateBgpTemplateExecute(r BGPTemplateAPIUpdateBgpTemplateRequest) (*BgpTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BgpTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BGPTemplateAPIService.UpdateBgpTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bgp-templates/{bgpTemplateId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bgpTemplateId"+"}", url.PathEscape(parameterValueToString(r.bgpTemplateId, "bgpTemplateId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateBgpTemplate == nil {
		return localVarReturnValue, nil, reportError("updateBgpTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateBgpTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
