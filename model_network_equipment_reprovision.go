/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkEquipmentReprovision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkEquipmentReprovision{}

// NetworkEquipmentReprovision struct for NetworkEquipmentReprovision
type NetworkEquipmentReprovision struct {
	// The type of re-provisioning to be performed on the network device
	ReprovisionType string `json:"reprovisionType"`
	AdditionalProperties map[string]interface{}
}

type _NetworkEquipmentReprovision NetworkEquipmentReprovision

// NewNetworkEquipmentReprovision instantiates a new NetworkEquipmentReprovision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkEquipmentReprovision(reprovisionType string) *NetworkEquipmentReprovision {
	this := NetworkEquipmentReprovision{}
	this.ReprovisionType = reprovisionType
	return &this
}

// NewNetworkEquipmentReprovisionWithDefaults instantiates a new NetworkEquipmentReprovision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkEquipmentReprovisionWithDefaults() *NetworkEquipmentReprovision {
	this := NetworkEquipmentReprovision{}
	return &this
}

// GetReprovisionType returns the ReprovisionType field value
func (o *NetworkEquipmentReprovision) GetReprovisionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReprovisionType
}

// GetReprovisionTypeOk returns a tuple with the ReprovisionType field value
// and a boolean to check if the value has been set.
func (o *NetworkEquipmentReprovision) GetReprovisionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReprovisionType, true
}

// SetReprovisionType sets field value
func (o *NetworkEquipmentReprovision) SetReprovisionType(v string) {
	o.ReprovisionType = v
}

func (o NetworkEquipmentReprovision) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkEquipmentReprovision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reprovisionType"] = o.ReprovisionType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkEquipmentReprovision) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reprovisionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkEquipmentReprovision := _NetworkEquipmentReprovision{}

	err = json.Unmarshal(data, &varNetworkEquipmentReprovision)

	if err != nil {
		return err
	}

	*o = NetworkEquipmentReprovision(varNetworkEquipmentReprovision)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reprovisionType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkEquipmentReprovision struct {
	value *NetworkEquipmentReprovision
	isSet bool
}

func (v NullableNetworkEquipmentReprovision) Get() *NetworkEquipmentReprovision {
	return v.value
}

func (v *NullableNetworkEquipmentReprovision) Set(val *NetworkEquipmentReprovision) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkEquipmentReprovision) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkEquipmentReprovision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkEquipmentReprovision(val *NetworkEquipmentReprovision) *NullableNetworkEquipmentReprovision {
	return &NullableNetworkEquipmentReprovision{value: val, isSet: true}
}

func (v NullableNetworkEquipmentReprovision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkEquipmentReprovision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


