/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ServerMetricsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerMetricsInfo{}

// ServerMetricsInfo struct for ServerMetricsInfo
type ServerMetricsInfo struct {
	// The metrics OEM info.
	Oem map[string]interface{} `json:"Oem,omitempty"`
	// The metrics name.
	Name *string `json:"Name,omitempty"`
	// The custom info of the server.
	Label *string `json:"Label,omitempty"`
	// The metrics units.
	Units *string `json:"Units,omitempty"`
	// The metrics value.
	Number *float32 `json:"Number,omitempty"`
	// The metrics physical context.
	PhysicalContext *string `json:"PhysicalContext,omitempty"`
	// The metrics fatal threshold.
	UpperThresholdFatal *float32 `json:"UpperThresholdFatal,omitempty"`
	// The metrics critical threshold.
	UpperThresholdCritical *float32 `json:"UpperThresholdCritical,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerMetricsInfo ServerMetricsInfo

// NewServerMetricsInfo instantiates a new ServerMetricsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerMetricsInfo() *ServerMetricsInfo {
	this := ServerMetricsInfo{}
	return &this
}

// NewServerMetricsInfoWithDefaults instantiates a new ServerMetricsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerMetricsInfoWithDefaults() *ServerMetricsInfo {
	this := ServerMetricsInfo{}
	return &this
}

// GetOem returns the Oem field value if set, zero value otherwise.
func (o *ServerMetricsInfo) GetOem() map[string]interface{} {
	if o == nil || IsNil(o.Oem) {
		var ret map[string]interface{}
		return ret
	}
	return o.Oem
}

// GetOemOk returns a tuple with the Oem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetricsInfo) GetOemOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Oem) {
		return map[string]interface{}{}, false
	}
	return o.Oem, true
}

// HasOem returns a boolean if a field has been set.
func (o *ServerMetricsInfo) HasOem() bool {
	if o != nil && !IsNil(o.Oem) {
		return true
	}

	return false
}

// SetOem gets a reference to the given map[string]interface{} and assigns it to the Oem field.
func (o *ServerMetricsInfo) SetOem(v map[string]interface{}) {
	o.Oem = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ServerMetricsInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetricsInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ServerMetricsInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ServerMetricsInfo) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ServerMetricsInfo) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetricsInfo) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ServerMetricsInfo) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ServerMetricsInfo) SetLabel(v string) {
	o.Label = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *ServerMetricsInfo) GetUnits() string {
	if o == nil || IsNil(o.Units) {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetricsInfo) GetUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *ServerMetricsInfo) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *ServerMetricsInfo) SetUnits(v string) {
	o.Units = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *ServerMetricsInfo) GetNumber() float32 {
	if o == nil || IsNil(o.Number) {
		var ret float32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetricsInfo) GetNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *ServerMetricsInfo) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given float32 and assigns it to the Number field.
func (o *ServerMetricsInfo) SetNumber(v float32) {
	o.Number = &v
}

// GetPhysicalContext returns the PhysicalContext field value if set, zero value otherwise.
func (o *ServerMetricsInfo) GetPhysicalContext() string {
	if o == nil || IsNil(o.PhysicalContext) {
		var ret string
		return ret
	}
	return *o.PhysicalContext
}

// GetPhysicalContextOk returns a tuple with the PhysicalContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetricsInfo) GetPhysicalContextOk() (*string, bool) {
	if o == nil || IsNil(o.PhysicalContext) {
		return nil, false
	}
	return o.PhysicalContext, true
}

// HasPhysicalContext returns a boolean if a field has been set.
func (o *ServerMetricsInfo) HasPhysicalContext() bool {
	if o != nil && !IsNil(o.PhysicalContext) {
		return true
	}

	return false
}

// SetPhysicalContext gets a reference to the given string and assigns it to the PhysicalContext field.
func (o *ServerMetricsInfo) SetPhysicalContext(v string) {
	o.PhysicalContext = &v
}

// GetUpperThresholdFatal returns the UpperThresholdFatal field value if set, zero value otherwise.
func (o *ServerMetricsInfo) GetUpperThresholdFatal() float32 {
	if o == nil || IsNil(o.UpperThresholdFatal) {
		var ret float32
		return ret
	}
	return *o.UpperThresholdFatal
}

// GetUpperThresholdFatalOk returns a tuple with the UpperThresholdFatal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetricsInfo) GetUpperThresholdFatalOk() (*float32, bool) {
	if o == nil || IsNil(o.UpperThresholdFatal) {
		return nil, false
	}
	return o.UpperThresholdFatal, true
}

// HasUpperThresholdFatal returns a boolean if a field has been set.
func (o *ServerMetricsInfo) HasUpperThresholdFatal() bool {
	if o != nil && !IsNil(o.UpperThresholdFatal) {
		return true
	}

	return false
}

// SetUpperThresholdFatal gets a reference to the given float32 and assigns it to the UpperThresholdFatal field.
func (o *ServerMetricsInfo) SetUpperThresholdFatal(v float32) {
	o.UpperThresholdFatal = &v
}

// GetUpperThresholdCritical returns the UpperThresholdCritical field value if set, zero value otherwise.
func (o *ServerMetricsInfo) GetUpperThresholdCritical() float32 {
	if o == nil || IsNil(o.UpperThresholdCritical) {
		var ret float32
		return ret
	}
	return *o.UpperThresholdCritical
}

// GetUpperThresholdCriticalOk returns a tuple with the UpperThresholdCritical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerMetricsInfo) GetUpperThresholdCriticalOk() (*float32, bool) {
	if o == nil || IsNil(o.UpperThresholdCritical) {
		return nil, false
	}
	return o.UpperThresholdCritical, true
}

// HasUpperThresholdCritical returns a boolean if a field has been set.
func (o *ServerMetricsInfo) HasUpperThresholdCritical() bool {
	if o != nil && !IsNil(o.UpperThresholdCritical) {
		return true
	}

	return false
}

// SetUpperThresholdCritical gets a reference to the given float32 and assigns it to the UpperThresholdCritical field.
func (o *ServerMetricsInfo) SetUpperThresholdCritical(v float32) {
	o.UpperThresholdCritical = &v
}

func (o ServerMetricsInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerMetricsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Oem) {
		toSerialize["Oem"] = o.Oem
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Label) {
		toSerialize["Label"] = o.Label
	}
	if !IsNil(o.Units) {
		toSerialize["Units"] = o.Units
	}
	if !IsNil(o.Number) {
		toSerialize["Number"] = o.Number
	}
	if !IsNil(o.PhysicalContext) {
		toSerialize["PhysicalContext"] = o.PhysicalContext
	}
	if !IsNil(o.UpperThresholdFatal) {
		toSerialize["UpperThresholdFatal"] = o.UpperThresholdFatal
	}
	if !IsNil(o.UpperThresholdCritical) {
		toSerialize["UpperThresholdCritical"] = o.UpperThresholdCritical
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerMetricsInfo) UnmarshalJSON(data []byte) (err error) {
	varServerMetricsInfo := _ServerMetricsInfo{}

	err = json.Unmarshal(data, &varServerMetricsInfo)

	if err != nil {
		return err
	}

	*o = ServerMetricsInfo(varServerMetricsInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Oem")
		delete(additionalProperties, "Name")
		delete(additionalProperties, "Label")
		delete(additionalProperties, "Units")
		delete(additionalProperties, "Number")
		delete(additionalProperties, "PhysicalContext")
		delete(additionalProperties, "UpperThresholdFatal")
		delete(additionalProperties, "UpperThresholdCritical")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerMetricsInfo struct {
	value *ServerMetricsInfo
	isSet bool
}

func (v NullableServerMetricsInfo) Get() *ServerMetricsInfo {
	return v.value
}

func (v *NullableServerMetricsInfo) Set(val *ServerMetricsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerMetricsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerMetricsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerMetricsInfo(val *ServerMetricsInfo) *NullableServerMetricsInfo {
	return &NullableServerMetricsInfo{value: val, isSet: true}
}

func (v NullableServerMetricsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerMetricsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


