/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateSubnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSubnet{}

// CreateSubnet struct for CreateSubnet
type CreateSubnet struct {
	Label *string `json:"label,omitempty"`
	Name *string `json:"name,omitempty"`
	Annotations *map[string]string `json:"annotations,omitempty"`
	Tags *map[string]string `json:"tags,omitempty"`
	ParentSubnetId *int32 `json:"parentSubnetId,omitempty"`
	NetworkAddress string `json:"networkAddress"`
	PrefixLength int32 `json:"prefixLength"`
	DefaultGatewayAddress *string `json:"defaultGatewayAddress,omitempty"`
	IsPool bool `json:"isPool"`
	AllocationDenylist []AddressRange `json:"allocationDenylist,omitempty"`
	ChildOverlapAllowRules []string `json:"childOverlapAllowRules,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateSubnet CreateSubnet

// NewCreateSubnet instantiates a new CreateSubnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubnet(networkAddress string, prefixLength int32, isPool bool) *CreateSubnet {
	this := CreateSubnet{}
	this.NetworkAddress = networkAddress
	this.PrefixLength = prefixLength
	this.IsPool = isPool
	return &this
}

// NewCreateSubnetWithDefaults instantiates a new CreateSubnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubnetWithDefaults() *CreateSubnet {
	this := CreateSubnet{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CreateSubnet) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CreateSubnet) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CreateSubnet) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateSubnet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateSubnet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateSubnet) SetName(v string) {
	o.Name = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *CreateSubnet) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *CreateSubnet) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *CreateSubnet) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateSubnet) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateSubnet) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *CreateSubnet) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetParentSubnetId returns the ParentSubnetId field value if set, zero value otherwise.
func (o *CreateSubnet) GetParentSubnetId() int32 {
	if o == nil || IsNil(o.ParentSubnetId) {
		var ret int32
		return ret
	}
	return *o.ParentSubnetId
}

// GetParentSubnetIdOk returns a tuple with the ParentSubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetParentSubnetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentSubnetId) {
		return nil, false
	}
	return o.ParentSubnetId, true
}

// HasParentSubnetId returns a boolean if a field has been set.
func (o *CreateSubnet) HasParentSubnetId() bool {
	if o != nil && !IsNil(o.ParentSubnetId) {
		return true
	}

	return false
}

// SetParentSubnetId gets a reference to the given int32 and assigns it to the ParentSubnetId field.
func (o *CreateSubnet) SetParentSubnetId(v int32) {
	o.ParentSubnetId = &v
}

// GetNetworkAddress returns the NetworkAddress field value
func (o *CreateSubnet) GetNetworkAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkAddress
}

// GetNetworkAddressOk returns a tuple with the NetworkAddress field value
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetNetworkAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkAddress, true
}

// SetNetworkAddress sets field value
func (o *CreateSubnet) SetNetworkAddress(v string) {
	o.NetworkAddress = v
}

// GetPrefixLength returns the PrefixLength field value
func (o *CreateSubnet) GetPrefixLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetPrefixLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixLength, true
}

// SetPrefixLength sets field value
func (o *CreateSubnet) SetPrefixLength(v int32) {
	o.PrefixLength = v
}

// GetDefaultGatewayAddress returns the DefaultGatewayAddress field value if set, zero value otherwise.
func (o *CreateSubnet) GetDefaultGatewayAddress() string {
	if o == nil || IsNil(o.DefaultGatewayAddress) {
		var ret string
		return ret
	}
	return *o.DefaultGatewayAddress
}

// GetDefaultGatewayAddressOk returns a tuple with the DefaultGatewayAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetDefaultGatewayAddressOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultGatewayAddress) {
		return nil, false
	}
	return o.DefaultGatewayAddress, true
}

// HasDefaultGatewayAddress returns a boolean if a field has been set.
func (o *CreateSubnet) HasDefaultGatewayAddress() bool {
	if o != nil && !IsNil(o.DefaultGatewayAddress) {
		return true
	}

	return false
}

// SetDefaultGatewayAddress gets a reference to the given string and assigns it to the DefaultGatewayAddress field.
func (o *CreateSubnet) SetDefaultGatewayAddress(v string) {
	o.DefaultGatewayAddress = &v
}

// GetIsPool returns the IsPool field value
func (o *CreateSubnet) GetIsPool() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPool
}

// GetIsPoolOk returns a tuple with the IsPool field value
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetIsPoolOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPool, true
}

// SetIsPool sets field value
func (o *CreateSubnet) SetIsPool(v bool) {
	o.IsPool = v
}

// GetAllocationDenylist returns the AllocationDenylist field value if set, zero value otherwise.
func (o *CreateSubnet) GetAllocationDenylist() []AddressRange {
	if o == nil || IsNil(o.AllocationDenylist) {
		var ret []AddressRange
		return ret
	}
	return o.AllocationDenylist
}

// GetAllocationDenylistOk returns a tuple with the AllocationDenylist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetAllocationDenylistOk() ([]AddressRange, bool) {
	if o == nil || IsNil(o.AllocationDenylist) {
		return nil, false
	}
	return o.AllocationDenylist, true
}

// HasAllocationDenylist returns a boolean if a field has been set.
func (o *CreateSubnet) HasAllocationDenylist() bool {
	if o != nil && !IsNil(o.AllocationDenylist) {
		return true
	}

	return false
}

// SetAllocationDenylist gets a reference to the given []AddressRange and assigns it to the AllocationDenylist field.
func (o *CreateSubnet) SetAllocationDenylist(v []AddressRange) {
	o.AllocationDenylist = v
}

// GetChildOverlapAllowRules returns the ChildOverlapAllowRules field value if set, zero value otherwise.
func (o *CreateSubnet) GetChildOverlapAllowRules() []string {
	if o == nil || IsNil(o.ChildOverlapAllowRules) {
		var ret []string
		return ret
	}
	return o.ChildOverlapAllowRules
}

// GetChildOverlapAllowRulesOk returns a tuple with the ChildOverlapAllowRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnet) GetChildOverlapAllowRulesOk() ([]string, bool) {
	if o == nil || IsNil(o.ChildOverlapAllowRules) {
		return nil, false
	}
	return o.ChildOverlapAllowRules, true
}

// HasChildOverlapAllowRules returns a boolean if a field has been set.
func (o *CreateSubnet) HasChildOverlapAllowRules() bool {
	if o != nil && !IsNil(o.ChildOverlapAllowRules) {
		return true
	}

	return false
}

// SetChildOverlapAllowRules gets a reference to the given []string and assigns it to the ChildOverlapAllowRules field.
func (o *CreateSubnet) SetChildOverlapAllowRules(v []string) {
	o.ChildOverlapAllowRules = v
}

func (o CreateSubnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSubnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ParentSubnetId) {
		toSerialize["parentSubnetId"] = o.ParentSubnetId
	}
	toSerialize["networkAddress"] = o.NetworkAddress
	toSerialize["prefixLength"] = o.PrefixLength
	if !IsNil(o.DefaultGatewayAddress) {
		toSerialize["defaultGatewayAddress"] = o.DefaultGatewayAddress
	}
	toSerialize["isPool"] = o.IsPool
	if !IsNil(o.AllocationDenylist) {
		toSerialize["allocationDenylist"] = o.AllocationDenylist
	}
	if !IsNil(o.ChildOverlapAllowRules) {
		toSerialize["childOverlapAllowRules"] = o.ChildOverlapAllowRules
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateSubnet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"networkAddress",
		"prefixLength",
		"isPool",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateSubnet := _CreateSubnet{}

	err = json.Unmarshal(data, &varCreateSubnet)

	if err != nil {
		return err
	}

	*o = CreateSubnet(varCreateSubnet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "name")
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "parentSubnetId")
		delete(additionalProperties, "networkAddress")
		delete(additionalProperties, "prefixLength")
		delete(additionalProperties, "defaultGatewayAddress")
		delete(additionalProperties, "isPool")
		delete(additionalProperties, "allocationDenylist")
		delete(additionalProperties, "childOverlapAllowRules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateSubnet struct {
	value *CreateSubnet
	isSet bool
}

func (v NullableCreateSubnet) Get() *CreateSubnet {
	return v.value
}

func (v *NullableCreateSubnet) Set(val *CreateSubnet) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubnet(val *CreateSubnet) *NullableCreateSubnet {
	return &NullableCreateSubnet{value: val, isSet: true}
}

func (v NullableCreateSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


