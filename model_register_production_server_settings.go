/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the RegisterProductionServerSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterProductionServerSettings{}

// RegisterProductionServerSettings struct for RegisterProductionServerSettings
type RegisterProductionServerSettings struct {
	// The id of the infrastructure where the server is located.
	InfrastructureId float32 `json:"infrastructureId"`
	// The id of the template installed on the server.
	OsTemplateId *float32 `json:"osTemplateId,omitempty"`
	// Interface to network device connection settings.
	InterfaceConnections []ServerInterfaceConnection `json:"interfaceConnections,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RegisterProductionServerSettings RegisterProductionServerSettings

// NewRegisterProductionServerSettings instantiates a new RegisterProductionServerSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterProductionServerSettings(infrastructureId float32) *RegisterProductionServerSettings {
	this := RegisterProductionServerSettings{}
	this.InfrastructureId = infrastructureId
	return &this
}

// NewRegisterProductionServerSettingsWithDefaults instantiates a new RegisterProductionServerSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterProductionServerSettingsWithDefaults() *RegisterProductionServerSettings {
	this := RegisterProductionServerSettings{}
	return &this
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *RegisterProductionServerSettings) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *RegisterProductionServerSettings) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *RegisterProductionServerSettings) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetOsTemplateId returns the OsTemplateId field value if set, zero value otherwise.
func (o *RegisterProductionServerSettings) GetOsTemplateId() float32 {
	if o == nil || IsNil(o.OsTemplateId) {
		var ret float32
		return ret
	}
	return *o.OsTemplateId
}

// GetOsTemplateIdOk returns a tuple with the OsTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServerSettings) GetOsTemplateIdOk() (*float32, bool) {
	if o == nil || IsNil(o.OsTemplateId) {
		return nil, false
	}
	return o.OsTemplateId, true
}

// HasOsTemplateId returns a boolean if a field has been set.
func (o *RegisterProductionServerSettings) HasOsTemplateId() bool {
	if o != nil && !IsNil(o.OsTemplateId) {
		return true
	}

	return false
}

// SetOsTemplateId gets a reference to the given float32 and assigns it to the OsTemplateId field.
func (o *RegisterProductionServerSettings) SetOsTemplateId(v float32) {
	o.OsTemplateId = &v
}

// GetInterfaceConnections returns the InterfaceConnections field value if set, zero value otherwise.
func (o *RegisterProductionServerSettings) GetInterfaceConnections() []ServerInterfaceConnection {
	if o == nil || IsNil(o.InterfaceConnections) {
		var ret []ServerInterfaceConnection
		return ret
	}
	return o.InterfaceConnections
}

// GetInterfaceConnectionsOk returns a tuple with the InterfaceConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProductionServerSettings) GetInterfaceConnectionsOk() ([]ServerInterfaceConnection, bool) {
	if o == nil || IsNil(o.InterfaceConnections) {
		return nil, false
	}
	return o.InterfaceConnections, true
}

// HasInterfaceConnections returns a boolean if a field has been set.
func (o *RegisterProductionServerSettings) HasInterfaceConnections() bool {
	if o != nil && !IsNil(o.InterfaceConnections) {
		return true
	}

	return false
}

// SetInterfaceConnections gets a reference to the given []ServerInterfaceConnection and assigns it to the InterfaceConnections field.
func (o *RegisterProductionServerSettings) SetInterfaceConnections(v []ServerInterfaceConnection) {
	o.InterfaceConnections = v
}

func (o RegisterProductionServerSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterProductionServerSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["infrastructureId"] = o.InfrastructureId
	if !IsNil(o.OsTemplateId) {
		toSerialize["osTemplateId"] = o.OsTemplateId
	}
	if !IsNil(o.InterfaceConnections) {
		toSerialize["interfaceConnections"] = o.InterfaceConnections
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RegisterProductionServerSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"infrastructureId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterProductionServerSettings := _RegisterProductionServerSettings{}

	err = json.Unmarshal(data, &varRegisterProductionServerSettings)

	if err != nil {
		return err
	}

	*o = RegisterProductionServerSettings(varRegisterProductionServerSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "osTemplateId")
		delete(additionalProperties, "interfaceConnections")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRegisterProductionServerSettings struct {
	value *RegisterProductionServerSettings
	isSet bool
}

func (v NullableRegisterProductionServerSettings) Get() *RegisterProductionServerSettings {
	return v.value
}

func (v *NullableRegisterProductionServerSettings) Set(val *RegisterProductionServerSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterProductionServerSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterProductionServerSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterProductionServerSettings(val *RegisterProductionServerSettings) *NullableRegisterProductionServerSettings {
	return &NullableRegisterProductionServerSettings{value: val, isSet: true}
}

func (v NullableRegisterProductionServerSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterProductionServerSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


