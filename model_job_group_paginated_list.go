/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the JobGroupPaginatedList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobGroupPaginatedList{}

// JobGroupPaginatedList struct for JobGroupPaginatedList
type JobGroupPaginatedList struct {
	Data []JobGroup `json:"data"`
	// Metadata about the pagination of the response
	Meta PaginatedResponseMeta `json:"meta"`
	// Links to navigate through the paginated results
	Links *PaginatedResponseLinks `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobGroupPaginatedList JobGroupPaginatedList

// NewJobGroupPaginatedList instantiates a new JobGroupPaginatedList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobGroupPaginatedList(data []JobGroup, meta PaginatedResponseMeta) *JobGroupPaginatedList {
	this := JobGroupPaginatedList{}
	this.Data = data
	this.Meta = meta
	return &this
}

// NewJobGroupPaginatedListWithDefaults instantiates a new JobGroupPaginatedList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobGroupPaginatedListWithDefaults() *JobGroupPaginatedList {
	this := JobGroupPaginatedList{}
	return &this
}

// GetData returns the Data field value
func (o *JobGroupPaginatedList) GetData() []JobGroup {
	if o == nil {
		var ret []JobGroup
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *JobGroupPaginatedList) GetDataOk() ([]JobGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *JobGroupPaginatedList) SetData(v []JobGroup) {
	o.Data = v
}

// GetMeta returns the Meta field value
func (o *JobGroupPaginatedList) GetMeta() PaginatedResponseMeta {
	if o == nil {
		var ret PaginatedResponseMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *JobGroupPaginatedList) GetMetaOk() (*PaginatedResponseMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *JobGroupPaginatedList) SetMeta(v PaginatedResponseMeta) {
	o.Meta = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *JobGroupPaginatedList) GetLinks() PaginatedResponseLinks {
	if o == nil || IsNil(o.Links) {
		var ret PaginatedResponseLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobGroupPaginatedList) GetLinksOk() (*PaginatedResponseLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *JobGroupPaginatedList) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given PaginatedResponseLinks and assigns it to the Links field.
func (o *JobGroupPaginatedList) SetLinks(v PaginatedResponseLinks) {
	o.Links = &v
}

func (o JobGroupPaginatedList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobGroupPaginatedList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["meta"] = o.Meta
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobGroupPaginatedList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobGroupPaginatedList := _JobGroupPaginatedList{}

	err = json.Unmarshal(data, &varJobGroupPaginatedList)

	if err != nil {
		return err
	}

	*o = JobGroupPaginatedList(varJobGroupPaginatedList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobGroupPaginatedList struct {
	value *JobGroupPaginatedList
	isSet bool
}

func (v NullableJobGroupPaginatedList) Get() *JobGroupPaginatedList {
	return v.value
}

func (v *NullableJobGroupPaginatedList) Set(val *JobGroupPaginatedList) {
	v.value = val
	v.isSet = true
}

func (v NullableJobGroupPaginatedList) IsSet() bool {
	return v.isSet
}

func (v *NullableJobGroupPaginatedList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobGroupPaginatedList(val *JobGroupPaginatedList) *NullableJobGroupPaginatedList {
	return &NullableJobGroupPaginatedList{value: val, isSet: true}
}

func (v NullableJobGroupPaginatedList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobGroupPaginatedList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


