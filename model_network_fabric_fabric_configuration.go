/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// NetworkFabricFabricConfiguration - The fabric configuration
type NetworkFabricFabricConfiguration struct {
	EthernetEvpnVxlanL2FabricDto *EthernetEvpnVxlanL2FabricDto
	EthernetEvpnVxlanL3FabricDto *EthernetEvpnVxlanL3FabricDto
	EthernetFabricDto *EthernetFabricDto
	EthernetFlatL2FabricDto *EthernetFlatL2FabricDto
	EthernetFlatL3FabricDto *EthernetFlatL3FabricDto
	EthernetHybridL2L3FabricDto *EthernetHybridL2L3FabricDto
	FibreChannelFabricDto *FibreChannelFabricDto
	InfiniBandFabricDto *InfiniBandFabricDto
	OvnFabricDto *OvnFabricDto
	UnmanagedFabricDto *UnmanagedFabricDto
	VirtualFabricDto *VirtualFabricDto
}

// EthernetEvpnVxlanL2FabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns EthernetEvpnVxlanL2FabricDto wrapped in NetworkFabricFabricConfiguration
func EthernetEvpnVxlanL2FabricDtoAsNetworkFabricFabricConfiguration(v *EthernetEvpnVxlanL2FabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		EthernetEvpnVxlanL2FabricDto: v,
	}
}

// EthernetEvpnVxlanL3FabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns EthernetEvpnVxlanL3FabricDto wrapped in NetworkFabricFabricConfiguration
func EthernetEvpnVxlanL3FabricDtoAsNetworkFabricFabricConfiguration(v *EthernetEvpnVxlanL3FabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		EthernetEvpnVxlanL3FabricDto: v,
	}
}

// EthernetFabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns EthernetFabricDto wrapped in NetworkFabricFabricConfiguration
func EthernetFabricDtoAsNetworkFabricFabricConfiguration(v *EthernetFabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		EthernetFabricDto: v,
	}
}

// EthernetFlatL2FabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns EthernetFlatL2FabricDto wrapped in NetworkFabricFabricConfiguration
func EthernetFlatL2FabricDtoAsNetworkFabricFabricConfiguration(v *EthernetFlatL2FabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		EthernetFlatL2FabricDto: v,
	}
}

// EthernetFlatL3FabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns EthernetFlatL3FabricDto wrapped in NetworkFabricFabricConfiguration
func EthernetFlatL3FabricDtoAsNetworkFabricFabricConfiguration(v *EthernetFlatL3FabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		EthernetFlatL3FabricDto: v,
	}
}

// EthernetHybridL2L3FabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns EthernetHybridL2L3FabricDto wrapped in NetworkFabricFabricConfiguration
func EthernetHybridL2L3FabricDtoAsNetworkFabricFabricConfiguration(v *EthernetHybridL2L3FabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		EthernetHybridL2L3FabricDto: v,
	}
}

// FibreChannelFabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns FibreChannelFabricDto wrapped in NetworkFabricFabricConfiguration
func FibreChannelFabricDtoAsNetworkFabricFabricConfiguration(v *FibreChannelFabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		FibreChannelFabricDto: v,
	}
}

// InfiniBandFabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns InfiniBandFabricDto wrapped in NetworkFabricFabricConfiguration
func InfiniBandFabricDtoAsNetworkFabricFabricConfiguration(v *InfiniBandFabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		InfiniBandFabricDto: v,
	}
}

// OvnFabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns OvnFabricDto wrapped in NetworkFabricFabricConfiguration
func OvnFabricDtoAsNetworkFabricFabricConfiguration(v *OvnFabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		OvnFabricDto: v,
	}
}

// UnmanagedFabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns UnmanagedFabricDto wrapped in NetworkFabricFabricConfiguration
func UnmanagedFabricDtoAsNetworkFabricFabricConfiguration(v *UnmanagedFabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		UnmanagedFabricDto: v,
	}
}

// VirtualFabricDtoAsNetworkFabricFabricConfiguration is a convenience function that returns VirtualFabricDto wrapped in NetworkFabricFabricConfiguration
func VirtualFabricDtoAsNetworkFabricFabricConfiguration(v *VirtualFabricDto) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		VirtualFabricDto: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkFabricFabricConfiguration) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EthernetEvpnVxlanL2FabricDto
	err = newStrictDecoder(data).Decode(&dst.EthernetEvpnVxlanL2FabricDto)
	if err == nil {
		jsonEthernetEvpnVxlanL2FabricDto, _ := json.Marshal(dst.EthernetEvpnVxlanL2FabricDto)
		if string(jsonEthernetEvpnVxlanL2FabricDto) == "{}" { // empty struct
			dst.EthernetEvpnVxlanL2FabricDto = nil
		} else {
			if err = validator.Validate(dst.EthernetEvpnVxlanL2FabricDto); err != nil {
				dst.EthernetEvpnVxlanL2FabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.EthernetEvpnVxlanL2FabricDto = nil
	}

	// try to unmarshal data into EthernetEvpnVxlanL3FabricDto
	err = newStrictDecoder(data).Decode(&dst.EthernetEvpnVxlanL3FabricDto)
	if err == nil {
		jsonEthernetEvpnVxlanL3FabricDto, _ := json.Marshal(dst.EthernetEvpnVxlanL3FabricDto)
		if string(jsonEthernetEvpnVxlanL3FabricDto) == "{}" { // empty struct
			dst.EthernetEvpnVxlanL3FabricDto = nil
		} else {
			if err = validator.Validate(dst.EthernetEvpnVxlanL3FabricDto); err != nil {
				dst.EthernetEvpnVxlanL3FabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.EthernetEvpnVxlanL3FabricDto = nil
	}

	// try to unmarshal data into EthernetFabricDto
	err = newStrictDecoder(data).Decode(&dst.EthernetFabricDto)
	if err == nil {
		jsonEthernetFabricDto, _ := json.Marshal(dst.EthernetFabricDto)
		if string(jsonEthernetFabricDto) == "{}" { // empty struct
			dst.EthernetFabricDto = nil
		} else {
			if err = validator.Validate(dst.EthernetFabricDto); err != nil {
				dst.EthernetFabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.EthernetFabricDto = nil
	}

	// try to unmarshal data into EthernetFlatL2FabricDto
	err = newStrictDecoder(data).Decode(&dst.EthernetFlatL2FabricDto)
	if err == nil {
		jsonEthernetFlatL2FabricDto, _ := json.Marshal(dst.EthernetFlatL2FabricDto)
		if string(jsonEthernetFlatL2FabricDto) == "{}" { // empty struct
			dst.EthernetFlatL2FabricDto = nil
		} else {
			if err = validator.Validate(dst.EthernetFlatL2FabricDto); err != nil {
				dst.EthernetFlatL2FabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.EthernetFlatL2FabricDto = nil
	}

	// try to unmarshal data into EthernetFlatL3FabricDto
	err = newStrictDecoder(data).Decode(&dst.EthernetFlatL3FabricDto)
	if err == nil {
		jsonEthernetFlatL3FabricDto, _ := json.Marshal(dst.EthernetFlatL3FabricDto)
		if string(jsonEthernetFlatL3FabricDto) == "{}" { // empty struct
			dst.EthernetFlatL3FabricDto = nil
		} else {
			if err = validator.Validate(dst.EthernetFlatL3FabricDto); err != nil {
				dst.EthernetFlatL3FabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.EthernetFlatL3FabricDto = nil
	}

	// try to unmarshal data into EthernetHybridL2L3FabricDto
	err = newStrictDecoder(data).Decode(&dst.EthernetHybridL2L3FabricDto)
	if err == nil {
		jsonEthernetHybridL2L3FabricDto, _ := json.Marshal(dst.EthernetHybridL2L3FabricDto)
		if string(jsonEthernetHybridL2L3FabricDto) == "{}" { // empty struct
			dst.EthernetHybridL2L3FabricDto = nil
		} else {
			if err = validator.Validate(dst.EthernetHybridL2L3FabricDto); err != nil {
				dst.EthernetHybridL2L3FabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.EthernetHybridL2L3FabricDto = nil
	}

	// try to unmarshal data into FibreChannelFabricDto
	err = newStrictDecoder(data).Decode(&dst.FibreChannelFabricDto)
	if err == nil {
		jsonFibreChannelFabricDto, _ := json.Marshal(dst.FibreChannelFabricDto)
		if string(jsonFibreChannelFabricDto) == "{}" { // empty struct
			dst.FibreChannelFabricDto = nil
		} else {
			if err = validator.Validate(dst.FibreChannelFabricDto); err != nil {
				dst.FibreChannelFabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.FibreChannelFabricDto = nil
	}

	// try to unmarshal data into InfiniBandFabricDto
	err = newStrictDecoder(data).Decode(&dst.InfiniBandFabricDto)
	if err == nil {
		jsonInfiniBandFabricDto, _ := json.Marshal(dst.InfiniBandFabricDto)
		if string(jsonInfiniBandFabricDto) == "{}" { // empty struct
			dst.InfiniBandFabricDto = nil
		} else {
			if err = validator.Validate(dst.InfiniBandFabricDto); err != nil {
				dst.InfiniBandFabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.InfiniBandFabricDto = nil
	}

	// try to unmarshal data into OvnFabricDto
	err = newStrictDecoder(data).Decode(&dst.OvnFabricDto)
	if err == nil {
		jsonOvnFabricDto, _ := json.Marshal(dst.OvnFabricDto)
		if string(jsonOvnFabricDto) == "{}" { // empty struct
			dst.OvnFabricDto = nil
		} else {
			if err = validator.Validate(dst.OvnFabricDto); err != nil {
				dst.OvnFabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.OvnFabricDto = nil
	}

	// try to unmarshal data into UnmanagedFabricDto
	err = newStrictDecoder(data).Decode(&dst.UnmanagedFabricDto)
	if err == nil {
		jsonUnmanagedFabricDto, _ := json.Marshal(dst.UnmanagedFabricDto)
		if string(jsonUnmanagedFabricDto) == "{}" { // empty struct
			dst.UnmanagedFabricDto = nil
		} else {
			if err = validator.Validate(dst.UnmanagedFabricDto); err != nil {
				dst.UnmanagedFabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnmanagedFabricDto = nil
	}

	// try to unmarshal data into VirtualFabricDto
	err = newStrictDecoder(data).Decode(&dst.VirtualFabricDto)
	if err == nil {
		jsonVirtualFabricDto, _ := json.Marshal(dst.VirtualFabricDto)
		if string(jsonVirtualFabricDto) == "{}" { // empty struct
			dst.VirtualFabricDto = nil
		} else {
			if err = validator.Validate(dst.VirtualFabricDto); err != nil {
				dst.VirtualFabricDto = nil
			} else {
				match++
			}
		}
	} else {
		dst.VirtualFabricDto = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EthernetEvpnVxlanL2FabricDto = nil
		dst.EthernetEvpnVxlanL3FabricDto = nil
		dst.EthernetFabricDto = nil
		dst.EthernetFlatL2FabricDto = nil
		dst.EthernetFlatL3FabricDto = nil
		dst.EthernetHybridL2L3FabricDto = nil
		dst.FibreChannelFabricDto = nil
		dst.InfiniBandFabricDto = nil
		dst.OvnFabricDto = nil
		dst.UnmanagedFabricDto = nil
		dst.VirtualFabricDto = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NetworkFabricFabricConfiguration)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NetworkFabricFabricConfiguration)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkFabricFabricConfiguration) MarshalJSON() ([]byte, error) {
	if src.EthernetEvpnVxlanL2FabricDto != nil {
		return json.Marshal(&src.EthernetEvpnVxlanL2FabricDto)
	}

	if src.EthernetEvpnVxlanL3FabricDto != nil {
		return json.Marshal(&src.EthernetEvpnVxlanL3FabricDto)
	}

	if src.EthernetFabricDto != nil {
		return json.Marshal(&src.EthernetFabricDto)
	}

	if src.EthernetFlatL2FabricDto != nil {
		return json.Marshal(&src.EthernetFlatL2FabricDto)
	}

	if src.EthernetFlatL3FabricDto != nil {
		return json.Marshal(&src.EthernetFlatL3FabricDto)
	}

	if src.EthernetHybridL2L3FabricDto != nil {
		return json.Marshal(&src.EthernetHybridL2L3FabricDto)
	}

	if src.FibreChannelFabricDto != nil {
		return json.Marshal(&src.FibreChannelFabricDto)
	}

	if src.InfiniBandFabricDto != nil {
		return json.Marshal(&src.InfiniBandFabricDto)
	}

	if src.OvnFabricDto != nil {
		return json.Marshal(&src.OvnFabricDto)
	}

	if src.UnmanagedFabricDto != nil {
		return json.Marshal(&src.UnmanagedFabricDto)
	}

	if src.VirtualFabricDto != nil {
		return json.Marshal(&src.VirtualFabricDto)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkFabricFabricConfiguration) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EthernetEvpnVxlanL2FabricDto != nil {
		return obj.EthernetEvpnVxlanL2FabricDto
	}

	if obj.EthernetEvpnVxlanL3FabricDto != nil {
		return obj.EthernetEvpnVxlanL3FabricDto
	}

	if obj.EthernetFabricDto != nil {
		return obj.EthernetFabricDto
	}

	if obj.EthernetFlatL2FabricDto != nil {
		return obj.EthernetFlatL2FabricDto
	}

	if obj.EthernetFlatL3FabricDto != nil {
		return obj.EthernetFlatL3FabricDto
	}

	if obj.EthernetHybridL2L3FabricDto != nil {
		return obj.EthernetHybridL2L3FabricDto
	}

	if obj.FibreChannelFabricDto != nil {
		return obj.FibreChannelFabricDto
	}

	if obj.InfiniBandFabricDto != nil {
		return obj.InfiniBandFabricDto
	}

	if obj.OvnFabricDto != nil {
		return obj.OvnFabricDto
	}

	if obj.UnmanagedFabricDto != nil {
		return obj.UnmanagedFabricDto
	}

	if obj.VirtualFabricDto != nil {
		return obj.VirtualFabricDto
	}

	// all schemas are nil
	return nil
}

type NullableNetworkFabricFabricConfiguration struct {
	value *NetworkFabricFabricConfiguration
	isSet bool
}

func (v NullableNetworkFabricFabricConfiguration) Get() *NetworkFabricFabricConfiguration {
	return v.value
}

func (v *NullableNetworkFabricFabricConfiguration) Set(val *NetworkFabricFabricConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkFabricFabricConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkFabricFabricConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkFabricFabricConfiguration(val *NetworkFabricFabricConfiguration) *NullableNetworkFabricFabricConfiguration {
	return &NullableNetworkFabricFabricConfiguration{value: val, isSet: true}
}

func (v NullableNetworkFabricFabricConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkFabricFabricConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


