/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// NetworkFabricFabricConfiguration - Network fabric configuration with type-specific properties based on the fabricType discriminator
type NetworkFabricFabricConfiguration struct {
	EthernetFabric *EthernetFabric
	FibreChannelFabric *FibreChannelFabric
}

// EthernetFabricAsNetworkFabricFabricConfiguration is a convenience function that returns EthernetFabric wrapped in NetworkFabricFabricConfiguration
func EthernetFabricAsNetworkFabricFabricConfiguration(v *EthernetFabric) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		EthernetFabric: v,
	}
}

// FibreChannelFabricAsNetworkFabricFabricConfiguration is a convenience function that returns FibreChannelFabric wrapped in NetworkFabricFabricConfiguration
func FibreChannelFabricAsNetworkFabricFabricConfiguration(v *FibreChannelFabric) NetworkFabricFabricConfiguration {
	return NetworkFabricFabricConfiguration{
		FibreChannelFabric: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkFabricFabricConfiguration) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EthernetFabric
	err = newStrictDecoder(data).Decode(&dst.EthernetFabric)
	if err == nil {
		jsonEthernetFabric, _ := json.Marshal(dst.EthernetFabric)
		if string(jsonEthernetFabric) == "{}" { // empty struct
			dst.EthernetFabric = nil
		} else {
			if err = validator.Validate(dst.EthernetFabric); err != nil {
				dst.EthernetFabric = nil
			} else {
				match++
			}
		}
	} else {
		dst.EthernetFabric = nil
	}

	// try to unmarshal data into FibreChannelFabric
	err = newStrictDecoder(data).Decode(&dst.FibreChannelFabric)
	if err == nil {
		jsonFibreChannelFabric, _ := json.Marshal(dst.FibreChannelFabric)
		if string(jsonFibreChannelFabric) == "{}" { // empty struct
			dst.FibreChannelFabric = nil
		} else {
			if err = validator.Validate(dst.FibreChannelFabric); err != nil {
				dst.FibreChannelFabric = nil
			} else {
				match++
			}
		}
	} else {
		dst.FibreChannelFabric = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EthernetFabric = nil
		dst.FibreChannelFabric = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NetworkFabricFabricConfiguration)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NetworkFabricFabricConfiguration)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkFabricFabricConfiguration) MarshalJSON() ([]byte, error) {
	if src.EthernetFabric != nil {
		return json.Marshal(&src.EthernetFabric)
	}

	if src.FibreChannelFabric != nil {
		return json.Marshal(&src.FibreChannelFabric)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkFabricFabricConfiguration) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EthernetFabric != nil {
		return obj.EthernetFabric
	}

	if obj.FibreChannelFabric != nil {
		return obj.FibreChannelFabric
	}

	// all schemas are nil
	return nil
}

type NullableNetworkFabricFabricConfiguration struct {
	value *NetworkFabricFabricConfiguration
	isSet bool
}

func (v NullableNetworkFabricFabricConfiguration) Get() *NetworkFabricFabricConfiguration {
	return v.value
}

func (v *NullableNetworkFabricFabricConfiguration) Set(val *NetworkFabricFabricConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkFabricFabricConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkFabricFabricConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkFabricFabricConfiguration(val *NetworkFabricFabricConfiguration) *NullableNetworkFabricFabricConfiguration {
	return &NullableNetworkFabricFabricConfiguration{value: val, isSet: true}
}

func (v NullableNetworkFabricFabricConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkFabricFabricConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


