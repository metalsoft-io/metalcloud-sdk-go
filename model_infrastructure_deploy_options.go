/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InfrastructureDeployOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureDeployOptions{}

// InfrastructureDeployOptions struct for InfrastructureDeployOptions
type InfrastructureDeployOptions struct {
	// Allow data loss
	AllowDataLoss bool `json:"allowDataLoss"`
	ShutdownOptions InfrastructureDeployShutdownOptions `json:"shutdownOptions"`
	// An object having as key the server type id and as value an array of preferred server ids
	ServerTypeIdToPreferredServerIds map[string]interface{} `json:"serverTypeIdToPreferredServerIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureDeployOptions InfrastructureDeployOptions

// NewInfrastructureDeployOptions instantiates a new InfrastructureDeployOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureDeployOptions(allowDataLoss bool, shutdownOptions InfrastructureDeployShutdownOptions) *InfrastructureDeployOptions {
	this := InfrastructureDeployOptions{}
	this.AllowDataLoss = allowDataLoss
	this.ShutdownOptions = shutdownOptions
	return &this
}

// NewInfrastructureDeployOptionsWithDefaults instantiates a new InfrastructureDeployOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureDeployOptionsWithDefaults() *InfrastructureDeployOptions {
	this := InfrastructureDeployOptions{}
	return &this
}

// GetAllowDataLoss returns the AllowDataLoss field value
func (o *InfrastructureDeployOptions) GetAllowDataLoss() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowDataLoss
}

// GetAllowDataLossOk returns a tuple with the AllowDataLoss field value
// and a boolean to check if the value has been set.
func (o *InfrastructureDeployOptions) GetAllowDataLossOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowDataLoss, true
}

// SetAllowDataLoss sets field value
func (o *InfrastructureDeployOptions) SetAllowDataLoss(v bool) {
	o.AllowDataLoss = v
}

// GetShutdownOptions returns the ShutdownOptions field value
func (o *InfrastructureDeployOptions) GetShutdownOptions() InfrastructureDeployShutdownOptions {
	if o == nil {
		var ret InfrastructureDeployShutdownOptions
		return ret
	}

	return o.ShutdownOptions
}

// GetShutdownOptionsOk returns a tuple with the ShutdownOptions field value
// and a boolean to check if the value has been set.
func (o *InfrastructureDeployOptions) GetShutdownOptionsOk() (*InfrastructureDeployShutdownOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShutdownOptions, true
}

// SetShutdownOptions sets field value
func (o *InfrastructureDeployOptions) SetShutdownOptions(v InfrastructureDeployShutdownOptions) {
	o.ShutdownOptions = v
}

// GetServerTypeIdToPreferredServerIds returns the ServerTypeIdToPreferredServerIds field value if set, zero value otherwise.
func (o *InfrastructureDeployOptions) GetServerTypeIdToPreferredServerIds() map[string]interface{} {
	if o == nil || IsNil(o.ServerTypeIdToPreferredServerIds) {
		var ret map[string]interface{}
		return ret
	}
	return o.ServerTypeIdToPreferredServerIds
}

// GetServerTypeIdToPreferredServerIdsOk returns a tuple with the ServerTypeIdToPreferredServerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureDeployOptions) GetServerTypeIdToPreferredServerIdsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ServerTypeIdToPreferredServerIds) {
		return map[string]interface{}{}, false
	}
	return o.ServerTypeIdToPreferredServerIds, true
}

// HasServerTypeIdToPreferredServerIds returns a boolean if a field has been set.
func (o *InfrastructureDeployOptions) HasServerTypeIdToPreferredServerIds() bool {
	if o != nil && !IsNil(o.ServerTypeIdToPreferredServerIds) {
		return true
	}

	return false
}

// SetServerTypeIdToPreferredServerIds gets a reference to the given map[string]interface{} and assigns it to the ServerTypeIdToPreferredServerIds field.
func (o *InfrastructureDeployOptions) SetServerTypeIdToPreferredServerIds(v map[string]interface{}) {
	o.ServerTypeIdToPreferredServerIds = v
}

func (o InfrastructureDeployOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureDeployOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowDataLoss"] = o.AllowDataLoss
	toSerialize["shutdownOptions"] = o.ShutdownOptions
	if !IsNil(o.ServerTypeIdToPreferredServerIds) {
		toSerialize["serverTypeIdToPreferredServerIds"] = o.ServerTypeIdToPreferredServerIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureDeployOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowDataLoss",
		"shutdownOptions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfrastructureDeployOptions := _InfrastructureDeployOptions{}

	err = json.Unmarshal(data, &varInfrastructureDeployOptions)

	if err != nil {
		return err
	}

	*o = InfrastructureDeployOptions(varInfrastructureDeployOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowDataLoss")
		delete(additionalProperties, "shutdownOptions")
		delete(additionalProperties, "serverTypeIdToPreferredServerIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureDeployOptions struct {
	value *InfrastructureDeployOptions
	isSet bool
}

func (v NullableInfrastructureDeployOptions) Get() *InfrastructureDeployOptions {
	return v.value
}

func (v *NullableInfrastructureDeployOptions) Set(val *InfrastructureDeployOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureDeployOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureDeployOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureDeployOptions(val *InfrastructureDeployOptions) *NullableInfrastructureDeployOptions {
	return &NullableInfrastructureDeployOptions{value: val, isSet: true}
}

func (v NullableInfrastructureDeployOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureDeployOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


