/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ManualVniAllocationStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManualVniAllocationStrategy{}

// ManualVniAllocationStrategy struct for ManualVniAllocationStrategy
type ManualVniAllocationStrategy struct {
	Id int32 `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Kind AllocationStrategyKind `json:"kind"`
	Scope ResourceScope `json:"scope"`
	Vni int32 `json:"vni"`
	AdditionalProperties map[string]interface{}
}

type _ManualVniAllocationStrategy ManualVniAllocationStrategy

// NewManualVniAllocationStrategy instantiates a new ManualVniAllocationStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualVniAllocationStrategy(id int32, createdAt time.Time, updatedAt time.Time, kind AllocationStrategyKind, scope ResourceScope, vni int32) *ManualVniAllocationStrategy {
	this := ManualVniAllocationStrategy{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Kind = kind
	this.Scope = scope
	this.Vni = vni
	return &this
}

// NewManualVniAllocationStrategyWithDefaults instantiates a new ManualVniAllocationStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualVniAllocationStrategyWithDefaults() *ManualVniAllocationStrategy {
	this := ManualVniAllocationStrategy{}
	return &this
}

// GetId returns the Id field value
func (o *ManualVniAllocationStrategy) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ManualVniAllocationStrategy) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ManualVniAllocationStrategy) SetId(v int32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ManualVniAllocationStrategy) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ManualVniAllocationStrategy) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ManualVniAllocationStrategy) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ManualVniAllocationStrategy) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ManualVniAllocationStrategy) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ManualVniAllocationStrategy) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetKind returns the Kind field value
func (o *ManualVniAllocationStrategy) GetKind() AllocationStrategyKind {
	if o == nil {
		var ret AllocationStrategyKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ManualVniAllocationStrategy) GetKindOk() (*AllocationStrategyKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ManualVniAllocationStrategy) SetKind(v AllocationStrategyKind) {
	o.Kind = v
}

// GetScope returns the Scope field value
func (o *ManualVniAllocationStrategy) GetScope() ResourceScope {
	if o == nil {
		var ret ResourceScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *ManualVniAllocationStrategy) GetScopeOk() (*ResourceScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *ManualVniAllocationStrategy) SetScope(v ResourceScope) {
	o.Scope = v
}

// GetVni returns the Vni field value
func (o *ManualVniAllocationStrategy) GetVni() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vni
}

// GetVniOk returns a tuple with the Vni field value
// and a boolean to check if the value has been set.
func (o *ManualVniAllocationStrategy) GetVniOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vni, true
}

// SetVni sets field value
func (o *ManualVniAllocationStrategy) SetVni(v int32) {
	o.Vni = v
}

func (o ManualVniAllocationStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManualVniAllocationStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["kind"] = o.Kind
	toSerialize["scope"] = o.Scope
	toSerialize["vni"] = o.Vni

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManualVniAllocationStrategy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdAt",
		"updatedAt",
		"kind",
		"scope",
		"vni",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManualVniAllocationStrategy := _ManualVniAllocationStrategy{}

	err = json.Unmarshal(data, &varManualVniAllocationStrategy)

	if err != nil {
		return err
	}

	*o = ManualVniAllocationStrategy(varManualVniAllocationStrategy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "kind")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "vni")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManualVniAllocationStrategy struct {
	value *ManualVniAllocationStrategy
	isSet bool
}

func (v NullableManualVniAllocationStrategy) Get() *ManualVniAllocationStrategy {
	return v.value
}

func (v *NullableManualVniAllocationStrategy) Set(val *ManualVniAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableManualVniAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableManualVniAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualVniAllocationStrategy(val *ManualVniAllocationStrategy) *NullableManualVniAllocationStrategy {
	return &NullableManualVniAllocationStrategy{value: val, isSet: true}
}

func (v NullableManualVniAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualVniAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


