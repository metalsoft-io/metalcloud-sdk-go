/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UtilizationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtilizationData{}

// UtilizationData struct for UtilizationData
type UtilizationData struct {
	Quantity float32 `json:"quantity"`
	MeasurementUnit string `json:"measurementUnit"`
	// Collection of metered waypoints
	MeteredWaypoints []ResourceItem `json:"meteredWaypoints,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UtilizationData UtilizationData

// NewUtilizationData instantiates a new UtilizationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilizationData(quantity float32, measurementUnit string) *UtilizationData {
	this := UtilizationData{}
	this.Quantity = quantity
	this.MeasurementUnit = measurementUnit
	return &this
}

// NewUtilizationDataWithDefaults instantiates a new UtilizationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilizationDataWithDefaults() *UtilizationData {
	this := UtilizationData{}
	return &this
}

// GetQuantity returns the Quantity field value
func (o *UtilizationData) GetQuantity() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *UtilizationData) GetQuantityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *UtilizationData) SetQuantity(v float32) {
	o.Quantity = v
}

// GetMeasurementUnit returns the MeasurementUnit field value
func (o *UtilizationData) GetMeasurementUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MeasurementUnit
}

// GetMeasurementUnitOk returns a tuple with the MeasurementUnit field value
// and a boolean to check if the value has been set.
func (o *UtilizationData) GetMeasurementUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasurementUnit, true
}

// SetMeasurementUnit sets field value
func (o *UtilizationData) SetMeasurementUnit(v string) {
	o.MeasurementUnit = v
}

// GetMeteredWaypoints returns the MeteredWaypoints field value if set, zero value otherwise.
func (o *UtilizationData) GetMeteredWaypoints() []ResourceItem {
	if o == nil || IsNil(o.MeteredWaypoints) {
		var ret []ResourceItem
		return ret
	}
	return o.MeteredWaypoints
}

// GetMeteredWaypointsOk returns a tuple with the MeteredWaypoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilizationData) GetMeteredWaypointsOk() ([]ResourceItem, bool) {
	if o == nil || IsNil(o.MeteredWaypoints) {
		return nil, false
	}
	return o.MeteredWaypoints, true
}

// HasMeteredWaypoints returns a boolean if a field has been set.
func (o *UtilizationData) HasMeteredWaypoints() bool {
	if o != nil && !IsNil(o.MeteredWaypoints) {
		return true
	}

	return false
}

// SetMeteredWaypoints gets a reference to the given []ResourceItem and assigns it to the MeteredWaypoints field.
func (o *UtilizationData) SetMeteredWaypoints(v []ResourceItem) {
	o.MeteredWaypoints = v
}

func (o UtilizationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtilizationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quantity"] = o.Quantity
	toSerialize["measurementUnit"] = o.MeasurementUnit
	if !IsNil(o.MeteredWaypoints) {
		toSerialize["meteredWaypoints"] = o.MeteredWaypoints
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UtilizationData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quantity",
		"measurementUnit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUtilizationData := _UtilizationData{}

	err = json.Unmarshal(data, &varUtilizationData)

	if err != nil {
		return err
	}

	*o = UtilizationData(varUtilizationData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "measurementUnit")
		delete(additionalProperties, "meteredWaypoints")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUtilizationData struct {
	value *UtilizationData
	isSet bool
}

func (v NullableUtilizationData) Get() *UtilizationData {
	return v.value
}

func (v *NullableUtilizationData) Set(val *UtilizationData) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilizationData) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilizationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilizationData(val *UtilizationData) *NullableUtilizationData {
	return &NullableUtilizationData{value: val, isSet: true}
}

func (v NullableUtilizationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilizationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


