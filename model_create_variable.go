/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateVariable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVariable{}

// CreateVariable struct for CreateVariable
type CreateVariable struct {
	// The variable name.
	Name string `json:"name"`
	// The variable value.
	Value map[string]interface{} `json:"value"`
	// Variable usage type.
	Usage *VariableUsageType `json:"usage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateVariable CreateVariable

// NewCreateVariable instantiates a new CreateVariable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVariable(name string, value map[string]interface{}) *CreateVariable {
	this := CreateVariable{}
	this.Name = name
	this.Value = value
	return &this
}

// NewCreateVariableWithDefaults instantiates a new CreateVariable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVariableWithDefaults() *CreateVariable {
	this := CreateVariable{}
	return &this
}

// GetName returns the Name field value
func (o *CreateVariable) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateVariable) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateVariable) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *CreateVariable) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CreateVariable) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *CreateVariable) SetValue(v map[string]interface{}) {
	o.Value = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *CreateVariable) GetUsage() VariableUsageType {
	if o == nil || IsNil(o.Usage) {
		var ret VariableUsageType
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVariable) GetUsageOk() (*VariableUsageType, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *CreateVariable) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given VariableUsageType and assigns it to the Usage field.
func (o *CreateVariable) SetUsage(v VariableUsageType) {
	o.Usage = &v
}

func (o CreateVariable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVariable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateVariable) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVariable := _CreateVariable{}

	err = json.Unmarshal(data, &varCreateVariable)

	if err != nil {
		return err
	}

	*o = CreateVariable(varCreateVariable)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "value")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateVariable struct {
	value *CreateVariable
	isSet bool
}

func (v NullableCreateVariable) Get() *CreateVariable {
	return v.value
}

func (v *NullableCreateVariable) Set(val *CreateVariable) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVariable) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVariable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVariable(val *CreateVariable) *NullableCreateVariable {
	return &NullableCreateVariable{value: val, isSet: true}
}

func (v NullableCreateVariable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVariable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


