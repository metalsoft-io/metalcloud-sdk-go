/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// SearchFirmwareBinaryServerComponentFilter - Input options for server component filters.
type SearchFirmwareBinaryServerComponentFilter struct {
	DellComponentFilter *DellComponentFilter
	HpComponentFilter *HpComponentFilter
	LenovoComponentFilter *LenovoComponentFilter
}

// DellComponentFilterAsSearchFirmwareBinaryServerComponentFilter is a convenience function that returns DellComponentFilter wrapped in SearchFirmwareBinaryServerComponentFilter
func DellComponentFilterAsSearchFirmwareBinaryServerComponentFilter(v *DellComponentFilter) SearchFirmwareBinaryServerComponentFilter {
	return SearchFirmwareBinaryServerComponentFilter{
		DellComponentFilter: v,
	}
}

// HpComponentFilterAsSearchFirmwareBinaryServerComponentFilter is a convenience function that returns HpComponentFilter wrapped in SearchFirmwareBinaryServerComponentFilter
func HpComponentFilterAsSearchFirmwareBinaryServerComponentFilter(v *HpComponentFilter) SearchFirmwareBinaryServerComponentFilter {
	return SearchFirmwareBinaryServerComponentFilter{
		HpComponentFilter: v,
	}
}

// LenovoComponentFilterAsSearchFirmwareBinaryServerComponentFilter is a convenience function that returns LenovoComponentFilter wrapped in SearchFirmwareBinaryServerComponentFilter
func LenovoComponentFilterAsSearchFirmwareBinaryServerComponentFilter(v *LenovoComponentFilter) SearchFirmwareBinaryServerComponentFilter {
	return SearchFirmwareBinaryServerComponentFilter{
		LenovoComponentFilter: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SearchFirmwareBinaryServerComponentFilter) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'dell'
	if jsonDict["vendor"] == "dell" {
		// try to unmarshal JSON data into DellComponentFilter
		err = json.Unmarshal(data, &dst.DellComponentFilter)
		if err == nil {
			return nil // data stored in dst.DellComponentFilter, return on the first match
		} else {
			dst.DellComponentFilter = nil
			return fmt.Errorf("failed to unmarshal SearchFirmwareBinaryServerComponentFilter as DellComponentFilter: %s", err.Error())
		}
	}

	// check if the discriminator value is 'hp'
	if jsonDict["vendor"] == "hp" {
		// try to unmarshal JSON data into HpComponentFilter
		err = json.Unmarshal(data, &dst.HpComponentFilter)
		if err == nil {
			return nil // data stored in dst.HpComponentFilter, return on the first match
		} else {
			dst.HpComponentFilter = nil
			return fmt.Errorf("failed to unmarshal SearchFirmwareBinaryServerComponentFilter as HpComponentFilter: %s", err.Error())
		}
	}

	// check if the discriminator value is 'lenovo'
	if jsonDict["vendor"] == "lenovo" {
		// try to unmarshal JSON data into LenovoComponentFilter
		err = json.Unmarshal(data, &dst.LenovoComponentFilter)
		if err == nil {
			return nil // data stored in dst.LenovoComponentFilter, return on the first match
		} else {
			dst.LenovoComponentFilter = nil
			return fmt.Errorf("failed to unmarshal SearchFirmwareBinaryServerComponentFilter as LenovoComponentFilter: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DellComponentFilter'
	if jsonDict["vendor"] == "DellComponentFilter" {
		// try to unmarshal JSON data into DellComponentFilter
		err = json.Unmarshal(data, &dst.DellComponentFilter)
		if err == nil {
			return nil // data stored in dst.DellComponentFilter, return on the first match
		} else {
			dst.DellComponentFilter = nil
			return fmt.Errorf("failed to unmarshal SearchFirmwareBinaryServerComponentFilter as DellComponentFilter: %s", err.Error())
		}
	}

	// check if the discriminator value is 'HpComponentFilter'
	if jsonDict["vendor"] == "HpComponentFilter" {
		// try to unmarshal JSON data into HpComponentFilter
		err = json.Unmarshal(data, &dst.HpComponentFilter)
		if err == nil {
			return nil // data stored in dst.HpComponentFilter, return on the first match
		} else {
			dst.HpComponentFilter = nil
			return fmt.Errorf("failed to unmarshal SearchFirmwareBinaryServerComponentFilter as HpComponentFilter: %s", err.Error())
		}
	}

	// check if the discriminator value is 'LenovoComponentFilter'
	if jsonDict["vendor"] == "LenovoComponentFilter" {
		// try to unmarshal JSON data into LenovoComponentFilter
		err = json.Unmarshal(data, &dst.LenovoComponentFilter)
		if err == nil {
			return nil // data stored in dst.LenovoComponentFilter, return on the first match
		} else {
			dst.LenovoComponentFilter = nil
			return fmt.Errorf("failed to unmarshal SearchFirmwareBinaryServerComponentFilter as LenovoComponentFilter: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SearchFirmwareBinaryServerComponentFilter) MarshalJSON() ([]byte, error) {
	if src.DellComponentFilter != nil {
		return json.Marshal(&src.DellComponentFilter)
	}

	if src.HpComponentFilter != nil {
		return json.Marshal(&src.HpComponentFilter)
	}

	if src.LenovoComponentFilter != nil {
		return json.Marshal(&src.LenovoComponentFilter)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SearchFirmwareBinaryServerComponentFilter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DellComponentFilter != nil {
		return obj.DellComponentFilter
	}

	if obj.HpComponentFilter != nil {
		return obj.HpComponentFilter
	}

	if obj.LenovoComponentFilter != nil {
		return obj.LenovoComponentFilter
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SearchFirmwareBinaryServerComponentFilter) GetActualInstanceValue() (interface{}) {
	if obj.DellComponentFilter != nil {
		return *obj.DellComponentFilter
	}

	if obj.HpComponentFilter != nil {
		return *obj.HpComponentFilter
	}

	if obj.LenovoComponentFilter != nil {
		return *obj.LenovoComponentFilter
	}

	// all schemas are nil
	return nil
}

type NullableSearchFirmwareBinaryServerComponentFilter struct {
	value *SearchFirmwareBinaryServerComponentFilter
	isSet bool
}

func (v NullableSearchFirmwareBinaryServerComponentFilter) Get() *SearchFirmwareBinaryServerComponentFilter {
	return v.value
}

func (v *NullableSearchFirmwareBinaryServerComponentFilter) Set(val *SearchFirmwareBinaryServerComponentFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFirmwareBinaryServerComponentFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFirmwareBinaryServerComponentFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFirmwareBinaryServerComponentFilter(val *SearchFirmwareBinaryServerComponentFilter) *NullableSearchFirmwareBinaryServerComponentFilter {
	return &NullableSearchFirmwareBinaryServerComponentFilter{value: val, isSet: true}
}

func (v NullableSearchFirmwareBinaryServerComponentFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFirmwareBinaryServerComponentFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


