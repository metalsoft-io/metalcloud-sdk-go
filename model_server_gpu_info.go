/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerGpuInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerGpuInfo{}

// ServerGpuInfo struct for ServerGpuInfo
type ServerGpuInfo struct {
	// The model of the GPU
	Model string `json:"model"`
	// The vendor of the GPU
	Vendor string `json:"vendor"`
	AdditionalProperties map[string]interface{}
}

type _ServerGpuInfo ServerGpuInfo

// NewServerGpuInfo instantiates a new ServerGpuInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerGpuInfo(model string, vendor string) *ServerGpuInfo {
	this := ServerGpuInfo{}
	this.Model = model
	this.Vendor = vendor
	return &this
}

// NewServerGpuInfoWithDefaults instantiates a new ServerGpuInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerGpuInfoWithDefaults() *ServerGpuInfo {
	this := ServerGpuInfo{}
	return &this
}

// GetModel returns the Model field value
func (o *ServerGpuInfo) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ServerGpuInfo) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ServerGpuInfo) SetModel(v string) {
	o.Model = v
}

// GetVendor returns the Vendor field value
func (o *ServerGpuInfo) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *ServerGpuInfo) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *ServerGpuInfo) SetVendor(v string) {
	o.Vendor = v
}

func (o ServerGpuInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerGpuInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model
	toSerialize["vendor"] = o.Vendor

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerGpuInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
		"vendor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerGpuInfo := _ServerGpuInfo{}

	err = json.Unmarshal(data, &varServerGpuInfo)

	if err != nil {
		return err
	}

	*o = ServerGpuInfo(varServerGpuInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model")
		delete(additionalProperties, "vendor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerGpuInfo struct {
	value *ServerGpuInfo
	isSet bool
}

func (v NullableServerGpuInfo) Get() *ServerGpuInfo {
	return v.value
}

func (v *NullableServerGpuInfo) Set(val *ServerGpuInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerGpuInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerGpuInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerGpuInfo(val *ServerGpuInfo) *NullableServerGpuInfo {
	return &NullableServerGpuInfo{value: val, isSet: true}
}

func (v NullableServerGpuInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerGpuInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


