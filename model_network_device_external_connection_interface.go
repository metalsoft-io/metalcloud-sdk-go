/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkDeviceExternalConnectionInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDeviceExternalConnectionInterface{}

// NetworkDeviceExternalConnectionInterface struct for NetworkDeviceExternalConnectionInterface
type NetworkDeviceExternalConnectionInterface struct {
	// Network device id
	NetworkDeviceId float32 `json:"networkDeviceId"`
	// Network device interface id
	NetworkDeviceInterfaceId float32 `json:"networkDeviceInterfaceId"`
	// Network device interface name
	NetworkDeviceInterfaceName *string `json:"networkDeviceInterfaceName,omitempty"`
	// Network external connection id, null if not connected to an existing external connection
	ExternalConnectionId *float32 `json:"externalConnectionId,omitempty"`
	// external connection interface id, null if not connected to an existing external connection interface
	ExternalConnectionInterfaceId *float32 `json:"externalConnectionInterfaceId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkDeviceExternalConnectionInterface NetworkDeviceExternalConnectionInterface

// NewNetworkDeviceExternalConnectionInterface instantiates a new NetworkDeviceExternalConnectionInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDeviceExternalConnectionInterface(networkDeviceId float32, networkDeviceInterfaceId float32) *NetworkDeviceExternalConnectionInterface {
	this := NetworkDeviceExternalConnectionInterface{}
	this.NetworkDeviceId = networkDeviceId
	this.NetworkDeviceInterfaceId = networkDeviceInterfaceId
	return &this
}

// NewNetworkDeviceExternalConnectionInterfaceWithDefaults instantiates a new NetworkDeviceExternalConnectionInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDeviceExternalConnectionInterfaceWithDefaults() *NetworkDeviceExternalConnectionInterface {
	this := NetworkDeviceExternalConnectionInterface{}
	return &this
}

// GetNetworkDeviceId returns the NetworkDeviceId field value
func (o *NetworkDeviceExternalConnectionInterface) GetNetworkDeviceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NetworkDeviceId
}

// GetNetworkDeviceIdOk returns a tuple with the NetworkDeviceId field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceExternalConnectionInterface) GetNetworkDeviceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDeviceId, true
}

// SetNetworkDeviceId sets field value
func (o *NetworkDeviceExternalConnectionInterface) SetNetworkDeviceId(v float32) {
	o.NetworkDeviceId = v
}

// GetNetworkDeviceInterfaceId returns the NetworkDeviceInterfaceId field value
func (o *NetworkDeviceExternalConnectionInterface) GetNetworkDeviceInterfaceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NetworkDeviceInterfaceId
}

// GetNetworkDeviceInterfaceIdOk returns a tuple with the NetworkDeviceInterfaceId field value
// and a boolean to check if the value has been set.
func (o *NetworkDeviceExternalConnectionInterface) GetNetworkDeviceInterfaceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkDeviceInterfaceId, true
}

// SetNetworkDeviceInterfaceId sets field value
func (o *NetworkDeviceExternalConnectionInterface) SetNetworkDeviceInterfaceId(v float32) {
	o.NetworkDeviceInterfaceId = v
}

// GetNetworkDeviceInterfaceName returns the NetworkDeviceInterfaceName field value if set, zero value otherwise.
func (o *NetworkDeviceExternalConnectionInterface) GetNetworkDeviceInterfaceName() string {
	if o == nil || IsNil(o.NetworkDeviceInterfaceName) {
		var ret string
		return ret
	}
	return *o.NetworkDeviceInterfaceName
}

// GetNetworkDeviceInterfaceNameOk returns a tuple with the NetworkDeviceInterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceExternalConnectionInterface) GetNetworkDeviceInterfaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkDeviceInterfaceName) {
		return nil, false
	}
	return o.NetworkDeviceInterfaceName, true
}

// HasNetworkDeviceInterfaceName returns a boolean if a field has been set.
func (o *NetworkDeviceExternalConnectionInterface) HasNetworkDeviceInterfaceName() bool {
	if o != nil && !IsNil(o.NetworkDeviceInterfaceName) {
		return true
	}

	return false
}

// SetNetworkDeviceInterfaceName gets a reference to the given string and assigns it to the NetworkDeviceInterfaceName field.
func (o *NetworkDeviceExternalConnectionInterface) SetNetworkDeviceInterfaceName(v string) {
	o.NetworkDeviceInterfaceName = &v
}

// GetExternalConnectionId returns the ExternalConnectionId field value if set, zero value otherwise.
func (o *NetworkDeviceExternalConnectionInterface) GetExternalConnectionId() float32 {
	if o == nil || IsNil(o.ExternalConnectionId) {
		var ret float32
		return ret
	}
	return *o.ExternalConnectionId
}

// GetExternalConnectionIdOk returns a tuple with the ExternalConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceExternalConnectionInterface) GetExternalConnectionIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ExternalConnectionId) {
		return nil, false
	}
	return o.ExternalConnectionId, true
}

// HasExternalConnectionId returns a boolean if a field has been set.
func (o *NetworkDeviceExternalConnectionInterface) HasExternalConnectionId() bool {
	if o != nil && !IsNil(o.ExternalConnectionId) {
		return true
	}

	return false
}

// SetExternalConnectionId gets a reference to the given float32 and assigns it to the ExternalConnectionId field.
func (o *NetworkDeviceExternalConnectionInterface) SetExternalConnectionId(v float32) {
	o.ExternalConnectionId = &v
}

// GetExternalConnectionInterfaceId returns the ExternalConnectionInterfaceId field value if set, zero value otherwise.
func (o *NetworkDeviceExternalConnectionInterface) GetExternalConnectionInterfaceId() float32 {
	if o == nil || IsNil(o.ExternalConnectionInterfaceId) {
		var ret float32
		return ret
	}
	return *o.ExternalConnectionInterfaceId
}

// GetExternalConnectionInterfaceIdOk returns a tuple with the ExternalConnectionInterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDeviceExternalConnectionInterface) GetExternalConnectionInterfaceIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ExternalConnectionInterfaceId) {
		return nil, false
	}
	return o.ExternalConnectionInterfaceId, true
}

// HasExternalConnectionInterfaceId returns a boolean if a field has been set.
func (o *NetworkDeviceExternalConnectionInterface) HasExternalConnectionInterfaceId() bool {
	if o != nil && !IsNil(o.ExternalConnectionInterfaceId) {
		return true
	}

	return false
}

// SetExternalConnectionInterfaceId gets a reference to the given float32 and assigns it to the ExternalConnectionInterfaceId field.
func (o *NetworkDeviceExternalConnectionInterface) SetExternalConnectionInterfaceId(v float32) {
	o.ExternalConnectionInterfaceId = &v
}

func (o NetworkDeviceExternalConnectionInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDeviceExternalConnectionInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["networkDeviceId"] = o.NetworkDeviceId
	toSerialize["networkDeviceInterfaceId"] = o.NetworkDeviceInterfaceId
	if !IsNil(o.NetworkDeviceInterfaceName) {
		toSerialize["networkDeviceInterfaceName"] = o.NetworkDeviceInterfaceName
	}
	if !IsNil(o.ExternalConnectionId) {
		toSerialize["externalConnectionId"] = o.ExternalConnectionId
	}
	if !IsNil(o.ExternalConnectionInterfaceId) {
		toSerialize["externalConnectionInterfaceId"] = o.ExternalConnectionInterfaceId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkDeviceExternalConnectionInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"networkDeviceId",
		"networkDeviceInterfaceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkDeviceExternalConnectionInterface := _NetworkDeviceExternalConnectionInterface{}

	err = json.Unmarshal(data, &varNetworkDeviceExternalConnectionInterface)

	if err != nil {
		return err
	}

	*o = NetworkDeviceExternalConnectionInterface(varNetworkDeviceExternalConnectionInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "networkDeviceId")
		delete(additionalProperties, "networkDeviceInterfaceId")
		delete(additionalProperties, "networkDeviceInterfaceName")
		delete(additionalProperties, "externalConnectionId")
		delete(additionalProperties, "externalConnectionInterfaceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkDeviceExternalConnectionInterface struct {
	value *NetworkDeviceExternalConnectionInterface
	isSet bool
}

func (v NullableNetworkDeviceExternalConnectionInterface) Get() *NetworkDeviceExternalConnectionInterface {
	return v.value
}

func (v *NullableNetworkDeviceExternalConnectionInterface) Set(val *NetworkDeviceExternalConnectionInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDeviceExternalConnectionInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDeviceExternalConnectionInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDeviceExternalConnectionInterface(val *NetworkDeviceExternalConnectionInterface) *NullableNetworkDeviceExternalConnectionInterface {
	return &NullableNetworkDeviceExternalConnectionInterface{value: val, isSet: true}
}

func (v NullableNetworkDeviceExternalConnectionInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDeviceExternalConnectionInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


