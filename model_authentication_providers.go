/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthenticationProviders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationProviders{}

// AuthenticationProviders struct for AuthenticationProviders
type AuthenticationProviders struct {
	// Whether or not the application allows LDAP authentication
	Ldap bool `json:"ldap"`
	// Whether or not the application allows MYSQL authentication
	Mysql bool `json:"mysql"`
	// Whether or not the application allows SAML authentication
	Saml bool `json:"saml"`
	// The entry point for SAML authentication
	SsoEntryPoint string `json:"ssoEntryPoint"`
	AdditionalProperties map[string]interface{}
}

type _AuthenticationProviders AuthenticationProviders

// NewAuthenticationProviders instantiates a new AuthenticationProviders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationProviders(ldap bool, mysql bool, saml bool, ssoEntryPoint string) *AuthenticationProviders {
	this := AuthenticationProviders{}
	this.Ldap = ldap
	this.Mysql = mysql
	this.Saml = saml
	this.SsoEntryPoint = ssoEntryPoint
	return &this
}

// NewAuthenticationProvidersWithDefaults instantiates a new AuthenticationProviders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationProvidersWithDefaults() *AuthenticationProviders {
	this := AuthenticationProviders{}
	return &this
}

// GetLdap returns the Ldap field value
func (o *AuthenticationProviders) GetLdap() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ldap
}

// GetLdapOk returns a tuple with the Ldap field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProviders) GetLdapOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ldap, true
}

// SetLdap sets field value
func (o *AuthenticationProviders) SetLdap(v bool) {
	o.Ldap = v
}

// GetMysql returns the Mysql field value
func (o *AuthenticationProviders) GetMysql() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Mysql
}

// GetMysqlOk returns a tuple with the Mysql field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProviders) GetMysqlOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mysql, true
}

// SetMysql sets field value
func (o *AuthenticationProviders) SetMysql(v bool) {
	o.Mysql = v
}

// GetSaml returns the Saml field value
func (o *AuthenticationProviders) GetSaml() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Saml
}

// GetSamlOk returns a tuple with the Saml field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProviders) GetSamlOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Saml, true
}

// SetSaml sets field value
func (o *AuthenticationProviders) SetSaml(v bool) {
	o.Saml = v
}

// GetSsoEntryPoint returns the SsoEntryPoint field value
func (o *AuthenticationProviders) GetSsoEntryPoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SsoEntryPoint
}

// GetSsoEntryPointOk returns a tuple with the SsoEntryPoint field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProviders) GetSsoEntryPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SsoEntryPoint, true
}

// SetSsoEntryPoint sets field value
func (o *AuthenticationProviders) SetSsoEntryPoint(v string) {
	o.SsoEntryPoint = v
}

func (o AuthenticationProviders) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationProviders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ldap"] = o.Ldap
	toSerialize["mysql"] = o.Mysql
	toSerialize["saml"] = o.Saml
	toSerialize["ssoEntryPoint"] = o.SsoEntryPoint

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthenticationProviders) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ldap",
		"mysql",
		"saml",
		"ssoEntryPoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthenticationProviders := _AuthenticationProviders{}

	err = json.Unmarshal(data, &varAuthenticationProviders)

	if err != nil {
		return err
	}

	*o = AuthenticationProviders(varAuthenticationProviders)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ldap")
		delete(additionalProperties, "mysql")
		delete(additionalProperties, "saml")
		delete(additionalProperties, "ssoEntryPoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthenticationProviders struct {
	value *AuthenticationProviders
	isSet bool
}

func (v NullableAuthenticationProviders) Get() *AuthenticationProviders {
	return v.value
}

func (v *NullableAuthenticationProviders) Set(val *AuthenticationProviders) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationProviders) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationProviders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationProviders(val *AuthenticationProviders) *NullableAuthenticationProviders {
	return &NullableAuthenticationProviders{value: val, isSet: true}
}

func (v NullableAuthenticationProviders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationProviders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


