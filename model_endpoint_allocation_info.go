/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the EndpointAllocationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointAllocationInfo{}

// EndpointAllocationInfo struct for EndpointAllocationInfo
type EndpointAllocationInfo struct {
	// The id of the instance.
	InstanceId float32 `json:"instanceId"`
	// The label of the instance.
	InstanceLabel string `json:"instanceLabel"`
	// The label of the instance group.
	InstanceGroupLabel string `json:"instanceGroupLabel"`
	// The id of the extension instance.
	ExtensionInstanceId *float32 `json:"extensionInstanceId,omitempty"`
	// The infrastructure of the instance.
	Infrastructure map[string]interface{} `json:"infrastructure"`
	// The id of the os template used by the instance.
	OsTemplateId *float32 `json:"osTemplateId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EndpointAllocationInfo EndpointAllocationInfo

// NewEndpointAllocationInfo instantiates a new EndpointAllocationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointAllocationInfo(instanceId float32, instanceLabel string, instanceGroupLabel string, infrastructure map[string]interface{}) *EndpointAllocationInfo {
	this := EndpointAllocationInfo{}
	this.InstanceId = instanceId
	this.InstanceLabel = instanceLabel
	this.InstanceGroupLabel = instanceGroupLabel
	this.Infrastructure = infrastructure
	return &this
}

// NewEndpointAllocationInfoWithDefaults instantiates a new EndpointAllocationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointAllocationInfoWithDefaults() *EndpointAllocationInfo {
	this := EndpointAllocationInfo{}
	return &this
}

// GetInstanceId returns the InstanceId field value
func (o *EndpointAllocationInfo) GetInstanceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *EndpointAllocationInfo) GetInstanceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *EndpointAllocationInfo) SetInstanceId(v float32) {
	o.InstanceId = v
}

// GetInstanceLabel returns the InstanceLabel field value
func (o *EndpointAllocationInfo) GetInstanceLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceLabel
}

// GetInstanceLabelOk returns a tuple with the InstanceLabel field value
// and a boolean to check if the value has been set.
func (o *EndpointAllocationInfo) GetInstanceLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceLabel, true
}

// SetInstanceLabel sets field value
func (o *EndpointAllocationInfo) SetInstanceLabel(v string) {
	o.InstanceLabel = v
}

// GetInstanceGroupLabel returns the InstanceGroupLabel field value
func (o *EndpointAllocationInfo) GetInstanceGroupLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceGroupLabel
}

// GetInstanceGroupLabelOk returns a tuple with the InstanceGroupLabel field value
// and a boolean to check if the value has been set.
func (o *EndpointAllocationInfo) GetInstanceGroupLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceGroupLabel, true
}

// SetInstanceGroupLabel sets field value
func (o *EndpointAllocationInfo) SetInstanceGroupLabel(v string) {
	o.InstanceGroupLabel = v
}

// GetExtensionInstanceId returns the ExtensionInstanceId field value if set, zero value otherwise.
func (o *EndpointAllocationInfo) GetExtensionInstanceId() float32 {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		var ret float32
		return ret
	}
	return *o.ExtensionInstanceId
}

// GetExtensionInstanceIdOk returns a tuple with the ExtensionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointAllocationInfo) GetExtensionInstanceIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		return nil, false
	}
	return o.ExtensionInstanceId, true
}

// HasExtensionInstanceId returns a boolean if a field has been set.
func (o *EndpointAllocationInfo) HasExtensionInstanceId() bool {
	if o != nil && !IsNil(o.ExtensionInstanceId) {
		return true
	}

	return false
}

// SetExtensionInstanceId gets a reference to the given float32 and assigns it to the ExtensionInstanceId field.
func (o *EndpointAllocationInfo) SetExtensionInstanceId(v float32) {
	o.ExtensionInstanceId = &v
}

// GetInfrastructure returns the Infrastructure field value
func (o *EndpointAllocationInfo) GetInfrastructure() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Infrastructure
}

// GetInfrastructureOk returns a tuple with the Infrastructure field value
// and a boolean to check if the value has been set.
func (o *EndpointAllocationInfo) GetInfrastructureOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Infrastructure, true
}

// SetInfrastructure sets field value
func (o *EndpointAllocationInfo) SetInfrastructure(v map[string]interface{}) {
	o.Infrastructure = v
}

// GetOsTemplateId returns the OsTemplateId field value if set, zero value otherwise.
func (o *EndpointAllocationInfo) GetOsTemplateId() float32 {
	if o == nil || IsNil(o.OsTemplateId) {
		var ret float32
		return ret
	}
	return *o.OsTemplateId
}

// GetOsTemplateIdOk returns a tuple with the OsTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndpointAllocationInfo) GetOsTemplateIdOk() (*float32, bool) {
	if o == nil || IsNil(o.OsTemplateId) {
		return nil, false
	}
	return o.OsTemplateId, true
}

// HasOsTemplateId returns a boolean if a field has been set.
func (o *EndpointAllocationInfo) HasOsTemplateId() bool {
	if o != nil && !IsNil(o.OsTemplateId) {
		return true
	}

	return false
}

// SetOsTemplateId gets a reference to the given float32 and assigns it to the OsTemplateId field.
func (o *EndpointAllocationInfo) SetOsTemplateId(v float32) {
	o.OsTemplateId = &v
}

func (o EndpointAllocationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointAllocationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instanceId"] = o.InstanceId
	toSerialize["instanceLabel"] = o.InstanceLabel
	toSerialize["instanceGroupLabel"] = o.InstanceGroupLabel
	if !IsNil(o.ExtensionInstanceId) {
		toSerialize["extensionInstanceId"] = o.ExtensionInstanceId
	}
	toSerialize["infrastructure"] = o.Infrastructure
	if !IsNil(o.OsTemplateId) {
		toSerialize["osTemplateId"] = o.OsTemplateId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EndpointAllocationInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instanceId",
		"instanceLabel",
		"instanceGroupLabel",
		"infrastructure",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointAllocationInfo := _EndpointAllocationInfo{}

	err = json.Unmarshal(data, &varEndpointAllocationInfo)

	if err != nil {
		return err
	}

	*o = EndpointAllocationInfo(varEndpointAllocationInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "instanceLabel")
		delete(additionalProperties, "instanceGroupLabel")
		delete(additionalProperties, "extensionInstanceId")
		delete(additionalProperties, "infrastructure")
		delete(additionalProperties, "osTemplateId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEndpointAllocationInfo struct {
	value *EndpointAllocationInfo
	isSet bool
}

func (v NullableEndpointAllocationInfo) Get() *EndpointAllocationInfo {
	return v.value
}

func (v *NullableEndpointAllocationInfo) Set(val *EndpointAllocationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointAllocationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointAllocationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointAllocationInfo(val *EndpointAllocationInfo) *NullableEndpointAllocationInfo {
	return &NullableEndpointAllocationInfo{value: val, isSet: true}
}

func (v NullableEndpointAllocationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointAllocationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


