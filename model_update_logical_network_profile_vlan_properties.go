/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateLogicalNetworkProfileVlanProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLogicalNetworkProfileVlanProperties{}

// UpdateLogicalNetworkProfileVlanProperties struct for UpdateLogicalNetworkProfileVlanProperties
type UpdateLogicalNetworkProfileVlanProperties struct {
	VlanAllocationStrategies []CreateVlanAllocationStrategy `json:"vlanAllocationStrategies,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLogicalNetworkProfileVlanProperties UpdateLogicalNetworkProfileVlanProperties

// NewUpdateLogicalNetworkProfileVlanProperties instantiates a new UpdateLogicalNetworkProfileVlanProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLogicalNetworkProfileVlanProperties() *UpdateLogicalNetworkProfileVlanProperties {
	this := UpdateLogicalNetworkProfileVlanProperties{}
	return &this
}

// NewUpdateLogicalNetworkProfileVlanPropertiesWithDefaults instantiates a new UpdateLogicalNetworkProfileVlanProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLogicalNetworkProfileVlanPropertiesWithDefaults() *UpdateLogicalNetworkProfileVlanProperties {
	this := UpdateLogicalNetworkProfileVlanProperties{}
	return &this
}

// GetVlanAllocationStrategies returns the VlanAllocationStrategies field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkProfileVlanProperties) GetVlanAllocationStrategies() []CreateVlanAllocationStrategy {
	if o == nil || IsNil(o.VlanAllocationStrategies) {
		var ret []CreateVlanAllocationStrategy
		return ret
	}
	return o.VlanAllocationStrategies
}

// GetVlanAllocationStrategiesOk returns a tuple with the VlanAllocationStrategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfileVlanProperties) GetVlanAllocationStrategiesOk() ([]CreateVlanAllocationStrategy, bool) {
	if o == nil || IsNil(o.VlanAllocationStrategies) {
		return nil, false
	}
	return o.VlanAllocationStrategies, true
}

// HasVlanAllocationStrategies returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkProfileVlanProperties) HasVlanAllocationStrategies() bool {
	if o != nil && !IsNil(o.VlanAllocationStrategies) {
		return true
	}

	return false
}

// SetVlanAllocationStrategies gets a reference to the given []CreateVlanAllocationStrategy and assigns it to the VlanAllocationStrategies field.
func (o *UpdateLogicalNetworkProfileVlanProperties) SetVlanAllocationStrategies(v []CreateVlanAllocationStrategy) {
	o.VlanAllocationStrategies = v
}

func (o UpdateLogicalNetworkProfileVlanProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLogicalNetworkProfileVlanProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VlanAllocationStrategies) {
		toSerialize["vlanAllocationStrategies"] = o.VlanAllocationStrategies
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLogicalNetworkProfileVlanProperties) UnmarshalJSON(data []byte) (err error) {
	varUpdateLogicalNetworkProfileVlanProperties := _UpdateLogicalNetworkProfileVlanProperties{}

	err = json.Unmarshal(data, &varUpdateLogicalNetworkProfileVlanProperties)

	if err != nil {
		return err
	}

	*o = UpdateLogicalNetworkProfileVlanProperties(varUpdateLogicalNetworkProfileVlanProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vlanAllocationStrategies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLogicalNetworkProfileVlanProperties struct {
	value *UpdateLogicalNetworkProfileVlanProperties
	isSet bool
}

func (v NullableUpdateLogicalNetworkProfileVlanProperties) Get() *UpdateLogicalNetworkProfileVlanProperties {
	return v.value
}

func (v *NullableUpdateLogicalNetworkProfileVlanProperties) Set(val *UpdateLogicalNetworkProfileVlanProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLogicalNetworkProfileVlanProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLogicalNetworkProfileVlanProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLogicalNetworkProfileVlanProperties(val *UpdateLogicalNetworkProfileVlanProperties) *NullableUpdateLogicalNetworkProfileVlanProperties {
	return &NullableUpdateLogicalNetworkProfileVlanProperties{value: val, isSet: true}
}

func (v NullableUpdateLogicalNetworkProfileVlanProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLogicalNetworkProfileVlanProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


