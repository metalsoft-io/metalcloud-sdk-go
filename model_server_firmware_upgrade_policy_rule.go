/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerFirmwareUpgradePolicyRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerFirmwareUpgradePolicyRule{}

// ServerFirmwareUpgradePolicyRule struct for ServerFirmwareUpgradePolicyRule
type ServerFirmwareUpgradePolicyRule struct {
	// The property to be checked for the firmware upgrade policy.
	Property string `json:"property"`
	// The operation to be performed on the firmware upgrade policy.
	Operation string `json:"operation"`
	// The value to be compared for the firmware upgrade policy.
	Value string `json:"value"`
	AdditionalProperties map[string]interface{}
}

type _ServerFirmwareUpgradePolicyRule ServerFirmwareUpgradePolicyRule

// NewServerFirmwareUpgradePolicyRule instantiates a new ServerFirmwareUpgradePolicyRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerFirmwareUpgradePolicyRule(property string, operation string, value string) *ServerFirmwareUpgradePolicyRule {
	this := ServerFirmwareUpgradePolicyRule{}
	this.Property = property
	this.Operation = operation
	this.Value = value
	return &this
}

// NewServerFirmwareUpgradePolicyRuleWithDefaults instantiates a new ServerFirmwareUpgradePolicyRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerFirmwareUpgradePolicyRuleWithDefaults() *ServerFirmwareUpgradePolicyRule {
	this := ServerFirmwareUpgradePolicyRule{}
	return &this
}

// GetProperty returns the Property field value
func (o *ServerFirmwareUpgradePolicyRule) GetProperty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicyRule) GetPropertyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *ServerFirmwareUpgradePolicyRule) SetProperty(v string) {
	o.Property = v
}

// GetOperation returns the Operation field value
func (o *ServerFirmwareUpgradePolicyRule) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicyRule) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *ServerFirmwareUpgradePolicyRule) SetOperation(v string) {
	o.Operation = v
}

// GetValue returns the Value field value
func (o *ServerFirmwareUpgradePolicyRule) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicyRule) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ServerFirmwareUpgradePolicyRule) SetValue(v string) {
	o.Value = v
}

func (o ServerFirmwareUpgradePolicyRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerFirmwareUpgradePolicyRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["property"] = o.Property
	toSerialize["operation"] = o.Operation
	toSerialize["value"] = o.Value

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerFirmwareUpgradePolicyRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"property",
		"operation",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerFirmwareUpgradePolicyRule := _ServerFirmwareUpgradePolicyRule{}

	err = json.Unmarshal(data, &varServerFirmwareUpgradePolicyRule)

	if err != nil {
		return err
	}

	*o = ServerFirmwareUpgradePolicyRule(varServerFirmwareUpgradePolicyRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "property")
		delete(additionalProperties, "operation")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerFirmwareUpgradePolicyRule struct {
	value *ServerFirmwareUpgradePolicyRule
	isSet bool
}

func (v NullableServerFirmwareUpgradePolicyRule) Get() *ServerFirmwareUpgradePolicyRule {
	return v.value
}

func (v *NullableServerFirmwareUpgradePolicyRule) Set(val *ServerFirmwareUpgradePolicyRule) {
	v.value = val
	v.isSet = true
}

func (v NullableServerFirmwareUpgradePolicyRule) IsSet() bool {
	return v.isSet
}

func (v *NullableServerFirmwareUpgradePolicyRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerFirmwareUpgradePolicyRule(val *ServerFirmwareUpgradePolicyRule) *NullableServerFirmwareUpgradePolicyRule {
	return &NullableServerFirmwareUpgradePolicyRule{value: val, isSet: true}
}

func (v NullableServerFirmwareUpgradePolicyRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerFirmwareUpgradePolicyRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


