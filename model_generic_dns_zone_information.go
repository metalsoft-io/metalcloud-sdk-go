/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GenericDNSZoneInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenericDNSZoneInformation{}

// GenericDNSZoneInformation struct for GenericDNSZoneInformation
type GenericDNSZoneInformation struct {
	// The name of the DNS zone.
	ZoneName string `json:"zoneName"`
	// The email address of the DNS zone administrator
	SoaEmail *string `json:"soaEmail,omitempty"`
	// The name servers for this DNS zone. This is a list of DNS servers that are authoritative for the zone.
	NameServers []string `json:"nameServers,omitempty"`
	// TTL (Time to Live) for the DNS zone.
	Ttl *int32 `json:"ttl,omitempty"`
	// Indicates if this DNS zone is the default zone.
	IsDefault *bool `json:"isDefault,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GenericDNSZoneInformation GenericDNSZoneInformation

// NewGenericDNSZoneInformation instantiates a new GenericDNSZoneInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericDNSZoneInformation(zoneName string) *GenericDNSZoneInformation {
	this := GenericDNSZoneInformation{}
	this.ZoneName = zoneName
	return &this
}

// NewGenericDNSZoneInformationWithDefaults instantiates a new GenericDNSZoneInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericDNSZoneInformationWithDefaults() *GenericDNSZoneInformation {
	this := GenericDNSZoneInformation{}
	return &this
}

// GetZoneName returns the ZoneName field value
func (o *GenericDNSZoneInformation) GetZoneName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value
// and a boolean to check if the value has been set.
func (o *GenericDNSZoneInformation) GetZoneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneName, true
}

// SetZoneName sets field value
func (o *GenericDNSZoneInformation) SetZoneName(v string) {
	o.ZoneName = v
}

// GetSoaEmail returns the SoaEmail field value if set, zero value otherwise.
func (o *GenericDNSZoneInformation) GetSoaEmail() string {
	if o == nil || IsNil(o.SoaEmail) {
		var ret string
		return ret
	}
	return *o.SoaEmail
}

// GetSoaEmailOk returns a tuple with the SoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericDNSZoneInformation) GetSoaEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SoaEmail) {
		return nil, false
	}
	return o.SoaEmail, true
}

// HasSoaEmail returns a boolean if a field has been set.
func (o *GenericDNSZoneInformation) HasSoaEmail() bool {
	if o != nil && !IsNil(o.SoaEmail) {
		return true
	}

	return false
}

// SetSoaEmail gets a reference to the given string and assigns it to the SoaEmail field.
func (o *GenericDNSZoneInformation) SetSoaEmail(v string) {
	o.SoaEmail = &v
}

// GetNameServers returns the NameServers field value if set, zero value otherwise.
func (o *GenericDNSZoneInformation) GetNameServers() []string {
	if o == nil || IsNil(o.NameServers) {
		var ret []string
		return ret
	}
	return o.NameServers
}

// GetNameServersOk returns a tuple with the NameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericDNSZoneInformation) GetNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NameServers) {
		return nil, false
	}
	return o.NameServers, true
}

// HasNameServers returns a boolean if a field has been set.
func (o *GenericDNSZoneInformation) HasNameServers() bool {
	if o != nil && !IsNil(o.NameServers) {
		return true
	}

	return false
}

// SetNameServers gets a reference to the given []string and assigns it to the NameServers field.
func (o *GenericDNSZoneInformation) SetNameServers(v []string) {
	o.NameServers = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *GenericDNSZoneInformation) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericDNSZoneInformation) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *GenericDNSZoneInformation) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *GenericDNSZoneInformation) SetTtl(v int32) {
	o.Ttl = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *GenericDNSZoneInformation) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericDNSZoneInformation) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *GenericDNSZoneInformation) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *GenericDNSZoneInformation) SetIsDefault(v bool) {
	o.IsDefault = &v
}

func (o GenericDNSZoneInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenericDNSZoneInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["zoneName"] = o.ZoneName
	if !IsNil(o.SoaEmail) {
		toSerialize["soaEmail"] = o.SoaEmail
	}
	if !IsNil(o.NameServers) {
		toSerialize["nameServers"] = o.NameServers
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GenericDNSZoneInformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zoneName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenericDNSZoneInformation := _GenericDNSZoneInformation{}

	err = json.Unmarshal(data, &varGenericDNSZoneInformation)

	if err != nil {
		return err
	}

	*o = GenericDNSZoneInformation(varGenericDNSZoneInformation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "zoneName")
		delete(additionalProperties, "soaEmail")
		delete(additionalProperties, "nameServers")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "isDefault")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGenericDNSZoneInformation struct {
	value *GenericDNSZoneInformation
	isSet bool
}

func (v NullableGenericDNSZoneInformation) Get() *GenericDNSZoneInformation {
	return v.value
}

func (v *NullableGenericDNSZoneInformation) Set(val *GenericDNSZoneInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericDNSZoneInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericDNSZoneInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericDNSZoneInformation(val *GenericDNSZoneInformation) *NullableGenericDNSZoneInformation {
	return &NullableGenericDNSZoneInformation{value: val, isSet: true}
}

func (v NullableGenericDNSZoneInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericDNSZoneInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


