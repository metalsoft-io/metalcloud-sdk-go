/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the EmailTemplateUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailTemplateUpdate{}

// EmailTemplateUpdate struct for EmailTemplateUpdate
type EmailTemplateUpdate struct {
	// Email template subject
	Subject *string `json:"subject,omitempty"`
	// Email template description
	Description *string `json:"description,omitempty"`
	// Email template text
	Text *string `json:"text,omitempty"`
	// Email template html
	Html *string `json:"html,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EmailTemplateUpdate EmailTemplateUpdate

// NewEmailTemplateUpdate instantiates a new EmailTemplateUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailTemplateUpdate() *EmailTemplateUpdate {
	this := EmailTemplateUpdate{}
	return &this
}

// NewEmailTemplateUpdateWithDefaults instantiates a new EmailTemplateUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailTemplateUpdateWithDefaults() *EmailTemplateUpdate {
	this := EmailTemplateUpdate{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *EmailTemplateUpdate) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailTemplateUpdate) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *EmailTemplateUpdate) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *EmailTemplateUpdate) SetSubject(v string) {
	o.Subject = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EmailTemplateUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailTemplateUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EmailTemplateUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EmailTemplateUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *EmailTemplateUpdate) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailTemplateUpdate) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *EmailTemplateUpdate) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *EmailTemplateUpdate) SetText(v string) {
	o.Text = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *EmailTemplateUpdate) GetHtml() string {
	if o == nil || IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailTemplateUpdate) GetHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *EmailTemplateUpdate) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *EmailTemplateUpdate) SetHtml(v string) {
	o.Html = &v
}

func (o EmailTemplateUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailTemplateUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmailTemplateUpdate) UnmarshalJSON(data []byte) (err error) {
	varEmailTemplateUpdate := _EmailTemplateUpdate{}

	err = json.Unmarshal(data, &varEmailTemplateUpdate)

	if err != nil {
		return err
	}

	*o = EmailTemplateUpdate(varEmailTemplateUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subject")
		delete(additionalProperties, "description")
		delete(additionalProperties, "text")
		delete(additionalProperties, "html")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmailTemplateUpdate struct {
	value *EmailTemplateUpdate
	isSet bool
}

func (v NullableEmailTemplateUpdate) Get() *EmailTemplateUpdate {
	return v.value
}

func (v *NullableEmailTemplateUpdate) Set(val *EmailTemplateUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailTemplateUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailTemplateUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailTemplateUpdate(val *EmailTemplateUpdate) *NullableEmailTemplateUpdate {
	return &NullableEmailTemplateUpdate{value: val, isSet: true}
}

func (v NullableEmailTemplateUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailTemplateUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


