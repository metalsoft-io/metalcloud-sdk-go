/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateLogicalNetworkProfileIpv6Properties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLogicalNetworkProfileIpv6Properties{}

// UpdateLogicalNetworkProfileIpv6Properties struct for UpdateLogicalNetworkProfileIpv6Properties
type UpdateLogicalNetworkProfileIpv6Properties struct {
	SubnetAllocationStrategies []CreateIpv6SubnetAllocationStrategy `json:"subnetAllocationStrategies,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateLogicalNetworkProfileIpv6Properties UpdateLogicalNetworkProfileIpv6Properties

// NewUpdateLogicalNetworkProfileIpv6Properties instantiates a new UpdateLogicalNetworkProfileIpv6Properties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLogicalNetworkProfileIpv6Properties() *UpdateLogicalNetworkProfileIpv6Properties {
	this := UpdateLogicalNetworkProfileIpv6Properties{}
	return &this
}

// NewUpdateLogicalNetworkProfileIpv6PropertiesWithDefaults instantiates a new UpdateLogicalNetworkProfileIpv6Properties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLogicalNetworkProfileIpv6PropertiesWithDefaults() *UpdateLogicalNetworkProfileIpv6Properties {
	this := UpdateLogicalNetworkProfileIpv6Properties{}
	return &this
}

// GetSubnetAllocationStrategies returns the SubnetAllocationStrategies field value if set, zero value otherwise.
func (o *UpdateLogicalNetworkProfileIpv6Properties) GetSubnetAllocationStrategies() []CreateIpv6SubnetAllocationStrategy {
	if o == nil || IsNil(o.SubnetAllocationStrategies) {
		var ret []CreateIpv6SubnetAllocationStrategy
		return ret
	}
	return o.SubnetAllocationStrategies
}

// GetSubnetAllocationStrategiesOk returns a tuple with the SubnetAllocationStrategies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateLogicalNetworkProfileIpv6Properties) GetSubnetAllocationStrategiesOk() ([]CreateIpv6SubnetAllocationStrategy, bool) {
	if o == nil || IsNil(o.SubnetAllocationStrategies) {
		return nil, false
	}
	return o.SubnetAllocationStrategies, true
}

// HasSubnetAllocationStrategies returns a boolean if a field has been set.
func (o *UpdateLogicalNetworkProfileIpv6Properties) HasSubnetAllocationStrategies() bool {
	if o != nil && !IsNil(o.SubnetAllocationStrategies) {
		return true
	}

	return false
}

// SetSubnetAllocationStrategies gets a reference to the given []CreateIpv6SubnetAllocationStrategy and assigns it to the SubnetAllocationStrategies field.
func (o *UpdateLogicalNetworkProfileIpv6Properties) SetSubnetAllocationStrategies(v []CreateIpv6SubnetAllocationStrategy) {
	o.SubnetAllocationStrategies = v
}

func (o UpdateLogicalNetworkProfileIpv6Properties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLogicalNetworkProfileIpv6Properties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubnetAllocationStrategies) {
		toSerialize["subnetAllocationStrategies"] = o.SubnetAllocationStrategies
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateLogicalNetworkProfileIpv6Properties) UnmarshalJSON(data []byte) (err error) {
	varUpdateLogicalNetworkProfileIpv6Properties := _UpdateLogicalNetworkProfileIpv6Properties{}

	err = json.Unmarshal(data, &varUpdateLogicalNetworkProfileIpv6Properties)

	if err != nil {
		return err
	}

	*o = UpdateLogicalNetworkProfileIpv6Properties(varUpdateLogicalNetworkProfileIpv6Properties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subnetAllocationStrategies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateLogicalNetworkProfileIpv6Properties struct {
	value *UpdateLogicalNetworkProfileIpv6Properties
	isSet bool
}

func (v NullableUpdateLogicalNetworkProfileIpv6Properties) Get() *UpdateLogicalNetworkProfileIpv6Properties {
	return v.value
}

func (v *NullableUpdateLogicalNetworkProfileIpv6Properties) Set(val *UpdateLogicalNetworkProfileIpv6Properties) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLogicalNetworkProfileIpv6Properties) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLogicalNetworkProfileIpv6Properties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLogicalNetworkProfileIpv6Properties(val *UpdateLogicalNetworkProfileIpv6Properties) *NullableUpdateLogicalNetworkProfileIpv6Properties {
	return &NullableUpdateLogicalNetworkProfileIpv6Properties{value: val, isSet: true}
}

func (v NullableUpdateLogicalNetworkProfileIpv6Properties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLogicalNetworkProfileIpv6Properties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


