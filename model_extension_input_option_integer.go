/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ExtensionInputOptionInteger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionInputOptionInteger{}

// ExtensionInputOptionInteger struct for ExtensionInputOptionInteger
type ExtensionInputOptionInteger struct {
	// Minimum allowed value.
	MinValue *int32 `json:"minValue,omitempty"`
	// Maximum allowed value.
	MaxValue *int32 `json:"maxValue,omitempty"`
	// Denied values.
	DeniedValues []int32 `json:"deniedValues,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionInputOptionInteger ExtensionInputOptionInteger

// NewExtensionInputOptionInteger instantiates a new ExtensionInputOptionInteger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionInputOptionInteger() *ExtensionInputOptionInteger {
	this := ExtensionInputOptionInteger{}
	return &this
}

// NewExtensionInputOptionIntegerWithDefaults instantiates a new ExtensionInputOptionInteger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionInputOptionIntegerWithDefaults() *ExtensionInputOptionInteger {
	this := ExtensionInputOptionInteger{}
	return &this
}

// GetMinValue returns the MinValue field value if set, zero value otherwise.
func (o *ExtensionInputOptionInteger) GetMinValue() int32 {
	if o == nil || IsNil(o.MinValue) {
		var ret int32
		return ret
	}
	return *o.MinValue
}

// GetMinValueOk returns a tuple with the MinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInputOptionInteger) GetMinValueOk() (*int32, bool) {
	if o == nil || IsNil(o.MinValue) {
		return nil, false
	}
	return o.MinValue, true
}

// HasMinValue returns a boolean if a field has been set.
func (o *ExtensionInputOptionInteger) HasMinValue() bool {
	if o != nil && !IsNil(o.MinValue) {
		return true
	}

	return false
}

// SetMinValue gets a reference to the given int32 and assigns it to the MinValue field.
func (o *ExtensionInputOptionInteger) SetMinValue(v int32) {
	o.MinValue = &v
}

// GetMaxValue returns the MaxValue field value if set, zero value otherwise.
func (o *ExtensionInputOptionInteger) GetMaxValue() int32 {
	if o == nil || IsNil(o.MaxValue) {
		var ret int32
		return ret
	}
	return *o.MaxValue
}

// GetMaxValueOk returns a tuple with the MaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInputOptionInteger) GetMaxValueOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxValue) {
		return nil, false
	}
	return o.MaxValue, true
}

// HasMaxValue returns a boolean if a field has been set.
func (o *ExtensionInputOptionInteger) HasMaxValue() bool {
	if o != nil && !IsNil(o.MaxValue) {
		return true
	}

	return false
}

// SetMaxValue gets a reference to the given int32 and assigns it to the MaxValue field.
func (o *ExtensionInputOptionInteger) SetMaxValue(v int32) {
	o.MaxValue = &v
}

// GetDeniedValues returns the DeniedValues field value if set, zero value otherwise.
func (o *ExtensionInputOptionInteger) GetDeniedValues() []int32 {
	if o == nil || IsNil(o.DeniedValues) {
		var ret []int32
		return ret
	}
	return o.DeniedValues
}

// GetDeniedValuesOk returns a tuple with the DeniedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInputOptionInteger) GetDeniedValuesOk() ([]int32, bool) {
	if o == nil || IsNil(o.DeniedValues) {
		return nil, false
	}
	return o.DeniedValues, true
}

// HasDeniedValues returns a boolean if a field has been set.
func (o *ExtensionInputOptionInteger) HasDeniedValues() bool {
	if o != nil && !IsNil(o.DeniedValues) {
		return true
	}

	return false
}

// SetDeniedValues gets a reference to the given []int32 and assigns it to the DeniedValues field.
func (o *ExtensionInputOptionInteger) SetDeniedValues(v []int32) {
	o.DeniedValues = v
}

func (o ExtensionInputOptionInteger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionInputOptionInteger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinValue) {
		toSerialize["minValue"] = o.MinValue
	}
	if !IsNil(o.MaxValue) {
		toSerialize["maxValue"] = o.MaxValue
	}
	if !IsNil(o.DeniedValues) {
		toSerialize["deniedValues"] = o.DeniedValues
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionInputOptionInteger) UnmarshalJSON(data []byte) (err error) {
	varExtensionInputOptionInteger := _ExtensionInputOptionInteger{}

	err = json.Unmarshal(data, &varExtensionInputOptionInteger)

	if err != nil {
		return err
	}

	*o = ExtensionInputOptionInteger(varExtensionInputOptionInteger)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "minValue")
		delete(additionalProperties, "maxValue")
		delete(additionalProperties, "deniedValues")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionInputOptionInteger struct {
	value *ExtensionInputOptionInteger
	isSet bool
}

func (v NullableExtensionInputOptionInteger) Get() *ExtensionInputOptionInteger {
	return v.value
}

func (v *NullableExtensionInputOptionInteger) Set(val *ExtensionInputOptionInteger) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionInputOptionInteger) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionInputOptionInteger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionInputOptionInteger(val *ExtensionInputOptionInteger) *NullableExtensionInputOptionInteger {
	return &NullableExtensionInputOptionInteger{value: val, isSet: true}
}

func (v NullableExtensionInputOptionInteger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionInputOptionInteger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


