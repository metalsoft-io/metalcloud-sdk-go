/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateNetworkEndpointGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNetworkEndpointGroup{}

// CreateNetworkEndpointGroup struct for CreateNetworkEndpointGroup
type CreateNetworkEndpointGroup struct {
	// The ID of the site where the entity is located.
	SiteId *float32 `json:"siteId,omitempty"`
	// The name of the network endpoint group
	Name string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _CreateNetworkEndpointGroup CreateNetworkEndpointGroup

// NewCreateNetworkEndpointGroup instantiates a new CreateNetworkEndpointGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNetworkEndpointGroup(name string) *CreateNetworkEndpointGroup {
	this := CreateNetworkEndpointGroup{}
	this.Name = name
	return &this
}

// NewCreateNetworkEndpointGroupWithDefaults instantiates a new CreateNetworkEndpointGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNetworkEndpointGroupWithDefaults() *CreateNetworkEndpointGroup {
	this := CreateNetworkEndpointGroup{}
	return &this
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *CreateNetworkEndpointGroup) GetSiteId() float32 {
	if o == nil || IsNil(o.SiteId) {
		var ret float32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateNetworkEndpointGroup) GetSiteIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *CreateNetworkEndpointGroup) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given float32 and assigns it to the SiteId field.
func (o *CreateNetworkEndpointGroup) SetSiteId(v float32) {
	o.SiteId = &v
}

// GetName returns the Name field value
func (o *CreateNetworkEndpointGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkEndpointGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateNetworkEndpointGroup) SetName(v string) {
	o.Name = v
}

func (o CreateNetworkEndpointGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNetworkEndpointGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateNetworkEndpointGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNetworkEndpointGroup := _CreateNetworkEndpointGroup{}

	err = json.Unmarshal(data, &varCreateNetworkEndpointGroup)

	if err != nil {
		return err
	}

	*o = CreateNetworkEndpointGroup(varCreateNetworkEndpointGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateNetworkEndpointGroup struct {
	value *CreateNetworkEndpointGroup
	isSet bool
}

func (v NullableCreateNetworkEndpointGroup) Get() *CreateNetworkEndpointGroup {
	return v.value
}

func (v *NullableCreateNetworkEndpointGroup) Set(val *CreateNetworkEndpointGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetworkEndpointGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetworkEndpointGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetworkEndpointGroup(val *CreateNetworkEndpointGroup) *NullableCreateNetworkEndpointGroup {
	return &NullableCreateNetworkEndpointGroup{value: val, isSet: true}
}

func (v NullableCreateNetworkEndpointGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetworkEndpointGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


