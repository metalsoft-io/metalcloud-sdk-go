/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the JobRetryInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobRetryInfo{}

// JobRetryInfo struct for JobRetryInfo
type JobRetryInfo struct {
	// Retry even if the job was successful
	RetryEvenIfSuccessful *bool `json:"retryEvenIfSuccessful,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JobRetryInfo JobRetryInfo

// NewJobRetryInfo instantiates a new JobRetryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobRetryInfo() *JobRetryInfo {
	this := JobRetryInfo{}
	var retryEvenIfSuccessful bool = false
	this.RetryEvenIfSuccessful = &retryEvenIfSuccessful
	return &this
}

// NewJobRetryInfoWithDefaults instantiates a new JobRetryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobRetryInfoWithDefaults() *JobRetryInfo {
	this := JobRetryInfo{}
	var retryEvenIfSuccessful bool = false
	this.RetryEvenIfSuccessful = &retryEvenIfSuccessful
	return &this
}

// GetRetryEvenIfSuccessful returns the RetryEvenIfSuccessful field value if set, zero value otherwise.
func (o *JobRetryInfo) GetRetryEvenIfSuccessful() bool {
	if o == nil || IsNil(o.RetryEvenIfSuccessful) {
		var ret bool
		return ret
	}
	return *o.RetryEvenIfSuccessful
}

// GetRetryEvenIfSuccessfulOk returns a tuple with the RetryEvenIfSuccessful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobRetryInfo) GetRetryEvenIfSuccessfulOk() (*bool, bool) {
	if o == nil || IsNil(o.RetryEvenIfSuccessful) {
		return nil, false
	}
	return o.RetryEvenIfSuccessful, true
}

// HasRetryEvenIfSuccessful returns a boolean if a field has been set.
func (o *JobRetryInfo) HasRetryEvenIfSuccessful() bool {
	if o != nil && !IsNil(o.RetryEvenIfSuccessful) {
		return true
	}

	return false
}

// SetRetryEvenIfSuccessful gets a reference to the given bool and assigns it to the RetryEvenIfSuccessful field.
func (o *JobRetryInfo) SetRetryEvenIfSuccessful(v bool) {
	o.RetryEvenIfSuccessful = &v
}

func (o JobRetryInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobRetryInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RetryEvenIfSuccessful) {
		toSerialize["retryEvenIfSuccessful"] = o.RetryEvenIfSuccessful
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobRetryInfo) UnmarshalJSON(data []byte) (err error) {
	varJobRetryInfo := _JobRetryInfo{}

	err = json.Unmarshal(data, &varJobRetryInfo)

	if err != nil {
		return err
	}

	*o = JobRetryInfo(varJobRetryInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "retryEvenIfSuccessful")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobRetryInfo struct {
	value *JobRetryInfo
	isSet bool
}

func (v NullableJobRetryInfo) Get() *JobRetryInfo {
	return v.value
}

func (v *NullableJobRetryInfo) Set(val *JobRetryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableJobRetryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableJobRetryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobRetryInfo(val *JobRetryInfo) *NullableJobRetryInfo {
	return &NullableJobRetryInfo{value: val, isSet: true}
}

func (v NullableJobRetryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobRetryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


