/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ServerComponentFilterInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerComponentFilterInner{}

// ServerComponentFilterInner struct for ServerComponentFilterInner
type ServerComponentFilterInner struct {
	Id *float32 `json:"id,omitempty"`
	ComponentId *string `json:"componentId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerComponentFilterInner ServerComponentFilterInner

// NewServerComponentFilterInner instantiates a new ServerComponentFilterInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerComponentFilterInner() *ServerComponentFilterInner {
	this := ServerComponentFilterInner{}
	return &this
}

// NewServerComponentFilterInnerWithDefaults instantiates a new ServerComponentFilterInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerComponentFilterInnerWithDefaults() *ServerComponentFilterInner {
	this := ServerComponentFilterInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServerComponentFilterInner) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponentFilterInner) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServerComponentFilterInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *ServerComponentFilterInner) SetId(v float32) {
	o.Id = &v
}

// GetComponentId returns the ComponentId field value if set, zero value otherwise.
func (o *ServerComponentFilterInner) GetComponentId() string {
	if o == nil || IsNil(o.ComponentId) {
		var ret string
		return ret
	}
	return *o.ComponentId
}

// GetComponentIdOk returns a tuple with the ComponentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerComponentFilterInner) GetComponentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentId) {
		return nil, false
	}
	return o.ComponentId, true
}

// HasComponentId returns a boolean if a field has been set.
func (o *ServerComponentFilterInner) HasComponentId() bool {
	if o != nil && !IsNil(o.ComponentId) {
		return true
	}

	return false
}

// SetComponentId gets a reference to the given string and assigns it to the ComponentId field.
func (o *ServerComponentFilterInner) SetComponentId(v string) {
	o.ComponentId = &v
}

func (o ServerComponentFilterInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerComponentFilterInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ComponentId) {
		toSerialize["componentId"] = o.ComponentId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerComponentFilterInner) UnmarshalJSON(data []byte) (err error) {
	varServerComponentFilterInner := _ServerComponentFilterInner{}

	err = json.Unmarshal(data, &varServerComponentFilterInner)

	if err != nil {
		return err
	}

	*o = ServerComponentFilterInner(varServerComponentFilterInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "componentId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerComponentFilterInner struct {
	value *ServerComponentFilterInner
	isSet bool
}

func (v NullableServerComponentFilterInner) Get() *ServerComponentFilterInner {
	return v.value
}

func (v *NullableServerComponentFilterInner) Set(val *ServerComponentFilterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableServerComponentFilterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableServerComponentFilterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerComponentFilterInner(val *ServerComponentFilterInner) *NullableServerComponentFilterInner {
	return &NullableServerComponentFilterInner{value: val, isSet: true}
}

func (v NullableServerComponentFilterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerComponentFilterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


