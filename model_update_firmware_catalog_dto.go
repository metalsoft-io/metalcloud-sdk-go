/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the UpdateFirmwareCatalogDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFirmwareCatalogDto{}

// UpdateFirmwareCatalogDto struct for UpdateFirmwareCatalogDto
type UpdateFirmwareCatalogDto struct {
	ServerFirmwareCatalogName string `json:"serverFirmwareCatalogName"`
	ServerFirmwareCatalogDescription *string `json:"serverFirmwareCatalogDescription,omitempty"`
	ServerFirmwareCatalogVendor FirmwareVendorType `json:"serverFirmwareCatalogVendor"`
	ServerFirmwareCatalogUpdateType CatalogUpdateType `json:"serverFirmwareCatalogUpdateType"`
	ServerFirmwareCatalogVendorId *string `json:"serverFirmwareCatalogVendorId,omitempty"`
	ServerFirmwareCatalogVendorUrl *string `json:"serverFirmwareCatalogVendorUrl,omitempty"`
	ServerFirmwareCatalogVendorReleaseTimestamp *time.Time `json:"serverFirmwareCatalogVendorReleaseTimestamp,omitempty"`
	ServerFirmwareCatalogMetalsoftServerTypesSupportedJson *string `json:"serverFirmwareCatalogMetalsoftServerTypesSupportedJson,omitempty"`
	// Serialized JSON object of the server types supported by the vendor for this catalog
	ServerFirmwareCatalogVendorServerTypesSupportedJson *string `json:"serverFirmwareCatalogVendorServerTypesSupportedJson,omitempty"`
	// Serialized JSON object of the vendor configuration for this catalog
	ServerFirmwareCatalogVendorConfigurationJson *string `json:"serverFirmwareCatalogVendorConfigurationJson,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateFirmwareCatalogDto UpdateFirmwareCatalogDto

// NewUpdateFirmwareCatalogDto instantiates a new UpdateFirmwareCatalogDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFirmwareCatalogDto(serverFirmwareCatalogName string, serverFirmwareCatalogVendor FirmwareVendorType, serverFirmwareCatalogUpdateType CatalogUpdateType) *UpdateFirmwareCatalogDto {
	this := UpdateFirmwareCatalogDto{}
	this.ServerFirmwareCatalogName = serverFirmwareCatalogName
	this.ServerFirmwareCatalogVendor = serverFirmwareCatalogVendor
	this.ServerFirmwareCatalogUpdateType = serverFirmwareCatalogUpdateType
	return &this
}

// NewUpdateFirmwareCatalogDtoWithDefaults instantiates a new UpdateFirmwareCatalogDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFirmwareCatalogDtoWithDefaults() *UpdateFirmwareCatalogDto {
	this := UpdateFirmwareCatalogDto{}
	return &this
}

// GetServerFirmwareCatalogName returns the ServerFirmwareCatalogName field value
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerFirmwareCatalogName
}

// GetServerFirmwareCatalogNameOk returns a tuple with the ServerFirmwareCatalogName field value
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerFirmwareCatalogName, true
}

// SetServerFirmwareCatalogName sets field value
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogName(v string) {
	o.ServerFirmwareCatalogName = v
}

// GetServerFirmwareCatalogDescription returns the ServerFirmwareCatalogDescription field value if set, zero value otherwise.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogDescription() string {
	if o == nil || IsNil(o.ServerFirmwareCatalogDescription) {
		var ret string
		return ret
	}
	return *o.ServerFirmwareCatalogDescription
}

// GetServerFirmwareCatalogDescriptionOk returns a tuple with the ServerFirmwareCatalogDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ServerFirmwareCatalogDescription) {
		return nil, false
	}
	return o.ServerFirmwareCatalogDescription, true
}

// HasServerFirmwareCatalogDescription returns a boolean if a field has been set.
func (o *UpdateFirmwareCatalogDto) HasServerFirmwareCatalogDescription() bool {
	if o != nil && !IsNil(o.ServerFirmwareCatalogDescription) {
		return true
	}

	return false
}

// SetServerFirmwareCatalogDescription gets a reference to the given string and assigns it to the ServerFirmwareCatalogDescription field.
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogDescription(v string) {
	o.ServerFirmwareCatalogDescription = &v
}

// GetServerFirmwareCatalogVendor returns the ServerFirmwareCatalogVendor field value
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendor() FirmwareVendorType {
	if o == nil {
		var ret FirmwareVendorType
		return ret
	}

	return o.ServerFirmwareCatalogVendor
}

// GetServerFirmwareCatalogVendorOk returns a tuple with the ServerFirmwareCatalogVendor field value
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorOk() (*FirmwareVendorType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerFirmwareCatalogVendor, true
}

// SetServerFirmwareCatalogVendor sets field value
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogVendor(v FirmwareVendorType) {
	o.ServerFirmwareCatalogVendor = v
}

// GetServerFirmwareCatalogUpdateType returns the ServerFirmwareCatalogUpdateType field value
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogUpdateType() CatalogUpdateType {
	if o == nil {
		var ret CatalogUpdateType
		return ret
	}

	return o.ServerFirmwareCatalogUpdateType
}

// GetServerFirmwareCatalogUpdateTypeOk returns a tuple with the ServerFirmwareCatalogUpdateType field value
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogUpdateTypeOk() (*CatalogUpdateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerFirmwareCatalogUpdateType, true
}

// SetServerFirmwareCatalogUpdateType sets field value
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogUpdateType(v CatalogUpdateType) {
	o.ServerFirmwareCatalogUpdateType = v
}

// GetServerFirmwareCatalogVendorId returns the ServerFirmwareCatalogVendorId field value if set, zero value otherwise.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorId() string {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorId) {
		var ret string
		return ret
	}
	return *o.ServerFirmwareCatalogVendorId
}

// GetServerFirmwareCatalogVendorIdOk returns a tuple with the ServerFirmwareCatalogVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorId) {
		return nil, false
	}
	return o.ServerFirmwareCatalogVendorId, true
}

// HasServerFirmwareCatalogVendorId returns a boolean if a field has been set.
func (o *UpdateFirmwareCatalogDto) HasServerFirmwareCatalogVendorId() bool {
	if o != nil && !IsNil(o.ServerFirmwareCatalogVendorId) {
		return true
	}

	return false
}

// SetServerFirmwareCatalogVendorId gets a reference to the given string and assigns it to the ServerFirmwareCatalogVendorId field.
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogVendorId(v string) {
	o.ServerFirmwareCatalogVendorId = &v
}

// GetServerFirmwareCatalogVendorUrl returns the ServerFirmwareCatalogVendorUrl field value if set, zero value otherwise.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorUrl() string {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorUrl) {
		var ret string
		return ret
	}
	return *o.ServerFirmwareCatalogVendorUrl
}

// GetServerFirmwareCatalogVendorUrlOk returns a tuple with the ServerFirmwareCatalogVendorUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorUrl) {
		return nil, false
	}
	return o.ServerFirmwareCatalogVendorUrl, true
}

// HasServerFirmwareCatalogVendorUrl returns a boolean if a field has been set.
func (o *UpdateFirmwareCatalogDto) HasServerFirmwareCatalogVendorUrl() bool {
	if o != nil && !IsNil(o.ServerFirmwareCatalogVendorUrl) {
		return true
	}

	return false
}

// SetServerFirmwareCatalogVendorUrl gets a reference to the given string and assigns it to the ServerFirmwareCatalogVendorUrl field.
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogVendorUrl(v string) {
	o.ServerFirmwareCatalogVendorUrl = &v
}

// GetServerFirmwareCatalogVendorReleaseTimestamp returns the ServerFirmwareCatalogVendorReleaseTimestamp field value if set, zero value otherwise.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorReleaseTimestamp() time.Time {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorReleaseTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ServerFirmwareCatalogVendorReleaseTimestamp
}

// GetServerFirmwareCatalogVendorReleaseTimestampOk returns a tuple with the ServerFirmwareCatalogVendorReleaseTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorReleaseTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorReleaseTimestamp) {
		return nil, false
	}
	return o.ServerFirmwareCatalogVendorReleaseTimestamp, true
}

// HasServerFirmwareCatalogVendorReleaseTimestamp returns a boolean if a field has been set.
func (o *UpdateFirmwareCatalogDto) HasServerFirmwareCatalogVendorReleaseTimestamp() bool {
	if o != nil && !IsNil(o.ServerFirmwareCatalogVendorReleaseTimestamp) {
		return true
	}

	return false
}

// SetServerFirmwareCatalogVendorReleaseTimestamp gets a reference to the given time.Time and assigns it to the ServerFirmwareCatalogVendorReleaseTimestamp field.
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogVendorReleaseTimestamp(v time.Time) {
	o.ServerFirmwareCatalogVendorReleaseTimestamp = &v
}

// GetServerFirmwareCatalogMetalsoftServerTypesSupportedJson returns the ServerFirmwareCatalogMetalsoftServerTypesSupportedJson field value if set, zero value otherwise.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogMetalsoftServerTypesSupportedJson() string {
	if o == nil || IsNil(o.ServerFirmwareCatalogMetalsoftServerTypesSupportedJson) {
		var ret string
		return ret
	}
	return *o.ServerFirmwareCatalogMetalsoftServerTypesSupportedJson
}

// GetServerFirmwareCatalogMetalsoftServerTypesSupportedJsonOk returns a tuple with the ServerFirmwareCatalogMetalsoftServerTypesSupportedJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogMetalsoftServerTypesSupportedJsonOk() (*string, bool) {
	if o == nil || IsNil(o.ServerFirmwareCatalogMetalsoftServerTypesSupportedJson) {
		return nil, false
	}
	return o.ServerFirmwareCatalogMetalsoftServerTypesSupportedJson, true
}

// HasServerFirmwareCatalogMetalsoftServerTypesSupportedJson returns a boolean if a field has been set.
func (o *UpdateFirmwareCatalogDto) HasServerFirmwareCatalogMetalsoftServerTypesSupportedJson() bool {
	if o != nil && !IsNil(o.ServerFirmwareCatalogMetalsoftServerTypesSupportedJson) {
		return true
	}

	return false
}

// SetServerFirmwareCatalogMetalsoftServerTypesSupportedJson gets a reference to the given string and assigns it to the ServerFirmwareCatalogMetalsoftServerTypesSupportedJson field.
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogMetalsoftServerTypesSupportedJson(v string) {
	o.ServerFirmwareCatalogMetalsoftServerTypesSupportedJson = &v
}

// GetServerFirmwareCatalogVendorServerTypesSupportedJson returns the ServerFirmwareCatalogVendorServerTypesSupportedJson field value if set, zero value otherwise.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorServerTypesSupportedJson() string {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorServerTypesSupportedJson) {
		var ret string
		return ret
	}
	return *o.ServerFirmwareCatalogVendorServerTypesSupportedJson
}

// GetServerFirmwareCatalogVendorServerTypesSupportedJsonOk returns a tuple with the ServerFirmwareCatalogVendorServerTypesSupportedJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorServerTypesSupportedJsonOk() (*string, bool) {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorServerTypesSupportedJson) {
		return nil, false
	}
	return o.ServerFirmwareCatalogVendorServerTypesSupportedJson, true
}

// HasServerFirmwareCatalogVendorServerTypesSupportedJson returns a boolean if a field has been set.
func (o *UpdateFirmwareCatalogDto) HasServerFirmwareCatalogVendorServerTypesSupportedJson() bool {
	if o != nil && !IsNil(o.ServerFirmwareCatalogVendorServerTypesSupportedJson) {
		return true
	}

	return false
}

// SetServerFirmwareCatalogVendorServerTypesSupportedJson gets a reference to the given string and assigns it to the ServerFirmwareCatalogVendorServerTypesSupportedJson field.
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogVendorServerTypesSupportedJson(v string) {
	o.ServerFirmwareCatalogVendorServerTypesSupportedJson = &v
}

// GetServerFirmwareCatalogVendorConfigurationJson returns the ServerFirmwareCatalogVendorConfigurationJson field value if set, zero value otherwise.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorConfigurationJson() string {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorConfigurationJson) {
		var ret string
		return ret
	}
	return *o.ServerFirmwareCatalogVendorConfigurationJson
}

// GetServerFirmwareCatalogVendorConfigurationJsonOk returns a tuple with the ServerFirmwareCatalogVendorConfigurationJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirmwareCatalogDto) GetServerFirmwareCatalogVendorConfigurationJsonOk() (*string, bool) {
	if o == nil || IsNil(o.ServerFirmwareCatalogVendorConfigurationJson) {
		return nil, false
	}
	return o.ServerFirmwareCatalogVendorConfigurationJson, true
}

// HasServerFirmwareCatalogVendorConfigurationJson returns a boolean if a field has been set.
func (o *UpdateFirmwareCatalogDto) HasServerFirmwareCatalogVendorConfigurationJson() bool {
	if o != nil && !IsNil(o.ServerFirmwareCatalogVendorConfigurationJson) {
		return true
	}

	return false
}

// SetServerFirmwareCatalogVendorConfigurationJson gets a reference to the given string and assigns it to the ServerFirmwareCatalogVendorConfigurationJson field.
func (o *UpdateFirmwareCatalogDto) SetServerFirmwareCatalogVendorConfigurationJson(v string) {
	o.ServerFirmwareCatalogVendorConfigurationJson = &v
}

func (o UpdateFirmwareCatalogDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFirmwareCatalogDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverFirmwareCatalogName"] = o.ServerFirmwareCatalogName
	if !IsNil(o.ServerFirmwareCatalogDescription) {
		toSerialize["serverFirmwareCatalogDescription"] = o.ServerFirmwareCatalogDescription
	}
	toSerialize["serverFirmwareCatalogVendor"] = o.ServerFirmwareCatalogVendor
	toSerialize["serverFirmwareCatalogUpdateType"] = o.ServerFirmwareCatalogUpdateType
	if !IsNil(o.ServerFirmwareCatalogVendorId) {
		toSerialize["serverFirmwareCatalogVendorId"] = o.ServerFirmwareCatalogVendorId
	}
	if !IsNil(o.ServerFirmwareCatalogVendorUrl) {
		toSerialize["serverFirmwareCatalogVendorUrl"] = o.ServerFirmwareCatalogVendorUrl
	}
	if !IsNil(o.ServerFirmwareCatalogVendorReleaseTimestamp) {
		toSerialize["serverFirmwareCatalogVendorReleaseTimestamp"] = o.ServerFirmwareCatalogVendorReleaseTimestamp
	}
	if !IsNil(o.ServerFirmwareCatalogMetalsoftServerTypesSupportedJson) {
		toSerialize["serverFirmwareCatalogMetalsoftServerTypesSupportedJson"] = o.ServerFirmwareCatalogMetalsoftServerTypesSupportedJson
	}
	if !IsNil(o.ServerFirmwareCatalogVendorServerTypesSupportedJson) {
		toSerialize["serverFirmwareCatalogVendorServerTypesSupportedJson"] = o.ServerFirmwareCatalogVendorServerTypesSupportedJson
	}
	if !IsNil(o.ServerFirmwareCatalogVendorConfigurationJson) {
		toSerialize["serverFirmwareCatalogVendorConfigurationJson"] = o.ServerFirmwareCatalogVendorConfigurationJson
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateFirmwareCatalogDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverFirmwareCatalogName",
		"serverFirmwareCatalogVendor",
		"serverFirmwareCatalogUpdateType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateFirmwareCatalogDto := _UpdateFirmwareCatalogDto{}

	err = json.Unmarshal(data, &varUpdateFirmwareCatalogDto)

	if err != nil {
		return err
	}

	*o = UpdateFirmwareCatalogDto(varUpdateFirmwareCatalogDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverFirmwareCatalogName")
		delete(additionalProperties, "serverFirmwareCatalogDescription")
		delete(additionalProperties, "serverFirmwareCatalogVendor")
		delete(additionalProperties, "serverFirmwareCatalogUpdateType")
		delete(additionalProperties, "serverFirmwareCatalogVendorId")
		delete(additionalProperties, "serverFirmwareCatalogVendorUrl")
		delete(additionalProperties, "serverFirmwareCatalogVendorReleaseTimestamp")
		delete(additionalProperties, "serverFirmwareCatalogMetalsoftServerTypesSupportedJson")
		delete(additionalProperties, "serverFirmwareCatalogVendorServerTypesSupportedJson")
		delete(additionalProperties, "serverFirmwareCatalogVendorConfigurationJson")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateFirmwareCatalogDto struct {
	value *UpdateFirmwareCatalogDto
	isSet bool
}

func (v NullableUpdateFirmwareCatalogDto) Get() *UpdateFirmwareCatalogDto {
	return v.value
}

func (v *NullableUpdateFirmwareCatalogDto) Set(val *UpdateFirmwareCatalogDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFirmwareCatalogDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFirmwareCatalogDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFirmwareCatalogDto(val *UpdateFirmwareCatalogDto) *NullableUpdateFirmwareCatalogDto {
	return &NullableUpdateFirmwareCatalogDto{value: val, isSet: true}
}

func (v NullableUpdateFirmwareCatalogDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFirmwareCatalogDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


