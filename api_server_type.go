/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ServerTypeAPIService ServerTypeAPI service
type ServerTypeAPIService service

type ServerTypeAPICreateServerTypeRequest struct {
	ctx context.Context
	ApiService *ServerTypeAPIService
	createServerType *CreateServerType
}

// The Server Type create object
func (r ServerTypeAPICreateServerTypeRequest) CreateServerType(createServerType CreateServerType) ServerTypeAPICreateServerTypeRequest {
	r.createServerType = &createServerType
	return r
}

func (r ServerTypeAPICreateServerTypeRequest) Execute() (*ServerType, *http.Response, error) {
	return r.ApiService.CreateServerTypeExecute(r)
}

/*
CreateServerType Creates a Server Type

Creates a Server Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerTypeAPICreateServerTypeRequest
*/
func (a *ServerTypeAPIService) CreateServerType(ctx context.Context) ServerTypeAPICreateServerTypeRequest {
	return ServerTypeAPICreateServerTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerType
func (a *ServerTypeAPIService) CreateServerTypeExecute(r ServerTypeAPICreateServerTypeRequest) (*ServerType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerTypeAPIService.CreateServerType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createServerType == nil {
		return localVarReturnValue, nil, reportError("createServerType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createServerType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerTypeAPIDeleteServerTypeRequest struct {
	ctx context.Context
	ApiService *ServerTypeAPIService
	serverTypeId float32
}

func (r ServerTypeAPIDeleteServerTypeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServerTypeExecute(r)
}

/*
DeleteServerType Deletes a Server Type

Deletes a Server Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverTypeId
 @return ServerTypeAPIDeleteServerTypeRequest
*/
func (a *ServerTypeAPIService) DeleteServerType(ctx context.Context, serverTypeId float32) ServerTypeAPIDeleteServerTypeRequest {
	return ServerTypeAPIDeleteServerTypeRequest{
		ApiService: a,
		ctx: ctx,
		serverTypeId: serverTypeId,
	}
}

// Execute executes the request
func (a *ServerTypeAPIService) DeleteServerTypeExecute(r ServerTypeAPIDeleteServerTypeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerTypeAPIService.DeleteServerType")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-types/{serverTypeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverTypeId"+"}", url.PathEscape(parameterValueToString(r.serverTypeId, "serverTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ServerTypeAPIGetServerTypeInfoRequest struct {
	ctx context.Context
	ApiService *ServerTypeAPIService
	serverTypeId float32
}

func (r ServerTypeAPIGetServerTypeInfoRequest) Execute() (*ServerType, *http.Response, error) {
	return r.ApiService.GetServerTypeInfoExecute(r)
}

/*
GetServerTypeInfo Get Server Type information

Returns Server Type information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverTypeId
 @return ServerTypeAPIGetServerTypeInfoRequest
*/
func (a *ServerTypeAPIService) GetServerTypeInfo(ctx context.Context, serverTypeId float32) ServerTypeAPIGetServerTypeInfoRequest {
	return ServerTypeAPIGetServerTypeInfoRequest{
		ApiService: a,
		ctx: ctx,
		serverTypeId: serverTypeId,
	}
}

// Execute executes the request
//  @return ServerType
func (a *ServerTypeAPIService) GetServerTypeInfoExecute(r ServerTypeAPIGetServerTypeInfoRequest) (*ServerType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerTypeAPIService.GetServerTypeInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-types/{serverTypeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverTypeId"+"}", url.PathEscape(parameterValueToString(r.serverTypeId, "serverTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerTypeAPIGetServerTypesRequest struct {
	ctx context.Context
	ApiService *ServerTypeAPIService
	page *float32
	limit *float32
	filterName *[]string
	filterLabel *[]string
	filterRamGbytes *[]string
	filterProcessorCount *[]string
	filterProcessorCoreCount *[]string
	filterDisplayName *[]string
	filterNetworkTotalCapacityMbps *[]string
	filterIsExperimental *[]string
	filterForUnmanagedServersOnly *[]string
	filterForGenericEndpointsOnly *[]string
	filterSupportsOobProvisioning *[]string
	filterAllowedVendorSkuIds *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r ServerTypeAPIGetServerTypesRequest) Page(page float32) ServerTypeAPIGetServerTypesRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r ServerTypeAPIGetServerTypesRequest) Limit(limit float32) ServerTypeAPIGetServerTypesRequest {
	r.limit = &limit
	return r
}

// Filter by name query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.name&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.name&#x3D;$not:$like:John Doe&amp;filter.name&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterName(filterName []string) ServerTypeAPIGetServerTypesRequest {
	r.filterName = &filterName
	return r
}

// Filter by label query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.label&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.label&#x3D;$not:$like:John Doe&amp;filter.label&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterLabel(filterLabel []string) ServerTypeAPIGetServerTypesRequest {
	r.filterLabel = &filterLabel
	return r
}

// Filter by ramGbytes query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.ramGbytes&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.ramGbytes&#x3D;$not:$like:John Doe&amp;filter.ramGbytes&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterRamGbytes(filterRamGbytes []string) ServerTypeAPIGetServerTypesRequest {
	r.filterRamGbytes = &filterRamGbytes
	return r
}

// Filter by processorCount query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.processorCount&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.processorCount&#x3D;$not:$like:John Doe&amp;filter.processorCount&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterProcessorCount(filterProcessorCount []string) ServerTypeAPIGetServerTypesRequest {
	r.filterProcessorCount = &filterProcessorCount
	return r
}

// Filter by processorCoreCount query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.processorCoreCount&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.processorCoreCount&#x3D;$not:$like:John Doe&amp;filter.processorCoreCount&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterProcessorCoreCount(filterProcessorCoreCount []string) ServerTypeAPIGetServerTypesRequest {
	r.filterProcessorCoreCount = &filterProcessorCoreCount
	return r
}

// Filter by displayName query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.displayName&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.displayName&#x3D;$not:$like:John Doe&amp;filter.displayName&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterDisplayName(filterDisplayName []string) ServerTypeAPIGetServerTypesRequest {
	r.filterDisplayName = &filterDisplayName
	return r
}

// Filter by networkTotalCapacityMbps query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.networkTotalCapacityMbps&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.networkTotalCapacityMbps&#x3D;$not:$like:John Doe&amp;filter.networkTotalCapacityMbps&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterNetworkTotalCapacityMbps(filterNetworkTotalCapacityMbps []string) ServerTypeAPIGetServerTypesRequest {
	r.filterNetworkTotalCapacityMbps = &filterNetworkTotalCapacityMbps
	return r
}

// Filter by isExperimental query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.isExperimental&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.isExperimental&#x3D;$not:$like:John Doe&amp;filter.isExperimental&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterIsExperimental(filterIsExperimental []string) ServerTypeAPIGetServerTypesRequest {
	r.filterIsExperimental = &filterIsExperimental
	return r
}

// Filter by forUnmanagedServersOnly query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.forUnmanagedServersOnly&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.forUnmanagedServersOnly&#x3D;$not:$like:John Doe&amp;filter.forUnmanagedServersOnly&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterForUnmanagedServersOnly(filterForUnmanagedServersOnly []string) ServerTypeAPIGetServerTypesRequest {
	r.filterForUnmanagedServersOnly = &filterForUnmanagedServersOnly
	return r
}

// Filter by forGenericEndpointsOnly query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.forGenericEndpointsOnly&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.forGenericEndpointsOnly&#x3D;$not:$like:John Doe&amp;filter.forGenericEndpointsOnly&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterForGenericEndpointsOnly(filterForGenericEndpointsOnly []string) ServerTypeAPIGetServerTypesRequest {
	r.filterForGenericEndpointsOnly = &filterForGenericEndpointsOnly
	return r
}

// Filter by supportsOobProvisioning query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.supportsOobProvisioning&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.supportsOobProvisioning&#x3D;$not:$like:John Doe&amp;filter.supportsOobProvisioning&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterSupportsOobProvisioning(filterSupportsOobProvisioning []string) ServerTypeAPIGetServerTypesRequest {
	r.filterSupportsOobProvisioning = &filterSupportsOobProvisioning
	return r
}

// Filter by allowedVendorSkuIds query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.allowedVendorSkuIds&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.allowedVendorSkuIds&#x3D;$not:$like:John Doe&amp;filter.allowedVendorSkuIds&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r ServerTypeAPIGetServerTypesRequest) FilterAllowedVendorSkuIds(filterAllowedVendorSkuIds []string) ServerTypeAPIGetServerTypesRequest {
	r.filterAllowedVendorSkuIds = &filterAllowedVendorSkuIds
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;label&lt;/li&gt; &lt;li&gt;name&lt;/li&gt;&lt;/ul&gt;       
func (r ServerTypeAPIGetServerTypesRequest) SortBy(sortBy []string) ServerTypeAPIGetServerTypesRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r ServerTypeAPIGetServerTypesRequest) Search(search string) ServerTypeAPIGetServerTypesRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; name,label           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;name&lt;/li&gt; &lt;li&gt;label&lt;/li&gt;&lt;/ul&gt;         
func (r ServerTypeAPIGetServerTypesRequest) SearchBy(searchBy []string) ServerTypeAPIGetServerTypesRequest {
	r.searchBy = &searchBy
	return r
}

func (r ServerTypeAPIGetServerTypesRequest) Execute() (*ServerTypePaginatedList, *http.Response, error) {
	return r.ApiService.GetServerTypesExecute(r)
}

/*
GetServerTypes Get a list of Server Types

Returns a list of Server Types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerTypeAPIGetServerTypesRequest
*/
func (a *ServerTypeAPIService) GetServerTypes(ctx context.Context) ServerTypeAPIGetServerTypesRequest {
	return ServerTypeAPIGetServerTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerTypePaginatedList
func (a *ServerTypeAPIService) GetServerTypesExecute(r ServerTypeAPIGetServerTypesRequest) (*ServerTypePaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerTypePaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerTypeAPIService.GetServerTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterName != nil {
		t := *r.filterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.name", t, "form", "multi")
		}
	}
	if r.filterLabel != nil {
		t := *r.filterLabel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", t, "form", "multi")
		}
	}
	if r.filterRamGbytes != nil {
		t := *r.filterRamGbytes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.ramGbytes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.ramGbytes", t, "form", "multi")
		}
	}
	if r.filterProcessorCount != nil {
		t := *r.filterProcessorCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.processorCount", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.processorCount", t, "form", "multi")
		}
	}
	if r.filterProcessorCoreCount != nil {
		t := *r.filterProcessorCoreCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.processorCoreCount", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.processorCoreCount", t, "form", "multi")
		}
	}
	if r.filterDisplayName != nil {
		t := *r.filterDisplayName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.displayName", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.displayName", t, "form", "multi")
		}
	}
	if r.filterNetworkTotalCapacityMbps != nil {
		t := *r.filterNetworkTotalCapacityMbps
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkTotalCapacityMbps", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkTotalCapacityMbps", t, "form", "multi")
		}
	}
	if r.filterIsExperimental != nil {
		t := *r.filterIsExperimental
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.isExperimental", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.isExperimental", t, "form", "multi")
		}
	}
	if r.filterForUnmanagedServersOnly != nil {
		t := *r.filterForUnmanagedServersOnly
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.forUnmanagedServersOnly", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.forUnmanagedServersOnly", t, "form", "multi")
		}
	}
	if r.filterForGenericEndpointsOnly != nil {
		t := *r.filterForGenericEndpointsOnly
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.forGenericEndpointsOnly", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.forGenericEndpointsOnly", t, "form", "multi")
		}
	}
	if r.filterSupportsOobProvisioning != nil {
		t := *r.filterSupportsOobProvisioning
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.supportsOobProvisioning", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.supportsOobProvisioning", t, "form", "multi")
		}
	}
	if r.filterAllowedVendorSkuIds != nil {
		t := *r.filterAllowedVendorSkuIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.allowedVendorSkuIds", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.allowedVendorSkuIds", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerTypeAPIGetServerTypesStatisticsBatchRequest struct {
	ctx context.Context
	ApiService *ServerTypeAPIService
	serverTypeStatisticsBatchOptions *ServerTypeStatisticsBatchOptions
}

// The server type statistics batch options
func (r ServerTypeAPIGetServerTypesStatisticsBatchRequest) ServerTypeStatisticsBatchOptions(serverTypeStatisticsBatchOptions ServerTypeStatisticsBatchOptions) ServerTypeAPIGetServerTypesStatisticsBatchRequest {
	r.serverTypeStatisticsBatchOptions = &serverTypeStatisticsBatchOptions
	return r
}

func (r ServerTypeAPIGetServerTypesStatisticsBatchRequest) Execute() (*ServerTypeStatisticsBatch, *http.Response, error) {
	return r.ApiService.GetServerTypesStatisticsBatchExecute(r)
}

/*
GetServerTypesStatisticsBatch Get Server Type statistics batch

Returns Server Type statistics batch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerTypeAPIGetServerTypesStatisticsBatchRequest
*/
func (a *ServerTypeAPIService) GetServerTypesStatisticsBatch(ctx context.Context) ServerTypeAPIGetServerTypesStatisticsBatchRequest {
	return ServerTypeAPIGetServerTypesStatisticsBatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerTypeStatisticsBatch
func (a *ServerTypeAPIService) GetServerTypesStatisticsBatchExecute(r ServerTypeAPIGetServerTypesStatisticsBatchRequest) (*ServerTypeStatisticsBatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerTypeStatisticsBatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerTypeAPIService.GetServerTypesStatisticsBatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-types/statistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serverTypeStatisticsBatchOptions == nil {
		return localVarReturnValue, nil, reportError("serverTypeStatisticsBatchOptions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serverTypeStatisticsBatchOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ServerTypeAPIRemoveUnusedServerTypesRequest struct {
	ctx context.Context
	ApiService *ServerTypeAPIService
}

func (r ServerTypeAPIRemoveUnusedServerTypesRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveUnusedServerTypesExecute(r)
}

/*
RemoveUnusedServerTypes Deletes unused server types

Deletes unused server types

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ServerTypeAPIRemoveUnusedServerTypesRequest
*/
func (a *ServerTypeAPIService) RemoveUnusedServerTypes(ctx context.Context) ServerTypeAPIRemoveUnusedServerTypesRequest {
	return ServerTypeAPIRemoveUnusedServerTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ServerTypeAPIService) RemoveUnusedServerTypesExecute(r ServerTypeAPIRemoveUnusedServerTypesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerTypeAPIService.RemoveUnusedServerTypes")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-types/actions/clean-unused"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ServerTypeAPIUpdateServerTypeRequest struct {
	ctx context.Context
	ApiService *ServerTypeAPIService
	serverTypeId float32
	updateServerType *UpdateServerType
}

// The Server Type update object
func (r ServerTypeAPIUpdateServerTypeRequest) UpdateServerType(updateServerType UpdateServerType) ServerTypeAPIUpdateServerTypeRequest {
	r.updateServerType = &updateServerType
	return r
}

func (r ServerTypeAPIUpdateServerTypeRequest) Execute() (*ServerType, *http.Response, error) {
	return r.ApiService.UpdateServerTypeExecute(r)
}

/*
UpdateServerType Updates a Server Type

Updates a Server Type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param serverTypeId
 @return ServerTypeAPIUpdateServerTypeRequest
*/
func (a *ServerTypeAPIService) UpdateServerType(ctx context.Context, serverTypeId float32) ServerTypeAPIUpdateServerTypeRequest {
	return ServerTypeAPIUpdateServerTypeRequest{
		ApiService: a,
		ctx: ctx,
		serverTypeId: serverTypeId,
	}
}

// Execute executes the request
//  @return ServerType
func (a *ServerTypeAPIService) UpdateServerTypeExecute(r ServerTypeAPIUpdateServerTypeRequest) (*ServerType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServerTypeAPIService.UpdateServerType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/server-types/{serverTypeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serverTypeId"+"}", url.PathEscape(parameterValueToString(r.serverTypeId, "serverTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateServerType == nil {
		return localVarReturnValue, nil, reportError("updateServerType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateServerType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
