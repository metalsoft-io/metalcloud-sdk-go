/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMPoolHosts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMPoolHosts{}

// VMPoolHosts struct for VMPoolHosts
type VMPoolHosts struct {
	// VM Pool Host ID
	Id float32 `json:"id"`
	// Name of the VM Pool Host
	Name string `json:"name"`
	// Address of the VM Pool Host
	Address string `json:"address"`
	// Port of the VM Pool Host
	Port float32 `json:"port"`
	// VM Pool ID
	PoolId float32 `json:"poolId"`
	// Roles of the VM Pool Host
	Roles []string `json:"roles"`
	// Failure domain of the VM Pool Host
	FailureDomain string `json:"failureDomain"`
	// Architecture of the VM Pool Host
	Architecture string `json:"architecture"`
	// Flag specifying if the VM Pool Host is database
	Database float32 `json:"database"`
	// Status of the VM Pool Host
	Status string `json:"status"`
	// Description of the VM Pool Host
	Description *string `json:"description,omitempty"`
	// Timestamp when the VM Pool Host was updated
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Links to other resources
	Links map[string]interface{} `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _VMPoolHosts VMPoolHosts

// NewVMPoolHosts instantiates a new VMPoolHosts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMPoolHosts(id float32, name string, address string, port float32, poolId float32, roles []string, failureDomain string, architecture string, database float32, status string, updatedTimestamp string, links map[string]interface{}) *VMPoolHosts {
	this := VMPoolHosts{}
	this.Id = id
	this.Name = name
	this.Address = address
	this.Port = port
	this.PoolId = poolId
	this.Roles = roles
	this.FailureDomain = failureDomain
	this.Architecture = architecture
	this.Database = database
	this.Status = status
	this.UpdatedTimestamp = updatedTimestamp
	this.Links = links
	return &this
}

// NewVMPoolHostsWithDefaults instantiates a new VMPoolHosts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMPoolHostsWithDefaults() *VMPoolHosts {
	this := VMPoolHosts{}
	return &this
}

// GetId returns the Id field value
func (o *VMPoolHosts) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VMPoolHosts) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VMPoolHosts) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VMPoolHosts) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *VMPoolHosts) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *VMPoolHosts) SetAddress(v string) {
	o.Address = v
}

// GetPort returns the Port field value
func (o *VMPoolHosts) GetPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetPortOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *VMPoolHosts) SetPort(v float32) {
	o.Port = v
}

// GetPoolId returns the PoolId field value
func (o *VMPoolHosts) GetPoolId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetPoolIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *VMPoolHosts) SetPoolId(v float32) {
	o.PoolId = v
}

// GetRoles returns the Roles field value
func (o *VMPoolHosts) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetRolesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *VMPoolHosts) SetRoles(v []string) {
	o.Roles = v
}

// GetFailureDomain returns the FailureDomain field value
func (o *VMPoolHosts) GetFailureDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FailureDomain
}

// GetFailureDomainOk returns a tuple with the FailureDomain field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetFailureDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureDomain, true
}

// SetFailureDomain sets field value
func (o *VMPoolHosts) SetFailureDomain(v string) {
	o.FailureDomain = v
}

// GetArchitecture returns the Architecture field value
func (o *VMPoolHosts) GetArchitecture() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Architecture, true
}

// SetArchitecture sets field value
func (o *VMPoolHosts) SetArchitecture(v string) {
	o.Architecture = v
}

// GetDatabase returns the Database field value
func (o *VMPoolHosts) GetDatabase() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Database
}

// GetDatabaseOk returns a tuple with the Database field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetDatabaseOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Database, true
}

// SetDatabase sets field value
func (o *VMPoolHosts) SetDatabase(v float32) {
	o.Database = v
}

// GetStatus returns the Status field value
func (o *VMPoolHosts) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VMPoolHosts) SetStatus(v string) {
	o.Status = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *VMPoolHosts) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *VMPoolHosts) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *VMPoolHosts) SetDescription(v string) {
	o.Description = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *VMPoolHosts) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *VMPoolHosts) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetLinks returns the Links field value
func (o *VMPoolHosts) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *VMPoolHosts) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *VMPoolHosts) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o VMPoolHosts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMPoolHosts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["address"] = o.Address
	toSerialize["port"] = o.Port
	toSerialize["poolId"] = o.PoolId
	toSerialize["roles"] = o.Roles
	toSerialize["failureDomain"] = o.FailureDomain
	toSerialize["architecture"] = o.Architecture
	toSerialize["database"] = o.Database
	toSerialize["status"] = o.Status
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMPoolHosts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"address",
		"port",
		"poolId",
		"roles",
		"failureDomain",
		"architecture",
		"database",
		"status",
		"updatedTimestamp",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMPoolHosts := _VMPoolHosts{}

	err = json.Unmarshal(data, &varVMPoolHosts)

	if err != nil {
		return err
	}

	*o = VMPoolHosts(varVMPoolHosts)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "address")
		delete(additionalProperties, "port")
		delete(additionalProperties, "poolId")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "failureDomain")
		delete(additionalProperties, "architecture")
		delete(additionalProperties, "database")
		delete(additionalProperties, "status")
		delete(additionalProperties, "description")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMPoolHosts struct {
	value *VMPoolHosts
	isSet bool
}

func (v NullableVMPoolHosts) Get() *VMPoolHosts {
	return v.value
}

func (v *NullableVMPoolHosts) Set(val *VMPoolHosts) {
	v.value = val
	v.isSet = true
}

func (v NullableVMPoolHosts) IsSet() bool {
	return v.isSet
}

func (v *NullableVMPoolHosts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMPoolHosts(val *VMPoolHosts) *NullableVMPoolHosts {
	return &NullableVMPoolHosts{value: val, isSet: true}
}

func (v NullableVMPoolHosts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMPoolHosts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


