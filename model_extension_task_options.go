/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ExtensionTaskOptions - Task options.
type ExtensionTaskOptions struct {
	ExtensionTaskAnsible *ExtensionTaskAnsible
	ExtensionTaskWebhook *ExtensionTaskWebhook
}

// ExtensionTaskAnsibleAsExtensionTaskOptions is a convenience function that returns ExtensionTaskAnsible wrapped in ExtensionTaskOptions
func ExtensionTaskAnsibleAsExtensionTaskOptions(v *ExtensionTaskAnsible) ExtensionTaskOptions {
	return ExtensionTaskOptions{
		ExtensionTaskAnsible: v,
	}
}

// ExtensionTaskWebhookAsExtensionTaskOptions is a convenience function that returns ExtensionTaskWebhook wrapped in ExtensionTaskOptions
func ExtensionTaskWebhookAsExtensionTaskOptions(v *ExtensionTaskWebhook) ExtensionTaskOptions {
	return ExtensionTaskOptions{
		ExtensionTaskWebhook: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ExtensionTaskOptions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ExtensionTaskAnsible
	err = newStrictDecoder(data).Decode(&dst.ExtensionTaskAnsible)
	if err == nil {
		jsonExtensionTaskAnsible, _ := json.Marshal(dst.ExtensionTaskAnsible)
		if string(jsonExtensionTaskAnsible) == "{}" { // empty struct
			dst.ExtensionTaskAnsible = nil
		} else {
			if err = validator.Validate(dst.ExtensionTaskAnsible); err != nil {
				dst.ExtensionTaskAnsible = nil
			} else {
				match++
			}
		}
	} else {
		dst.ExtensionTaskAnsible = nil
	}

	// try to unmarshal data into ExtensionTaskWebhook
	err = newStrictDecoder(data).Decode(&dst.ExtensionTaskWebhook)
	if err == nil {
		jsonExtensionTaskWebhook, _ := json.Marshal(dst.ExtensionTaskWebhook)
		if string(jsonExtensionTaskWebhook) == "{}" { // empty struct
			dst.ExtensionTaskWebhook = nil
		} else {
			if err = validator.Validate(dst.ExtensionTaskWebhook); err != nil {
				dst.ExtensionTaskWebhook = nil
			} else {
				match++
			}
		}
	} else {
		dst.ExtensionTaskWebhook = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ExtensionTaskAnsible = nil
		dst.ExtensionTaskWebhook = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ExtensionTaskOptions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ExtensionTaskOptions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ExtensionTaskOptions) MarshalJSON() ([]byte, error) {
	if src.ExtensionTaskAnsible != nil {
		return json.Marshal(&src.ExtensionTaskAnsible)
	}

	if src.ExtensionTaskWebhook != nil {
		return json.Marshal(&src.ExtensionTaskWebhook)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ExtensionTaskOptions) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ExtensionTaskAnsible != nil {
		return obj.ExtensionTaskAnsible
	}

	if obj.ExtensionTaskWebhook != nil {
		return obj.ExtensionTaskWebhook
	}

	// all schemas are nil
	return nil
}

type NullableExtensionTaskOptions struct {
	value *ExtensionTaskOptions
	isSet bool
}

func (v NullableExtensionTaskOptions) Get() *ExtensionTaskOptions {
	return v.value
}

func (v *NullableExtensionTaskOptions) Set(val *ExtensionTaskOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionTaskOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionTaskOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionTaskOptions(val *ExtensionTaskOptions) *NullableExtensionTaskOptions {
	return &NullableExtensionTaskOptions{value: val, isSet: true}
}

func (v NullableExtensionTaskOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionTaskOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


