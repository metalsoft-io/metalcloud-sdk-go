/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the AgentCapabilities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentCapabilities{}

// AgentCapabilities struct for AgentCapabilities
type AgentCapabilities struct {
	// HTTP proxy capability status
	HttpProxyEnabled bool `json:"httpProxyEnabled"`
	// Inband HTTP proxy capability status
	InbandHttpProxyEnabled bool `json:"inbandHttpProxyEnabled"`
	// File transfer capability status
	FileTransferEnabled bool `json:"fileTransferEnabled"`
	// Inband file transfer capability status
	InbandFileTransferEnabled bool `json:"inbandFileTransferEnabled"`
	// Switch subscription capability status
	SwitchSubscriptionEnabled bool `json:"switchSubscriptionEnabled"`
	// Command execution capability status
	CommandExecutionEnabled bool `json:"commandExecutionEnabled"`
	// VNC capability status
	VncEnabled bool `json:"vncEnabled"`
	// SPICE capability status
	SpiceEnabled bool `json:"spiceEnabled"`
	// Syslog capability status
	SyslogEnabled bool `json:"syslogEnabled"`
	// DHCP OOB capability status
	DhcpOobEnabled bool `json:"dhcpOobEnabled"`
	// NETCONF capability status
	NetconfEnabled bool `json:"netconfEnabled"`
	// Ansible runner capability status
	AnsibleRunnerEnabled bool `json:"ansibleRunnerEnabled"`
	AdditionalProperties map[string]interface{}
}

type _AgentCapabilities AgentCapabilities

// NewAgentCapabilities instantiates a new AgentCapabilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentCapabilities(httpProxyEnabled bool, inbandHttpProxyEnabled bool, fileTransferEnabled bool, inbandFileTransferEnabled bool, switchSubscriptionEnabled bool, commandExecutionEnabled bool, vncEnabled bool, spiceEnabled bool, syslogEnabled bool, dhcpOobEnabled bool, netconfEnabled bool, ansibleRunnerEnabled bool) *AgentCapabilities {
	this := AgentCapabilities{}
	this.HttpProxyEnabled = httpProxyEnabled
	this.InbandHttpProxyEnabled = inbandHttpProxyEnabled
	this.FileTransferEnabled = fileTransferEnabled
	this.InbandFileTransferEnabled = inbandFileTransferEnabled
	this.SwitchSubscriptionEnabled = switchSubscriptionEnabled
	this.CommandExecutionEnabled = commandExecutionEnabled
	this.VncEnabled = vncEnabled
	this.SpiceEnabled = spiceEnabled
	this.SyslogEnabled = syslogEnabled
	this.DhcpOobEnabled = dhcpOobEnabled
	this.NetconfEnabled = netconfEnabled
	this.AnsibleRunnerEnabled = ansibleRunnerEnabled
	return &this
}

// NewAgentCapabilitiesWithDefaults instantiates a new AgentCapabilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentCapabilitiesWithDefaults() *AgentCapabilities {
	this := AgentCapabilities{}
	return &this
}

// GetHttpProxyEnabled returns the HttpProxyEnabled field value
func (o *AgentCapabilities) GetHttpProxyEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HttpProxyEnabled
}

// GetHttpProxyEnabledOk returns a tuple with the HttpProxyEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetHttpProxyEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpProxyEnabled, true
}

// SetHttpProxyEnabled sets field value
func (o *AgentCapabilities) SetHttpProxyEnabled(v bool) {
	o.HttpProxyEnabled = v
}

// GetInbandHttpProxyEnabled returns the InbandHttpProxyEnabled field value
func (o *AgentCapabilities) GetInbandHttpProxyEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InbandHttpProxyEnabled
}

// GetInbandHttpProxyEnabledOk returns a tuple with the InbandHttpProxyEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetInbandHttpProxyEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InbandHttpProxyEnabled, true
}

// SetInbandHttpProxyEnabled sets field value
func (o *AgentCapabilities) SetInbandHttpProxyEnabled(v bool) {
	o.InbandHttpProxyEnabled = v
}

// GetFileTransferEnabled returns the FileTransferEnabled field value
func (o *AgentCapabilities) GetFileTransferEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FileTransferEnabled
}

// GetFileTransferEnabledOk returns a tuple with the FileTransferEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetFileTransferEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileTransferEnabled, true
}

// SetFileTransferEnabled sets field value
func (o *AgentCapabilities) SetFileTransferEnabled(v bool) {
	o.FileTransferEnabled = v
}

// GetInbandFileTransferEnabled returns the InbandFileTransferEnabled field value
func (o *AgentCapabilities) GetInbandFileTransferEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InbandFileTransferEnabled
}

// GetInbandFileTransferEnabledOk returns a tuple with the InbandFileTransferEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetInbandFileTransferEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InbandFileTransferEnabled, true
}

// SetInbandFileTransferEnabled sets field value
func (o *AgentCapabilities) SetInbandFileTransferEnabled(v bool) {
	o.InbandFileTransferEnabled = v
}

// GetSwitchSubscriptionEnabled returns the SwitchSubscriptionEnabled field value
func (o *AgentCapabilities) GetSwitchSubscriptionEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SwitchSubscriptionEnabled
}

// GetSwitchSubscriptionEnabledOk returns a tuple with the SwitchSubscriptionEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetSwitchSubscriptionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SwitchSubscriptionEnabled, true
}

// SetSwitchSubscriptionEnabled sets field value
func (o *AgentCapabilities) SetSwitchSubscriptionEnabled(v bool) {
	o.SwitchSubscriptionEnabled = v
}

// GetCommandExecutionEnabled returns the CommandExecutionEnabled field value
func (o *AgentCapabilities) GetCommandExecutionEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CommandExecutionEnabled
}

// GetCommandExecutionEnabledOk returns a tuple with the CommandExecutionEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetCommandExecutionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandExecutionEnabled, true
}

// SetCommandExecutionEnabled sets field value
func (o *AgentCapabilities) SetCommandExecutionEnabled(v bool) {
	o.CommandExecutionEnabled = v
}

// GetVncEnabled returns the VncEnabled field value
func (o *AgentCapabilities) GetVncEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VncEnabled
}

// GetVncEnabledOk returns a tuple with the VncEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetVncEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VncEnabled, true
}

// SetVncEnabled sets field value
func (o *AgentCapabilities) SetVncEnabled(v bool) {
	o.VncEnabled = v
}

// GetSpiceEnabled returns the SpiceEnabled field value
func (o *AgentCapabilities) GetSpiceEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SpiceEnabled
}

// GetSpiceEnabledOk returns a tuple with the SpiceEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetSpiceEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpiceEnabled, true
}

// SetSpiceEnabled sets field value
func (o *AgentCapabilities) SetSpiceEnabled(v bool) {
	o.SpiceEnabled = v
}

// GetSyslogEnabled returns the SyslogEnabled field value
func (o *AgentCapabilities) GetSyslogEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SyslogEnabled
}

// GetSyslogEnabledOk returns a tuple with the SyslogEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetSyslogEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyslogEnabled, true
}

// SetSyslogEnabled sets field value
func (o *AgentCapabilities) SetSyslogEnabled(v bool) {
	o.SyslogEnabled = v
}

// GetDhcpOobEnabled returns the DhcpOobEnabled field value
func (o *AgentCapabilities) GetDhcpOobEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DhcpOobEnabled
}

// GetDhcpOobEnabledOk returns a tuple with the DhcpOobEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetDhcpOobEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DhcpOobEnabled, true
}

// SetDhcpOobEnabled sets field value
func (o *AgentCapabilities) SetDhcpOobEnabled(v bool) {
	o.DhcpOobEnabled = v
}

// GetNetconfEnabled returns the NetconfEnabled field value
func (o *AgentCapabilities) GetNetconfEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.NetconfEnabled
}

// GetNetconfEnabledOk returns a tuple with the NetconfEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetNetconfEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetconfEnabled, true
}

// SetNetconfEnabled sets field value
func (o *AgentCapabilities) SetNetconfEnabled(v bool) {
	o.NetconfEnabled = v
}

// GetAnsibleRunnerEnabled returns the AnsibleRunnerEnabled field value
func (o *AgentCapabilities) GetAnsibleRunnerEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AnsibleRunnerEnabled
}

// GetAnsibleRunnerEnabledOk returns a tuple with the AnsibleRunnerEnabled field value
// and a boolean to check if the value has been set.
func (o *AgentCapabilities) GetAnsibleRunnerEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnsibleRunnerEnabled, true
}

// SetAnsibleRunnerEnabled sets field value
func (o *AgentCapabilities) SetAnsibleRunnerEnabled(v bool) {
	o.AnsibleRunnerEnabled = v
}

func (o AgentCapabilities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentCapabilities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["httpProxyEnabled"] = o.HttpProxyEnabled
	toSerialize["inbandHttpProxyEnabled"] = o.InbandHttpProxyEnabled
	toSerialize["fileTransferEnabled"] = o.FileTransferEnabled
	toSerialize["inbandFileTransferEnabled"] = o.InbandFileTransferEnabled
	toSerialize["switchSubscriptionEnabled"] = o.SwitchSubscriptionEnabled
	toSerialize["commandExecutionEnabled"] = o.CommandExecutionEnabled
	toSerialize["vncEnabled"] = o.VncEnabled
	toSerialize["spiceEnabled"] = o.SpiceEnabled
	toSerialize["syslogEnabled"] = o.SyslogEnabled
	toSerialize["dhcpOobEnabled"] = o.DhcpOobEnabled
	toSerialize["netconfEnabled"] = o.NetconfEnabled
	toSerialize["ansibleRunnerEnabled"] = o.AnsibleRunnerEnabled

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AgentCapabilities) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"httpProxyEnabled",
		"inbandHttpProxyEnabled",
		"fileTransferEnabled",
		"inbandFileTransferEnabled",
		"switchSubscriptionEnabled",
		"commandExecutionEnabled",
		"vncEnabled",
		"spiceEnabled",
		"syslogEnabled",
		"dhcpOobEnabled",
		"netconfEnabled",
		"ansibleRunnerEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgentCapabilities := _AgentCapabilities{}

	err = json.Unmarshal(data, &varAgentCapabilities)

	if err != nil {
		return err
	}

	*o = AgentCapabilities(varAgentCapabilities)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "httpProxyEnabled")
		delete(additionalProperties, "inbandHttpProxyEnabled")
		delete(additionalProperties, "fileTransferEnabled")
		delete(additionalProperties, "inbandFileTransferEnabled")
		delete(additionalProperties, "switchSubscriptionEnabled")
		delete(additionalProperties, "commandExecutionEnabled")
		delete(additionalProperties, "vncEnabled")
		delete(additionalProperties, "spiceEnabled")
		delete(additionalProperties, "syslogEnabled")
		delete(additionalProperties, "dhcpOobEnabled")
		delete(additionalProperties, "netconfEnabled")
		delete(additionalProperties, "ansibleRunnerEnabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAgentCapabilities struct {
	value *AgentCapabilities
	isSet bool
}

func (v NullableAgentCapabilities) Get() *AgentCapabilities {
	return v.value
}

func (v *NullableAgentCapabilities) Set(val *AgentCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentCapabilities(val *AgentCapabilities) *NullableAgentCapabilities {
	return &NullableAgentCapabilities{value: val, isSet: true}
}

func (v NullableAgentCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


