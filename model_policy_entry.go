/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the PolicyEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyEntry{}

// PolicyEntry struct for PolicyEntry
type PolicyEntry struct {
	// Policy subject(s)
	Subject []string `json:"subject"`
	// Policy action(s)
	Action []string `json:"action"`
	// Policy condition(s)
	Conditions map[string]interface{} `json:"conditions,omitempty"`
	// Policy subject fields(s)
	Fields []string `json:"fields,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PolicyEntry PolicyEntry

// NewPolicyEntry instantiates a new PolicyEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyEntry(subject []string, action []string) *PolicyEntry {
	this := PolicyEntry{}
	this.Subject = subject
	this.Action = action
	return &this
}

// NewPolicyEntryWithDefaults instantiates a new PolicyEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyEntryWithDefaults() *PolicyEntry {
	this := PolicyEntry{}
	return &this
}

// GetSubject returns the Subject field value
func (o *PolicyEntry) GetSubject() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *PolicyEntry) GetSubjectOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subject, true
}

// SetSubject sets field value
func (o *PolicyEntry) SetSubject(v []string) {
	o.Subject = v
}

// GetAction returns the Action field value
func (o *PolicyEntry) GetAction() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PolicyEntry) GetActionOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action, true
}

// SetAction sets field value
func (o *PolicyEntry) SetAction(v []string) {
	o.Action = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *PolicyEntry) GetConditions() map[string]interface{} {
	if o == nil || IsNil(o.Conditions) {
		var ret map[string]interface{}
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEntry) GetConditionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Conditions) {
		return map[string]interface{}{}, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *PolicyEntry) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given map[string]interface{} and assigns it to the Conditions field.
func (o *PolicyEntry) SetConditions(v map[string]interface{}) {
	o.Conditions = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *PolicyEntry) GetFields() []string {
	if o == nil || IsNil(o.Fields) {
		var ret []string
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEntry) GetFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *PolicyEntry) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []string and assigns it to the Fields field.
func (o *PolicyEntry) SetFields(v []string) {
	o.Fields = v
}

func (o PolicyEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subject"] = o.Subject
	toSerialize["action"] = o.Action
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PolicyEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subject",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyEntry := _PolicyEntry{}

	err = json.Unmarshal(data, &varPolicyEntry)

	if err != nil {
		return err
	}

	*o = PolicyEntry(varPolicyEntry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subject")
		delete(additionalProperties, "action")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "fields")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePolicyEntry struct {
	value *PolicyEntry
	isSet bool
}

func (v NullablePolicyEntry) Get() *PolicyEntry {
	return v.value
}

func (v *NullablePolicyEntry) Set(val *PolicyEntry) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyEntry) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyEntry(val *PolicyEntry) *NullablePolicyEntry {
	return &NullablePolicyEntry{value: val, isSet: true}
}

func (v NullablePolicyEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


