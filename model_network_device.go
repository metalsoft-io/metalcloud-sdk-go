/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDevice{}

// NetworkDevice struct for NetworkDevice
type NetworkDevice struct {
	// Unique identifier for the network device.
	Id string `json:"id"`
	// Revision number
	Revision float32 `json:"revision"`
	// Current status of the network device
	Status string `json:"status"`
	// Site ID
	SiteId float32 `json:"siteId"`
	// Hostname of the network device
	IdentifierString string `json:"identifierString"`
	// Description of the network device
	Description string `json:"description"`
	// Chassis identifier of the network device
	ChassisIdentifier string `json:"chassisIdentifier"`
	// Country of the network device
	Country string `json:"country"`
	// City of the network device
	City string `json:"city"`
	// Datacenter metadata
	DatacenterMeta string `json:"datacenterMeta"`
	// Room in the datacenter where the network device is located
	DatacenterRoom string `json:"datacenterRoom"`
	// Rack in the datacenter where the network device is located
	DatacenterRack string `json:"datacenterRack"`
	// Upper rack position in the datacenter
	RackPositionUpperUnit float32 `json:"rackPositionUpperUnit"`
	// Lower rack position in the datacenter
	RackPositionLowerUnit float32 `json:"rackPositionLowerUnit"`
	// Management address of the network device
	ManagementAddress string `json:"managementAddress"`
	// Prefix length of the management address
	ManagementAddressPrefixLength float32 `json:"managementAddressPrefixLength"`
	// Management gateway address
	ManagementAddressGateway string `json:"managementAddressGateway"`
	// Management port of the network device
	ManagementPort float32 `json:"managementPort"`
	// Is the network device syslog enabled
	SyslogEnabled float32 `json:"syslogEnabled"`
	// Username used to connect to the network device
	Username string `json:"username"`
	// Password used to connect to the network device
	ManagementPassword string `json:"managementPassword"`
	// MAC address of the management interface
	ManagementMacAddress string `json:"managementMacAddress"`
	// Serial number of the network device
	SerialNumber string `json:"serialNumber"`
	// Driver software used to communicate with the network device
	Driver NetworkDeviceDriver `json:"driver"`
	// The physical or logical position of the network device in the network topology.
	Position SwitchPosition `json:"position"`
	// Order index of the network device
	OrderIndex float32 `json:"orderIndex"`
	// Tags associated with the network device for categorization and filtering
	Tags []string `json:"tags"`
	// Whether the device is ready for initial configuration
	ReadyForInitialConfiguration float32 `json:"readyForInitialConfiguration"`
	// Whether bootstrap readiness check is in progress
	BootstrapReadinessCheckInProgress float32 `json:"bootstrapReadinessCheckInProgress"`
	// Subnet ID for OOB management
	SubnetOobId float32 `json:"subnetOobId"`
	// Subnet OOB index
	SubnetOobIndex float32 `json:"subnetOobIndex"`
	// Whether the device requires OS installation
	RequiresOsInstall bool `json:"requiresOsInstall"`
	// Whether to skip initial configuration during bootstrap
	BootstrapSkipInitialConfiguration float32 `json:"bootstrapSkipInitialConfiguration"`
	// Expected partner hostname during bootstrap
	BootstrapExpectedPartnerHostname string `json:"bootstrapExpectedPartnerHostname"`
	// Loopback IPv4 address
	LoopbackAddressIpv4 *string `json:"loopbackAddressIpv4,omitempty"`
	// Loopback IPv6 address
	LoopbackAddressIpv6 string `json:"loopbackAddressIpv6"`
	// ASN of the network device
	Asn float32 `json:"asn"`
	// VTEP IPv4 address
	VtepAddressIpv4 *string `json:"vtepAddressIpv4,omitempty"`
	// VTEP IPv6 address
	VtepAddressIpv6 string `json:"vtepAddressIpv6"`
	// MLAG system MAC address
	MlagSystemMac string `json:"mlagSystemMac"`
	// MLAG domain ID
	MlagDomainId float32 `json:"mlagDomainId"`
	// Quarantine VLAN ID
	QuarantineVlan float32 `json:"quarantineVlan"`
	// Variables materialized for OS assets
	VariablesMaterializedForOSAssets map[string]interface{} `json:"variablesMaterializedForOSAssets"`
	// Secrets materialized for OS assets
	SecretsMaterializedForOSAssets map[string]interface{} `json:"secretsMaterializedForOSAssets"`
	// Bootstrap readiness check result
	BootstrapReadinessCheckResult map[string]interface{} `json:"bootstrapReadinessCheckResult"`
	// Whether the network device is a gateway
	IsGateway bool `json:"isGateway"`
	// The extension execution info of the network device.
	ExtensionInfo *ExtensionExecutionInfo `json:"extensionInfo,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkDevice NetworkDevice

// NewNetworkDevice instantiates a new NetworkDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDevice(id string, revision float32, status string, siteId float32, identifierString string, description string, chassisIdentifier string, country string, city string, datacenterMeta string, datacenterRoom string, datacenterRack string, rackPositionUpperUnit float32, rackPositionLowerUnit float32, managementAddress string, managementAddressPrefixLength float32, managementAddressGateway string, managementPort float32, syslogEnabled float32, username string, managementPassword string, managementMacAddress string, serialNumber string, driver NetworkDeviceDriver, position SwitchPosition, orderIndex float32, tags []string, readyForInitialConfiguration float32, bootstrapReadinessCheckInProgress float32, subnetOobId float32, subnetOobIndex float32, requiresOsInstall bool, bootstrapSkipInitialConfiguration float32, bootstrapExpectedPartnerHostname string, loopbackAddressIpv6 string, asn float32, vtepAddressIpv6 string, mlagSystemMac string, mlagDomainId float32, quarantineVlan float32, variablesMaterializedForOSAssets map[string]interface{}, secretsMaterializedForOSAssets map[string]interface{}, bootstrapReadinessCheckResult map[string]interface{}, isGateway bool) *NetworkDevice {
	this := NetworkDevice{}
	this.Id = id
	this.Revision = revision
	this.Status = status
	this.SiteId = siteId
	this.IdentifierString = identifierString
	this.Description = description
	this.ChassisIdentifier = chassisIdentifier
	this.Country = country
	this.City = city
	this.DatacenterMeta = datacenterMeta
	this.DatacenterRoom = datacenterRoom
	this.DatacenterRack = datacenterRack
	this.RackPositionUpperUnit = rackPositionUpperUnit
	this.RackPositionLowerUnit = rackPositionLowerUnit
	this.ManagementAddress = managementAddress
	this.ManagementAddressPrefixLength = managementAddressPrefixLength
	this.ManagementAddressGateway = managementAddressGateway
	this.ManagementPort = managementPort
	this.SyslogEnabled = syslogEnabled
	this.Username = username
	this.ManagementPassword = managementPassword
	this.ManagementMacAddress = managementMacAddress
	this.SerialNumber = serialNumber
	this.Driver = driver
	this.Position = position
	this.OrderIndex = orderIndex
	this.Tags = tags
	this.ReadyForInitialConfiguration = readyForInitialConfiguration
	this.BootstrapReadinessCheckInProgress = bootstrapReadinessCheckInProgress
	this.SubnetOobId = subnetOobId
	this.SubnetOobIndex = subnetOobIndex
	this.RequiresOsInstall = requiresOsInstall
	this.BootstrapSkipInitialConfiguration = bootstrapSkipInitialConfiguration
	this.BootstrapExpectedPartnerHostname = bootstrapExpectedPartnerHostname
	this.LoopbackAddressIpv6 = loopbackAddressIpv6
	this.Asn = asn
	this.VtepAddressIpv6 = vtepAddressIpv6
	this.MlagSystemMac = mlagSystemMac
	this.MlagDomainId = mlagDomainId
	this.QuarantineVlan = quarantineVlan
	this.VariablesMaterializedForOSAssets = variablesMaterializedForOSAssets
	this.SecretsMaterializedForOSAssets = secretsMaterializedForOSAssets
	this.BootstrapReadinessCheckResult = bootstrapReadinessCheckResult
	this.IsGateway = isGateway
	return &this
}

// NewNetworkDeviceWithDefaults instantiates a new NetworkDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDeviceWithDefaults() *NetworkDevice {
	this := NetworkDevice{}
	return &this
}

// GetId returns the Id field value
func (o *NetworkDevice) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NetworkDevice) SetId(v string) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *NetworkDevice) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *NetworkDevice) SetRevision(v float32) {
	o.Revision = v
}

// GetStatus returns the Status field value
func (o *NetworkDevice) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NetworkDevice) SetStatus(v string) {
	o.Status = v
}

// GetSiteId returns the SiteId field value
func (o *NetworkDevice) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *NetworkDevice) SetSiteId(v float32) {
	o.SiteId = v
}

// GetIdentifierString returns the IdentifierString field value
func (o *NetworkDevice) GetIdentifierString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentifierString
}

// GetIdentifierStringOk returns a tuple with the IdentifierString field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetIdentifierStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentifierString, true
}

// SetIdentifierString sets field value
func (o *NetworkDevice) SetIdentifierString(v string) {
	o.IdentifierString = v
}

// GetDescription returns the Description field value
func (o *NetworkDevice) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *NetworkDevice) SetDescription(v string) {
	o.Description = v
}

// GetChassisIdentifier returns the ChassisIdentifier field value
func (o *NetworkDevice) GetChassisIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChassisIdentifier
}

// GetChassisIdentifierOk returns a tuple with the ChassisIdentifier field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetChassisIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChassisIdentifier, true
}

// SetChassisIdentifier sets field value
func (o *NetworkDevice) SetChassisIdentifier(v string) {
	o.ChassisIdentifier = v
}

// GetCountry returns the Country field value
func (o *NetworkDevice) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *NetworkDevice) SetCountry(v string) {
	o.Country = v
}

// GetCity returns the City field value
func (o *NetworkDevice) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *NetworkDevice) SetCity(v string) {
	o.City = v
}

// GetDatacenterMeta returns the DatacenterMeta field value
func (o *NetworkDevice) GetDatacenterMeta() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatacenterMeta
}

// GetDatacenterMetaOk returns a tuple with the DatacenterMeta field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDatacenterMetaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatacenterMeta, true
}

// SetDatacenterMeta sets field value
func (o *NetworkDevice) SetDatacenterMeta(v string) {
	o.DatacenterMeta = v
}

// GetDatacenterRoom returns the DatacenterRoom field value
func (o *NetworkDevice) GetDatacenterRoom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatacenterRoom
}

// GetDatacenterRoomOk returns a tuple with the DatacenterRoom field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDatacenterRoomOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatacenterRoom, true
}

// SetDatacenterRoom sets field value
func (o *NetworkDevice) SetDatacenterRoom(v string) {
	o.DatacenterRoom = v
}

// GetDatacenterRack returns the DatacenterRack field value
func (o *NetworkDevice) GetDatacenterRack() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatacenterRack
}

// GetDatacenterRackOk returns a tuple with the DatacenterRack field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDatacenterRackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatacenterRack, true
}

// SetDatacenterRack sets field value
func (o *NetworkDevice) SetDatacenterRack(v string) {
	o.DatacenterRack = v
}

// GetRackPositionUpperUnit returns the RackPositionUpperUnit field value
func (o *NetworkDevice) GetRackPositionUpperUnit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RackPositionUpperUnit
}

// GetRackPositionUpperUnitOk returns a tuple with the RackPositionUpperUnit field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetRackPositionUpperUnitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RackPositionUpperUnit, true
}

// SetRackPositionUpperUnit sets field value
func (o *NetworkDevice) SetRackPositionUpperUnit(v float32) {
	o.RackPositionUpperUnit = v
}

// GetRackPositionLowerUnit returns the RackPositionLowerUnit field value
func (o *NetworkDevice) GetRackPositionLowerUnit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RackPositionLowerUnit
}

// GetRackPositionLowerUnitOk returns a tuple with the RackPositionLowerUnit field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetRackPositionLowerUnitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RackPositionLowerUnit, true
}

// SetRackPositionLowerUnit sets field value
func (o *NetworkDevice) SetRackPositionLowerUnit(v float32) {
	o.RackPositionLowerUnit = v
}

// GetManagementAddress returns the ManagementAddress field value
func (o *NetworkDevice) GetManagementAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementAddress, true
}

// SetManagementAddress sets field value
func (o *NetworkDevice) SetManagementAddress(v string) {
	o.ManagementAddress = v
}

// GetManagementAddressPrefixLength returns the ManagementAddressPrefixLength field value
func (o *NetworkDevice) GetManagementAddressPrefixLength() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ManagementAddressPrefixLength
}

// GetManagementAddressPrefixLengthOk returns a tuple with the ManagementAddressPrefixLength field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementAddressPrefixLengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementAddressPrefixLength, true
}

// SetManagementAddressPrefixLength sets field value
func (o *NetworkDevice) SetManagementAddressPrefixLength(v float32) {
	o.ManagementAddressPrefixLength = v
}

// GetManagementAddressGateway returns the ManagementAddressGateway field value
func (o *NetworkDevice) GetManagementAddressGateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementAddressGateway
}

// GetManagementAddressGatewayOk returns a tuple with the ManagementAddressGateway field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementAddressGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementAddressGateway, true
}

// SetManagementAddressGateway sets field value
func (o *NetworkDevice) SetManagementAddressGateway(v string) {
	o.ManagementAddressGateway = v
}

// GetManagementPort returns the ManagementPort field value
func (o *NetworkDevice) GetManagementPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ManagementPort
}

// GetManagementPortOk returns a tuple with the ManagementPort field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementPortOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementPort, true
}

// SetManagementPort sets field value
func (o *NetworkDevice) SetManagementPort(v float32) {
	o.ManagementPort = v
}

// GetSyslogEnabled returns the SyslogEnabled field value
func (o *NetworkDevice) GetSyslogEnabled() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SyslogEnabled
}

// GetSyslogEnabledOk returns a tuple with the SyslogEnabled field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSyslogEnabledOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyslogEnabled, true
}

// SetSyslogEnabled sets field value
func (o *NetworkDevice) SetSyslogEnabled(v float32) {
	o.SyslogEnabled = v
}

// GetUsername returns the Username field value
func (o *NetworkDevice) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *NetworkDevice) SetUsername(v string) {
	o.Username = v
}

// GetManagementPassword returns the ManagementPassword field value
func (o *NetworkDevice) GetManagementPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementPassword
}

// GetManagementPasswordOk returns a tuple with the ManagementPassword field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementPassword, true
}

// SetManagementPassword sets field value
func (o *NetworkDevice) SetManagementPassword(v string) {
	o.ManagementPassword = v
}

// GetManagementMacAddress returns the ManagementMacAddress field value
func (o *NetworkDevice) GetManagementMacAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementMacAddress
}

// GetManagementMacAddressOk returns a tuple with the ManagementMacAddress field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementMacAddress, true
}

// SetManagementMacAddress sets field value
func (o *NetworkDevice) SetManagementMacAddress(v string) {
	o.ManagementMacAddress = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *NetworkDevice) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *NetworkDevice) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetDriver returns the Driver field value
func (o *NetworkDevice) GetDriver() NetworkDeviceDriver {
	if o == nil {
		var ret NetworkDeviceDriver
		return ret
	}

	return o.Driver
}

// GetDriverOk returns a tuple with the Driver field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDriverOk() (*NetworkDeviceDriver, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Driver, true
}

// SetDriver sets field value
func (o *NetworkDevice) SetDriver(v NetworkDeviceDriver) {
	o.Driver = v
}

// GetPosition returns the Position field value
func (o *NetworkDevice) GetPosition() SwitchPosition {
	if o == nil {
		var ret SwitchPosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetPositionOk() (*SwitchPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *NetworkDevice) SetPosition(v SwitchPosition) {
	o.Position = v
}

// GetOrderIndex returns the OrderIndex field value
func (o *NetworkDevice) GetOrderIndex() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.OrderIndex
}

// GetOrderIndexOk returns a tuple with the OrderIndex field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetOrderIndexOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderIndex, true
}

// SetOrderIndex sets field value
func (o *NetworkDevice) SetOrderIndex(v float32) {
	o.OrderIndex = v
}

// GetTags returns the Tags field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *NetworkDevice) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkDevice) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *NetworkDevice) SetTags(v []string) {
	o.Tags = v
}

// GetReadyForInitialConfiguration returns the ReadyForInitialConfiguration field value
func (o *NetworkDevice) GetReadyForInitialConfiguration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ReadyForInitialConfiguration
}

// GetReadyForInitialConfigurationOk returns a tuple with the ReadyForInitialConfiguration field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetReadyForInitialConfigurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadyForInitialConfiguration, true
}

// SetReadyForInitialConfiguration sets field value
func (o *NetworkDevice) SetReadyForInitialConfiguration(v float32) {
	o.ReadyForInitialConfiguration = v
}

// GetBootstrapReadinessCheckInProgress returns the BootstrapReadinessCheckInProgress field value
func (o *NetworkDevice) GetBootstrapReadinessCheckInProgress() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BootstrapReadinessCheckInProgress
}

// GetBootstrapReadinessCheckInProgressOk returns a tuple with the BootstrapReadinessCheckInProgress field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetBootstrapReadinessCheckInProgressOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BootstrapReadinessCheckInProgress, true
}

// SetBootstrapReadinessCheckInProgress sets field value
func (o *NetworkDevice) SetBootstrapReadinessCheckInProgress(v float32) {
	o.BootstrapReadinessCheckInProgress = v
}

// GetSubnetOobId returns the SubnetOobId field value
func (o *NetworkDevice) GetSubnetOobId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SubnetOobId
}

// GetSubnetOobIdOk returns a tuple with the SubnetOobId field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSubnetOobIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetOobId, true
}

// SetSubnetOobId sets field value
func (o *NetworkDevice) SetSubnetOobId(v float32) {
	o.SubnetOobId = v
}

// GetSubnetOobIndex returns the SubnetOobIndex field value
func (o *NetworkDevice) GetSubnetOobIndex() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SubnetOobIndex
}

// GetSubnetOobIndexOk returns a tuple with the SubnetOobIndex field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSubnetOobIndexOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetOobIndex, true
}

// SetSubnetOobIndex sets field value
func (o *NetworkDevice) SetSubnetOobIndex(v float32) {
	o.SubnetOobIndex = v
}

// GetRequiresOsInstall returns the RequiresOsInstall field value
func (o *NetworkDevice) GetRequiresOsInstall() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequiresOsInstall
}

// GetRequiresOsInstallOk returns a tuple with the RequiresOsInstall field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetRequiresOsInstallOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequiresOsInstall, true
}

// SetRequiresOsInstall sets field value
func (o *NetworkDevice) SetRequiresOsInstall(v bool) {
	o.RequiresOsInstall = v
}

// GetBootstrapSkipInitialConfiguration returns the BootstrapSkipInitialConfiguration field value
func (o *NetworkDevice) GetBootstrapSkipInitialConfiguration() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BootstrapSkipInitialConfiguration
}

// GetBootstrapSkipInitialConfigurationOk returns a tuple with the BootstrapSkipInitialConfiguration field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetBootstrapSkipInitialConfigurationOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BootstrapSkipInitialConfiguration, true
}

// SetBootstrapSkipInitialConfiguration sets field value
func (o *NetworkDevice) SetBootstrapSkipInitialConfiguration(v float32) {
	o.BootstrapSkipInitialConfiguration = v
}

// GetBootstrapExpectedPartnerHostname returns the BootstrapExpectedPartnerHostname field value
func (o *NetworkDevice) GetBootstrapExpectedPartnerHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BootstrapExpectedPartnerHostname
}

// GetBootstrapExpectedPartnerHostnameOk returns a tuple with the BootstrapExpectedPartnerHostname field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetBootstrapExpectedPartnerHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BootstrapExpectedPartnerHostname, true
}

// SetBootstrapExpectedPartnerHostname sets field value
func (o *NetworkDevice) SetBootstrapExpectedPartnerHostname(v string) {
	o.BootstrapExpectedPartnerHostname = v
}

// GetLoopbackAddressIpv4 returns the LoopbackAddressIpv4 field value if set, zero value otherwise.
func (o *NetworkDevice) GetLoopbackAddressIpv4() string {
	if o == nil || IsNil(o.LoopbackAddressIpv4) {
		var ret string
		return ret
	}
	return *o.LoopbackAddressIpv4
}

// GetLoopbackAddressIpv4Ok returns a tuple with the LoopbackAddressIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetLoopbackAddressIpv4Ok() (*string, bool) {
	if o == nil || IsNil(o.LoopbackAddressIpv4) {
		return nil, false
	}
	return o.LoopbackAddressIpv4, true
}

// HasLoopbackAddressIpv4 returns a boolean if a field has been set.
func (o *NetworkDevice) HasLoopbackAddressIpv4() bool {
	if o != nil && !IsNil(o.LoopbackAddressIpv4) {
		return true
	}

	return false
}

// SetLoopbackAddressIpv4 gets a reference to the given string and assigns it to the LoopbackAddressIpv4 field.
func (o *NetworkDevice) SetLoopbackAddressIpv4(v string) {
	o.LoopbackAddressIpv4 = &v
}

// GetLoopbackAddressIpv6 returns the LoopbackAddressIpv6 field value
func (o *NetworkDevice) GetLoopbackAddressIpv6() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoopbackAddressIpv6
}

// GetLoopbackAddressIpv6Ok returns a tuple with the LoopbackAddressIpv6 field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetLoopbackAddressIpv6Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoopbackAddressIpv6, true
}

// SetLoopbackAddressIpv6 sets field value
func (o *NetworkDevice) SetLoopbackAddressIpv6(v string) {
	o.LoopbackAddressIpv6 = v
}

// GetAsn returns the Asn field value
func (o *NetworkDevice) GetAsn() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Asn
}

// GetAsnOk returns a tuple with the Asn field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetAsnOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Asn, true
}

// SetAsn sets field value
func (o *NetworkDevice) SetAsn(v float32) {
	o.Asn = v
}

// GetVtepAddressIpv4 returns the VtepAddressIpv4 field value if set, zero value otherwise.
func (o *NetworkDevice) GetVtepAddressIpv4() string {
	if o == nil || IsNil(o.VtepAddressIpv4) {
		var ret string
		return ret
	}
	return *o.VtepAddressIpv4
}

// GetVtepAddressIpv4Ok returns a tuple with the VtepAddressIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetVtepAddressIpv4Ok() (*string, bool) {
	if o == nil || IsNil(o.VtepAddressIpv4) {
		return nil, false
	}
	return o.VtepAddressIpv4, true
}

// HasVtepAddressIpv4 returns a boolean if a field has been set.
func (o *NetworkDevice) HasVtepAddressIpv4() bool {
	if o != nil && !IsNil(o.VtepAddressIpv4) {
		return true
	}

	return false
}

// SetVtepAddressIpv4 gets a reference to the given string and assigns it to the VtepAddressIpv4 field.
func (o *NetworkDevice) SetVtepAddressIpv4(v string) {
	o.VtepAddressIpv4 = &v
}

// GetVtepAddressIpv6 returns the VtepAddressIpv6 field value
func (o *NetworkDevice) GetVtepAddressIpv6() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VtepAddressIpv6
}

// GetVtepAddressIpv6Ok returns a tuple with the VtepAddressIpv6 field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetVtepAddressIpv6Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VtepAddressIpv6, true
}

// SetVtepAddressIpv6 sets field value
func (o *NetworkDevice) SetVtepAddressIpv6(v string) {
	o.VtepAddressIpv6 = v
}

// GetMlagSystemMac returns the MlagSystemMac field value
func (o *NetworkDevice) GetMlagSystemMac() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MlagSystemMac
}

// GetMlagSystemMacOk returns a tuple with the MlagSystemMac field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetMlagSystemMacOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MlagSystemMac, true
}

// SetMlagSystemMac sets field value
func (o *NetworkDevice) SetMlagSystemMac(v string) {
	o.MlagSystemMac = v
}

// GetMlagDomainId returns the MlagDomainId field value
func (o *NetworkDevice) GetMlagDomainId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MlagDomainId
}

// GetMlagDomainIdOk returns a tuple with the MlagDomainId field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetMlagDomainIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MlagDomainId, true
}

// SetMlagDomainId sets field value
func (o *NetworkDevice) SetMlagDomainId(v float32) {
	o.MlagDomainId = v
}

// GetQuarantineVlan returns the QuarantineVlan field value
func (o *NetworkDevice) GetQuarantineVlan() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.QuarantineVlan
}

// GetQuarantineVlanOk returns a tuple with the QuarantineVlan field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetQuarantineVlanOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuarantineVlan, true
}

// SetQuarantineVlan sets field value
func (o *NetworkDevice) SetQuarantineVlan(v float32) {
	o.QuarantineVlan = v
}

// GetVariablesMaterializedForOSAssets returns the VariablesMaterializedForOSAssets field value
func (o *NetworkDevice) GetVariablesMaterializedForOSAssets() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.VariablesMaterializedForOSAssets
}

// GetVariablesMaterializedForOSAssetsOk returns a tuple with the VariablesMaterializedForOSAssets field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetVariablesMaterializedForOSAssetsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.VariablesMaterializedForOSAssets, true
}

// SetVariablesMaterializedForOSAssets sets field value
func (o *NetworkDevice) SetVariablesMaterializedForOSAssets(v map[string]interface{}) {
	o.VariablesMaterializedForOSAssets = v
}

// GetSecretsMaterializedForOSAssets returns the SecretsMaterializedForOSAssets field value
func (o *NetworkDevice) GetSecretsMaterializedForOSAssets() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.SecretsMaterializedForOSAssets
}

// GetSecretsMaterializedForOSAssetsOk returns a tuple with the SecretsMaterializedForOSAssets field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSecretsMaterializedForOSAssetsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.SecretsMaterializedForOSAssets, true
}

// SetSecretsMaterializedForOSAssets sets field value
func (o *NetworkDevice) SetSecretsMaterializedForOSAssets(v map[string]interface{}) {
	o.SecretsMaterializedForOSAssets = v
}

// GetBootstrapReadinessCheckResult returns the BootstrapReadinessCheckResult field value
func (o *NetworkDevice) GetBootstrapReadinessCheckResult() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.BootstrapReadinessCheckResult
}

// GetBootstrapReadinessCheckResultOk returns a tuple with the BootstrapReadinessCheckResult field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetBootstrapReadinessCheckResultOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.BootstrapReadinessCheckResult, true
}

// SetBootstrapReadinessCheckResult sets field value
func (o *NetworkDevice) SetBootstrapReadinessCheckResult(v map[string]interface{}) {
	o.BootstrapReadinessCheckResult = v
}

// GetIsGateway returns the IsGateway field value
func (o *NetworkDevice) GetIsGateway() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGateway
}

// GetIsGatewayOk returns a tuple with the IsGateway field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetIsGatewayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsGateway, true
}

// SetIsGateway sets field value
func (o *NetworkDevice) SetIsGateway(v bool) {
	o.IsGateway = v
}

// GetExtensionInfo returns the ExtensionInfo field value if set, zero value otherwise.
func (o *NetworkDevice) GetExtensionInfo() ExtensionExecutionInfo {
	if o == nil || IsNil(o.ExtensionInfo) {
		var ret ExtensionExecutionInfo
		return ret
	}
	return *o.ExtensionInfo
}

// GetExtensionInfoOk returns a tuple with the ExtensionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetExtensionInfoOk() (*ExtensionExecutionInfo, bool) {
	if o == nil || IsNil(o.ExtensionInfo) {
		return nil, false
	}
	return o.ExtensionInfo, true
}

// HasExtensionInfo returns a boolean if a field has been set.
func (o *NetworkDevice) HasExtensionInfo() bool {
	if o != nil && !IsNil(o.ExtensionInfo) {
		return true
	}

	return false
}

// SetExtensionInfo gets a reference to the given ExtensionExecutionInfo and assigns it to the ExtensionInfo field.
func (o *NetworkDevice) SetExtensionInfo(v ExtensionExecutionInfo) {
	o.ExtensionInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NetworkDevice) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NetworkDevice) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *NetworkDevice) SetLinks(v []Link) {
	o.Links = v
}

func (o NetworkDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	toSerialize["status"] = o.Status
	toSerialize["siteId"] = o.SiteId
	toSerialize["identifierString"] = o.IdentifierString
	toSerialize["description"] = o.Description
	toSerialize["chassisIdentifier"] = o.ChassisIdentifier
	toSerialize["country"] = o.Country
	toSerialize["city"] = o.City
	toSerialize["datacenterMeta"] = o.DatacenterMeta
	toSerialize["datacenterRoom"] = o.DatacenterRoom
	toSerialize["datacenterRack"] = o.DatacenterRack
	toSerialize["rackPositionUpperUnit"] = o.RackPositionUpperUnit
	toSerialize["rackPositionLowerUnit"] = o.RackPositionLowerUnit
	toSerialize["managementAddress"] = o.ManagementAddress
	toSerialize["managementAddressPrefixLength"] = o.ManagementAddressPrefixLength
	toSerialize["managementAddressGateway"] = o.ManagementAddressGateway
	toSerialize["managementPort"] = o.ManagementPort
	toSerialize["syslogEnabled"] = o.SyslogEnabled
	toSerialize["username"] = o.Username
	toSerialize["managementPassword"] = o.ManagementPassword
	toSerialize["managementMacAddress"] = o.ManagementMacAddress
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["driver"] = o.Driver
	toSerialize["position"] = o.Position
	toSerialize["orderIndex"] = o.OrderIndex
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["readyForInitialConfiguration"] = o.ReadyForInitialConfiguration
	toSerialize["bootstrapReadinessCheckInProgress"] = o.BootstrapReadinessCheckInProgress
	toSerialize["subnetOobId"] = o.SubnetOobId
	toSerialize["subnetOobIndex"] = o.SubnetOobIndex
	toSerialize["requiresOsInstall"] = o.RequiresOsInstall
	toSerialize["bootstrapSkipInitialConfiguration"] = o.BootstrapSkipInitialConfiguration
	toSerialize["bootstrapExpectedPartnerHostname"] = o.BootstrapExpectedPartnerHostname
	if !IsNil(o.LoopbackAddressIpv4) {
		toSerialize["loopbackAddressIpv4"] = o.LoopbackAddressIpv4
	}
	toSerialize["loopbackAddressIpv6"] = o.LoopbackAddressIpv6
	toSerialize["asn"] = o.Asn
	if !IsNil(o.VtepAddressIpv4) {
		toSerialize["vtepAddressIpv4"] = o.VtepAddressIpv4
	}
	toSerialize["vtepAddressIpv6"] = o.VtepAddressIpv6
	toSerialize["mlagSystemMac"] = o.MlagSystemMac
	toSerialize["mlagDomainId"] = o.MlagDomainId
	toSerialize["quarantineVlan"] = o.QuarantineVlan
	toSerialize["variablesMaterializedForOSAssets"] = o.VariablesMaterializedForOSAssets
	toSerialize["secretsMaterializedForOSAssets"] = o.SecretsMaterializedForOSAssets
	toSerialize["bootstrapReadinessCheckResult"] = o.BootstrapReadinessCheckResult
	toSerialize["isGateway"] = o.IsGateway
	if !IsNil(o.ExtensionInfo) {
		toSerialize["extensionInfo"] = o.ExtensionInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"revision",
		"status",
		"siteId",
		"identifierString",
		"description",
		"chassisIdentifier",
		"country",
		"city",
		"datacenterMeta",
		"datacenterRoom",
		"datacenterRack",
		"rackPositionUpperUnit",
		"rackPositionLowerUnit",
		"managementAddress",
		"managementAddressPrefixLength",
		"managementAddressGateway",
		"managementPort",
		"syslogEnabled",
		"username",
		"managementPassword",
		"managementMacAddress",
		"serialNumber",
		"driver",
		"position",
		"orderIndex",
		"tags",
		"readyForInitialConfiguration",
		"bootstrapReadinessCheckInProgress",
		"subnetOobId",
		"subnetOobIndex",
		"requiresOsInstall",
		"bootstrapSkipInitialConfiguration",
		"bootstrapExpectedPartnerHostname",
		"loopbackAddressIpv6",
		"asn",
		"vtepAddressIpv6",
		"mlagSystemMac",
		"mlagDomainId",
		"quarantineVlan",
		"variablesMaterializedForOSAssets",
		"secretsMaterializedForOSAssets",
		"bootstrapReadinessCheckResult",
		"isGateway",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkDevice := _NetworkDevice{}

	err = json.Unmarshal(data, &varNetworkDevice)

	if err != nil {
		return err
	}

	*o = NetworkDevice(varNetworkDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "status")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "identifierString")
		delete(additionalProperties, "description")
		delete(additionalProperties, "chassisIdentifier")
		delete(additionalProperties, "country")
		delete(additionalProperties, "city")
		delete(additionalProperties, "datacenterMeta")
		delete(additionalProperties, "datacenterRoom")
		delete(additionalProperties, "datacenterRack")
		delete(additionalProperties, "rackPositionUpperUnit")
		delete(additionalProperties, "rackPositionLowerUnit")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "managementAddressPrefixLength")
		delete(additionalProperties, "managementAddressGateway")
		delete(additionalProperties, "managementPort")
		delete(additionalProperties, "syslogEnabled")
		delete(additionalProperties, "username")
		delete(additionalProperties, "managementPassword")
		delete(additionalProperties, "managementMacAddress")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "driver")
		delete(additionalProperties, "position")
		delete(additionalProperties, "orderIndex")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "readyForInitialConfiguration")
		delete(additionalProperties, "bootstrapReadinessCheckInProgress")
		delete(additionalProperties, "subnetOobId")
		delete(additionalProperties, "subnetOobIndex")
		delete(additionalProperties, "requiresOsInstall")
		delete(additionalProperties, "bootstrapSkipInitialConfiguration")
		delete(additionalProperties, "bootstrapExpectedPartnerHostname")
		delete(additionalProperties, "loopbackAddressIpv4")
		delete(additionalProperties, "loopbackAddressIpv6")
		delete(additionalProperties, "asn")
		delete(additionalProperties, "vtepAddressIpv4")
		delete(additionalProperties, "vtepAddressIpv6")
		delete(additionalProperties, "mlagSystemMac")
		delete(additionalProperties, "mlagDomainId")
		delete(additionalProperties, "quarantineVlan")
		delete(additionalProperties, "variablesMaterializedForOSAssets")
		delete(additionalProperties, "secretsMaterializedForOSAssets")
		delete(additionalProperties, "bootstrapReadinessCheckResult")
		delete(additionalProperties, "isGateway")
		delete(additionalProperties, "extensionInfo")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkDevice struct {
	value *NetworkDevice
	isSet bool
}

func (v NullableNetworkDevice) Get() *NetworkDevice {
	return v.value
}

func (v *NullableNetworkDevice) Set(val *NetworkDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDevice(val *NetworkDevice) *NullableNetworkDevice {
	return &NullableNetworkDevice{value: val, isSet: true}
}

func (v NullableNetworkDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


