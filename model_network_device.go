/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDevice{}

// NetworkDevice struct for NetworkDevice
type NetworkDevice struct {
	// Unique identifier for the switch.
	SwitchId float32 `json:"switchId"`
	// Current status of the network device
	Status *string `json:"status,omitempty"`
	// Datacenter name where the network device is located
	DatacenterName *string `json:"datacenterName,omitempty"`
	// Site ID
	SiteId *float32 `json:"siteId,omitempty"`
	// Identifier string of the network device
	IdentifierString *string `json:"identifierString,omitempty"`
	// Description of the network device
	Description *string `json:"description,omitempty"`
	// Chassis identifier of the network device
	ChassisIdentifier *string `json:"chassisIdentifier,omitempty"`
	// Country of the network device
	Country *string `json:"country,omitempty"`
	// City of the network device
	City *string `json:"city,omitempty"`
	// Datacenter metadata
	DatacenterMeta *string `json:"datacenterMeta,omitempty"`
	// Room in the datacenter where the network device is located
	DatacenterRoom *string `json:"datacenterRoom,omitempty"`
	// Rack in the datacenter where the network device is located
	DatacenterRack *string `json:"datacenterRack,omitempty"`
	// Upper rack position in the datacenter
	RackPositionUpperUnit *float32 `json:"rackPositionUpperUnit,omitempty"`
	// Lower rack position in the datacenter
	RackPositionLowerUnit *float32 `json:"rackPositionLowerUnit,omitempty"`
	// Management address of the network device
	ManagementAddress *string `json:"managementAddress,omitempty"`
	// Management address mask
	ManagementAddressMask *string `json:"managementAddressMask,omitempty"`
	// Management gateway address
	ManagementAddressGateway *string `json:"managementAddressGateway,omitempty"`
	// Management port of the network device
	ManagementPort *float32 `json:"managementPort,omitempty"`
	// Is the network device syslog enabled
	SyslogEnabled *bool `json:"syslogEnabled,omitempty"`
	// Username used to connect to the network device
	Username *string `json:"username,omitempty"`
	// Password used to connect to the network device
	ManagementPassword *string `json:"managementPassword,omitempty"`
	// Management protocol used by the network device
	ManagementProtocol *string `json:"managementProtocol,omitempty"`
	// MAC address of the management interface
	ManagementMacAddress *string `json:"managementMacAddress,omitempty"`
	// Serial number of the network device
	SerialNumber *string `json:"serialNumber,omitempty"`
	// Driver software used to communicate with the network device
	Driver NetworkDeviceDriver `json:"driver"`
	// The physical or logical position of the network device in the network topology.
	Position SwitchPosition `json:"position"`
	// Provisioner type of the network device
	ProvisionerType *string `json:"provisionerType,omitempty"`
	// Allowed network types for the network device
	NetworkTypesAllowed []string `json:"networkTypesAllowed,omitempty"`
	// Order index of the network device
	OrderIndex *float32 `json:"orderIndex,omitempty"`
	// Tags associated with the network device
	Tags *string `json:"tags,omitempty"`
	// Whether the device is ready for initial configuration
	ReadyForInitialConfiguration *float32 `json:"readyForInitialConfiguration,omitempty"`
	// Whether bootstrap readiness check is in progress
	BootstrapReadinessCheckInProgress *float32 `json:"bootstrapReadinessCheckInProgress,omitempty"`
	// Subnet ID for OOB management
	SubnetOobId *float32 `json:"subnetOobId,omitempty"`
	// Subnet OOB index
	SubnetOobIndex *float32 `json:"subnetOobIndex,omitempty"`
	// Whether the device requires OS installation
	RequiresOsInstall *bool `json:"requiresOsInstall,omitempty"`
	// Whether to skip initial configuration during bootstrap
	BootstrapSkipInitialConfiguration *float32 `json:"bootstrapSkipInitialConfiguration,omitempty"`
	// Expected partner hostname during bootstrap
	BootstrapExpectedPartnerHostname *string `json:"bootstrapExpectedPartnerHostname,omitempty"`
	// Loopback IPv4 address
	LoopbackAddress *string `json:"loopbackAddress,omitempty"`
	// Loopback IPv6 address
	LoopbackAddressIpv6 *string `json:"loopbackAddressIpv6,omitempty"`
	// ASN of the network device
	Asn *float32 `json:"asn,omitempty"`
	// VTEP IPv4 address
	VtepAddress *string `json:"vtepAddress,omitempty"`
	// VTEP IPv6 address
	VtepAddressIpv6 *string `json:"vtepAddressIpv6,omitempty"`
	// MLAG system MAC address
	MlagSystemMac *string `json:"mlagSystemMac,omitempty"`
	// MLAG domain ID
	MlagDomainId *float32 `json:"mlagDomainId,omitempty"`
	// Quarantine subnet start address
	QuarantineSubnetStart *string `json:"quarantineSubnetStart,omitempty"`
	// Quarantine subnet end address
	QuarantineSubnetEnd *string `json:"quarantineSubnetEnd,omitempty"`
	// Quarantine subnet prefix size
	QuarantineSubnetPrefixSize *float32 `json:"quarantineSubnetPrefixSize,omitempty"`
	// Quarantine subnet gateway address
	QuarantineSubnetGateway *string `json:"quarantineSubnetGateway,omitempty"`
	// Quarantine VLAN ID
	QuarantineVlan *float32 `json:"quarantineVlan,omitempty"`
	// Default MTU
	DefaultMtu *float32 `json:"defaultMtu,omitempty"`
	// Variables materialized for OS assets
	VariablesMaterializedForOSAssets map[string]interface{} `json:"variablesMaterializedForOSAssets,omitempty"`
	// Secrets materialized for OS assets
	SecretsMaterializedForOSAssets map[string]interface{} `json:"secretsMaterializedForOSAssets,omitempty"`
	// Bootstrap readiness check result
	BootstrapReadinessCheckResult map[string]interface{} `json:"bootstrapReadinessCheckResult,omitempty"`
	// Whether the network device is a gateway
	IsGateway *float32 `json:"isGateway,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NetworkDevice NetworkDevice

// NewNetworkDevice instantiates a new NetworkDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDevice(switchId float32, driver NetworkDeviceDriver, position SwitchPosition) *NetworkDevice {
	this := NetworkDevice{}
	this.SwitchId = switchId
	this.Driver = driver
	this.Position = position
	return &this
}

// NewNetworkDeviceWithDefaults instantiates a new NetworkDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDeviceWithDefaults() *NetworkDevice {
	this := NetworkDevice{}
	return &this
}

// GetSwitchId returns the SwitchId field value
func (o *NetworkDevice) GetSwitchId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSwitchIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SwitchId, true
}

// SetSwitchId sets field value
func (o *NetworkDevice) SetSwitchId(v float32) {
	o.SwitchId = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NetworkDevice) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NetworkDevice) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NetworkDevice) SetStatus(v string) {
	o.Status = &v
}

// GetDatacenterName returns the DatacenterName field value if set, zero value otherwise.
func (o *NetworkDevice) GetDatacenterName() string {
	if o == nil || IsNil(o.DatacenterName) {
		var ret string
		return ret
	}
	return *o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDatacenterNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterName) {
		return nil, false
	}
	return o.DatacenterName, true
}

// HasDatacenterName returns a boolean if a field has been set.
func (o *NetworkDevice) HasDatacenterName() bool {
	if o != nil && !IsNil(o.DatacenterName) {
		return true
	}

	return false
}

// SetDatacenterName gets a reference to the given string and assigns it to the DatacenterName field.
func (o *NetworkDevice) SetDatacenterName(v string) {
	o.DatacenterName = &v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *NetworkDevice) GetSiteId() float32 {
	if o == nil || IsNil(o.SiteId) {
		var ret float32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSiteIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *NetworkDevice) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given float32 and assigns it to the SiteId field.
func (o *NetworkDevice) SetSiteId(v float32) {
	o.SiteId = &v
}

// GetIdentifierString returns the IdentifierString field value if set, zero value otherwise.
func (o *NetworkDevice) GetIdentifierString() string {
	if o == nil || IsNil(o.IdentifierString) {
		var ret string
		return ret
	}
	return *o.IdentifierString
}

// GetIdentifierStringOk returns a tuple with the IdentifierString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetIdentifierStringOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifierString) {
		return nil, false
	}
	return o.IdentifierString, true
}

// HasIdentifierString returns a boolean if a field has been set.
func (o *NetworkDevice) HasIdentifierString() bool {
	if o != nil && !IsNil(o.IdentifierString) {
		return true
	}

	return false
}

// SetIdentifierString gets a reference to the given string and assigns it to the IdentifierString field.
func (o *NetworkDevice) SetIdentifierString(v string) {
	o.IdentifierString = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NetworkDevice) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NetworkDevice) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NetworkDevice) SetDescription(v string) {
	o.Description = &v
}

// GetChassisIdentifier returns the ChassisIdentifier field value if set, zero value otherwise.
func (o *NetworkDevice) GetChassisIdentifier() string {
	if o == nil || IsNil(o.ChassisIdentifier) {
		var ret string
		return ret
	}
	return *o.ChassisIdentifier
}

// GetChassisIdentifierOk returns a tuple with the ChassisIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetChassisIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.ChassisIdentifier) {
		return nil, false
	}
	return o.ChassisIdentifier, true
}

// HasChassisIdentifier returns a boolean if a field has been set.
func (o *NetworkDevice) HasChassisIdentifier() bool {
	if o != nil && !IsNil(o.ChassisIdentifier) {
		return true
	}

	return false
}

// SetChassisIdentifier gets a reference to the given string and assigns it to the ChassisIdentifier field.
func (o *NetworkDevice) SetChassisIdentifier(v string) {
	o.ChassisIdentifier = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *NetworkDevice) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *NetworkDevice) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *NetworkDevice) SetCountry(v string) {
	o.Country = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *NetworkDevice) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *NetworkDevice) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *NetworkDevice) SetCity(v string) {
	o.City = &v
}

// GetDatacenterMeta returns the DatacenterMeta field value if set, zero value otherwise.
func (o *NetworkDevice) GetDatacenterMeta() string {
	if o == nil || IsNil(o.DatacenterMeta) {
		var ret string
		return ret
	}
	return *o.DatacenterMeta
}

// GetDatacenterMetaOk returns a tuple with the DatacenterMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDatacenterMetaOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterMeta) {
		return nil, false
	}
	return o.DatacenterMeta, true
}

// HasDatacenterMeta returns a boolean if a field has been set.
func (o *NetworkDevice) HasDatacenterMeta() bool {
	if o != nil && !IsNil(o.DatacenterMeta) {
		return true
	}

	return false
}

// SetDatacenterMeta gets a reference to the given string and assigns it to the DatacenterMeta field.
func (o *NetworkDevice) SetDatacenterMeta(v string) {
	o.DatacenterMeta = &v
}

// GetDatacenterRoom returns the DatacenterRoom field value if set, zero value otherwise.
func (o *NetworkDevice) GetDatacenterRoom() string {
	if o == nil || IsNil(o.DatacenterRoom) {
		var ret string
		return ret
	}
	return *o.DatacenterRoom
}

// GetDatacenterRoomOk returns a tuple with the DatacenterRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDatacenterRoomOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterRoom) {
		return nil, false
	}
	return o.DatacenterRoom, true
}

// HasDatacenterRoom returns a boolean if a field has been set.
func (o *NetworkDevice) HasDatacenterRoom() bool {
	if o != nil && !IsNil(o.DatacenterRoom) {
		return true
	}

	return false
}

// SetDatacenterRoom gets a reference to the given string and assigns it to the DatacenterRoom field.
func (o *NetworkDevice) SetDatacenterRoom(v string) {
	o.DatacenterRoom = &v
}

// GetDatacenterRack returns the DatacenterRack field value if set, zero value otherwise.
func (o *NetworkDevice) GetDatacenterRack() string {
	if o == nil || IsNil(o.DatacenterRack) {
		var ret string
		return ret
	}
	return *o.DatacenterRack
}

// GetDatacenterRackOk returns a tuple with the DatacenterRack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDatacenterRackOk() (*string, bool) {
	if o == nil || IsNil(o.DatacenterRack) {
		return nil, false
	}
	return o.DatacenterRack, true
}

// HasDatacenterRack returns a boolean if a field has been set.
func (o *NetworkDevice) HasDatacenterRack() bool {
	if o != nil && !IsNil(o.DatacenterRack) {
		return true
	}

	return false
}

// SetDatacenterRack gets a reference to the given string and assigns it to the DatacenterRack field.
func (o *NetworkDevice) SetDatacenterRack(v string) {
	o.DatacenterRack = &v
}

// GetRackPositionUpperUnit returns the RackPositionUpperUnit field value if set, zero value otherwise.
func (o *NetworkDevice) GetRackPositionUpperUnit() float32 {
	if o == nil || IsNil(o.RackPositionUpperUnit) {
		var ret float32
		return ret
	}
	return *o.RackPositionUpperUnit
}

// GetRackPositionUpperUnitOk returns a tuple with the RackPositionUpperUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetRackPositionUpperUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.RackPositionUpperUnit) {
		return nil, false
	}
	return o.RackPositionUpperUnit, true
}

// HasRackPositionUpperUnit returns a boolean if a field has been set.
func (o *NetworkDevice) HasRackPositionUpperUnit() bool {
	if o != nil && !IsNil(o.RackPositionUpperUnit) {
		return true
	}

	return false
}

// SetRackPositionUpperUnit gets a reference to the given float32 and assigns it to the RackPositionUpperUnit field.
func (o *NetworkDevice) SetRackPositionUpperUnit(v float32) {
	o.RackPositionUpperUnit = &v
}

// GetRackPositionLowerUnit returns the RackPositionLowerUnit field value if set, zero value otherwise.
func (o *NetworkDevice) GetRackPositionLowerUnit() float32 {
	if o == nil || IsNil(o.RackPositionLowerUnit) {
		var ret float32
		return ret
	}
	return *o.RackPositionLowerUnit
}

// GetRackPositionLowerUnitOk returns a tuple with the RackPositionLowerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetRackPositionLowerUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.RackPositionLowerUnit) {
		return nil, false
	}
	return o.RackPositionLowerUnit, true
}

// HasRackPositionLowerUnit returns a boolean if a field has been set.
func (o *NetworkDevice) HasRackPositionLowerUnit() bool {
	if o != nil && !IsNil(o.RackPositionLowerUnit) {
		return true
	}

	return false
}

// SetRackPositionLowerUnit gets a reference to the given float32 and assigns it to the RackPositionLowerUnit field.
func (o *NetworkDevice) SetRackPositionLowerUnit(v float32) {
	o.RackPositionLowerUnit = &v
}

// GetManagementAddress returns the ManagementAddress field value if set, zero value otherwise.
func (o *NetworkDevice) GetManagementAddress() string {
	if o == nil || IsNil(o.ManagementAddress) {
		var ret string
		return ret
	}
	return *o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddress) {
		return nil, false
	}
	return o.ManagementAddress, true
}

// HasManagementAddress returns a boolean if a field has been set.
func (o *NetworkDevice) HasManagementAddress() bool {
	if o != nil && !IsNil(o.ManagementAddress) {
		return true
	}

	return false
}

// SetManagementAddress gets a reference to the given string and assigns it to the ManagementAddress field.
func (o *NetworkDevice) SetManagementAddress(v string) {
	o.ManagementAddress = &v
}

// GetManagementAddressMask returns the ManagementAddressMask field value if set, zero value otherwise.
func (o *NetworkDevice) GetManagementAddressMask() string {
	if o == nil || IsNil(o.ManagementAddressMask) {
		var ret string
		return ret
	}
	return *o.ManagementAddressMask
}

// GetManagementAddressMaskOk returns a tuple with the ManagementAddressMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementAddressMaskOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddressMask) {
		return nil, false
	}
	return o.ManagementAddressMask, true
}

// HasManagementAddressMask returns a boolean if a field has been set.
func (o *NetworkDevice) HasManagementAddressMask() bool {
	if o != nil && !IsNil(o.ManagementAddressMask) {
		return true
	}

	return false
}

// SetManagementAddressMask gets a reference to the given string and assigns it to the ManagementAddressMask field.
func (o *NetworkDevice) SetManagementAddressMask(v string) {
	o.ManagementAddressMask = &v
}

// GetManagementAddressGateway returns the ManagementAddressGateway field value if set, zero value otherwise.
func (o *NetworkDevice) GetManagementAddressGateway() string {
	if o == nil || IsNil(o.ManagementAddressGateway) {
		var ret string
		return ret
	}
	return *o.ManagementAddressGateway
}

// GetManagementAddressGatewayOk returns a tuple with the ManagementAddressGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementAddressGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddressGateway) {
		return nil, false
	}
	return o.ManagementAddressGateway, true
}

// HasManagementAddressGateway returns a boolean if a field has been set.
func (o *NetworkDevice) HasManagementAddressGateway() bool {
	if o != nil && !IsNil(o.ManagementAddressGateway) {
		return true
	}

	return false
}

// SetManagementAddressGateway gets a reference to the given string and assigns it to the ManagementAddressGateway field.
func (o *NetworkDevice) SetManagementAddressGateway(v string) {
	o.ManagementAddressGateway = &v
}

// GetManagementPort returns the ManagementPort field value if set, zero value otherwise.
func (o *NetworkDevice) GetManagementPort() float32 {
	if o == nil || IsNil(o.ManagementPort) {
		var ret float32
		return ret
	}
	return *o.ManagementPort
}

// GetManagementPortOk returns a tuple with the ManagementPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementPortOk() (*float32, bool) {
	if o == nil || IsNil(o.ManagementPort) {
		return nil, false
	}
	return o.ManagementPort, true
}

// HasManagementPort returns a boolean if a field has been set.
func (o *NetworkDevice) HasManagementPort() bool {
	if o != nil && !IsNil(o.ManagementPort) {
		return true
	}

	return false
}

// SetManagementPort gets a reference to the given float32 and assigns it to the ManagementPort field.
func (o *NetworkDevice) SetManagementPort(v float32) {
	o.ManagementPort = &v
}

// GetSyslogEnabled returns the SyslogEnabled field value if set, zero value otherwise.
func (o *NetworkDevice) GetSyslogEnabled() bool {
	if o == nil || IsNil(o.SyslogEnabled) {
		var ret bool
		return ret
	}
	return *o.SyslogEnabled
}

// GetSyslogEnabledOk returns a tuple with the SyslogEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSyslogEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SyslogEnabled) {
		return nil, false
	}
	return o.SyslogEnabled, true
}

// HasSyslogEnabled returns a boolean if a field has been set.
func (o *NetworkDevice) HasSyslogEnabled() bool {
	if o != nil && !IsNil(o.SyslogEnabled) {
		return true
	}

	return false
}

// SetSyslogEnabled gets a reference to the given bool and assigns it to the SyslogEnabled field.
func (o *NetworkDevice) SetSyslogEnabled(v bool) {
	o.SyslogEnabled = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *NetworkDevice) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *NetworkDevice) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *NetworkDevice) SetUsername(v string) {
	o.Username = &v
}

// GetManagementPassword returns the ManagementPassword field value if set, zero value otherwise.
func (o *NetworkDevice) GetManagementPassword() string {
	if o == nil || IsNil(o.ManagementPassword) {
		var ret string
		return ret
	}
	return *o.ManagementPassword
}

// GetManagementPasswordOk returns a tuple with the ManagementPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementPassword) {
		return nil, false
	}
	return o.ManagementPassword, true
}

// HasManagementPassword returns a boolean if a field has been set.
func (o *NetworkDevice) HasManagementPassword() bool {
	if o != nil && !IsNil(o.ManagementPassword) {
		return true
	}

	return false
}

// SetManagementPassword gets a reference to the given string and assigns it to the ManagementPassword field.
func (o *NetworkDevice) SetManagementPassword(v string) {
	o.ManagementPassword = &v
}

// GetManagementProtocol returns the ManagementProtocol field value if set, zero value otherwise.
func (o *NetworkDevice) GetManagementProtocol() string {
	if o == nil || IsNil(o.ManagementProtocol) {
		var ret string
		return ret
	}
	return *o.ManagementProtocol
}

// GetManagementProtocolOk returns a tuple with the ManagementProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementProtocol) {
		return nil, false
	}
	return o.ManagementProtocol, true
}

// HasManagementProtocol returns a boolean if a field has been set.
func (o *NetworkDevice) HasManagementProtocol() bool {
	if o != nil && !IsNil(o.ManagementProtocol) {
		return true
	}

	return false
}

// SetManagementProtocol gets a reference to the given string and assigns it to the ManagementProtocol field.
func (o *NetworkDevice) SetManagementProtocol(v string) {
	o.ManagementProtocol = &v
}

// GetManagementMacAddress returns the ManagementMacAddress field value if set, zero value otherwise.
func (o *NetworkDevice) GetManagementMacAddress() string {
	if o == nil || IsNil(o.ManagementMacAddress) {
		var ret string
		return ret
	}
	return *o.ManagementMacAddress
}

// GetManagementMacAddressOk returns a tuple with the ManagementMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetManagementMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementMacAddress) {
		return nil, false
	}
	return o.ManagementMacAddress, true
}

// HasManagementMacAddress returns a boolean if a field has been set.
func (o *NetworkDevice) HasManagementMacAddress() bool {
	if o != nil && !IsNil(o.ManagementMacAddress) {
		return true
	}

	return false
}

// SetManagementMacAddress gets a reference to the given string and assigns it to the ManagementMacAddress field.
func (o *NetworkDevice) SetManagementMacAddress(v string) {
	o.ManagementMacAddress = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *NetworkDevice) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *NetworkDevice) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *NetworkDevice) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetDriver returns the Driver field value
func (o *NetworkDevice) GetDriver() NetworkDeviceDriver {
	if o == nil {
		var ret NetworkDeviceDriver
		return ret
	}

	return o.Driver
}

// GetDriverOk returns a tuple with the Driver field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDriverOk() (*NetworkDeviceDriver, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Driver, true
}

// SetDriver sets field value
func (o *NetworkDevice) SetDriver(v NetworkDeviceDriver) {
	o.Driver = v
}

// GetPosition returns the Position field value
func (o *NetworkDevice) GetPosition() SwitchPosition {
	if o == nil {
		var ret SwitchPosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetPositionOk() (*SwitchPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *NetworkDevice) SetPosition(v SwitchPosition) {
	o.Position = v
}

// GetProvisionerType returns the ProvisionerType field value if set, zero value otherwise.
func (o *NetworkDevice) GetProvisionerType() string {
	if o == nil || IsNil(o.ProvisionerType) {
		var ret string
		return ret
	}
	return *o.ProvisionerType
}

// GetProvisionerTypeOk returns a tuple with the ProvisionerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetProvisionerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProvisionerType) {
		return nil, false
	}
	return o.ProvisionerType, true
}

// HasProvisionerType returns a boolean if a field has been set.
func (o *NetworkDevice) HasProvisionerType() bool {
	if o != nil && !IsNil(o.ProvisionerType) {
		return true
	}

	return false
}

// SetProvisionerType gets a reference to the given string and assigns it to the ProvisionerType field.
func (o *NetworkDevice) SetProvisionerType(v string) {
	o.ProvisionerType = &v
}

// GetNetworkTypesAllowed returns the NetworkTypesAllowed field value if set, zero value otherwise.
func (o *NetworkDevice) GetNetworkTypesAllowed() []string {
	if o == nil || IsNil(o.NetworkTypesAllowed) {
		var ret []string
		return ret
	}
	return o.NetworkTypesAllowed
}

// GetNetworkTypesAllowedOk returns a tuple with the NetworkTypesAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetNetworkTypesAllowedOk() ([]string, bool) {
	if o == nil || IsNil(o.NetworkTypesAllowed) {
		return nil, false
	}
	return o.NetworkTypesAllowed, true
}

// HasNetworkTypesAllowed returns a boolean if a field has been set.
func (o *NetworkDevice) HasNetworkTypesAllowed() bool {
	if o != nil && !IsNil(o.NetworkTypesAllowed) {
		return true
	}

	return false
}

// SetNetworkTypesAllowed gets a reference to the given []string and assigns it to the NetworkTypesAllowed field.
func (o *NetworkDevice) SetNetworkTypesAllowed(v []string) {
	o.NetworkTypesAllowed = v
}

// GetOrderIndex returns the OrderIndex field value if set, zero value otherwise.
func (o *NetworkDevice) GetOrderIndex() float32 {
	if o == nil || IsNil(o.OrderIndex) {
		var ret float32
		return ret
	}
	return *o.OrderIndex
}

// GetOrderIndexOk returns a tuple with the OrderIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetOrderIndexOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderIndex) {
		return nil, false
	}
	return o.OrderIndex, true
}

// HasOrderIndex returns a boolean if a field has been set.
func (o *NetworkDevice) HasOrderIndex() bool {
	if o != nil && !IsNil(o.OrderIndex) {
		return true
	}

	return false
}

// SetOrderIndex gets a reference to the given float32 and assigns it to the OrderIndex field.
func (o *NetworkDevice) SetOrderIndex(v float32) {
	o.OrderIndex = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *NetworkDevice) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *NetworkDevice) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *NetworkDevice) SetTags(v string) {
	o.Tags = &v
}

// GetReadyForInitialConfiguration returns the ReadyForInitialConfiguration field value if set, zero value otherwise.
func (o *NetworkDevice) GetReadyForInitialConfiguration() float32 {
	if o == nil || IsNil(o.ReadyForInitialConfiguration) {
		var ret float32
		return ret
	}
	return *o.ReadyForInitialConfiguration
}

// GetReadyForInitialConfigurationOk returns a tuple with the ReadyForInitialConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetReadyForInitialConfigurationOk() (*float32, bool) {
	if o == nil || IsNil(o.ReadyForInitialConfiguration) {
		return nil, false
	}
	return o.ReadyForInitialConfiguration, true
}

// HasReadyForInitialConfiguration returns a boolean if a field has been set.
func (o *NetworkDevice) HasReadyForInitialConfiguration() bool {
	if o != nil && !IsNil(o.ReadyForInitialConfiguration) {
		return true
	}

	return false
}

// SetReadyForInitialConfiguration gets a reference to the given float32 and assigns it to the ReadyForInitialConfiguration field.
func (o *NetworkDevice) SetReadyForInitialConfiguration(v float32) {
	o.ReadyForInitialConfiguration = &v
}

// GetBootstrapReadinessCheckInProgress returns the BootstrapReadinessCheckInProgress field value if set, zero value otherwise.
func (o *NetworkDevice) GetBootstrapReadinessCheckInProgress() float32 {
	if o == nil || IsNil(o.BootstrapReadinessCheckInProgress) {
		var ret float32
		return ret
	}
	return *o.BootstrapReadinessCheckInProgress
}

// GetBootstrapReadinessCheckInProgressOk returns a tuple with the BootstrapReadinessCheckInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetBootstrapReadinessCheckInProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.BootstrapReadinessCheckInProgress) {
		return nil, false
	}
	return o.BootstrapReadinessCheckInProgress, true
}

// HasBootstrapReadinessCheckInProgress returns a boolean if a field has been set.
func (o *NetworkDevice) HasBootstrapReadinessCheckInProgress() bool {
	if o != nil && !IsNil(o.BootstrapReadinessCheckInProgress) {
		return true
	}

	return false
}

// SetBootstrapReadinessCheckInProgress gets a reference to the given float32 and assigns it to the BootstrapReadinessCheckInProgress field.
func (o *NetworkDevice) SetBootstrapReadinessCheckInProgress(v float32) {
	o.BootstrapReadinessCheckInProgress = &v
}

// GetSubnetOobId returns the SubnetOobId field value if set, zero value otherwise.
func (o *NetworkDevice) GetSubnetOobId() float32 {
	if o == nil || IsNil(o.SubnetOobId) {
		var ret float32
		return ret
	}
	return *o.SubnetOobId
}

// GetSubnetOobIdOk returns a tuple with the SubnetOobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSubnetOobIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SubnetOobId) {
		return nil, false
	}
	return o.SubnetOobId, true
}

// HasSubnetOobId returns a boolean if a field has been set.
func (o *NetworkDevice) HasSubnetOobId() bool {
	if o != nil && !IsNil(o.SubnetOobId) {
		return true
	}

	return false
}

// SetSubnetOobId gets a reference to the given float32 and assigns it to the SubnetOobId field.
func (o *NetworkDevice) SetSubnetOobId(v float32) {
	o.SubnetOobId = &v
}

// GetSubnetOobIndex returns the SubnetOobIndex field value if set, zero value otherwise.
func (o *NetworkDevice) GetSubnetOobIndex() float32 {
	if o == nil || IsNil(o.SubnetOobIndex) {
		var ret float32
		return ret
	}
	return *o.SubnetOobIndex
}

// GetSubnetOobIndexOk returns a tuple with the SubnetOobIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSubnetOobIndexOk() (*float32, bool) {
	if o == nil || IsNil(o.SubnetOobIndex) {
		return nil, false
	}
	return o.SubnetOobIndex, true
}

// HasSubnetOobIndex returns a boolean if a field has been set.
func (o *NetworkDevice) HasSubnetOobIndex() bool {
	if o != nil && !IsNil(o.SubnetOobIndex) {
		return true
	}

	return false
}

// SetSubnetOobIndex gets a reference to the given float32 and assigns it to the SubnetOobIndex field.
func (o *NetworkDevice) SetSubnetOobIndex(v float32) {
	o.SubnetOobIndex = &v
}

// GetRequiresOsInstall returns the RequiresOsInstall field value if set, zero value otherwise.
func (o *NetworkDevice) GetRequiresOsInstall() bool {
	if o == nil || IsNil(o.RequiresOsInstall) {
		var ret bool
		return ret
	}
	return *o.RequiresOsInstall
}

// GetRequiresOsInstallOk returns a tuple with the RequiresOsInstall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetRequiresOsInstallOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiresOsInstall) {
		return nil, false
	}
	return o.RequiresOsInstall, true
}

// HasRequiresOsInstall returns a boolean if a field has been set.
func (o *NetworkDevice) HasRequiresOsInstall() bool {
	if o != nil && !IsNil(o.RequiresOsInstall) {
		return true
	}

	return false
}

// SetRequiresOsInstall gets a reference to the given bool and assigns it to the RequiresOsInstall field.
func (o *NetworkDevice) SetRequiresOsInstall(v bool) {
	o.RequiresOsInstall = &v
}

// GetBootstrapSkipInitialConfiguration returns the BootstrapSkipInitialConfiguration field value if set, zero value otherwise.
func (o *NetworkDevice) GetBootstrapSkipInitialConfiguration() float32 {
	if o == nil || IsNil(o.BootstrapSkipInitialConfiguration) {
		var ret float32
		return ret
	}
	return *o.BootstrapSkipInitialConfiguration
}

// GetBootstrapSkipInitialConfigurationOk returns a tuple with the BootstrapSkipInitialConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetBootstrapSkipInitialConfigurationOk() (*float32, bool) {
	if o == nil || IsNil(o.BootstrapSkipInitialConfiguration) {
		return nil, false
	}
	return o.BootstrapSkipInitialConfiguration, true
}

// HasBootstrapSkipInitialConfiguration returns a boolean if a field has been set.
func (o *NetworkDevice) HasBootstrapSkipInitialConfiguration() bool {
	if o != nil && !IsNil(o.BootstrapSkipInitialConfiguration) {
		return true
	}

	return false
}

// SetBootstrapSkipInitialConfiguration gets a reference to the given float32 and assigns it to the BootstrapSkipInitialConfiguration field.
func (o *NetworkDevice) SetBootstrapSkipInitialConfiguration(v float32) {
	o.BootstrapSkipInitialConfiguration = &v
}

// GetBootstrapExpectedPartnerHostname returns the BootstrapExpectedPartnerHostname field value if set, zero value otherwise.
func (o *NetworkDevice) GetBootstrapExpectedPartnerHostname() string {
	if o == nil || IsNil(o.BootstrapExpectedPartnerHostname) {
		var ret string
		return ret
	}
	return *o.BootstrapExpectedPartnerHostname
}

// GetBootstrapExpectedPartnerHostnameOk returns a tuple with the BootstrapExpectedPartnerHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetBootstrapExpectedPartnerHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.BootstrapExpectedPartnerHostname) {
		return nil, false
	}
	return o.BootstrapExpectedPartnerHostname, true
}

// HasBootstrapExpectedPartnerHostname returns a boolean if a field has been set.
func (o *NetworkDevice) HasBootstrapExpectedPartnerHostname() bool {
	if o != nil && !IsNil(o.BootstrapExpectedPartnerHostname) {
		return true
	}

	return false
}

// SetBootstrapExpectedPartnerHostname gets a reference to the given string and assigns it to the BootstrapExpectedPartnerHostname field.
func (o *NetworkDevice) SetBootstrapExpectedPartnerHostname(v string) {
	o.BootstrapExpectedPartnerHostname = &v
}

// GetLoopbackAddress returns the LoopbackAddress field value if set, zero value otherwise.
func (o *NetworkDevice) GetLoopbackAddress() string {
	if o == nil || IsNil(o.LoopbackAddress) {
		var ret string
		return ret
	}
	return *o.LoopbackAddress
}

// GetLoopbackAddressOk returns a tuple with the LoopbackAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetLoopbackAddressOk() (*string, bool) {
	if o == nil || IsNil(o.LoopbackAddress) {
		return nil, false
	}
	return o.LoopbackAddress, true
}

// HasLoopbackAddress returns a boolean if a field has been set.
func (o *NetworkDevice) HasLoopbackAddress() bool {
	if o != nil && !IsNil(o.LoopbackAddress) {
		return true
	}

	return false
}

// SetLoopbackAddress gets a reference to the given string and assigns it to the LoopbackAddress field.
func (o *NetworkDevice) SetLoopbackAddress(v string) {
	o.LoopbackAddress = &v
}

// GetLoopbackAddressIpv6 returns the LoopbackAddressIpv6 field value if set, zero value otherwise.
func (o *NetworkDevice) GetLoopbackAddressIpv6() string {
	if o == nil || IsNil(o.LoopbackAddressIpv6) {
		var ret string
		return ret
	}
	return *o.LoopbackAddressIpv6
}

// GetLoopbackAddressIpv6Ok returns a tuple with the LoopbackAddressIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetLoopbackAddressIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.LoopbackAddressIpv6) {
		return nil, false
	}
	return o.LoopbackAddressIpv6, true
}

// HasLoopbackAddressIpv6 returns a boolean if a field has been set.
func (o *NetworkDevice) HasLoopbackAddressIpv6() bool {
	if o != nil && !IsNil(o.LoopbackAddressIpv6) {
		return true
	}

	return false
}

// SetLoopbackAddressIpv6 gets a reference to the given string and assigns it to the LoopbackAddressIpv6 field.
func (o *NetworkDevice) SetLoopbackAddressIpv6(v string) {
	o.LoopbackAddressIpv6 = &v
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *NetworkDevice) GetAsn() float32 {
	if o == nil || IsNil(o.Asn) {
		var ret float32
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetAsnOk() (*float32, bool) {
	if o == nil || IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *NetworkDevice) HasAsn() bool {
	if o != nil && !IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given float32 and assigns it to the Asn field.
func (o *NetworkDevice) SetAsn(v float32) {
	o.Asn = &v
}

// GetVtepAddress returns the VtepAddress field value if set, zero value otherwise.
func (o *NetworkDevice) GetVtepAddress() string {
	if o == nil || IsNil(o.VtepAddress) {
		var ret string
		return ret
	}
	return *o.VtepAddress
}

// GetVtepAddressOk returns a tuple with the VtepAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetVtepAddressOk() (*string, bool) {
	if o == nil || IsNil(o.VtepAddress) {
		return nil, false
	}
	return o.VtepAddress, true
}

// HasVtepAddress returns a boolean if a field has been set.
func (o *NetworkDevice) HasVtepAddress() bool {
	if o != nil && !IsNil(o.VtepAddress) {
		return true
	}

	return false
}

// SetVtepAddress gets a reference to the given string and assigns it to the VtepAddress field.
func (o *NetworkDevice) SetVtepAddress(v string) {
	o.VtepAddress = &v
}

// GetVtepAddressIpv6 returns the VtepAddressIpv6 field value if set, zero value otherwise.
func (o *NetworkDevice) GetVtepAddressIpv6() string {
	if o == nil || IsNil(o.VtepAddressIpv6) {
		var ret string
		return ret
	}
	return *o.VtepAddressIpv6
}

// GetVtepAddressIpv6Ok returns a tuple with the VtepAddressIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetVtepAddressIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.VtepAddressIpv6) {
		return nil, false
	}
	return o.VtepAddressIpv6, true
}

// HasVtepAddressIpv6 returns a boolean if a field has been set.
func (o *NetworkDevice) HasVtepAddressIpv6() bool {
	if o != nil && !IsNil(o.VtepAddressIpv6) {
		return true
	}

	return false
}

// SetVtepAddressIpv6 gets a reference to the given string and assigns it to the VtepAddressIpv6 field.
func (o *NetworkDevice) SetVtepAddressIpv6(v string) {
	o.VtepAddressIpv6 = &v
}

// GetMlagSystemMac returns the MlagSystemMac field value if set, zero value otherwise.
func (o *NetworkDevice) GetMlagSystemMac() string {
	if o == nil || IsNil(o.MlagSystemMac) {
		var ret string
		return ret
	}
	return *o.MlagSystemMac
}

// GetMlagSystemMacOk returns a tuple with the MlagSystemMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetMlagSystemMacOk() (*string, bool) {
	if o == nil || IsNil(o.MlagSystemMac) {
		return nil, false
	}
	return o.MlagSystemMac, true
}

// HasMlagSystemMac returns a boolean if a field has been set.
func (o *NetworkDevice) HasMlagSystemMac() bool {
	if o != nil && !IsNil(o.MlagSystemMac) {
		return true
	}

	return false
}

// SetMlagSystemMac gets a reference to the given string and assigns it to the MlagSystemMac field.
func (o *NetworkDevice) SetMlagSystemMac(v string) {
	o.MlagSystemMac = &v
}

// GetMlagDomainId returns the MlagDomainId field value if set, zero value otherwise.
func (o *NetworkDevice) GetMlagDomainId() float32 {
	if o == nil || IsNil(o.MlagDomainId) {
		var ret float32
		return ret
	}
	return *o.MlagDomainId
}

// GetMlagDomainIdOk returns a tuple with the MlagDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetMlagDomainIdOk() (*float32, bool) {
	if o == nil || IsNil(o.MlagDomainId) {
		return nil, false
	}
	return o.MlagDomainId, true
}

// HasMlagDomainId returns a boolean if a field has been set.
func (o *NetworkDevice) HasMlagDomainId() bool {
	if o != nil && !IsNil(o.MlagDomainId) {
		return true
	}

	return false
}

// SetMlagDomainId gets a reference to the given float32 and assigns it to the MlagDomainId field.
func (o *NetworkDevice) SetMlagDomainId(v float32) {
	o.MlagDomainId = &v
}

// GetQuarantineSubnetStart returns the QuarantineSubnetStart field value if set, zero value otherwise.
func (o *NetworkDevice) GetQuarantineSubnetStart() string {
	if o == nil || IsNil(o.QuarantineSubnetStart) {
		var ret string
		return ret
	}
	return *o.QuarantineSubnetStart
}

// GetQuarantineSubnetStartOk returns a tuple with the QuarantineSubnetStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetQuarantineSubnetStartOk() (*string, bool) {
	if o == nil || IsNil(o.QuarantineSubnetStart) {
		return nil, false
	}
	return o.QuarantineSubnetStart, true
}

// HasQuarantineSubnetStart returns a boolean if a field has been set.
func (o *NetworkDevice) HasQuarantineSubnetStart() bool {
	if o != nil && !IsNil(o.QuarantineSubnetStart) {
		return true
	}

	return false
}

// SetQuarantineSubnetStart gets a reference to the given string and assigns it to the QuarantineSubnetStart field.
func (o *NetworkDevice) SetQuarantineSubnetStart(v string) {
	o.QuarantineSubnetStart = &v
}

// GetQuarantineSubnetEnd returns the QuarantineSubnetEnd field value if set, zero value otherwise.
func (o *NetworkDevice) GetQuarantineSubnetEnd() string {
	if o == nil || IsNil(o.QuarantineSubnetEnd) {
		var ret string
		return ret
	}
	return *o.QuarantineSubnetEnd
}

// GetQuarantineSubnetEndOk returns a tuple with the QuarantineSubnetEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetQuarantineSubnetEndOk() (*string, bool) {
	if o == nil || IsNil(o.QuarantineSubnetEnd) {
		return nil, false
	}
	return o.QuarantineSubnetEnd, true
}

// HasQuarantineSubnetEnd returns a boolean if a field has been set.
func (o *NetworkDevice) HasQuarantineSubnetEnd() bool {
	if o != nil && !IsNil(o.QuarantineSubnetEnd) {
		return true
	}

	return false
}

// SetQuarantineSubnetEnd gets a reference to the given string and assigns it to the QuarantineSubnetEnd field.
func (o *NetworkDevice) SetQuarantineSubnetEnd(v string) {
	o.QuarantineSubnetEnd = &v
}

// GetQuarantineSubnetPrefixSize returns the QuarantineSubnetPrefixSize field value if set, zero value otherwise.
func (o *NetworkDevice) GetQuarantineSubnetPrefixSize() float32 {
	if o == nil || IsNil(o.QuarantineSubnetPrefixSize) {
		var ret float32
		return ret
	}
	return *o.QuarantineSubnetPrefixSize
}

// GetQuarantineSubnetPrefixSizeOk returns a tuple with the QuarantineSubnetPrefixSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetQuarantineSubnetPrefixSizeOk() (*float32, bool) {
	if o == nil || IsNil(o.QuarantineSubnetPrefixSize) {
		return nil, false
	}
	return o.QuarantineSubnetPrefixSize, true
}

// HasQuarantineSubnetPrefixSize returns a boolean if a field has been set.
func (o *NetworkDevice) HasQuarantineSubnetPrefixSize() bool {
	if o != nil && !IsNil(o.QuarantineSubnetPrefixSize) {
		return true
	}

	return false
}

// SetQuarantineSubnetPrefixSize gets a reference to the given float32 and assigns it to the QuarantineSubnetPrefixSize field.
func (o *NetworkDevice) SetQuarantineSubnetPrefixSize(v float32) {
	o.QuarantineSubnetPrefixSize = &v
}

// GetQuarantineSubnetGateway returns the QuarantineSubnetGateway field value if set, zero value otherwise.
func (o *NetworkDevice) GetQuarantineSubnetGateway() string {
	if o == nil || IsNil(o.QuarantineSubnetGateway) {
		var ret string
		return ret
	}
	return *o.QuarantineSubnetGateway
}

// GetQuarantineSubnetGatewayOk returns a tuple with the QuarantineSubnetGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetQuarantineSubnetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.QuarantineSubnetGateway) {
		return nil, false
	}
	return o.QuarantineSubnetGateway, true
}

// HasQuarantineSubnetGateway returns a boolean if a field has been set.
func (o *NetworkDevice) HasQuarantineSubnetGateway() bool {
	if o != nil && !IsNil(o.QuarantineSubnetGateway) {
		return true
	}

	return false
}

// SetQuarantineSubnetGateway gets a reference to the given string and assigns it to the QuarantineSubnetGateway field.
func (o *NetworkDevice) SetQuarantineSubnetGateway(v string) {
	o.QuarantineSubnetGateway = &v
}

// GetQuarantineVlan returns the QuarantineVlan field value if set, zero value otherwise.
func (o *NetworkDevice) GetQuarantineVlan() float32 {
	if o == nil || IsNil(o.QuarantineVlan) {
		var ret float32
		return ret
	}
	return *o.QuarantineVlan
}

// GetQuarantineVlanOk returns a tuple with the QuarantineVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetQuarantineVlanOk() (*float32, bool) {
	if o == nil || IsNil(o.QuarantineVlan) {
		return nil, false
	}
	return o.QuarantineVlan, true
}

// HasQuarantineVlan returns a boolean if a field has been set.
func (o *NetworkDevice) HasQuarantineVlan() bool {
	if o != nil && !IsNil(o.QuarantineVlan) {
		return true
	}

	return false
}

// SetQuarantineVlan gets a reference to the given float32 and assigns it to the QuarantineVlan field.
func (o *NetworkDevice) SetQuarantineVlan(v float32) {
	o.QuarantineVlan = &v
}

// GetDefaultMtu returns the DefaultMtu field value if set, zero value otherwise.
func (o *NetworkDevice) GetDefaultMtu() float32 {
	if o == nil || IsNil(o.DefaultMtu) {
		var ret float32
		return ret
	}
	return *o.DefaultMtu
}

// GetDefaultMtuOk returns a tuple with the DefaultMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetDefaultMtuOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultMtu) {
		return nil, false
	}
	return o.DefaultMtu, true
}

// HasDefaultMtu returns a boolean if a field has been set.
func (o *NetworkDevice) HasDefaultMtu() bool {
	if o != nil && !IsNil(o.DefaultMtu) {
		return true
	}

	return false
}

// SetDefaultMtu gets a reference to the given float32 and assigns it to the DefaultMtu field.
func (o *NetworkDevice) SetDefaultMtu(v float32) {
	o.DefaultMtu = &v
}

// GetVariablesMaterializedForOSAssets returns the VariablesMaterializedForOSAssets field value if set, zero value otherwise.
func (o *NetworkDevice) GetVariablesMaterializedForOSAssets() map[string]interface{} {
	if o == nil || IsNil(o.VariablesMaterializedForOSAssets) {
		var ret map[string]interface{}
		return ret
	}
	return o.VariablesMaterializedForOSAssets
}

// GetVariablesMaterializedForOSAssetsOk returns a tuple with the VariablesMaterializedForOSAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetVariablesMaterializedForOSAssetsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.VariablesMaterializedForOSAssets) {
		return map[string]interface{}{}, false
	}
	return o.VariablesMaterializedForOSAssets, true
}

// HasVariablesMaterializedForOSAssets returns a boolean if a field has been set.
func (o *NetworkDevice) HasVariablesMaterializedForOSAssets() bool {
	if o != nil && !IsNil(o.VariablesMaterializedForOSAssets) {
		return true
	}

	return false
}

// SetVariablesMaterializedForOSAssets gets a reference to the given map[string]interface{} and assigns it to the VariablesMaterializedForOSAssets field.
func (o *NetworkDevice) SetVariablesMaterializedForOSAssets(v map[string]interface{}) {
	o.VariablesMaterializedForOSAssets = v
}

// GetSecretsMaterializedForOSAssets returns the SecretsMaterializedForOSAssets field value if set, zero value otherwise.
func (o *NetworkDevice) GetSecretsMaterializedForOSAssets() map[string]interface{} {
	if o == nil || IsNil(o.SecretsMaterializedForOSAssets) {
		var ret map[string]interface{}
		return ret
	}
	return o.SecretsMaterializedForOSAssets
}

// GetSecretsMaterializedForOSAssetsOk returns a tuple with the SecretsMaterializedForOSAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetSecretsMaterializedForOSAssetsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SecretsMaterializedForOSAssets) {
		return map[string]interface{}{}, false
	}
	return o.SecretsMaterializedForOSAssets, true
}

// HasSecretsMaterializedForOSAssets returns a boolean if a field has been set.
func (o *NetworkDevice) HasSecretsMaterializedForOSAssets() bool {
	if o != nil && !IsNil(o.SecretsMaterializedForOSAssets) {
		return true
	}

	return false
}

// SetSecretsMaterializedForOSAssets gets a reference to the given map[string]interface{} and assigns it to the SecretsMaterializedForOSAssets field.
func (o *NetworkDevice) SetSecretsMaterializedForOSAssets(v map[string]interface{}) {
	o.SecretsMaterializedForOSAssets = v
}

// GetBootstrapReadinessCheckResult returns the BootstrapReadinessCheckResult field value if set, zero value otherwise.
func (o *NetworkDevice) GetBootstrapReadinessCheckResult() map[string]interface{} {
	if o == nil || IsNil(o.BootstrapReadinessCheckResult) {
		var ret map[string]interface{}
		return ret
	}
	return o.BootstrapReadinessCheckResult
}

// GetBootstrapReadinessCheckResultOk returns a tuple with the BootstrapReadinessCheckResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetBootstrapReadinessCheckResultOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BootstrapReadinessCheckResult) {
		return map[string]interface{}{}, false
	}
	return o.BootstrapReadinessCheckResult, true
}

// HasBootstrapReadinessCheckResult returns a boolean if a field has been set.
func (o *NetworkDevice) HasBootstrapReadinessCheckResult() bool {
	if o != nil && !IsNil(o.BootstrapReadinessCheckResult) {
		return true
	}

	return false
}

// SetBootstrapReadinessCheckResult gets a reference to the given map[string]interface{} and assigns it to the BootstrapReadinessCheckResult field.
func (o *NetworkDevice) SetBootstrapReadinessCheckResult(v map[string]interface{}) {
	o.BootstrapReadinessCheckResult = v
}

// GetIsGateway returns the IsGateway field value if set, zero value otherwise.
func (o *NetworkDevice) GetIsGateway() float32 {
	if o == nil || IsNil(o.IsGateway) {
		var ret float32
		return ret
	}
	return *o.IsGateway
}

// GetIsGatewayOk returns a tuple with the IsGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetIsGatewayOk() (*float32, bool) {
	if o == nil || IsNil(o.IsGateway) {
		return nil, false
	}
	return o.IsGateway, true
}

// HasIsGateway returns a boolean if a field has been set.
func (o *NetworkDevice) HasIsGateway() bool {
	if o != nil && !IsNil(o.IsGateway) {
		return true
	}

	return false
}

// SetIsGateway gets a reference to the given float32 and assigns it to the IsGateway field.
func (o *NetworkDevice) SetIsGateway(v float32) {
	o.IsGateway = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NetworkDevice) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkDevice) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NetworkDevice) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *NetworkDevice) SetLinks(v []Link) {
	o.Links = v
}

func (o NetworkDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["switchId"] = o.SwitchId
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.DatacenterName) {
		toSerialize["datacenterName"] = o.DatacenterName
	}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.IdentifierString) {
		toSerialize["identifierString"] = o.IdentifierString
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ChassisIdentifier) {
		toSerialize["chassisIdentifier"] = o.ChassisIdentifier
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.DatacenterMeta) {
		toSerialize["datacenterMeta"] = o.DatacenterMeta
	}
	if !IsNil(o.DatacenterRoom) {
		toSerialize["datacenterRoom"] = o.DatacenterRoom
	}
	if !IsNil(o.DatacenterRack) {
		toSerialize["datacenterRack"] = o.DatacenterRack
	}
	if !IsNil(o.RackPositionUpperUnit) {
		toSerialize["rackPositionUpperUnit"] = o.RackPositionUpperUnit
	}
	if !IsNil(o.RackPositionLowerUnit) {
		toSerialize["rackPositionLowerUnit"] = o.RackPositionLowerUnit
	}
	if !IsNil(o.ManagementAddress) {
		toSerialize["managementAddress"] = o.ManagementAddress
	}
	if !IsNil(o.ManagementAddressMask) {
		toSerialize["managementAddressMask"] = o.ManagementAddressMask
	}
	if !IsNil(o.ManagementAddressGateway) {
		toSerialize["managementAddressGateway"] = o.ManagementAddressGateway
	}
	if !IsNil(o.ManagementPort) {
		toSerialize["managementPort"] = o.ManagementPort
	}
	if !IsNil(o.SyslogEnabled) {
		toSerialize["syslogEnabled"] = o.SyslogEnabled
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.ManagementPassword) {
		toSerialize["managementPassword"] = o.ManagementPassword
	}
	if !IsNil(o.ManagementProtocol) {
		toSerialize["managementProtocol"] = o.ManagementProtocol
	}
	if !IsNil(o.ManagementMacAddress) {
		toSerialize["managementMacAddress"] = o.ManagementMacAddress
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	toSerialize["driver"] = o.Driver
	toSerialize["position"] = o.Position
	if !IsNil(o.ProvisionerType) {
		toSerialize["provisionerType"] = o.ProvisionerType
	}
	if !IsNil(o.NetworkTypesAllowed) {
		toSerialize["networkTypesAllowed"] = o.NetworkTypesAllowed
	}
	if !IsNil(o.OrderIndex) {
		toSerialize["orderIndex"] = o.OrderIndex
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ReadyForInitialConfiguration) {
		toSerialize["readyForInitialConfiguration"] = o.ReadyForInitialConfiguration
	}
	if !IsNil(o.BootstrapReadinessCheckInProgress) {
		toSerialize["bootstrapReadinessCheckInProgress"] = o.BootstrapReadinessCheckInProgress
	}
	if !IsNil(o.SubnetOobId) {
		toSerialize["subnetOobId"] = o.SubnetOobId
	}
	if !IsNil(o.SubnetOobIndex) {
		toSerialize["subnetOobIndex"] = o.SubnetOobIndex
	}
	if !IsNil(o.RequiresOsInstall) {
		toSerialize["requiresOsInstall"] = o.RequiresOsInstall
	}
	if !IsNil(o.BootstrapSkipInitialConfiguration) {
		toSerialize["bootstrapSkipInitialConfiguration"] = o.BootstrapSkipInitialConfiguration
	}
	if !IsNil(o.BootstrapExpectedPartnerHostname) {
		toSerialize["bootstrapExpectedPartnerHostname"] = o.BootstrapExpectedPartnerHostname
	}
	if !IsNil(o.LoopbackAddress) {
		toSerialize["loopbackAddress"] = o.LoopbackAddress
	}
	if !IsNil(o.LoopbackAddressIpv6) {
		toSerialize["loopbackAddressIpv6"] = o.LoopbackAddressIpv6
	}
	if !IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	if !IsNil(o.VtepAddress) {
		toSerialize["vtepAddress"] = o.VtepAddress
	}
	if !IsNil(o.VtepAddressIpv6) {
		toSerialize["vtepAddressIpv6"] = o.VtepAddressIpv6
	}
	if !IsNil(o.MlagSystemMac) {
		toSerialize["mlagSystemMac"] = o.MlagSystemMac
	}
	if !IsNil(o.MlagDomainId) {
		toSerialize["mlagDomainId"] = o.MlagDomainId
	}
	if !IsNil(o.QuarantineSubnetStart) {
		toSerialize["quarantineSubnetStart"] = o.QuarantineSubnetStart
	}
	if !IsNil(o.QuarantineSubnetEnd) {
		toSerialize["quarantineSubnetEnd"] = o.QuarantineSubnetEnd
	}
	if !IsNil(o.QuarantineSubnetPrefixSize) {
		toSerialize["quarantineSubnetPrefixSize"] = o.QuarantineSubnetPrefixSize
	}
	if !IsNil(o.QuarantineSubnetGateway) {
		toSerialize["quarantineSubnetGateway"] = o.QuarantineSubnetGateway
	}
	if !IsNil(o.QuarantineVlan) {
		toSerialize["quarantineVlan"] = o.QuarantineVlan
	}
	if !IsNil(o.DefaultMtu) {
		toSerialize["defaultMtu"] = o.DefaultMtu
	}
	if !IsNil(o.VariablesMaterializedForOSAssets) {
		toSerialize["variablesMaterializedForOSAssets"] = o.VariablesMaterializedForOSAssets
	}
	if !IsNil(o.SecretsMaterializedForOSAssets) {
		toSerialize["secretsMaterializedForOSAssets"] = o.SecretsMaterializedForOSAssets
	}
	if !IsNil(o.BootstrapReadinessCheckResult) {
		toSerialize["bootstrapReadinessCheckResult"] = o.BootstrapReadinessCheckResult
	}
	if !IsNil(o.IsGateway) {
		toSerialize["isGateway"] = o.IsGateway
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"switchId",
		"driver",
		"position",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkDevice := _NetworkDevice{}

	err = json.Unmarshal(data, &varNetworkDevice)

	if err != nil {
		return err
	}

	*o = NetworkDevice(varNetworkDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "switchId")
		delete(additionalProperties, "status")
		delete(additionalProperties, "datacenterName")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "identifierString")
		delete(additionalProperties, "description")
		delete(additionalProperties, "chassisIdentifier")
		delete(additionalProperties, "country")
		delete(additionalProperties, "city")
		delete(additionalProperties, "datacenterMeta")
		delete(additionalProperties, "datacenterRoom")
		delete(additionalProperties, "datacenterRack")
		delete(additionalProperties, "rackPositionUpperUnit")
		delete(additionalProperties, "rackPositionLowerUnit")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "managementAddressMask")
		delete(additionalProperties, "managementAddressGateway")
		delete(additionalProperties, "managementPort")
		delete(additionalProperties, "syslogEnabled")
		delete(additionalProperties, "username")
		delete(additionalProperties, "managementPassword")
		delete(additionalProperties, "managementProtocol")
		delete(additionalProperties, "managementMacAddress")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "driver")
		delete(additionalProperties, "position")
		delete(additionalProperties, "provisionerType")
		delete(additionalProperties, "networkTypesAllowed")
		delete(additionalProperties, "orderIndex")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "readyForInitialConfiguration")
		delete(additionalProperties, "bootstrapReadinessCheckInProgress")
		delete(additionalProperties, "subnetOobId")
		delete(additionalProperties, "subnetOobIndex")
		delete(additionalProperties, "requiresOsInstall")
		delete(additionalProperties, "bootstrapSkipInitialConfiguration")
		delete(additionalProperties, "bootstrapExpectedPartnerHostname")
		delete(additionalProperties, "loopbackAddress")
		delete(additionalProperties, "loopbackAddressIpv6")
		delete(additionalProperties, "asn")
		delete(additionalProperties, "vtepAddress")
		delete(additionalProperties, "vtepAddressIpv6")
		delete(additionalProperties, "mlagSystemMac")
		delete(additionalProperties, "mlagDomainId")
		delete(additionalProperties, "quarantineSubnetStart")
		delete(additionalProperties, "quarantineSubnetEnd")
		delete(additionalProperties, "quarantineSubnetPrefixSize")
		delete(additionalProperties, "quarantineSubnetGateway")
		delete(additionalProperties, "quarantineVlan")
		delete(additionalProperties, "defaultMtu")
		delete(additionalProperties, "variablesMaterializedForOSAssets")
		delete(additionalProperties, "secretsMaterializedForOSAssets")
		delete(additionalProperties, "bootstrapReadinessCheckResult")
		delete(additionalProperties, "isGateway")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkDevice struct {
	value *NetworkDevice
	isSet bool
}

func (v NullableNetworkDevice) Get() *NetworkDevice {
	return v.value
}

func (v *NullableNetworkDevice) Set(val *NetworkDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDevice(val *NetworkDevice) *NullableNetworkDevice {
	return &NullableNetworkDevice{value: val, isSet: true}
}

func (v NullableNetworkDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


