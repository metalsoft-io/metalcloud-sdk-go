/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// CatalogUpdateType the model 'CatalogUpdateType'
type CatalogUpdateType string

// List of CatalogUpdateType
const (
	CATALOGUPDATETYPE_ONLINE CatalogUpdateType = "online"
	CATALOGUPDATETYPE_OFFLINE CatalogUpdateType = "offline"
)

// All allowed values of CatalogUpdateType enum
var AllowedCatalogUpdateTypeEnumValues = []CatalogUpdateType{
	"online",
	"offline",
}

func (v *CatalogUpdateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CatalogUpdateType(value)
	for _, existing := range AllowedCatalogUpdateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CatalogUpdateType", value)
}

// NewCatalogUpdateTypeFromValue returns a pointer to a valid CatalogUpdateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCatalogUpdateTypeFromValue(v string) (*CatalogUpdateType, error) {
	ev := CatalogUpdateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CatalogUpdateType: valid values are %v", v, AllowedCatalogUpdateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CatalogUpdateType) IsValid() bool {
	for _, existing := range AllowedCatalogUpdateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CatalogUpdateType value
func (v CatalogUpdateType) Ptr() *CatalogUpdateType {
	return &v
}

type NullableCatalogUpdateType struct {
	value *CatalogUpdateType
	isSet bool
}

func (v NullableCatalogUpdateType) Get() *CatalogUpdateType {
	return v.value
}

func (v *NullableCatalogUpdateType) Set(val *CatalogUpdateType) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogUpdateType) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogUpdateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogUpdateType(val *CatalogUpdateType) *NullableCatalogUpdateType {
	return &NullableCatalogUpdateType{value: val, isSet: true}
}

func (v NullableCatalogUpdateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogUpdateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

