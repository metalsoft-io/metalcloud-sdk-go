/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceGroupVariables type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceGroupVariables{}

// ServerInstanceGroupVariables struct for ServerInstanceGroupVariables
type ServerInstanceGroupVariables struct {
	// The Product Instance ID.
	Id int32 `json:"id"`
	// Revision number
	Revision int32 `json:"revision"`
	// The Product Instance label. Will be automatically generated if not provided.
	Label string `json:"label"`
	// Timestamp of the Product Instance creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Timestamp of the latest update of the Product Instance.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Subdomain of the Product Instance.
	Subdomain *string `json:"subdomain,omitempty"`
	// Subdomain permanent of the Product Instance.
	SubdomainPermanent *string `json:"subdomainPermanent,omitempty"`
	// Id of the DNS subdomain for the Product Instance
	DnsSubdomainId *int32 `json:"dnsSubdomainId,omitempty"`
	// Id of the permanent DNS subdomain for the Product Instance
	DnsSubdomainPermanentId *int32 `json:"dnsSubdomainPermanentId,omitempty"`
	ServerGroupName *string `json:"serverGroupName,omitempty"`
	InfrastructureId int32 `json:"infrastructureId"`
	ExtensionInstanceId *int32 `json:"extensionInstanceId,omitempty"`
	// The number of instances to be created on the Instance Group.
	InstanceCount int32 `json:"instanceCount"`
	// The server type ID that will be assigned to newly created instances.
	DefaultServerTypeId int32 `json:"defaultServerTypeId"`
	// Automatically allocate IP addresses to child Instance`s Instance Interface elements.
	IpAllocateAuto int32 `json:"ipAllocateAuto"`
	// Automatically create or expand Subnet elements until the necessary IPv4 addresses are allocated.
	Ipv4SubnetCreateAuto int32 `json:"ipv4SubnetCreateAuto"`
	// Array of firmware policy ids containing associated firmware policies.
	FirmwarePolicyIds []float32 `json:"firmwarePolicyIds,omitempty"`
	// The volume template ID (or name) to use if the servers in the Instance Group have local disks.
	OsTemplateId *int32 `json:"osTemplateId,omitempty"`
	// Object containing custom variables and variable overrides.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// The CPU count on each instance.
	ProcessorCount int32 `json:"processorCount"`
	// The minimum cores of a CPU.
	ProcessorCoreCount int32 `json:"processorCoreCount"`
	// The minimum clock speed of a CPU.
	ProcessorCoreMhz int32 `json:"processorCoreMhz"`
	// The minimum RAM capacity of each instance.
	RamGbytes *int32 `json:"ramGbytes,omitempty"`
	// The minimum number of physical disks.
	DiskCount int32 `json:"diskCount"`
	// The minimum size of a single disk.
	DiskSizeMbytes int32 `json:"diskSizeMbytes"`
	// The types of physical disks.
	DiskTypes []string `json:"diskTypes"`
	// Enable virtual interfaces
	VirtualInterfacesEnabled int32 `json:"virtualInterfacesEnabled"`
	// Contains info about additional ips to be assigned to the WAN interfaces.
	AdditionalWanIpv4Json map[string]interface{} `json:"additionalWanIpv4Json,omitempty"`
	NetworkProfileGroupId *int32 `json:"networkProfileGroupId,omitempty"`
	NetworkProfileSnapshotId *int32 `json:"networkProfileSnapshotId,omitempty"`
	// The ipv4 vlan that should override the default from the WAN Network for the primary ip.
	OverrideIpv4WanVlanId *int32 `json:"overrideIpv4WanVlanId,omitempty"`
	// ID of a ipv4 WAN subnet-pool from which to force the subnet allocation for the Instance Interfaces associated with this Instance Group.
	NetworkEquipmentForceSubnetPoolIpv4WanId *int32 `json:"networkEquipmentForceSubnetPoolIpv4WanId,omitempty"`
	// Current status of the Server Instance Group.
	ServiceStatus string `json:"serviceStatus"`
	// The resource pool assigned to this instance array
	ResourcePoolId *int32 `json:"resourcePoolId,omitempty"`
	// Flag to indicate if the Server Instance Group is belongs to a VM.
	IsVmGroup int32 `json:"isVmGroup"`
	// Id of the VM Instance Group this Server Instance Group belongs to.
	VmInstanceGroupId *int32 `json:"vmInstanceGroupId,omitempty"`
	NetworkEndpointGroupId *int32 `json:"networkEndpointGroupId,omitempty"`
	Config *ServerInstanceGroupConfiguration `json:"config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceGroupVariables ServerInstanceGroupVariables

// NewServerInstanceGroupVariables instantiates a new ServerInstanceGroupVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceGroupVariables(id int32, revision int32, label string, createdTimestamp string, updatedTimestamp string, infrastructureId int32, instanceCount int32, defaultServerTypeId int32, ipAllocateAuto int32, ipv4SubnetCreateAuto int32, processorCount int32, processorCoreCount int32, processorCoreMhz int32, diskCount int32, diskSizeMbytes int32, diskTypes []string, virtualInterfacesEnabled int32, serviceStatus string, isVmGroup int32) *ServerInstanceGroupVariables {
	this := ServerInstanceGroupVariables{}
	this.Id = id
	this.Revision = revision
	this.Label = label
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.InfrastructureId = infrastructureId
	this.InstanceCount = instanceCount
	this.DefaultServerTypeId = defaultServerTypeId
	this.IpAllocateAuto = ipAllocateAuto
	this.Ipv4SubnetCreateAuto = ipv4SubnetCreateAuto
	this.ProcessorCount = processorCount
	this.ProcessorCoreCount = processorCoreCount
	this.ProcessorCoreMhz = processorCoreMhz
	var ramGbytes int32 = 1
	this.RamGbytes = &ramGbytes
	this.DiskCount = diskCount
	this.DiskSizeMbytes = diskSizeMbytes
	this.DiskTypes = diskTypes
	this.VirtualInterfacesEnabled = virtualInterfacesEnabled
	this.ServiceStatus = serviceStatus
	this.IsVmGroup = isVmGroup
	return &this
}

// NewServerInstanceGroupVariablesWithDefaults instantiates a new ServerInstanceGroupVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceGroupVariablesWithDefaults() *ServerInstanceGroupVariables {
	this := ServerInstanceGroupVariables{}
	var instanceCount int32 = 1
	this.InstanceCount = instanceCount
	var ipAllocateAuto int32 = 1
	this.IpAllocateAuto = ipAllocateAuto
	var ipv4SubnetCreateAuto int32 = 1
	this.Ipv4SubnetCreateAuto = ipv4SubnetCreateAuto
	var processorCount int32 = 1
	this.ProcessorCount = processorCount
	var processorCoreCount int32 = 1
	this.ProcessorCoreCount = processorCoreCount
	var processorCoreMhz int32 = 1000
	this.ProcessorCoreMhz = processorCoreMhz
	var ramGbytes int32 = 1
	this.RamGbytes = &ramGbytes
	var diskCount int32 = 0
	this.DiskCount = diskCount
	var diskSizeMbytes int32 = 0
	this.DiskSizeMbytes = diskSizeMbytes
	var virtualInterfacesEnabled int32 = 0
	this.VirtualInterfacesEnabled = virtualInterfacesEnabled
	return &this
}

// GetId returns the Id field value
func (o *ServerInstanceGroupVariables) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerInstanceGroupVariables) SetId(v int32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *ServerInstanceGroupVariables) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *ServerInstanceGroupVariables) SetRevision(v int32) {
	o.Revision = v
}

// GetLabel returns the Label field value
func (o *ServerInstanceGroupVariables) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ServerInstanceGroupVariables) SetLabel(v string) {
	o.Label = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *ServerInstanceGroupVariables) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *ServerInstanceGroupVariables) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *ServerInstanceGroupVariables) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *ServerInstanceGroupVariables) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *ServerInstanceGroupVariables) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetSubdomainPermanent() string {
	if o == nil || IsNil(o.SubdomainPermanent) {
		var ret string
		return ret
	}
	return *o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil || IsNil(o.SubdomainPermanent) {
		return nil, false
	}
	return o.SubdomainPermanent, true
}

// HasSubdomainPermanent returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasSubdomainPermanent() bool {
	if o != nil && !IsNil(o.SubdomainPermanent) {
		return true
	}

	return false
}

// SetSubdomainPermanent gets a reference to the given string and assigns it to the SubdomainPermanent field.
func (o *ServerInstanceGroupVariables) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = &v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetDnsSubdomainId() int32 {
	if o == nil || IsNil(o.DnsSubdomainId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetDnsSubdomainIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainId) {
		return nil, false
	}
	return o.DnsSubdomainId, true
}

// HasDnsSubdomainId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasDnsSubdomainId() bool {
	if o != nil && !IsNil(o.DnsSubdomainId) {
		return true
	}

	return false
}

// SetDnsSubdomainId gets a reference to the given int32 and assigns it to the DnsSubdomainId field.
func (o *ServerInstanceGroupVariables) SetDnsSubdomainId(v int32) {
	o.DnsSubdomainId = &v
}

// GetDnsSubdomainPermanentId returns the DnsSubdomainPermanentId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetDnsSubdomainPermanentId() int32 {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainPermanentId
}

// GetDnsSubdomainPermanentIdOk returns a tuple with the DnsSubdomainPermanentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetDnsSubdomainPermanentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		return nil, false
	}
	return o.DnsSubdomainPermanentId, true
}

// HasDnsSubdomainPermanentId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasDnsSubdomainPermanentId() bool {
	if o != nil && !IsNil(o.DnsSubdomainPermanentId) {
		return true
	}

	return false
}

// SetDnsSubdomainPermanentId gets a reference to the given int32 and assigns it to the DnsSubdomainPermanentId field.
func (o *ServerInstanceGroupVariables) SetDnsSubdomainPermanentId(v int32) {
	o.DnsSubdomainPermanentId = &v
}

// GetServerGroupName returns the ServerGroupName field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetServerGroupName() string {
	if o == nil || IsNil(o.ServerGroupName) {
		var ret string
		return ret
	}
	return *o.ServerGroupName
}

// GetServerGroupNameOk returns a tuple with the ServerGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetServerGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerGroupName) {
		return nil, false
	}
	return o.ServerGroupName, true
}

// HasServerGroupName returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasServerGroupName() bool {
	if o != nil && !IsNil(o.ServerGroupName) {
		return true
	}

	return false
}

// SetServerGroupName gets a reference to the given string and assigns it to the ServerGroupName field.
func (o *ServerInstanceGroupVariables) SetServerGroupName(v string) {
	o.ServerGroupName = &v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *ServerInstanceGroupVariables) GetInfrastructureId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetInfrastructureIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *ServerInstanceGroupVariables) SetInfrastructureId(v int32) {
	o.InfrastructureId = v
}

// GetExtensionInstanceId returns the ExtensionInstanceId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetExtensionInstanceId() int32 {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		var ret int32
		return ret
	}
	return *o.ExtensionInstanceId
}

// GetExtensionInstanceIdOk returns a tuple with the ExtensionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetExtensionInstanceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		return nil, false
	}
	return o.ExtensionInstanceId, true
}

// HasExtensionInstanceId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasExtensionInstanceId() bool {
	if o != nil && !IsNil(o.ExtensionInstanceId) {
		return true
	}

	return false
}

// SetExtensionInstanceId gets a reference to the given int32 and assigns it to the ExtensionInstanceId field.
func (o *ServerInstanceGroupVariables) SetExtensionInstanceId(v int32) {
	o.ExtensionInstanceId = &v
}

// GetInstanceCount returns the InstanceCount field value
func (o *ServerInstanceGroupVariables) GetInstanceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetInstanceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceCount, true
}

// SetInstanceCount sets field value
func (o *ServerInstanceGroupVariables) SetInstanceCount(v int32) {
	o.InstanceCount = v
}

// GetDefaultServerTypeId returns the DefaultServerTypeId field value
func (o *ServerInstanceGroupVariables) GetDefaultServerTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DefaultServerTypeId
}

// GetDefaultServerTypeIdOk returns a tuple with the DefaultServerTypeId field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetDefaultServerTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultServerTypeId, true
}

// SetDefaultServerTypeId sets field value
func (o *ServerInstanceGroupVariables) SetDefaultServerTypeId(v int32) {
	o.DefaultServerTypeId = v
}

// GetIpAllocateAuto returns the IpAllocateAuto field value
func (o *ServerInstanceGroupVariables) GetIpAllocateAuto() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IpAllocateAuto
}

// GetIpAllocateAutoOk returns a tuple with the IpAllocateAuto field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetIpAllocateAutoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAllocateAuto, true
}

// SetIpAllocateAuto sets field value
func (o *ServerInstanceGroupVariables) SetIpAllocateAuto(v int32) {
	o.IpAllocateAuto = v
}

// GetIpv4SubnetCreateAuto returns the Ipv4SubnetCreateAuto field value
func (o *ServerInstanceGroupVariables) GetIpv4SubnetCreateAuto() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ipv4SubnetCreateAuto
}

// GetIpv4SubnetCreateAutoOk returns a tuple with the Ipv4SubnetCreateAuto field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetIpv4SubnetCreateAutoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv4SubnetCreateAuto, true
}

// SetIpv4SubnetCreateAuto sets field value
func (o *ServerInstanceGroupVariables) SetIpv4SubnetCreateAuto(v int32) {
	o.Ipv4SubnetCreateAuto = v
}

// GetFirmwarePolicyIds returns the FirmwarePolicyIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerInstanceGroupVariables) GetFirmwarePolicyIds() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}
	return o.FirmwarePolicyIds
}

// GetFirmwarePolicyIdsOk returns a tuple with the FirmwarePolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerInstanceGroupVariables) GetFirmwarePolicyIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.FirmwarePolicyIds) {
		return nil, false
	}
	return o.FirmwarePolicyIds, true
}

// HasFirmwarePolicyIds returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasFirmwarePolicyIds() bool {
	if o != nil && !IsNil(o.FirmwarePolicyIds) {
		return true
	}

	return false
}

// SetFirmwarePolicyIds gets a reference to the given []float32 and assigns it to the FirmwarePolicyIds field.
func (o *ServerInstanceGroupVariables) SetFirmwarePolicyIds(v []float32) {
	o.FirmwarePolicyIds = v
}

// GetOsTemplateId returns the OsTemplateId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetOsTemplateId() int32 {
	if o == nil || IsNil(o.OsTemplateId) {
		var ret int32
		return ret
	}
	return *o.OsTemplateId
}

// GetOsTemplateIdOk returns a tuple with the OsTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetOsTemplateIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OsTemplateId) {
		return nil, false
	}
	return o.OsTemplateId, true
}

// HasOsTemplateId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasOsTemplateId() bool {
	if o != nil && !IsNil(o.OsTemplateId) {
		return true
	}

	return false
}

// SetOsTemplateId gets a reference to the given int32 and assigns it to the OsTemplateId field.
func (o *ServerInstanceGroupVariables) SetOsTemplateId(v int32) {
	o.OsTemplateId = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *ServerInstanceGroupVariables) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetProcessorCount returns the ProcessorCount field value
func (o *ServerInstanceGroupVariables) GetProcessorCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessorCount
}

// GetProcessorCountOk returns a tuple with the ProcessorCount field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetProcessorCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorCount, true
}

// SetProcessorCount sets field value
func (o *ServerInstanceGroupVariables) SetProcessorCount(v int32) {
	o.ProcessorCount = v
}

// GetProcessorCoreCount returns the ProcessorCoreCount field value
func (o *ServerInstanceGroupVariables) GetProcessorCoreCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessorCoreCount
}

// GetProcessorCoreCountOk returns a tuple with the ProcessorCoreCount field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetProcessorCoreCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorCoreCount, true
}

// SetProcessorCoreCount sets field value
func (o *ServerInstanceGroupVariables) SetProcessorCoreCount(v int32) {
	o.ProcessorCoreCount = v
}

// GetProcessorCoreMhz returns the ProcessorCoreMhz field value
func (o *ServerInstanceGroupVariables) GetProcessorCoreMhz() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProcessorCoreMhz
}

// GetProcessorCoreMhzOk returns a tuple with the ProcessorCoreMhz field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetProcessorCoreMhzOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessorCoreMhz, true
}

// SetProcessorCoreMhz sets field value
func (o *ServerInstanceGroupVariables) SetProcessorCoreMhz(v int32) {
	o.ProcessorCoreMhz = v
}

// GetRamGbytes returns the RamGbytes field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetRamGbytes() int32 {
	if o == nil || IsNil(o.RamGbytes) {
		var ret int32
		return ret
	}
	return *o.RamGbytes
}

// GetRamGbytesOk returns a tuple with the RamGbytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetRamGbytesOk() (*int32, bool) {
	if o == nil || IsNil(o.RamGbytes) {
		return nil, false
	}
	return o.RamGbytes, true
}

// HasRamGbytes returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasRamGbytes() bool {
	if o != nil && !IsNil(o.RamGbytes) {
		return true
	}

	return false
}

// SetRamGbytes gets a reference to the given int32 and assigns it to the RamGbytes field.
func (o *ServerInstanceGroupVariables) SetRamGbytes(v int32) {
	o.RamGbytes = &v
}

// GetDiskCount returns the DiskCount field value
func (o *ServerInstanceGroupVariables) GetDiskCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskCount
}

// GetDiskCountOk returns a tuple with the DiskCount field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetDiskCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskCount, true
}

// SetDiskCount sets field value
func (o *ServerInstanceGroupVariables) SetDiskCount(v int32) {
	o.DiskCount = v
}

// GetDiskSizeMbytes returns the DiskSizeMbytes field value
func (o *ServerInstanceGroupVariables) GetDiskSizeMbytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskSizeMbytes
}

// GetDiskSizeMbytesOk returns a tuple with the DiskSizeMbytes field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetDiskSizeMbytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSizeMbytes, true
}

// SetDiskSizeMbytes sets field value
func (o *ServerInstanceGroupVariables) SetDiskSizeMbytes(v int32) {
	o.DiskSizeMbytes = v
}

// GetDiskTypes returns the DiskTypes field value
func (o *ServerInstanceGroupVariables) GetDiskTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DiskTypes
}

// GetDiskTypesOk returns a tuple with the DiskTypes field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetDiskTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskTypes, true
}

// SetDiskTypes sets field value
func (o *ServerInstanceGroupVariables) SetDiskTypes(v []string) {
	o.DiskTypes = v
}

// GetVirtualInterfacesEnabled returns the VirtualInterfacesEnabled field value
func (o *ServerInstanceGroupVariables) GetVirtualInterfacesEnabled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VirtualInterfacesEnabled
}

// GetVirtualInterfacesEnabledOk returns a tuple with the VirtualInterfacesEnabled field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetVirtualInterfacesEnabledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualInterfacesEnabled, true
}

// SetVirtualInterfacesEnabled sets field value
func (o *ServerInstanceGroupVariables) SetVirtualInterfacesEnabled(v int32) {
	o.VirtualInterfacesEnabled = v
}

// GetAdditionalWanIpv4Json returns the AdditionalWanIpv4Json field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetAdditionalWanIpv4Json() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalWanIpv4Json) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalWanIpv4Json
}

// GetAdditionalWanIpv4JsonOk returns a tuple with the AdditionalWanIpv4Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetAdditionalWanIpv4JsonOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalWanIpv4Json) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalWanIpv4Json, true
}

// HasAdditionalWanIpv4Json returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasAdditionalWanIpv4Json() bool {
	if o != nil && !IsNil(o.AdditionalWanIpv4Json) {
		return true
	}

	return false
}

// SetAdditionalWanIpv4Json gets a reference to the given map[string]interface{} and assigns it to the AdditionalWanIpv4Json field.
func (o *ServerInstanceGroupVariables) SetAdditionalWanIpv4Json(v map[string]interface{}) {
	o.AdditionalWanIpv4Json = v
}

// GetNetworkProfileGroupId returns the NetworkProfileGroupId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetNetworkProfileGroupId() int32 {
	if o == nil || IsNil(o.NetworkProfileGroupId) {
		var ret int32
		return ret
	}
	return *o.NetworkProfileGroupId
}

// GetNetworkProfileGroupIdOk returns a tuple with the NetworkProfileGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetNetworkProfileGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkProfileGroupId) {
		return nil, false
	}
	return o.NetworkProfileGroupId, true
}

// HasNetworkProfileGroupId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasNetworkProfileGroupId() bool {
	if o != nil && !IsNil(o.NetworkProfileGroupId) {
		return true
	}

	return false
}

// SetNetworkProfileGroupId gets a reference to the given int32 and assigns it to the NetworkProfileGroupId field.
func (o *ServerInstanceGroupVariables) SetNetworkProfileGroupId(v int32) {
	o.NetworkProfileGroupId = &v
}

// GetNetworkProfileSnapshotId returns the NetworkProfileSnapshotId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetNetworkProfileSnapshotId() int32 {
	if o == nil || IsNil(o.NetworkProfileSnapshotId) {
		var ret int32
		return ret
	}
	return *o.NetworkProfileSnapshotId
}

// GetNetworkProfileSnapshotIdOk returns a tuple with the NetworkProfileSnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetNetworkProfileSnapshotIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkProfileSnapshotId) {
		return nil, false
	}
	return o.NetworkProfileSnapshotId, true
}

// HasNetworkProfileSnapshotId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasNetworkProfileSnapshotId() bool {
	if o != nil && !IsNil(o.NetworkProfileSnapshotId) {
		return true
	}

	return false
}

// SetNetworkProfileSnapshotId gets a reference to the given int32 and assigns it to the NetworkProfileSnapshotId field.
func (o *ServerInstanceGroupVariables) SetNetworkProfileSnapshotId(v int32) {
	o.NetworkProfileSnapshotId = &v
}

// GetOverrideIpv4WanVlanId returns the OverrideIpv4WanVlanId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetOverrideIpv4WanVlanId() int32 {
	if o == nil || IsNil(o.OverrideIpv4WanVlanId) {
		var ret int32
		return ret
	}
	return *o.OverrideIpv4WanVlanId
}

// GetOverrideIpv4WanVlanIdOk returns a tuple with the OverrideIpv4WanVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetOverrideIpv4WanVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OverrideIpv4WanVlanId) {
		return nil, false
	}
	return o.OverrideIpv4WanVlanId, true
}

// HasOverrideIpv4WanVlanId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasOverrideIpv4WanVlanId() bool {
	if o != nil && !IsNil(o.OverrideIpv4WanVlanId) {
		return true
	}

	return false
}

// SetOverrideIpv4WanVlanId gets a reference to the given int32 and assigns it to the OverrideIpv4WanVlanId field.
func (o *ServerInstanceGroupVariables) SetOverrideIpv4WanVlanId(v int32) {
	o.OverrideIpv4WanVlanId = &v
}

// GetNetworkEquipmentForceSubnetPoolIpv4WanId returns the NetworkEquipmentForceSubnetPoolIpv4WanId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetNetworkEquipmentForceSubnetPoolIpv4WanId() int32 {
	if o == nil || IsNil(o.NetworkEquipmentForceSubnetPoolIpv4WanId) {
		var ret int32
		return ret
	}
	return *o.NetworkEquipmentForceSubnetPoolIpv4WanId
}

// GetNetworkEquipmentForceSubnetPoolIpv4WanIdOk returns a tuple with the NetworkEquipmentForceSubnetPoolIpv4WanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetNetworkEquipmentForceSubnetPoolIpv4WanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkEquipmentForceSubnetPoolIpv4WanId) {
		return nil, false
	}
	return o.NetworkEquipmentForceSubnetPoolIpv4WanId, true
}

// HasNetworkEquipmentForceSubnetPoolIpv4WanId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasNetworkEquipmentForceSubnetPoolIpv4WanId() bool {
	if o != nil && !IsNil(o.NetworkEquipmentForceSubnetPoolIpv4WanId) {
		return true
	}

	return false
}

// SetNetworkEquipmentForceSubnetPoolIpv4WanId gets a reference to the given int32 and assigns it to the NetworkEquipmentForceSubnetPoolIpv4WanId field.
func (o *ServerInstanceGroupVariables) SetNetworkEquipmentForceSubnetPoolIpv4WanId(v int32) {
	o.NetworkEquipmentForceSubnetPoolIpv4WanId = &v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *ServerInstanceGroupVariables) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *ServerInstanceGroupVariables) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetResourcePoolId returns the ResourcePoolId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetResourcePoolId() int32 {
	if o == nil || IsNil(o.ResourcePoolId) {
		var ret int32
		return ret
	}
	return *o.ResourcePoolId
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetResourcePoolIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourcePoolId) {
		return nil, false
	}
	return o.ResourcePoolId, true
}

// HasResourcePoolId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasResourcePoolId() bool {
	if o != nil && !IsNil(o.ResourcePoolId) {
		return true
	}

	return false
}

// SetResourcePoolId gets a reference to the given int32 and assigns it to the ResourcePoolId field.
func (o *ServerInstanceGroupVariables) SetResourcePoolId(v int32) {
	o.ResourcePoolId = &v
}

// GetIsVmGroup returns the IsVmGroup field value
func (o *ServerInstanceGroupVariables) GetIsVmGroup() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IsVmGroup
}

// GetIsVmGroupOk returns a tuple with the IsVmGroup field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetIsVmGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsVmGroup, true
}

// SetIsVmGroup sets field value
func (o *ServerInstanceGroupVariables) SetIsVmGroup(v int32) {
	o.IsVmGroup = v
}

// GetVmInstanceGroupId returns the VmInstanceGroupId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetVmInstanceGroupId() int32 {
	if o == nil || IsNil(o.VmInstanceGroupId) {
		var ret int32
		return ret
	}
	return *o.VmInstanceGroupId
}

// GetVmInstanceGroupIdOk returns a tuple with the VmInstanceGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetVmInstanceGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VmInstanceGroupId) {
		return nil, false
	}
	return o.VmInstanceGroupId, true
}

// HasVmInstanceGroupId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasVmInstanceGroupId() bool {
	if o != nil && !IsNil(o.VmInstanceGroupId) {
		return true
	}

	return false
}

// SetVmInstanceGroupId gets a reference to the given int32 and assigns it to the VmInstanceGroupId field.
func (o *ServerInstanceGroupVariables) SetVmInstanceGroupId(v int32) {
	o.VmInstanceGroupId = &v
}

// GetNetworkEndpointGroupId returns the NetworkEndpointGroupId field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetNetworkEndpointGroupId() int32 {
	if o == nil || IsNil(o.NetworkEndpointGroupId) {
		var ret int32
		return ret
	}
	return *o.NetworkEndpointGroupId
}

// GetNetworkEndpointGroupIdOk returns a tuple with the NetworkEndpointGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetNetworkEndpointGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkEndpointGroupId) {
		return nil, false
	}
	return o.NetworkEndpointGroupId, true
}

// HasNetworkEndpointGroupId returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasNetworkEndpointGroupId() bool {
	if o != nil && !IsNil(o.NetworkEndpointGroupId) {
		return true
	}

	return false
}

// SetNetworkEndpointGroupId gets a reference to the given int32 and assigns it to the NetworkEndpointGroupId field.
func (o *ServerInstanceGroupVariables) SetNetworkEndpointGroupId(v int32) {
	o.NetworkEndpointGroupId = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ServerInstanceGroupVariables) GetConfig() ServerInstanceGroupConfiguration {
	if o == nil || IsNil(o.Config) {
		var ret ServerInstanceGroupConfiguration
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupVariables) GetConfigOk() (*ServerInstanceGroupConfiguration, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ServerInstanceGroupVariables) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ServerInstanceGroupConfiguration and assigns it to the Config field.
func (o *ServerInstanceGroupVariables) SetConfig(v ServerInstanceGroupConfiguration) {
	o.Config = &v
}

func (o ServerInstanceGroupVariables) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceGroupVariables) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	toSerialize["label"] = o.Label
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.SubdomainPermanent) {
		toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	}
	if !IsNil(o.DnsSubdomainId) {
		toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	}
	if !IsNil(o.DnsSubdomainPermanentId) {
		toSerialize["dnsSubdomainPermanentId"] = o.DnsSubdomainPermanentId
	}
	if !IsNil(o.ServerGroupName) {
		toSerialize["serverGroupName"] = o.ServerGroupName
	}
	toSerialize["infrastructureId"] = o.InfrastructureId
	if !IsNil(o.ExtensionInstanceId) {
		toSerialize["extensionInstanceId"] = o.ExtensionInstanceId
	}
	toSerialize["instanceCount"] = o.InstanceCount
	toSerialize["defaultServerTypeId"] = o.DefaultServerTypeId
	toSerialize["ipAllocateAuto"] = o.IpAllocateAuto
	toSerialize["ipv4SubnetCreateAuto"] = o.Ipv4SubnetCreateAuto
	if o.FirmwarePolicyIds != nil {
		toSerialize["firmwarePolicyIds"] = o.FirmwarePolicyIds
	}
	if !IsNil(o.OsTemplateId) {
		toSerialize["osTemplateId"] = o.OsTemplateId
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	toSerialize["processorCount"] = o.ProcessorCount
	toSerialize["processorCoreCount"] = o.ProcessorCoreCount
	toSerialize["processorCoreMhz"] = o.ProcessorCoreMhz
	if !IsNil(o.RamGbytes) {
		toSerialize["ramGbytes"] = o.RamGbytes
	}
	toSerialize["diskCount"] = o.DiskCount
	toSerialize["diskSizeMbytes"] = o.DiskSizeMbytes
	toSerialize["diskTypes"] = o.DiskTypes
	toSerialize["virtualInterfacesEnabled"] = o.VirtualInterfacesEnabled
	if !IsNil(o.AdditionalWanIpv4Json) {
		toSerialize["additionalWanIpv4Json"] = o.AdditionalWanIpv4Json
	}
	if !IsNil(o.NetworkProfileGroupId) {
		toSerialize["networkProfileGroupId"] = o.NetworkProfileGroupId
	}
	if !IsNil(o.NetworkProfileSnapshotId) {
		toSerialize["networkProfileSnapshotId"] = o.NetworkProfileSnapshotId
	}
	if !IsNil(o.OverrideIpv4WanVlanId) {
		toSerialize["overrideIpv4WanVlanId"] = o.OverrideIpv4WanVlanId
	}
	if !IsNil(o.NetworkEquipmentForceSubnetPoolIpv4WanId) {
		toSerialize["networkEquipmentForceSubnetPoolIpv4WanId"] = o.NetworkEquipmentForceSubnetPoolIpv4WanId
	}
	toSerialize["serviceStatus"] = o.ServiceStatus
	if !IsNil(o.ResourcePoolId) {
		toSerialize["resourcePoolId"] = o.ResourcePoolId
	}
	toSerialize["isVmGroup"] = o.IsVmGroup
	if !IsNil(o.VmInstanceGroupId) {
		toSerialize["vmInstanceGroupId"] = o.VmInstanceGroupId
	}
	if !IsNil(o.NetworkEndpointGroupId) {
		toSerialize["networkEndpointGroupId"] = o.NetworkEndpointGroupId
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceGroupVariables) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"revision",
		"label",
		"createdTimestamp",
		"updatedTimestamp",
		"infrastructureId",
		"instanceCount",
		"defaultServerTypeId",
		"ipAllocateAuto",
		"ipv4SubnetCreateAuto",
		"processorCount",
		"processorCoreCount",
		"processorCoreMhz",
		"diskCount",
		"diskSizeMbytes",
		"diskTypes",
		"virtualInterfacesEnabled",
		"serviceStatus",
		"isVmGroup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceGroupVariables := _ServerInstanceGroupVariables{}

	err = json.Unmarshal(data, &varServerInstanceGroupVariables)

	if err != nil {
		return err
	}

	*o = ServerInstanceGroupVariables(varServerInstanceGroupVariables)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "dnsSubdomainId")
		delete(additionalProperties, "dnsSubdomainPermanentId")
		delete(additionalProperties, "serverGroupName")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "extensionInstanceId")
		delete(additionalProperties, "instanceCount")
		delete(additionalProperties, "defaultServerTypeId")
		delete(additionalProperties, "ipAllocateAuto")
		delete(additionalProperties, "ipv4SubnetCreateAuto")
		delete(additionalProperties, "firmwarePolicyIds")
		delete(additionalProperties, "osTemplateId")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "processorCount")
		delete(additionalProperties, "processorCoreCount")
		delete(additionalProperties, "processorCoreMhz")
		delete(additionalProperties, "ramGbytes")
		delete(additionalProperties, "diskCount")
		delete(additionalProperties, "diskSizeMbytes")
		delete(additionalProperties, "diskTypes")
		delete(additionalProperties, "virtualInterfacesEnabled")
		delete(additionalProperties, "additionalWanIpv4Json")
		delete(additionalProperties, "networkProfileGroupId")
		delete(additionalProperties, "networkProfileSnapshotId")
		delete(additionalProperties, "overrideIpv4WanVlanId")
		delete(additionalProperties, "networkEquipmentForceSubnetPoolIpv4WanId")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "resourcePoolId")
		delete(additionalProperties, "isVmGroup")
		delete(additionalProperties, "vmInstanceGroupId")
		delete(additionalProperties, "networkEndpointGroupId")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceGroupVariables struct {
	value *ServerInstanceGroupVariables
	isSet bool
}

func (v NullableServerInstanceGroupVariables) Get() *ServerInstanceGroupVariables {
	return v.value
}

func (v *NullableServerInstanceGroupVariables) Set(val *ServerInstanceGroupVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceGroupVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceGroupVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceGroupVariables(val *ServerInstanceGroupVariables) *NullableServerInstanceGroupVariables {
	return &NullableServerInstanceGroupVariables{value: val, isSet: true}
}

func (v NullableServerInstanceGroupVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceGroupVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


