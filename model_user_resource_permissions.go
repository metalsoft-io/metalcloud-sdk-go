/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UserResourcePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserResourcePermissions{}

// UserResourcePermissions struct for UserResourcePermissions
type UserResourcePermissions struct {
	// The new password reveal permissions of the user.
	PasswordRevealPermissions []UserPasswordRevealPermission `json:"passwordRevealPermissions,omitempty"`
	// The new special permissions of the user.
	SpecialPermissions []UserSpecialPermission `json:"specialPermissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserResourcePermissions UserResourcePermissions

// NewUserResourcePermissions instantiates a new UserResourcePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserResourcePermissions() *UserResourcePermissions {
	this := UserResourcePermissions{}
	return &this
}

// NewUserResourcePermissionsWithDefaults instantiates a new UserResourcePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserResourcePermissionsWithDefaults() *UserResourcePermissions {
	this := UserResourcePermissions{}
	return &this
}

// GetPasswordRevealPermissions returns the PasswordRevealPermissions field value if set, zero value otherwise.
func (o *UserResourcePermissions) GetPasswordRevealPermissions() []UserPasswordRevealPermission {
	if o == nil || IsNil(o.PasswordRevealPermissions) {
		var ret []UserPasswordRevealPermission
		return ret
	}
	return o.PasswordRevealPermissions
}

// GetPasswordRevealPermissionsOk returns a tuple with the PasswordRevealPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserResourcePermissions) GetPasswordRevealPermissionsOk() ([]UserPasswordRevealPermission, bool) {
	if o == nil || IsNil(o.PasswordRevealPermissions) {
		return nil, false
	}
	return o.PasswordRevealPermissions, true
}

// HasPasswordRevealPermissions returns a boolean if a field has been set.
func (o *UserResourcePermissions) HasPasswordRevealPermissions() bool {
	if o != nil && !IsNil(o.PasswordRevealPermissions) {
		return true
	}

	return false
}

// SetPasswordRevealPermissions gets a reference to the given []UserPasswordRevealPermission and assigns it to the PasswordRevealPermissions field.
func (o *UserResourcePermissions) SetPasswordRevealPermissions(v []UserPasswordRevealPermission) {
	o.PasswordRevealPermissions = v
}

// GetSpecialPermissions returns the SpecialPermissions field value if set, zero value otherwise.
func (o *UserResourcePermissions) GetSpecialPermissions() []UserSpecialPermission {
	if o == nil || IsNil(o.SpecialPermissions) {
		var ret []UserSpecialPermission
		return ret
	}
	return o.SpecialPermissions
}

// GetSpecialPermissionsOk returns a tuple with the SpecialPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserResourcePermissions) GetSpecialPermissionsOk() ([]UserSpecialPermission, bool) {
	if o == nil || IsNil(o.SpecialPermissions) {
		return nil, false
	}
	return o.SpecialPermissions, true
}

// HasSpecialPermissions returns a boolean if a field has been set.
func (o *UserResourcePermissions) HasSpecialPermissions() bool {
	if o != nil && !IsNil(o.SpecialPermissions) {
		return true
	}

	return false
}

// SetSpecialPermissions gets a reference to the given []UserSpecialPermission and assigns it to the SpecialPermissions field.
func (o *UserResourcePermissions) SetSpecialPermissions(v []UserSpecialPermission) {
	o.SpecialPermissions = v
}

func (o UserResourcePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserResourcePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PasswordRevealPermissions) {
		toSerialize["passwordRevealPermissions"] = o.PasswordRevealPermissions
	}
	if !IsNil(o.SpecialPermissions) {
		toSerialize["specialPermissions"] = o.SpecialPermissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserResourcePermissions) UnmarshalJSON(data []byte) (err error) {
	varUserResourcePermissions := _UserResourcePermissions{}

	err = json.Unmarshal(data, &varUserResourcePermissions)

	if err != nil {
		return err
	}

	*o = UserResourcePermissions(varUserResourcePermissions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "passwordRevealPermissions")
		delete(additionalProperties, "specialPermissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserResourcePermissions struct {
	value *UserResourcePermissions
	isSet bool
}

func (v NullableUserResourcePermissions) Get() *UserResourcePermissions {
	return v.value
}

func (v *NullableUserResourcePermissions) Set(val *UserResourcePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableUserResourcePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableUserResourcePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserResourcePermissions(val *UserResourcePermissions) *NullableUserResourcePermissions {
	return &NullableUserResourcePermissions{value: val, isSet: true}
}

func (v NullableUserResourcePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserResourcePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


