/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InfrastructureStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureStatistics{}

// InfrastructureStatistics struct for InfrastructureStatistics
type InfrastructureStatistics struct {
	// Statistics of job group for the infrastructure
	JobGroupStatistics *JobGroupStatistics `json:"jobGroupStatistics,omitempty"`
	// List of server types statistics
	ServerTypesForUsage []ServerTypesForUsage `json:"serverTypesForUsage"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureStatistics InfrastructureStatistics

// NewInfrastructureStatistics instantiates a new InfrastructureStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureStatistics(serverTypesForUsage []ServerTypesForUsage) *InfrastructureStatistics {
	this := InfrastructureStatistics{}
	this.ServerTypesForUsage = serverTypesForUsage
	return &this
}

// NewInfrastructureStatisticsWithDefaults instantiates a new InfrastructureStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureStatisticsWithDefaults() *InfrastructureStatistics {
	this := InfrastructureStatistics{}
	return &this
}

// GetJobGroupStatistics returns the JobGroupStatistics field value if set, zero value otherwise.
func (o *InfrastructureStatistics) GetJobGroupStatistics() JobGroupStatistics {
	if o == nil || IsNil(o.JobGroupStatistics) {
		var ret JobGroupStatistics
		return ret
	}
	return *o.JobGroupStatistics
}

// GetJobGroupStatisticsOk returns a tuple with the JobGroupStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfrastructureStatistics) GetJobGroupStatisticsOk() (*JobGroupStatistics, bool) {
	if o == nil || IsNil(o.JobGroupStatistics) {
		return nil, false
	}
	return o.JobGroupStatistics, true
}

// HasJobGroupStatistics returns a boolean if a field has been set.
func (o *InfrastructureStatistics) HasJobGroupStatistics() bool {
	if o != nil && !IsNil(o.JobGroupStatistics) {
		return true
	}

	return false
}

// SetJobGroupStatistics gets a reference to the given JobGroupStatistics and assigns it to the JobGroupStatistics field.
func (o *InfrastructureStatistics) SetJobGroupStatistics(v JobGroupStatistics) {
	o.JobGroupStatistics = &v
}

// GetServerTypesForUsage returns the ServerTypesForUsage field value
func (o *InfrastructureStatistics) GetServerTypesForUsage() []ServerTypesForUsage {
	if o == nil {
		var ret []ServerTypesForUsage
		return ret
	}

	return o.ServerTypesForUsage
}

// GetServerTypesForUsageOk returns a tuple with the ServerTypesForUsage field value
// and a boolean to check if the value has been set.
func (o *InfrastructureStatistics) GetServerTypesForUsageOk() ([]ServerTypesForUsage, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerTypesForUsage, true
}

// SetServerTypesForUsage sets field value
func (o *InfrastructureStatistics) SetServerTypesForUsage(v []ServerTypesForUsage) {
	o.ServerTypesForUsage = v
}

func (o InfrastructureStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JobGroupStatistics) {
		toSerialize["jobGroupStatistics"] = o.JobGroupStatistics
	}
	toSerialize["serverTypesForUsage"] = o.ServerTypesForUsage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverTypesForUsage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfrastructureStatistics := _InfrastructureStatistics{}

	err = json.Unmarshal(data, &varInfrastructureStatistics)

	if err != nil {
		return err
	}

	*o = InfrastructureStatistics(varInfrastructureStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "jobGroupStatistics")
		delete(additionalProperties, "serverTypesForUsage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureStatistics struct {
	value *InfrastructureStatistics
	isSet bool
}

func (v NullableInfrastructureStatistics) Get() *InfrastructureStatistics {
	return v.value
}

func (v *NullableInfrastructureStatistics) Set(val *InfrastructureStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureStatistics(val *InfrastructureStatistics) *NullableInfrastructureStatistics {
	return &NullableInfrastructureStatistics{value: val, isSet: true}
}

func (v NullableInfrastructureStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


