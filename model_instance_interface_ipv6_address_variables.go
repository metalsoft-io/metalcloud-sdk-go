/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceInterfaceIpv6AddressVariables type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceInterfaceIpv6AddressVariables{}

// InstanceInterfaceIpv6AddressVariables struct for InstanceInterfaceIpv6AddressVariables
type InstanceInterfaceIpv6AddressVariables struct {
	Ip string `json:"ip"`
	Cidr string `json:"cidr"`
	Netmask string `json:"netmask"`
	MaskBits float32 `json:"maskBits"`
	AdditionalProperties map[string]interface{}
}

type _InstanceInterfaceIpv6AddressVariables InstanceInterfaceIpv6AddressVariables

// NewInstanceInterfaceIpv6AddressVariables instantiates a new InstanceInterfaceIpv6AddressVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceInterfaceIpv6AddressVariables(ip string, cidr string, netmask string, maskBits float32) *InstanceInterfaceIpv6AddressVariables {
	this := InstanceInterfaceIpv6AddressVariables{}
	this.Ip = ip
	this.Cidr = cidr
	this.Netmask = netmask
	this.MaskBits = maskBits
	return &this
}

// NewInstanceInterfaceIpv6AddressVariablesWithDefaults instantiates a new InstanceInterfaceIpv6AddressVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceInterfaceIpv6AddressVariablesWithDefaults() *InstanceInterfaceIpv6AddressVariables {
	this := InstanceInterfaceIpv6AddressVariables{}
	return &this
}

// GetIp returns the Ip field value
func (o *InstanceInterfaceIpv6AddressVariables) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceIpv6AddressVariables) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *InstanceInterfaceIpv6AddressVariables) SetIp(v string) {
	o.Ip = v
}

// GetCidr returns the Cidr field value
func (o *InstanceInterfaceIpv6AddressVariables) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceIpv6AddressVariables) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *InstanceInterfaceIpv6AddressVariables) SetCidr(v string) {
	o.Cidr = v
}

// GetNetmask returns the Netmask field value
func (o *InstanceInterfaceIpv6AddressVariables) GetNetmask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceIpv6AddressVariables) GetNetmaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netmask, true
}

// SetNetmask sets field value
func (o *InstanceInterfaceIpv6AddressVariables) SetNetmask(v string) {
	o.Netmask = v
}

// GetMaskBits returns the MaskBits field value
func (o *InstanceInterfaceIpv6AddressVariables) GetMaskBits() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MaskBits
}

// GetMaskBitsOk returns a tuple with the MaskBits field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceIpv6AddressVariables) GetMaskBitsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaskBits, true
}

// SetMaskBits sets field value
func (o *InstanceInterfaceIpv6AddressVariables) SetMaskBits(v float32) {
	o.MaskBits = v
}

func (o InstanceInterfaceIpv6AddressVariables) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceInterfaceIpv6AddressVariables) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip
	toSerialize["cidr"] = o.Cidr
	toSerialize["netmask"] = o.Netmask
	toSerialize["maskBits"] = o.MaskBits

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceInterfaceIpv6AddressVariables) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip",
		"cidr",
		"netmask",
		"maskBits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceInterfaceIpv6AddressVariables := _InstanceInterfaceIpv6AddressVariables{}

	err = json.Unmarshal(data, &varInstanceInterfaceIpv6AddressVariables)

	if err != nil {
		return err
	}

	*o = InstanceInterfaceIpv6AddressVariables(varInstanceInterfaceIpv6AddressVariables)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip")
		delete(additionalProperties, "cidr")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "maskBits")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceInterfaceIpv6AddressVariables struct {
	value *InstanceInterfaceIpv6AddressVariables
	isSet bool
}

func (v NullableInstanceInterfaceIpv6AddressVariables) Get() *InstanceInterfaceIpv6AddressVariables {
	return v.value
}

func (v *NullableInstanceInterfaceIpv6AddressVariables) Set(val *InstanceInterfaceIpv6AddressVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceInterfaceIpv6AddressVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceInterfaceIpv6AddressVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceInterfaceIpv6AddressVariables(val *InstanceInterfaceIpv6AddressVariables) *NullableInstanceInterfaceIpv6AddressVariables {
	return &NullableInstanceInterfaceIpv6AddressVariables{value: val, isSet: true}
}

func (v NullableInstanceInterfaceIpv6AddressVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceInterfaceIpv6AddressVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


