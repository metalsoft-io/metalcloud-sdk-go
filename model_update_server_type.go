/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateServerType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateServerType{}

// UpdateServerType struct for UpdateServerType
type UpdateServerType struct {
	// The label of the server type.
	Label *string `json:"label,omitempty"`
	// The list of allowed SKU ids for the server type.
	AllowedVendorSkuIds []string `json:"allowedVendorSkuIds,omitempty"`
	// Flag specifying if the server type is experimental.
	IsExperimental *float32 `json:"isExperimental,omitempty"`
	// The tags for the server type.
	Tags []string `json:"tags,omitempty"`
	// The display name of the server type.
	DisplayName *string `json:"displayName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateServerType UpdateServerType

// NewUpdateServerType instantiates a new UpdateServerType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateServerType() *UpdateServerType {
	this := UpdateServerType{}
	var isExperimental float32 = 0
	this.IsExperimental = &isExperimental
	return &this
}

// NewUpdateServerTypeWithDefaults instantiates a new UpdateServerType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServerTypeWithDefaults() *UpdateServerType {
	this := UpdateServerType{}
	var isExperimental float32 = 0
	this.IsExperimental = &isExperimental
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateServerType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateServerType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateServerType) SetLabel(v string) {
	o.Label = &v
}

// GetAllowedVendorSkuIds returns the AllowedVendorSkuIds field value if set, zero value otherwise.
func (o *UpdateServerType) GetAllowedVendorSkuIds() []string {
	if o == nil || IsNil(o.AllowedVendorSkuIds) {
		var ret []string
		return ret
	}
	return o.AllowedVendorSkuIds
}

// GetAllowedVendorSkuIdsOk returns a tuple with the AllowedVendorSkuIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerType) GetAllowedVendorSkuIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedVendorSkuIds) {
		return nil, false
	}
	return o.AllowedVendorSkuIds, true
}

// HasAllowedVendorSkuIds returns a boolean if a field has been set.
func (o *UpdateServerType) HasAllowedVendorSkuIds() bool {
	if o != nil && !IsNil(o.AllowedVendorSkuIds) {
		return true
	}

	return false
}

// SetAllowedVendorSkuIds gets a reference to the given []string and assigns it to the AllowedVendorSkuIds field.
func (o *UpdateServerType) SetAllowedVendorSkuIds(v []string) {
	o.AllowedVendorSkuIds = v
}

// GetIsExperimental returns the IsExperimental field value if set, zero value otherwise.
func (o *UpdateServerType) GetIsExperimental() float32 {
	if o == nil || IsNil(o.IsExperimental) {
		var ret float32
		return ret
	}
	return *o.IsExperimental
}

// GetIsExperimentalOk returns a tuple with the IsExperimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerType) GetIsExperimentalOk() (*float32, bool) {
	if o == nil || IsNil(o.IsExperimental) {
		return nil, false
	}
	return o.IsExperimental, true
}

// HasIsExperimental returns a boolean if a field has been set.
func (o *UpdateServerType) HasIsExperimental() bool {
	if o != nil && !IsNil(o.IsExperimental) {
		return true
	}

	return false
}

// SetIsExperimental gets a reference to the given float32 and assigns it to the IsExperimental field.
func (o *UpdateServerType) SetIsExperimental(v float32) {
	o.IsExperimental = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateServerType) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerType) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateServerType) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateServerType) SetTags(v []string) {
	o.Tags = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *UpdateServerType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UpdateServerType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *UpdateServerType) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o UpdateServerType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateServerType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.AllowedVendorSkuIds) {
		toSerialize["allowedVendorSkuIds"] = o.AllowedVendorSkuIds
	}
	if !IsNil(o.IsExperimental) {
		toSerialize["isExperimental"] = o.IsExperimental
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateServerType) UnmarshalJSON(data []byte) (err error) {
	varUpdateServerType := _UpdateServerType{}

	err = json.Unmarshal(data, &varUpdateServerType)

	if err != nil {
		return err
	}

	*o = UpdateServerType(varUpdateServerType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "allowedVendorSkuIds")
		delete(additionalProperties, "isExperimental")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "displayName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateServerType struct {
	value *UpdateServerType
	isSet bool
}

func (v NullableUpdateServerType) Get() *UpdateServerType {
	return v.value
}

func (v *NullableUpdateServerType) Set(val *UpdateServerType) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateServerType) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateServerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateServerType(val *UpdateServerType) *NullableUpdateServerType {
	return &NullableUpdateServerType{value: val, isSet: true}
}

func (v NullableUpdateServerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateServerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


