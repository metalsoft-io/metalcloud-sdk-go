/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the FirmwareCatalogPaginatedList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirmwareCatalogPaginatedList{}

// FirmwareCatalogPaginatedList struct for FirmwareCatalogPaginatedList
type FirmwareCatalogPaginatedList struct {
	Data []FirmwareCatalog `json:"data"`
	// Metadata about the pagination of the response
	Meta PaginatedResponseMeta `json:"meta"`
	// Links to navigate through the paginated results
	Links *PaginatedResponseLinks `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FirmwareCatalogPaginatedList FirmwareCatalogPaginatedList

// NewFirmwareCatalogPaginatedList instantiates a new FirmwareCatalogPaginatedList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareCatalogPaginatedList(data []FirmwareCatalog, meta PaginatedResponseMeta) *FirmwareCatalogPaginatedList {
	this := FirmwareCatalogPaginatedList{}
	this.Data = data
	this.Meta = meta
	return &this
}

// NewFirmwareCatalogPaginatedListWithDefaults instantiates a new FirmwareCatalogPaginatedList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareCatalogPaginatedListWithDefaults() *FirmwareCatalogPaginatedList {
	this := FirmwareCatalogPaginatedList{}
	return &this
}

// GetData returns the Data field value
func (o *FirmwareCatalogPaginatedList) GetData() []FirmwareCatalog {
	if o == nil {
		var ret []FirmwareCatalog
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *FirmwareCatalogPaginatedList) GetDataOk() ([]FirmwareCatalog, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *FirmwareCatalogPaginatedList) SetData(v []FirmwareCatalog) {
	o.Data = v
}

// GetMeta returns the Meta field value
func (o *FirmwareCatalogPaginatedList) GetMeta() PaginatedResponseMeta {
	if o == nil {
		var ret PaginatedResponseMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *FirmwareCatalogPaginatedList) GetMetaOk() (*PaginatedResponseMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *FirmwareCatalogPaginatedList) SetMeta(v PaginatedResponseMeta) {
	o.Meta = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *FirmwareCatalogPaginatedList) GetLinks() PaginatedResponseLinks {
	if o == nil || IsNil(o.Links) {
		var ret PaginatedResponseLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareCatalogPaginatedList) GetLinksOk() (*PaginatedResponseLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *FirmwareCatalogPaginatedList) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given PaginatedResponseLinks and assigns it to the Links field.
func (o *FirmwareCatalogPaginatedList) SetLinks(v PaginatedResponseLinks) {
	o.Links = &v
}

func (o FirmwareCatalogPaginatedList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirmwareCatalogPaginatedList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["meta"] = o.Meta
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FirmwareCatalogPaginatedList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirmwareCatalogPaginatedList := _FirmwareCatalogPaginatedList{}

	err = json.Unmarshal(data, &varFirmwareCatalogPaginatedList)

	if err != nil {
		return err
	}

	*o = FirmwareCatalogPaginatedList(varFirmwareCatalogPaginatedList)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirmwareCatalogPaginatedList struct {
	value *FirmwareCatalogPaginatedList
	isSet bool
}

func (v NullableFirmwareCatalogPaginatedList) Get() *FirmwareCatalogPaginatedList {
	return v.value
}

func (v *NullableFirmwareCatalogPaginatedList) Set(val *FirmwareCatalogPaginatedList) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareCatalogPaginatedList) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareCatalogPaginatedList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareCatalogPaginatedList(val *FirmwareCatalogPaginatedList) *NullableFirmwareCatalogPaginatedList {
	return &NullableFirmwareCatalogPaginatedList{value: val, isSet: true}
}

func (v NullableFirmwareCatalogPaginatedList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareCatalogPaginatedList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


