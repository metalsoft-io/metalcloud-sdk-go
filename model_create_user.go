/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUser{}

// CreateUser struct for CreateUser
type CreateUser struct {
	// The display name of the user
	DisplayName string `json:"displayName"`
	// The email address of the user
	Email string `json:"email"`
	// The access level of the user
	AccessLevel *string `json:"accessLevel,omitempty"`
	// The password of the user
	Password *string `json:"password,omitempty"`
	// The redirect URL for the user
	RedirectUrl *string `json:"redirectUrl,omitempty"`
	// Whether the user has verified their email address
	EmailVerified *bool `json:"emailVerified,omitempty"`
	// Whether an account should be created with the user
	CreateWithAccount *bool `json:"createWithAccount,omitempty"`
	// The account ID of the user
	AccountId *float32 `json:"accountId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateUser CreateUser

// NewCreateUser instantiates a new CreateUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUser(displayName string, email string) *CreateUser {
	this := CreateUser{}
	this.DisplayName = displayName
	this.Email = email
	var emailVerified bool = false
	this.EmailVerified = &emailVerified
	var createWithAccount bool = false
	this.CreateWithAccount = &createWithAccount
	return &this
}

// NewCreateUserWithDefaults instantiates a new CreateUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserWithDefaults() *CreateUser {
	this := CreateUser{}
	var emailVerified bool = false
	this.EmailVerified = &emailVerified
	var createWithAccount bool = false
	this.CreateWithAccount = &createWithAccount
	return &this
}

// GetDisplayName returns the DisplayName field value
func (o *CreateUser) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *CreateUser) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *CreateUser) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEmail returns the Email field value
func (o *CreateUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateUser) SetEmail(v string) {
	o.Email = v
}

// GetAccessLevel returns the AccessLevel field value if set, zero value otherwise.
func (o *CreateUser) GetAccessLevel() string {
	if o == nil || IsNil(o.AccessLevel) {
		var ret string
		return ret
	}
	return *o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetAccessLevelOk() (*string, bool) {
	if o == nil || IsNil(o.AccessLevel) {
		return nil, false
	}
	return o.AccessLevel, true
}

// HasAccessLevel returns a boolean if a field has been set.
func (o *CreateUser) HasAccessLevel() bool {
	if o != nil && !IsNil(o.AccessLevel) {
		return true
	}

	return false
}

// SetAccessLevel gets a reference to the given string and assigns it to the AccessLevel field.
func (o *CreateUser) SetAccessLevel(v string) {
	o.AccessLevel = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CreateUser) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateUser) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *CreateUser) SetPassword(v string) {
	o.Password = &v
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *CreateUser) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl) {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetRedirectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RedirectUrl) {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *CreateUser) HasRedirectUrl() bool {
	if o != nil && !IsNil(o.RedirectUrl) {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *CreateUser) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise.
func (o *CreateUser) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified) {
		var ret bool
		return ret
	}
	return *o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return o.EmailVerified, true
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *CreateUser) HasEmailVerified() bool {
	if o != nil && !IsNil(o.EmailVerified) {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given bool and assigns it to the EmailVerified field.
func (o *CreateUser) SetEmailVerified(v bool) {
	o.EmailVerified = &v
}

// GetCreateWithAccount returns the CreateWithAccount field value if set, zero value otherwise.
func (o *CreateUser) GetCreateWithAccount() bool {
	if o == nil || IsNil(o.CreateWithAccount) {
		var ret bool
		return ret
	}
	return *o.CreateWithAccount
}

// GetCreateWithAccountOk returns a tuple with the CreateWithAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetCreateWithAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateWithAccount) {
		return nil, false
	}
	return o.CreateWithAccount, true
}

// HasCreateWithAccount returns a boolean if a field has been set.
func (o *CreateUser) HasCreateWithAccount() bool {
	if o != nil && !IsNil(o.CreateWithAccount) {
		return true
	}

	return false
}

// SetCreateWithAccount gets a reference to the given bool and assigns it to the CreateWithAccount field.
func (o *CreateUser) SetCreateWithAccount(v bool) {
	o.CreateWithAccount = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CreateUser) GetAccountId() float32 {
	if o == nil || IsNil(o.AccountId) {
		var ret float32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUser) GetAccountIdOk() (*float32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CreateUser) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given float32 and assigns it to the AccountId field.
func (o *CreateUser) SetAccountId(v float32) {
	o.AccountId = &v
}

func (o CreateUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["email"] = o.Email
	if !IsNil(o.AccessLevel) {
		toSerialize["accessLevel"] = o.AccessLevel
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.RedirectUrl) {
		toSerialize["redirectUrl"] = o.RedirectUrl
	}
	if !IsNil(o.EmailVerified) {
		toSerialize["emailVerified"] = o.EmailVerified
	}
	if !IsNil(o.CreateWithAccount) {
		toSerialize["createWithAccount"] = o.CreateWithAccount
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUser := _CreateUser{}

	err = json.Unmarshal(data, &varCreateUser)

	if err != nil {
		return err
	}

	*o = CreateUser(varCreateUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "email")
		delete(additionalProperties, "accessLevel")
		delete(additionalProperties, "password")
		delete(additionalProperties, "redirectUrl")
		delete(additionalProperties, "emailVerified")
		delete(additionalProperties, "createWithAccount")
		delete(additionalProperties, "accountId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateUser struct {
	value *CreateUser
	isSet bool
}

func (v NullableCreateUser) Get() *CreateUser {
	return v.value
}

func (v *NullableCreateUser) Set(val *CreateUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUser(val *CreateUser) *NullableCreateUser {
	return &NullableCreateUser{value: val, isSet: true}
}

func (v NullableCreateUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


