/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateVMPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVMPool{}

// CreateVMPool struct for CreateVMPool
type CreateVMPool struct {
	// Id of the site for the VM
	SiteId float32 `json:"siteId"`
	// Host of the VM Pool
	ManagementHost string `json:"managementHost"`
	// Port of the VM Pool
	ManagementPort float32 `json:"managementPort"`
	// Name of the VM Pool
	Name string `json:"name"`
	// Description of the VM Pool
	Description *string `json:"description,omitempty"`
	// Type of the VM Pool
	Type string `json:"type"`
	// Certificate of the VM Pool
	Certificate string `json:"certificate"`
	// Flag to indicate if the VM Pool is in maintenance mode. 1 for true, 0 for false. Default is 0.
	InMaintenance *float32 `json:"inMaintenance,omitempty"`
	// Flag to indicate if the VM Pool is experimental. 1 for true, 0 for false. Default is 0.
	IsExperimental *float32 `json:"isExperimental,omitempty"`
	// Tags for the VM Pool.
	Tags []string `json:"tags,omitempty"`
	// Private key of the VM Pool
	PrivateKey string `json:"privateKey"`
	AdditionalProperties map[string]interface{}
}

type _CreateVMPool CreateVMPool

// NewCreateVMPool instantiates a new CreateVMPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVMPool(siteId float32, managementHost string, managementPort float32, name string, type_ string, certificate string, privateKey string) *CreateVMPool {
	this := CreateVMPool{}
	this.SiteId = siteId
	this.ManagementHost = managementHost
	this.ManagementPort = managementPort
	this.Name = name
	this.Type = type_
	this.Certificate = certificate
	this.PrivateKey = privateKey
	return &this
}

// NewCreateVMPoolWithDefaults instantiates a new CreateVMPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVMPoolWithDefaults() *CreateVMPool {
	this := CreateVMPool{}
	return &this
}

// GetSiteId returns the SiteId field value
func (o *CreateVMPool) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *CreateVMPool) SetSiteId(v float32) {
	o.SiteId = v
}

// GetManagementHost returns the ManagementHost field value
func (o *CreateVMPool) GetManagementHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ManagementHost
}

// GetManagementHostOk returns a tuple with the ManagementHost field value
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetManagementHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementHost, true
}

// SetManagementHost sets field value
func (o *CreateVMPool) SetManagementHost(v string) {
	o.ManagementHost = v
}

// GetManagementPort returns the ManagementPort field value
func (o *CreateVMPool) GetManagementPort() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ManagementPort
}

// GetManagementPortOk returns a tuple with the ManagementPort field value
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetManagementPortOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ManagementPort, true
}

// SetManagementPort sets field value
func (o *CreateVMPool) SetManagementPort(v float32) {
	o.ManagementPort = v
}

// GetName returns the Name field value
func (o *CreateVMPool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateVMPool) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateVMPool) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateVMPool) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateVMPool) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *CreateVMPool) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateVMPool) SetType(v string) {
	o.Type = v
}

// GetCertificate returns the Certificate field value
func (o *CreateVMPool) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *CreateVMPool) SetCertificate(v string) {
	o.Certificate = v
}

// GetInMaintenance returns the InMaintenance field value if set, zero value otherwise.
func (o *CreateVMPool) GetInMaintenance() float32 {
	if o == nil || IsNil(o.InMaintenance) {
		var ret float32
		return ret
	}
	return *o.InMaintenance
}

// GetInMaintenanceOk returns a tuple with the InMaintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetInMaintenanceOk() (*float32, bool) {
	if o == nil || IsNil(o.InMaintenance) {
		return nil, false
	}
	return o.InMaintenance, true
}

// HasInMaintenance returns a boolean if a field has been set.
func (o *CreateVMPool) HasInMaintenance() bool {
	if o != nil && !IsNil(o.InMaintenance) {
		return true
	}

	return false
}

// SetInMaintenance gets a reference to the given float32 and assigns it to the InMaintenance field.
func (o *CreateVMPool) SetInMaintenance(v float32) {
	o.InMaintenance = &v
}

// GetIsExperimental returns the IsExperimental field value if set, zero value otherwise.
func (o *CreateVMPool) GetIsExperimental() float32 {
	if o == nil || IsNil(o.IsExperimental) {
		var ret float32
		return ret
	}
	return *o.IsExperimental
}

// GetIsExperimentalOk returns a tuple with the IsExperimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetIsExperimentalOk() (*float32, bool) {
	if o == nil || IsNil(o.IsExperimental) {
		return nil, false
	}
	return o.IsExperimental, true
}

// HasIsExperimental returns a boolean if a field has been set.
func (o *CreateVMPool) HasIsExperimental() bool {
	if o != nil && !IsNil(o.IsExperimental) {
		return true
	}

	return false
}

// SetIsExperimental gets a reference to the given float32 and assigns it to the IsExperimental field.
func (o *CreateVMPool) SetIsExperimental(v float32) {
	o.IsExperimental = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateVMPool) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateVMPool) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CreateVMPool) SetTags(v []string) {
	o.Tags = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *CreateVMPool) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *CreateVMPool) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *CreateVMPool) SetPrivateKey(v string) {
	o.PrivateKey = v
}

func (o CreateVMPool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVMPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["siteId"] = o.SiteId
	toSerialize["managementHost"] = o.ManagementHost
	toSerialize["managementPort"] = o.ManagementPort
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	toSerialize["certificate"] = o.Certificate
	if !IsNil(o.InMaintenance) {
		toSerialize["inMaintenance"] = o.InMaintenance
	}
	if !IsNil(o.IsExperimental) {
		toSerialize["isExperimental"] = o.IsExperimental
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["privateKey"] = o.PrivateKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateVMPool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"siteId",
		"managementHost",
		"managementPort",
		"name",
		"type",
		"certificate",
		"privateKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVMPool := _CreateVMPool{}

	err = json.Unmarshal(data, &varCreateVMPool)

	if err != nil {
		return err
	}

	*o = CreateVMPool(varCreateVMPool)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "managementHost")
		delete(additionalProperties, "managementPort")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "inMaintenance")
		delete(additionalProperties, "isExperimental")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "privateKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateVMPool struct {
	value *CreateVMPool
	isSet bool
}

func (v NullableCreateVMPool) Get() *CreateVMPool {
	return v.value
}

func (v *NullableCreateVMPool) Set(val *CreateVMPool) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVMPool) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVMPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVMPool(val *CreateVMPool) *NullableCreateVMPool {
	return &NullableCreateVMPool{value: val, isSet: true}
}

func (v NullableCreateVMPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVMPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


