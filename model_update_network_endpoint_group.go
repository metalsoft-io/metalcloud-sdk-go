/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateNetworkEndpointGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkEndpointGroup{}

// UpdateNetworkEndpointGroup struct for UpdateNetworkEndpointGroup
type UpdateNetworkEndpointGroup struct {
	// The ID of the site where the entity is located.
	SiteId *float32 `json:"siteId,omitempty"`
	// The name of the network endpoint group
	Name *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateNetworkEndpointGroup UpdateNetworkEndpointGroup

// NewUpdateNetworkEndpointGroup instantiates a new UpdateNetworkEndpointGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkEndpointGroup() *UpdateNetworkEndpointGroup {
	this := UpdateNetworkEndpointGroup{}
	return &this
}

// NewUpdateNetworkEndpointGroupWithDefaults instantiates a new UpdateNetworkEndpointGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkEndpointGroupWithDefaults() *UpdateNetworkEndpointGroup {
	this := UpdateNetworkEndpointGroup{}
	return &this
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *UpdateNetworkEndpointGroup) GetSiteId() float32 {
	if o == nil || IsNil(o.SiteId) {
		var ret float32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkEndpointGroup) GetSiteIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *UpdateNetworkEndpointGroup) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given float32 and assigns it to the SiteId field.
func (o *UpdateNetworkEndpointGroup) SetSiteId(v float32) {
	o.SiteId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateNetworkEndpointGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkEndpointGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateNetworkEndpointGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateNetworkEndpointGroup) SetName(v string) {
	o.Name = &v
}

func (o UpdateNetworkEndpointGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkEndpointGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateNetworkEndpointGroup) UnmarshalJSON(data []byte) (err error) {
	varUpdateNetworkEndpointGroup := _UpdateNetworkEndpointGroup{}

	err = json.Unmarshal(data, &varUpdateNetworkEndpointGroup)

	if err != nil {
		return err
	}

	*o = UpdateNetworkEndpointGroup(varUpdateNetworkEndpointGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateNetworkEndpointGroup struct {
	value *UpdateNetworkEndpointGroup
	isSet bool
}

func (v NullableUpdateNetworkEndpointGroup) Get() *UpdateNetworkEndpointGroup {
	return v.value
}

func (v *NullableUpdateNetworkEndpointGroup) Set(val *UpdateNetworkEndpointGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkEndpointGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkEndpointGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkEndpointGroup(val *UpdateNetworkEndpointGroup) *NullableUpdateNetworkEndpointGroup {
	return &NullableUpdateNetworkEndpointGroup{value: val, isSet: true}
}

func (v NullableUpdateNetworkEndpointGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkEndpointGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


