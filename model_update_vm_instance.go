/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateVMInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateVMInstance{}

// UpdateVMInstance struct for UpdateVMInstance
type UpdateVMInstance struct {
	// Tags for the VM Instance.
	Tags []string `json:"tags,omitempty"`
	// Disk size in GB for the VM Instance.
	DiskSizeGB *float32 `json:"diskSizeGB,omitempty"`
	// Custom variables for the VM Instance.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateVMInstance UpdateVMInstance

// NewUpdateVMInstance instantiates a new UpdateVMInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVMInstance() *UpdateVMInstance {
	this := UpdateVMInstance{}
	return &this
}

// NewUpdateVMInstanceWithDefaults instantiates a new UpdateVMInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVMInstanceWithDefaults() *UpdateVMInstance {
	this := UpdateVMInstance{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateVMInstance) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMInstance) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateVMInstance) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateVMInstance) SetTags(v []string) {
	o.Tags = v
}

// GetDiskSizeGB returns the DiskSizeGB field value if set, zero value otherwise.
func (o *UpdateVMInstance) GetDiskSizeGB() float32 {
	if o == nil || IsNil(o.DiskSizeGB) {
		var ret float32
		return ret
	}
	return *o.DiskSizeGB
}

// GetDiskSizeGBOk returns a tuple with the DiskSizeGB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMInstance) GetDiskSizeGBOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskSizeGB) {
		return nil, false
	}
	return o.DiskSizeGB, true
}

// HasDiskSizeGB returns a boolean if a field has been set.
func (o *UpdateVMInstance) HasDiskSizeGB() bool {
	if o != nil && !IsNil(o.DiskSizeGB) {
		return true
	}

	return false
}

// SetDiskSizeGB gets a reference to the given float32 and assigns it to the DiskSizeGB field.
func (o *UpdateVMInstance) SetDiskSizeGB(v float32) {
	o.DiskSizeGB = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *UpdateVMInstance) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVMInstance) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *UpdateVMInstance) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *UpdateVMInstance) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

func (o UpdateVMInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateVMInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.DiskSizeGB) {
		toSerialize["diskSizeGB"] = o.DiskSizeGB
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateVMInstance) UnmarshalJSON(data []byte) (err error) {
	varUpdateVMInstance := _UpdateVMInstance{}

	err = json.Unmarshal(data, &varUpdateVMInstance)

	if err != nil {
		return err
	}

	*o = UpdateVMInstance(varUpdateVMInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "diskSizeGB")
		delete(additionalProperties, "customVariables")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateVMInstance struct {
	value *UpdateVMInstance
	isSet bool
}

func (v NullableUpdateVMInstance) Get() *UpdateVMInstance {
	return v.value
}

func (v *NullableUpdateVMInstance) Set(val *UpdateVMInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVMInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVMInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVMInstance(val *UpdateVMInstance) *NullableUpdateVMInstance {
	return &NullableUpdateVMInstance{value: val, isSet: true}
}

func (v NullableUpdateVMInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVMInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


