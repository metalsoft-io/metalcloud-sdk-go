/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceGroupOSInstallationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceGroupOSInstallationData{}

// ServerInstanceGroupOSInstallationData struct for ServerInstanceGroupOSInstallationData
type ServerInstanceGroupOSInstallationData struct {
	// The Product Instance ID.
	Id int32 `json:"id"`
	// The Product Instance label. Will be automatically generated if not provided.
	Label string `json:"label"`
	// Subdomain permanent of the Product Instance.
	SubdomainPermanent *string `json:"subdomainPermanent,omitempty"`
	ServerGroupName *string `json:"serverGroupName,omitempty"`
	// Object containing custom variables and variable overrides.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// Flag to indicate if the Server Instance Group is belongs to a VM.
	IsVmGroup int32 `json:"isVmGroup"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceGroupOSInstallationData ServerInstanceGroupOSInstallationData

// NewServerInstanceGroupOSInstallationData instantiates a new ServerInstanceGroupOSInstallationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceGroupOSInstallationData(id int32, label string, isVmGroup int32) *ServerInstanceGroupOSInstallationData {
	this := ServerInstanceGroupOSInstallationData{}
	this.Id = id
	this.Label = label
	this.IsVmGroup = isVmGroup
	return &this
}

// NewServerInstanceGroupOSInstallationDataWithDefaults instantiates a new ServerInstanceGroupOSInstallationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceGroupOSInstallationDataWithDefaults() *ServerInstanceGroupOSInstallationData {
	this := ServerInstanceGroupOSInstallationData{}
	return &this
}

// GetId returns the Id field value
func (o *ServerInstanceGroupOSInstallationData) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupOSInstallationData) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerInstanceGroupOSInstallationData) SetId(v int32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *ServerInstanceGroupOSInstallationData) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupOSInstallationData) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ServerInstanceGroupOSInstallationData) SetLabel(v string) {
	o.Label = v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value if set, zero value otherwise.
func (o *ServerInstanceGroupOSInstallationData) GetSubdomainPermanent() string {
	if o == nil || IsNil(o.SubdomainPermanent) {
		var ret string
		return ret
	}
	return *o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupOSInstallationData) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil || IsNil(o.SubdomainPermanent) {
		return nil, false
	}
	return o.SubdomainPermanent, true
}

// HasSubdomainPermanent returns a boolean if a field has been set.
func (o *ServerInstanceGroupOSInstallationData) HasSubdomainPermanent() bool {
	if o != nil && !IsNil(o.SubdomainPermanent) {
		return true
	}

	return false
}

// SetSubdomainPermanent gets a reference to the given string and assigns it to the SubdomainPermanent field.
func (o *ServerInstanceGroupOSInstallationData) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = &v
}

// GetServerGroupName returns the ServerGroupName field value if set, zero value otherwise.
func (o *ServerInstanceGroupOSInstallationData) GetServerGroupName() string {
	if o == nil || IsNil(o.ServerGroupName) {
		var ret string
		return ret
	}
	return *o.ServerGroupName
}

// GetServerGroupNameOk returns a tuple with the ServerGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupOSInstallationData) GetServerGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerGroupName) {
		return nil, false
	}
	return o.ServerGroupName, true
}

// HasServerGroupName returns a boolean if a field has been set.
func (o *ServerInstanceGroupOSInstallationData) HasServerGroupName() bool {
	if o != nil && !IsNil(o.ServerGroupName) {
		return true
	}

	return false
}

// SetServerGroupName gets a reference to the given string and assigns it to the ServerGroupName field.
func (o *ServerInstanceGroupOSInstallationData) SetServerGroupName(v string) {
	o.ServerGroupName = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *ServerInstanceGroupOSInstallationData) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupOSInstallationData) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *ServerInstanceGroupOSInstallationData) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *ServerInstanceGroupOSInstallationData) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetIsVmGroup returns the IsVmGroup field value
func (o *ServerInstanceGroupOSInstallationData) GetIsVmGroup() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IsVmGroup
}

// GetIsVmGroupOk returns a tuple with the IsVmGroup field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceGroupOSInstallationData) GetIsVmGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsVmGroup, true
}

// SetIsVmGroup sets field value
func (o *ServerInstanceGroupOSInstallationData) SetIsVmGroup(v int32) {
	o.IsVmGroup = v
}

func (o ServerInstanceGroupOSInstallationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceGroupOSInstallationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	if !IsNil(o.SubdomainPermanent) {
		toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	}
	if !IsNil(o.ServerGroupName) {
		toSerialize["serverGroupName"] = o.ServerGroupName
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	toSerialize["isVmGroup"] = o.IsVmGroup

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceGroupOSInstallationData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"isVmGroup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceGroupOSInstallationData := _ServerInstanceGroupOSInstallationData{}

	err = json.Unmarshal(data, &varServerInstanceGroupOSInstallationData)

	if err != nil {
		return err
	}

	*o = ServerInstanceGroupOSInstallationData(varServerInstanceGroupOSInstallationData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "serverGroupName")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "isVmGroup")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceGroupOSInstallationData struct {
	value *ServerInstanceGroupOSInstallationData
	isSet bool
}

func (v NullableServerInstanceGroupOSInstallationData) Get() *ServerInstanceGroupOSInstallationData {
	return v.value
}

func (v *NullableServerInstanceGroupOSInstallationData) Set(val *ServerInstanceGroupOSInstallationData) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceGroupOSInstallationData) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceGroupOSInstallationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceGroupOSInstallationData(val *ServerInstanceGroupOSInstallationData) *NullableServerInstanceGroupOSInstallationData {
	return &NullableServerInstanceGroupOSInstallationData{value: val, isSet: true}
}

func (v NullableServerInstanceGroupOSInstallationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceGroupOSInstallationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


