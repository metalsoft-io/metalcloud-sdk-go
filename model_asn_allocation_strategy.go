/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// AsnAllocationStrategy the model 'AsnAllocationStrategy'
type AsnAllocationStrategy string

// List of AsnAllocationStrategy
const (
	ASNALLOCATIONSTRATEGY_SAME_ASN_ALL AsnAllocationStrategy = "same_asn_all"
	ASNALLOCATIONSTRATEGY_UNIQUE_ASN_ALL AsnAllocationStrategy = "unique_asn_all"
	ASNALLOCATIONSTRATEGY_UNIQUE_ASN_LEAFS_SAME_ASN_SPINES AsnAllocationStrategy = "unique_asn_leafs_same_asn_spines"
	ASNALLOCATIONSTRATEGY_UNIQUE_ASN_MLAG_LEAF_PAIRS_SAME_ASN_SPINES AsnAllocationStrategy = "unique_asn_mlag_leaf_pairs_same_asn_spines"
)

// All allowed values of AsnAllocationStrategy enum
var AllowedAsnAllocationStrategyEnumValues = []AsnAllocationStrategy{
	"same_asn_all",
	"unique_asn_all",
	"unique_asn_leafs_same_asn_spines",
	"unique_asn_mlag_leaf_pairs_same_asn_spines",
}

func (v *AsnAllocationStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AsnAllocationStrategy(value)
	for _, existing := range AllowedAsnAllocationStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AsnAllocationStrategy", value)
}

// NewAsnAllocationStrategyFromValue returns a pointer to a valid AsnAllocationStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAsnAllocationStrategyFromValue(v string) (*AsnAllocationStrategy, error) {
	ev := AsnAllocationStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AsnAllocationStrategy: valid values are %v", v, AllowedAsnAllocationStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AsnAllocationStrategy) IsValid() bool {
	for _, existing := range AllowedAsnAllocationStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AsnAllocationStrategy value
func (v AsnAllocationStrategy) Ptr() *AsnAllocationStrategy {
	return &v
}

type NullableAsnAllocationStrategy struct {
	value *AsnAllocationStrategy
	isSet bool
}

func (v NullableAsnAllocationStrategy) Get() *AsnAllocationStrategy {
	return v.value
}

func (v *NullableAsnAllocationStrategy) Set(val *AsnAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableAsnAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableAsnAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsnAllocationStrategy(val *AsnAllocationStrategy) *NullableAsnAllocationStrategy {
	return &NullableAsnAllocationStrategy{value: val, isSet: true}
}

func (v NullableAsnAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsnAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

