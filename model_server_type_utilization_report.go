/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerTypeUtilizationReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTypeUtilizationReport{}

// ServerTypeUtilizationReport struct for ServerTypeUtilizationReport
type ServerTypeUtilizationReport struct {
	// The utilization report for the server types grouped by server ram gb.
	GroupByServerRamGb ServerTypeUtilizationReportGrouped `json:"groupByServerRamGb"`
	// The utilization report for the server types grouped by server type name.
	GroupByServerTypeName ServerTypeUtilizationReportGrouped `json:"groupByServerTypeName"`
	// The utilization report for the server types grouped by server product name.
	GroupByServerProductName ServerTypeUtilizationReportGrouped `json:"groupByServerProductName"`
	// The utilization report for the server types grouped by user id.
	GroupByUserId ServerTypeUtilizationReportGrouped `json:"groupByUserId"`
	AdditionalProperties map[string]interface{}
}

type _ServerTypeUtilizationReport ServerTypeUtilizationReport

// NewServerTypeUtilizationReport instantiates a new ServerTypeUtilizationReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTypeUtilizationReport(groupByServerRamGb ServerTypeUtilizationReportGrouped, groupByServerTypeName ServerTypeUtilizationReportGrouped, groupByServerProductName ServerTypeUtilizationReportGrouped, groupByUserId ServerTypeUtilizationReportGrouped) *ServerTypeUtilizationReport {
	this := ServerTypeUtilizationReport{}
	this.GroupByServerRamGb = groupByServerRamGb
	this.GroupByServerTypeName = groupByServerTypeName
	this.GroupByServerProductName = groupByServerProductName
	this.GroupByUserId = groupByUserId
	return &this
}

// NewServerTypeUtilizationReportWithDefaults instantiates a new ServerTypeUtilizationReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeUtilizationReportWithDefaults() *ServerTypeUtilizationReport {
	this := ServerTypeUtilizationReport{}
	return &this
}

// GetGroupByServerRamGb returns the GroupByServerRamGb field value
func (o *ServerTypeUtilizationReport) GetGroupByServerRamGb() ServerTypeUtilizationReportGrouped {
	if o == nil {
		var ret ServerTypeUtilizationReportGrouped
		return ret
	}

	return o.GroupByServerRamGb
}

// GetGroupByServerRamGbOk returns a tuple with the GroupByServerRamGb field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReport) GetGroupByServerRamGbOk() (*ServerTypeUtilizationReportGrouped, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupByServerRamGb, true
}

// SetGroupByServerRamGb sets field value
func (o *ServerTypeUtilizationReport) SetGroupByServerRamGb(v ServerTypeUtilizationReportGrouped) {
	o.GroupByServerRamGb = v
}

// GetGroupByServerTypeName returns the GroupByServerTypeName field value
func (o *ServerTypeUtilizationReport) GetGroupByServerTypeName() ServerTypeUtilizationReportGrouped {
	if o == nil {
		var ret ServerTypeUtilizationReportGrouped
		return ret
	}

	return o.GroupByServerTypeName
}

// GetGroupByServerTypeNameOk returns a tuple with the GroupByServerTypeName field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReport) GetGroupByServerTypeNameOk() (*ServerTypeUtilizationReportGrouped, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupByServerTypeName, true
}

// SetGroupByServerTypeName sets field value
func (o *ServerTypeUtilizationReport) SetGroupByServerTypeName(v ServerTypeUtilizationReportGrouped) {
	o.GroupByServerTypeName = v
}

// GetGroupByServerProductName returns the GroupByServerProductName field value
func (o *ServerTypeUtilizationReport) GetGroupByServerProductName() ServerTypeUtilizationReportGrouped {
	if o == nil {
		var ret ServerTypeUtilizationReportGrouped
		return ret
	}

	return o.GroupByServerProductName
}

// GetGroupByServerProductNameOk returns a tuple with the GroupByServerProductName field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReport) GetGroupByServerProductNameOk() (*ServerTypeUtilizationReportGrouped, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupByServerProductName, true
}

// SetGroupByServerProductName sets field value
func (o *ServerTypeUtilizationReport) SetGroupByServerProductName(v ServerTypeUtilizationReportGrouped) {
	o.GroupByServerProductName = v
}

// GetGroupByUserId returns the GroupByUserId field value
func (o *ServerTypeUtilizationReport) GetGroupByUserId() ServerTypeUtilizationReportGrouped {
	if o == nil {
		var ret ServerTypeUtilizationReportGrouped
		return ret
	}

	return o.GroupByUserId
}

// GetGroupByUserIdOk returns a tuple with the GroupByUserId field value
// and a boolean to check if the value has been set.
func (o *ServerTypeUtilizationReport) GetGroupByUserIdOk() (*ServerTypeUtilizationReportGrouped, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupByUserId, true
}

// SetGroupByUserId sets field value
func (o *ServerTypeUtilizationReport) SetGroupByUserId(v ServerTypeUtilizationReportGrouped) {
	o.GroupByUserId = v
}

func (o ServerTypeUtilizationReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTypeUtilizationReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupByServerRamGb"] = o.GroupByServerRamGb
	toSerialize["groupByServerTypeName"] = o.GroupByServerTypeName
	toSerialize["groupByServerProductName"] = o.GroupByServerProductName
	toSerialize["groupByUserId"] = o.GroupByUserId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerTypeUtilizationReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupByServerRamGb",
		"groupByServerTypeName",
		"groupByServerProductName",
		"groupByUserId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerTypeUtilizationReport := _ServerTypeUtilizationReport{}

	err = json.Unmarshal(data, &varServerTypeUtilizationReport)

	if err != nil {
		return err
	}

	*o = ServerTypeUtilizationReport(varServerTypeUtilizationReport)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "groupByServerRamGb")
		delete(additionalProperties, "groupByServerTypeName")
		delete(additionalProperties, "groupByServerProductName")
		delete(additionalProperties, "groupByUserId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerTypeUtilizationReport struct {
	value *ServerTypeUtilizationReport
	isSet bool
}

func (v NullableServerTypeUtilizationReport) Get() *ServerTypeUtilizationReport {
	return v.value
}

func (v *NullableServerTypeUtilizationReport) Set(val *ServerTypeUtilizationReport) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTypeUtilizationReport) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTypeUtilizationReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTypeUtilizationReport(val *ServerTypeUtilizationReport) *NullableServerTypeUtilizationReport {
	return &NullableServerTypeUtilizationReport{value: val, isSet: true}
}

func (v NullableServerTypeUtilizationReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTypeUtilizationReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


