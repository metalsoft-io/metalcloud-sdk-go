/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AccountLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountLimits{}

// AccountLimits struct for AccountLimits
type AccountLimits struct {
	UserResourceServerTypeNameToMaxCount map[string]interface{} `json:"userResourceServerTypeNameToMaxCount,omitempty"`
	WanSubnetPrefixSizeToMaxCount map[string]interface{} `json:"wanSubnetPrefixSizeToMaxCount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountLimits AccountLimits

// NewAccountLimits instantiates a new AccountLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountLimits() *AccountLimits {
	this := AccountLimits{}
	return &this
}

// NewAccountLimitsWithDefaults instantiates a new AccountLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountLimitsWithDefaults() *AccountLimits {
	this := AccountLimits{}
	return &this
}

// GetUserResourceServerTypeNameToMaxCount returns the UserResourceServerTypeNameToMaxCount field value if set, zero value otherwise.
func (o *AccountLimits) GetUserResourceServerTypeNameToMaxCount() map[string]interface{} {
	if o == nil || IsNil(o.UserResourceServerTypeNameToMaxCount) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserResourceServerTypeNameToMaxCount
}

// GetUserResourceServerTypeNameToMaxCountOk returns a tuple with the UserResourceServerTypeNameToMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountLimits) GetUserResourceServerTypeNameToMaxCountOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserResourceServerTypeNameToMaxCount) {
		return map[string]interface{}{}, false
	}
	return o.UserResourceServerTypeNameToMaxCount, true
}

// HasUserResourceServerTypeNameToMaxCount returns a boolean if a field has been set.
func (o *AccountLimits) HasUserResourceServerTypeNameToMaxCount() bool {
	if o != nil && !IsNil(o.UserResourceServerTypeNameToMaxCount) {
		return true
	}

	return false
}

// SetUserResourceServerTypeNameToMaxCount gets a reference to the given map[string]interface{} and assigns it to the UserResourceServerTypeNameToMaxCount field.
func (o *AccountLimits) SetUserResourceServerTypeNameToMaxCount(v map[string]interface{}) {
	o.UserResourceServerTypeNameToMaxCount = v
}

// GetWanSubnetPrefixSizeToMaxCount returns the WanSubnetPrefixSizeToMaxCount field value if set, zero value otherwise.
func (o *AccountLimits) GetWanSubnetPrefixSizeToMaxCount() map[string]interface{} {
	if o == nil || IsNil(o.WanSubnetPrefixSizeToMaxCount) {
		var ret map[string]interface{}
		return ret
	}
	return o.WanSubnetPrefixSizeToMaxCount
}

// GetWanSubnetPrefixSizeToMaxCountOk returns a tuple with the WanSubnetPrefixSizeToMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountLimits) GetWanSubnetPrefixSizeToMaxCountOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.WanSubnetPrefixSizeToMaxCount) {
		return map[string]interface{}{}, false
	}
	return o.WanSubnetPrefixSizeToMaxCount, true
}

// HasWanSubnetPrefixSizeToMaxCount returns a boolean if a field has been set.
func (o *AccountLimits) HasWanSubnetPrefixSizeToMaxCount() bool {
	if o != nil && !IsNil(o.WanSubnetPrefixSizeToMaxCount) {
		return true
	}

	return false
}

// SetWanSubnetPrefixSizeToMaxCount gets a reference to the given map[string]interface{} and assigns it to the WanSubnetPrefixSizeToMaxCount field.
func (o *AccountLimits) SetWanSubnetPrefixSizeToMaxCount(v map[string]interface{}) {
	o.WanSubnetPrefixSizeToMaxCount = v
}

func (o AccountLimits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserResourceServerTypeNameToMaxCount) {
		toSerialize["userResourceServerTypeNameToMaxCount"] = o.UserResourceServerTypeNameToMaxCount
	}
	if !IsNil(o.WanSubnetPrefixSizeToMaxCount) {
		toSerialize["wanSubnetPrefixSizeToMaxCount"] = o.WanSubnetPrefixSizeToMaxCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountLimits) UnmarshalJSON(data []byte) (err error) {
	varAccountLimits := _AccountLimits{}

	err = json.Unmarshal(data, &varAccountLimits)

	if err != nil {
		return err
	}

	*o = AccountLimits(varAccountLimits)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "userResourceServerTypeNameToMaxCount")
		delete(additionalProperties, "wanSubnetPrefixSizeToMaxCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountLimits struct {
	value *AccountLimits
	isSet bool
}

func (v NullableAccountLimits) Get() *AccountLimits {
	return v.value
}

func (v *NullableAccountLimits) Set(val *AccountLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountLimits(val *AccountLimits) *NullableAccountLimits {
	return &NullableAccountLimits{value: val, isSet: true}
}

func (v NullableAccountLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


