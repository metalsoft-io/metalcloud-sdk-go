/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtensionInfrastructureIpRangesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionInfrastructureIpRangesDto{}

// ExtensionInfrastructureIpRangesDto struct for ExtensionInfrastructureIpRangesDto
type ExtensionInfrastructureIpRangesDto struct {
	// Tags for the IP range allocations.
	Tags *map[string]string `json:"tags,omitempty"`
	// IP version for the allocation.
	IpVersion IpVersion `json:"ipVersion"`
	// Number of IPs to allocate from the subnet.
	IpCount int32 `json:"ipCount"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionInfrastructureIpRangesDto ExtensionInfrastructureIpRangesDto

// NewExtensionInfrastructureIpRangesDto instantiates a new ExtensionInfrastructureIpRangesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionInfrastructureIpRangesDto(ipVersion IpVersion, ipCount int32) *ExtensionInfrastructureIpRangesDto {
	this := ExtensionInfrastructureIpRangesDto{}
	this.IpVersion = ipVersion
	this.IpCount = ipCount
	return &this
}

// NewExtensionInfrastructureIpRangesDtoWithDefaults instantiates a new ExtensionInfrastructureIpRangesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionInfrastructureIpRangesDtoWithDefaults() *ExtensionInfrastructureIpRangesDto {
	this := ExtensionInfrastructureIpRangesDto{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ExtensionInfrastructureIpRangesDto) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInfrastructureIpRangesDto) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ExtensionInfrastructureIpRangesDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *ExtensionInfrastructureIpRangesDto) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetIpVersion returns the IpVersion field value
func (o *ExtensionInfrastructureIpRangesDto) GetIpVersion() IpVersion {
	if o == nil {
		var ret IpVersion
		return ret
	}

	return o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value
// and a boolean to check if the value has been set.
func (o *ExtensionInfrastructureIpRangesDto) GetIpVersionOk() (*IpVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpVersion, true
}

// SetIpVersion sets field value
func (o *ExtensionInfrastructureIpRangesDto) SetIpVersion(v IpVersion) {
	o.IpVersion = v
}

// GetIpCount returns the IpCount field value
func (o *ExtensionInfrastructureIpRangesDto) GetIpCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IpCount
}

// GetIpCountOk returns a tuple with the IpCount field value
// and a boolean to check if the value has been set.
func (o *ExtensionInfrastructureIpRangesDto) GetIpCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpCount, true
}

// SetIpCount sets field value
func (o *ExtensionInfrastructureIpRangesDto) SetIpCount(v int32) {
	o.IpCount = v
}

func (o ExtensionInfrastructureIpRangesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionInfrastructureIpRangesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["ipVersion"] = o.IpVersion
	toSerialize["ipCount"] = o.IpCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionInfrastructureIpRangesDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ipVersion",
		"ipCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionInfrastructureIpRangesDto := _ExtensionInfrastructureIpRangesDto{}

	err = json.Unmarshal(data, &varExtensionInfrastructureIpRangesDto)

	if err != nil {
		return err
	}

	*o = ExtensionInfrastructureIpRangesDto(varExtensionInfrastructureIpRangesDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "ipVersion")
		delete(additionalProperties, "ipCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionInfrastructureIpRangesDto struct {
	value *ExtensionInfrastructureIpRangesDto
	isSet bool
}

func (v NullableExtensionInfrastructureIpRangesDto) Get() *ExtensionInfrastructureIpRangesDto {
	return v.value
}

func (v *NullableExtensionInfrastructureIpRangesDto) Set(val *ExtensionInfrastructureIpRangesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionInfrastructureIpRangesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionInfrastructureIpRangesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionInfrastructureIpRangesDto(val *ExtensionInfrastructureIpRangesDto) *NullableExtensionInfrastructureIpRangesDto {
	return &NullableExtensionInfrastructureIpRangesDto{value: val, isSet: true}
}

func (v NullableExtensionInfrastructureIpRangesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionInfrastructureIpRangesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


