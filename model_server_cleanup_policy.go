/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerCleanupPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerCleanupPolicy{}

// ServerCleanupPolicy struct for ServerCleanupPolicy
type ServerCleanupPolicy struct {
	// Server cleanup policy id
	Id float32 `json:"id"`
	// Server cleanup policy label
	Label string `json:"label"`
	// Cleanup drives for oob enabled server
	CleanupDrivesForOobEnabledServer float32 `json:"cleanupDrivesForOobEnabledServer"`
	// Recreate raid
	RecreateRaid float32 `json:"recreateRaid"`
	// Disable embedded nics
	DisableEmbeddedNics float32 `json:"disableEmbeddedNics"`
	// Raid one drive
	RaidOneDrive string `json:"raidOneDrive"`
	// Raid two drives
	RaidTwoDrives string `json:"raidTwoDrives"`
	// Raid even number more than two drives
	RaidEvenNumberMoreThanTwoDrives string `json:"raidEvenNumberMoreThanTwoDrives"`
	// Raid odd number more than one drive
	RaidOddNumberMoreThanOneDrive string `json:"raidOddNumberMoreThanOneDrive"`
	// Created timestamp
	CreatedTimestamp string `json:"createdTimestamp"`
	// Updated timestamp
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Skip raid actions
	SkipRaidActions []string `json:"skipRaidActions"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerCleanupPolicy ServerCleanupPolicy

// NewServerCleanupPolicy instantiates a new ServerCleanupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerCleanupPolicy(id float32, label string, cleanupDrivesForOobEnabledServer float32, recreateRaid float32, disableEmbeddedNics float32, raidOneDrive string, raidTwoDrives string, raidEvenNumberMoreThanTwoDrives string, raidOddNumberMoreThanOneDrive string, createdTimestamp string, updatedTimestamp string, skipRaidActions []string) *ServerCleanupPolicy {
	this := ServerCleanupPolicy{}
	this.Id = id
	this.Label = label
	this.CleanupDrivesForOobEnabledServer = cleanupDrivesForOobEnabledServer
	this.RecreateRaid = recreateRaid
	this.DisableEmbeddedNics = disableEmbeddedNics
	this.RaidOneDrive = raidOneDrive
	this.RaidTwoDrives = raidTwoDrives
	this.RaidEvenNumberMoreThanTwoDrives = raidEvenNumberMoreThanTwoDrives
	this.RaidOddNumberMoreThanOneDrive = raidOddNumberMoreThanOneDrive
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.SkipRaidActions = skipRaidActions
	return &this
}

// NewServerCleanupPolicyWithDefaults instantiates a new ServerCleanupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerCleanupPolicyWithDefaults() *ServerCleanupPolicy {
	this := ServerCleanupPolicy{}
	return &this
}

// GetId returns the Id field value
func (o *ServerCleanupPolicy) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerCleanupPolicy) SetId(v float32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *ServerCleanupPolicy) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ServerCleanupPolicy) SetLabel(v string) {
	o.Label = v
}

// GetCleanupDrivesForOobEnabledServer returns the CleanupDrivesForOobEnabledServer field value
func (o *ServerCleanupPolicy) GetCleanupDrivesForOobEnabledServer() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CleanupDrivesForOobEnabledServer
}

// GetCleanupDrivesForOobEnabledServerOk returns a tuple with the CleanupDrivesForOobEnabledServer field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetCleanupDrivesForOobEnabledServerOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CleanupDrivesForOobEnabledServer, true
}

// SetCleanupDrivesForOobEnabledServer sets field value
func (o *ServerCleanupPolicy) SetCleanupDrivesForOobEnabledServer(v float32) {
	o.CleanupDrivesForOobEnabledServer = v
}

// GetRecreateRaid returns the RecreateRaid field value
func (o *ServerCleanupPolicy) GetRecreateRaid() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RecreateRaid
}

// GetRecreateRaidOk returns a tuple with the RecreateRaid field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetRecreateRaidOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecreateRaid, true
}

// SetRecreateRaid sets field value
func (o *ServerCleanupPolicy) SetRecreateRaid(v float32) {
	o.RecreateRaid = v
}

// GetDisableEmbeddedNics returns the DisableEmbeddedNics field value
func (o *ServerCleanupPolicy) GetDisableEmbeddedNics() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DisableEmbeddedNics
}

// GetDisableEmbeddedNicsOk returns a tuple with the DisableEmbeddedNics field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetDisableEmbeddedNicsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisableEmbeddedNics, true
}

// SetDisableEmbeddedNics sets field value
func (o *ServerCleanupPolicy) SetDisableEmbeddedNics(v float32) {
	o.DisableEmbeddedNics = v
}

// GetRaidOneDrive returns the RaidOneDrive field value
func (o *ServerCleanupPolicy) GetRaidOneDrive() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RaidOneDrive
}

// GetRaidOneDriveOk returns a tuple with the RaidOneDrive field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetRaidOneDriveOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RaidOneDrive, true
}

// SetRaidOneDrive sets field value
func (o *ServerCleanupPolicy) SetRaidOneDrive(v string) {
	o.RaidOneDrive = v
}

// GetRaidTwoDrives returns the RaidTwoDrives field value
func (o *ServerCleanupPolicy) GetRaidTwoDrives() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RaidTwoDrives
}

// GetRaidTwoDrivesOk returns a tuple with the RaidTwoDrives field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetRaidTwoDrivesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RaidTwoDrives, true
}

// SetRaidTwoDrives sets field value
func (o *ServerCleanupPolicy) SetRaidTwoDrives(v string) {
	o.RaidTwoDrives = v
}

// GetRaidEvenNumberMoreThanTwoDrives returns the RaidEvenNumberMoreThanTwoDrives field value
func (o *ServerCleanupPolicy) GetRaidEvenNumberMoreThanTwoDrives() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RaidEvenNumberMoreThanTwoDrives
}

// GetRaidEvenNumberMoreThanTwoDrivesOk returns a tuple with the RaidEvenNumberMoreThanTwoDrives field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetRaidEvenNumberMoreThanTwoDrivesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RaidEvenNumberMoreThanTwoDrives, true
}

// SetRaidEvenNumberMoreThanTwoDrives sets field value
func (o *ServerCleanupPolicy) SetRaidEvenNumberMoreThanTwoDrives(v string) {
	o.RaidEvenNumberMoreThanTwoDrives = v
}

// GetRaidOddNumberMoreThanOneDrive returns the RaidOddNumberMoreThanOneDrive field value
func (o *ServerCleanupPolicy) GetRaidOddNumberMoreThanOneDrive() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RaidOddNumberMoreThanOneDrive
}

// GetRaidOddNumberMoreThanOneDriveOk returns a tuple with the RaidOddNumberMoreThanOneDrive field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetRaidOddNumberMoreThanOneDriveOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RaidOddNumberMoreThanOneDrive, true
}

// SetRaidOddNumberMoreThanOneDrive sets field value
func (o *ServerCleanupPolicy) SetRaidOddNumberMoreThanOneDrive(v string) {
	o.RaidOddNumberMoreThanOneDrive = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *ServerCleanupPolicy) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *ServerCleanupPolicy) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *ServerCleanupPolicy) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *ServerCleanupPolicy) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetSkipRaidActions returns the SkipRaidActions field value
func (o *ServerCleanupPolicy) GetSkipRaidActions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SkipRaidActions
}

// GetSkipRaidActionsOk returns a tuple with the SkipRaidActions field value
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetSkipRaidActionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipRaidActions, true
}

// SetSkipRaidActions sets field value
func (o *ServerCleanupPolicy) SetSkipRaidActions(v []string) {
	o.SkipRaidActions = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ServerCleanupPolicy) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerCleanupPolicy) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ServerCleanupPolicy) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ServerCleanupPolicy) SetLinks(v []Link) {
	o.Links = v
}

func (o ServerCleanupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerCleanupPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["cleanupDrivesForOobEnabledServer"] = o.CleanupDrivesForOobEnabledServer
	toSerialize["recreateRaid"] = o.RecreateRaid
	toSerialize["disableEmbeddedNics"] = o.DisableEmbeddedNics
	toSerialize["raidOneDrive"] = o.RaidOneDrive
	toSerialize["raidTwoDrives"] = o.RaidTwoDrives
	toSerialize["raidEvenNumberMoreThanTwoDrives"] = o.RaidEvenNumberMoreThanTwoDrives
	toSerialize["raidOddNumberMoreThanOneDrive"] = o.RaidOddNumberMoreThanOneDrive
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	toSerialize["skipRaidActions"] = o.SkipRaidActions
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerCleanupPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"cleanupDrivesForOobEnabledServer",
		"recreateRaid",
		"disableEmbeddedNics",
		"raidOneDrive",
		"raidTwoDrives",
		"raidEvenNumberMoreThanTwoDrives",
		"raidOddNumberMoreThanOneDrive",
		"createdTimestamp",
		"updatedTimestamp",
		"skipRaidActions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerCleanupPolicy := _ServerCleanupPolicy{}

	err = json.Unmarshal(data, &varServerCleanupPolicy)

	if err != nil {
		return err
	}

	*o = ServerCleanupPolicy(varServerCleanupPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "cleanupDrivesForOobEnabledServer")
		delete(additionalProperties, "recreateRaid")
		delete(additionalProperties, "disableEmbeddedNics")
		delete(additionalProperties, "raidOneDrive")
		delete(additionalProperties, "raidTwoDrives")
		delete(additionalProperties, "raidEvenNumberMoreThanTwoDrives")
		delete(additionalProperties, "raidOddNumberMoreThanOneDrive")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "skipRaidActions")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerCleanupPolicy struct {
	value *ServerCleanupPolicy
	isSet bool
}

func (v NullableServerCleanupPolicy) Get() *ServerCleanupPolicy {
	return v.value
}

func (v *NullableServerCleanupPolicy) Set(val *ServerCleanupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableServerCleanupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableServerCleanupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerCleanupPolicy(val *ServerCleanupPolicy) *NullableServerCleanupPolicy {
	return &NullableServerCleanupPolicy{value: val, isSet: true}
}

func (v NullableServerCleanupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerCleanupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


