/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the UserSSHKeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSSHKeys{}

// UserSSHKeys struct for UserSSHKeys
type UserSSHKeys struct {
	// The ID of the User SSH key
	Id float32 `json:"id"`
	// The ID of the user
	UserId float32 `json:"userId"`
	// The SSH key of the user
	SshKey string `json:"sshKey"`
	// The timestamp when the User SSH key was created
	CreatedTimestamp time.Time `json:"createdTimestamp"`
	// The status of the User SSH key
	Status string `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _UserSSHKeys UserSSHKeys

// NewUserSSHKeys instantiates a new UserSSHKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSSHKeys(id float32, userId float32, sshKey string, createdTimestamp time.Time, status string) *UserSSHKeys {
	this := UserSSHKeys{}
	this.Id = id
	this.UserId = userId
	this.SshKey = sshKey
	this.CreatedTimestamp = createdTimestamp
	this.Status = status
	return &this
}

// NewUserSSHKeysWithDefaults instantiates a new UserSSHKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSSHKeysWithDefaults() *UserSSHKeys {
	this := UserSSHKeys{}
	return &this
}

// GetId returns the Id field value
func (o *UserSSHKeys) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserSSHKeys) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserSSHKeys) SetId(v float32) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *UserSSHKeys) GetUserId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserSSHKeys) GetUserIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserSSHKeys) SetUserId(v float32) {
	o.UserId = v
}

// GetSshKey returns the SshKey field value
func (o *UserSSHKeys) GetSshKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SshKey
}

// GetSshKeyOk returns a tuple with the SshKey field value
// and a boolean to check if the value has been set.
func (o *UserSSHKeys) GetSshKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SshKey, true
}

// SetSshKey sets field value
func (o *UserSSHKeys) SetSshKey(v string) {
	o.SshKey = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *UserSSHKeys) GetCreatedTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *UserSSHKeys) GetCreatedTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *UserSSHKeys) SetCreatedTimestamp(v time.Time) {
	o.CreatedTimestamp = v
}

// GetStatus returns the Status field value
func (o *UserSSHKeys) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UserSSHKeys) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UserSSHKeys) SetStatus(v string) {
	o.Status = v
}

func (o UserSSHKeys) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSSHKeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["userId"] = o.UserId
	toSerialize["sshKey"] = o.SshKey
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["status"] = o.Status

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserSSHKeys) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"userId",
		"sshKey",
		"createdTimestamp",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSSHKeys := _UserSSHKeys{}

	err = json.Unmarshal(data, &varUserSSHKeys)

	if err != nil {
		return err
	}

	*o = UserSSHKeys(varUserSSHKeys)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "sshKey")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserSSHKeys struct {
	value *UserSSHKeys
	isSet bool
}

func (v NullableUserSSHKeys) Get() *UserSSHKeys {
	return v.value
}

func (v *NullableUserSSHKeys) Set(val *UserSSHKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSSHKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSSHKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSSHKeys(val *UserSSHKeys) *NullableUserSSHKeys {
	return &NullableUserSSHKeys{value: val, isSet: true}
}

func (v NullableUserSSHKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSSHKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


