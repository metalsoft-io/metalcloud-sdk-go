/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// NetworkEndpointGroupAPIService NetworkEndpointGroupAPI service
type NetworkEndpointGroupAPIService service

type NetworkEndpointGroupAPIAddLogicalNetworksToNetworkEndpointGroupRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	networkEndpointGroupId int32
	createNetworkEndpointGroupLogicalNetwork *CreateNetworkEndpointGroupLogicalNetwork
}

// The logical network id and settings to add to the network endpoint group
func (r NetworkEndpointGroupAPIAddLogicalNetworksToNetworkEndpointGroupRequest) CreateNetworkEndpointGroupLogicalNetwork(createNetworkEndpointGroupLogicalNetwork CreateNetworkEndpointGroupLogicalNetwork) NetworkEndpointGroupAPIAddLogicalNetworksToNetworkEndpointGroupRequest {
	r.createNetworkEndpointGroupLogicalNetwork = &createNetworkEndpointGroupLogicalNetwork
	return r
}

func (r NetworkEndpointGroupAPIAddLogicalNetworksToNetworkEndpointGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddLogicalNetworksToNetworkEndpointGroupExecute(r)
}

/*
AddLogicalNetworksToNetworkEndpointGroup Add a list of logical networks to a network endpoint group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkEndpointGroupId The ID of the network endpoint group
 @return NetworkEndpointGroupAPIAddLogicalNetworksToNetworkEndpointGroupRequest
*/
func (a *NetworkEndpointGroupAPIService) AddLogicalNetworksToNetworkEndpointGroup(ctx context.Context, networkEndpointGroupId int32) NetworkEndpointGroupAPIAddLogicalNetworksToNetworkEndpointGroupRequest {
	return NetworkEndpointGroupAPIAddLogicalNetworksToNetworkEndpointGroupRequest{
		ApiService: a,
		ctx: ctx,
		networkEndpointGroupId: networkEndpointGroupId,
	}
}

// Execute executes the request
func (a *NetworkEndpointGroupAPIService) AddLogicalNetworksToNetworkEndpointGroupExecute(r NetworkEndpointGroupAPIAddLogicalNetworksToNetworkEndpointGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.AddLogicalNetworksToNetworkEndpointGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups/{networkEndpointGroupId}/logical-networks"
	localVarPath = strings.Replace(localVarPath, "{"+"networkEndpointGroupId"+"}", url.PathEscape(parameterValueToString(r.networkEndpointGroupId, "networkEndpointGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createNetworkEndpointGroupLogicalNetwork == nil {
		return nil, reportError("createNetworkEndpointGroupLogicalNetwork is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createNetworkEndpointGroupLogicalNetwork
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NetworkEndpointGroupAPICreateNetworkEndpointGroupRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	createNetworkEndpointGroup *CreateNetworkEndpointGroup
}

// The network endpoint group create object
func (r NetworkEndpointGroupAPICreateNetworkEndpointGroupRequest) CreateNetworkEndpointGroup(createNetworkEndpointGroup CreateNetworkEndpointGroup) NetworkEndpointGroupAPICreateNetworkEndpointGroupRequest {
	r.createNetworkEndpointGroup = &createNetworkEndpointGroup
	return r
}

func (r NetworkEndpointGroupAPICreateNetworkEndpointGroupRequest) Execute() (*NetworkEndpointGroup, *http.Response, error) {
	return r.ApiService.CreateNetworkEndpointGroupExecute(r)
}

/*
CreateNetworkEndpointGroup Create a new network endpoint group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return NetworkEndpointGroupAPICreateNetworkEndpointGroupRequest
*/
func (a *NetworkEndpointGroupAPIService) CreateNetworkEndpointGroup(ctx context.Context) NetworkEndpointGroupAPICreateNetworkEndpointGroupRequest {
	return NetworkEndpointGroupAPICreateNetworkEndpointGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NetworkEndpointGroup
func (a *NetworkEndpointGroupAPIService) CreateNetworkEndpointGroupExecute(r NetworkEndpointGroupAPICreateNetworkEndpointGroupRequest) (*NetworkEndpointGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkEndpointGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.CreateNetworkEndpointGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createNetworkEndpointGroup == nil {
		return localVarReturnValue, nil, reportError("createNetworkEndpointGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createNetworkEndpointGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkEndpointGroupAPIDeleteNetworkEndpointGroupRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	networkEndpointGroupId float32
}

func (r NetworkEndpointGroupAPIDeleteNetworkEndpointGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNetworkEndpointGroupExecute(r)
}

/*
DeleteNetworkEndpointGroup Delete a network endpoint group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkEndpointGroupId
 @return NetworkEndpointGroupAPIDeleteNetworkEndpointGroupRequest
*/
func (a *NetworkEndpointGroupAPIService) DeleteNetworkEndpointGroup(ctx context.Context, networkEndpointGroupId float32) NetworkEndpointGroupAPIDeleteNetworkEndpointGroupRequest {
	return NetworkEndpointGroupAPIDeleteNetworkEndpointGroupRequest{
		ApiService: a,
		ctx: ctx,
		networkEndpointGroupId: networkEndpointGroupId,
	}
}

// Execute executes the request
func (a *NetworkEndpointGroupAPIService) DeleteNetworkEndpointGroupExecute(r NetworkEndpointGroupAPIDeleteNetworkEndpointGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.DeleteNetworkEndpointGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups/{networkEndpointGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkEndpointGroupId"+"}", url.PathEscape(parameterValueToString(r.networkEndpointGroupId, "networkEndpointGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NetworkEndpointGroupAPIGetNetworkEndpointGroupByIdRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	networkEndpointGroupId float32
}

func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupByIdRequest) Execute() (*NetworkEndpointGroup, *http.Response, error) {
	return r.ApiService.GetNetworkEndpointGroupByIdExecute(r)
}

/*
GetNetworkEndpointGroupById Get a network endpoint group by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkEndpointGroupId
 @return NetworkEndpointGroupAPIGetNetworkEndpointGroupByIdRequest
*/
func (a *NetworkEndpointGroupAPIService) GetNetworkEndpointGroupById(ctx context.Context, networkEndpointGroupId float32) NetworkEndpointGroupAPIGetNetworkEndpointGroupByIdRequest {
	return NetworkEndpointGroupAPIGetNetworkEndpointGroupByIdRequest{
		ApiService: a,
		ctx: ctx,
		networkEndpointGroupId: networkEndpointGroupId,
	}
}

// Execute executes the request
//  @return NetworkEndpointGroup
func (a *NetworkEndpointGroupAPIService) GetNetworkEndpointGroupByIdExecute(r NetworkEndpointGroupAPIGetNetworkEndpointGroupByIdRequest) (*NetworkEndpointGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkEndpointGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.GetNetworkEndpointGroupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups/{networkEndpointGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkEndpointGroupId"+"}", url.PathEscape(parameterValueToString(r.networkEndpointGroupId, "networkEndpointGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworkRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	networkEndpointGroupId int32
	logicalNetworkId int32
}

func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworkRequest) Execute() (*NetworkEndpointGroupLogicalNetwork, *http.Response, error) {
	return r.ApiService.GetNetworkEndpointGroupLogicalNetworkExecute(r)
}

/*
GetNetworkEndpointGroupLogicalNetwork Get a logical network by its ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkEndpointGroupId The ID of the network endpoint group
 @param logicalNetworkId The ID of the logical network
 @return NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworkRequest
*/
func (a *NetworkEndpointGroupAPIService) GetNetworkEndpointGroupLogicalNetwork(ctx context.Context, networkEndpointGroupId int32, logicalNetworkId int32) NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworkRequest {
	return NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworkRequest{
		ApiService: a,
		ctx: ctx,
		networkEndpointGroupId: networkEndpointGroupId,
		logicalNetworkId: logicalNetworkId,
	}
}

// Execute executes the request
//  @return NetworkEndpointGroupLogicalNetwork
func (a *NetworkEndpointGroupAPIService) GetNetworkEndpointGroupLogicalNetworkExecute(r NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworkRequest) (*NetworkEndpointGroupLogicalNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkEndpointGroupLogicalNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.GetNetworkEndpointGroupLogicalNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups/{networkEndpointGroupId}/logical-networks/{logicalNetworkId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkEndpointGroupId"+"}", url.PathEscape(parameterValueToString(r.networkEndpointGroupId, "networkEndpointGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"logicalNetworkId"+"}", url.PathEscape(parameterValueToString(r.logicalNetworkId, "logicalNetworkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworksRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	networkEndpointGroupId int32
}

func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworksRequest) Execute() (*NetworkEndpointGroupLogicalNetworksList, *http.Response, error) {
	return r.ApiService.GetNetworkEndpointGroupLogicalNetworksExecute(r)
}

/*
GetNetworkEndpointGroupLogicalNetworks Get a network endpoint group with its logical networks

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkEndpointGroupId The id of the network endpoint group
 @return NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworksRequest
*/
func (a *NetworkEndpointGroupAPIService) GetNetworkEndpointGroupLogicalNetworks(ctx context.Context, networkEndpointGroupId int32) NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworksRequest {
	return NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworksRequest{
		ApiService: a,
		ctx: ctx,
		networkEndpointGroupId: networkEndpointGroupId,
	}
}

// Execute executes the request
//  @return NetworkEndpointGroupLogicalNetworksList
func (a *NetworkEndpointGroupAPIService) GetNetworkEndpointGroupLogicalNetworksExecute(r NetworkEndpointGroupAPIGetNetworkEndpointGroupLogicalNetworksRequest) (*NetworkEndpointGroupLogicalNetworksList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkEndpointGroupLogicalNetworksList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.GetNetworkEndpointGroupLogicalNetworks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups/{networkEndpointGroupId}/logical-networks"
	localVarPath = strings.Replace(localVarPath, "{"+"networkEndpointGroupId"+"}", url.PathEscape(parameterValueToString(r.networkEndpointGroupId, "networkEndpointGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	page *float32
	limit *float32
	filterId *[]string
	filterName *[]string
	filterDescription *[]string
	filterStatus *[]string
	filterSiteId *[]string
	filterFabricConfigurationFabricType *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) Page(page float32) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) Limit(limit float32) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.limit = &limit
	return r
}

// Filter by id query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.id&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.id&#x3D;$not:$like:John Doe&amp;filter.id&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) FilterId(filterId []string) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.filterId = &filterId
	return r
}

// Filter by name query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.name&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.name&#x3D;$not:$like:John Doe&amp;filter.name&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) FilterName(filterName []string) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.filterName = &filterName
	return r
}

// Filter by description query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.description&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.description&#x3D;$not:$like:John Doe&amp;filter.description&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) FilterDescription(filterDescription []string) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.filterDescription = &filterDescription
	return r
}

// Filter by status query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.status&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.status&#x3D;$not:$like:John Doe&amp;filter.status&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) FilterStatus(filterStatus []string) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.filterStatus = &filterStatus
	return r
}

// Filter by siteId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.siteId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.siteId&#x3D;$not:$like:John Doe&amp;filter.siteId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) FilterSiteId(filterSiteId []string) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.filterSiteId = &filterSiteId
	return r
}

// Filter by fabricConfiguration.fabricType query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.fabricConfiguration.fabricType&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.fabricConfiguration.fabricType&#x3D;$not:$like:John Doe&amp;filter.fabricConfiguration.fabricType&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) FilterFabricConfigurationFabricType(filterFabricConfigurationFabricType []string) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.filterFabricConfigurationFabricType = &filterFabricConfigurationFabricType
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;siteId&lt;/li&gt; &lt;li&gt;name&lt;/li&gt; &lt;li&gt;createdTimestamp&lt;/li&gt; &lt;li&gt;updatedTimestamp&lt;/li&gt;&lt;/ul&gt;       
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) SortBy(sortBy []string) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) Search(search string) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; name,description,status,siteId,fabricConfiguration.fabricType           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;name&lt;/li&gt; &lt;li&gt;description&lt;/li&gt; &lt;li&gt;status&lt;/li&gt; &lt;li&gt;siteId&lt;/li&gt; &lt;li&gt;fabricConfiguration.fabricType&lt;/li&gt;&lt;/ul&gt;         
func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) SearchBy(searchBy []string) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	r.searchBy = &searchBy
	return r
}

func (r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) Execute() (*NetworkEndpointGroupPaginatedList, *http.Response, error) {
	return r.ApiService.GetNetworkEndpointGroupsExecute(r)
}

/*
GetNetworkEndpointGroups List all network endpoint groups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest
*/
func (a *NetworkEndpointGroupAPIService) GetNetworkEndpointGroups(ctx context.Context) NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest {
	return NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NetworkEndpointGroupPaginatedList
func (a *NetworkEndpointGroupAPIService) GetNetworkEndpointGroupsExecute(r NetworkEndpointGroupAPIGetNetworkEndpointGroupsRequest) (*NetworkEndpointGroupPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkEndpointGroupPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.GetNetworkEndpointGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterId != nil {
		t := *r.filterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.id", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.id", t, "form", "multi")
		}
	}
	if r.filterName != nil {
		t := *r.filterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.name", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.name", t, "form", "multi")
		}
	}
	if r.filterDescription != nil {
		t := *r.filterDescription
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.description", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.description", t, "form", "multi")
		}
	}
	if r.filterStatus != nil {
		t := *r.filterStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.status", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.status", t, "form", "multi")
		}
	}
	if r.filterSiteId != nil {
		t := *r.filterSiteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.siteId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.siteId", t, "form", "multi")
		}
	}
	if r.filterFabricConfigurationFabricType != nil {
		t := *r.filterFabricConfigurationFabricType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.fabricConfiguration.fabricType", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.fabricConfiguration.fabricType", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkEndpointGroupAPIRemoveLogicalNetworkFromNetworkEndpointGroupRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	networkEndpointGroupId int32
	logicalNetworkId int32
}

func (r NetworkEndpointGroupAPIRemoveLogicalNetworkFromNetworkEndpointGroupRequest) Execute() (*NetworkEndpointGroupLogicalNetwork, *http.Response, error) {
	return r.ApiService.RemoveLogicalNetworkFromNetworkEndpointGroupExecute(r)
}

/*
RemoveLogicalNetworkFromNetworkEndpointGroup Remove a logical network from a network endpoint group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkEndpointGroupId The ID of the network endpoint group
 @param logicalNetworkId The ID of the logical network to remove from the network endpoint group
 @return NetworkEndpointGroupAPIRemoveLogicalNetworkFromNetworkEndpointGroupRequest
*/
func (a *NetworkEndpointGroupAPIService) RemoveLogicalNetworkFromNetworkEndpointGroup(ctx context.Context, networkEndpointGroupId int32, logicalNetworkId int32) NetworkEndpointGroupAPIRemoveLogicalNetworkFromNetworkEndpointGroupRequest {
	return NetworkEndpointGroupAPIRemoveLogicalNetworkFromNetworkEndpointGroupRequest{
		ApiService: a,
		ctx: ctx,
		networkEndpointGroupId: networkEndpointGroupId,
		logicalNetworkId: logicalNetworkId,
	}
}

// Execute executes the request
//  @return NetworkEndpointGroupLogicalNetwork
func (a *NetworkEndpointGroupAPIService) RemoveLogicalNetworkFromNetworkEndpointGroupExecute(r NetworkEndpointGroupAPIRemoveLogicalNetworkFromNetworkEndpointGroupRequest) (*NetworkEndpointGroupLogicalNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkEndpointGroupLogicalNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.RemoveLogicalNetworkFromNetworkEndpointGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups/{networkEndpointGroupId}/logical-networks/{logicalNetworkId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkEndpointGroupId"+"}", url.PathEscape(parameterValueToString(r.networkEndpointGroupId, "networkEndpointGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"logicalNetworkId"+"}", url.PathEscape(parameterValueToString(r.logicalNetworkId, "logicalNetworkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	networkEndpointGroupId int32
	updateNetworkEndpointGroup *UpdateNetworkEndpointGroup
	ifMatch *string
}

// Network endpoint group updates
func (r NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest) UpdateNetworkEndpointGroup(updateNetworkEndpointGroup UpdateNetworkEndpointGroup) NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest {
	r.updateNetworkEndpointGroup = &updateNetworkEndpointGroup
	return r
}

// Entity tag
func (r NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest) IfMatch(ifMatch string) NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest) Execute() (*NetworkEndpointGroup, *http.Response, error) {
	return r.ApiService.UpdateNetworkEndpointGroupExecute(r)
}

/*
UpdateNetworkEndpointGroup Update a network endpoint group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkEndpointGroupId The ID of the network endpoint group to update
 @return NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest
*/
func (a *NetworkEndpointGroupAPIService) UpdateNetworkEndpointGroup(ctx context.Context, networkEndpointGroupId int32) NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest {
	return NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest{
		ApiService: a,
		ctx: ctx,
		networkEndpointGroupId: networkEndpointGroupId,
	}
}

// Execute executes the request
//  @return NetworkEndpointGroup
func (a *NetworkEndpointGroupAPIService) UpdateNetworkEndpointGroupExecute(r NetworkEndpointGroupAPIUpdateNetworkEndpointGroupRequest) (*NetworkEndpointGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkEndpointGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.UpdateNetworkEndpointGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups/{networkEndpointGroupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkEndpointGroupId"+"}", url.PathEscape(parameterValueToString(r.networkEndpointGroupId, "networkEndpointGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNetworkEndpointGroup == nil {
		return localVarReturnValue, nil, reportError("updateNetworkEndpointGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "simple", "")
	}
	// body params
	localVarPostBody = r.updateNetworkEndpointGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest struct {
	ctx context.Context
	ApiService *NetworkEndpointGroupAPIService
	networkEndpointGroupId int32
	logicalNetworkId int32
	updateNetworkEndpointGroupLogicalNetwork *UpdateNetworkEndpointGroupLogicalNetwork
	ifMatch *string
}

// The logical network id and settings to add to the network endpoint group
func (r NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest) UpdateNetworkEndpointGroupLogicalNetwork(updateNetworkEndpointGroupLogicalNetwork UpdateNetworkEndpointGroupLogicalNetwork) NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest {
	r.updateNetworkEndpointGroupLogicalNetwork = &updateNetworkEndpointGroupLogicalNetwork
	return r
}

// Entity tag
func (r NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest) IfMatch(ifMatch string) NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest) Execute() (*NetworkEndpointGroupLogicalNetwork, *http.Response, error) {
	return r.ApiService.UpdateNetworkEndpointGroupLogicalNetworkExecute(r)
}

/*
UpdateNetworkEndpointGroupLogicalNetwork Update a logical network in a network endpoint group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkEndpointGroupId The ID of the network endpoint group
 @param logicalNetworkId The ID of the logical network
 @return NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest
*/
func (a *NetworkEndpointGroupAPIService) UpdateNetworkEndpointGroupLogicalNetwork(ctx context.Context, networkEndpointGroupId int32, logicalNetworkId int32) NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest {
	return NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest{
		ApiService: a,
		ctx: ctx,
		networkEndpointGroupId: networkEndpointGroupId,
		logicalNetworkId: logicalNetworkId,
	}
}

// Execute executes the request
//  @return NetworkEndpointGroupLogicalNetwork
func (a *NetworkEndpointGroupAPIService) UpdateNetworkEndpointGroupLogicalNetworkExecute(r NetworkEndpointGroupAPIUpdateNetworkEndpointGroupLogicalNetworkRequest) (*NetworkEndpointGroupLogicalNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkEndpointGroupLogicalNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkEndpointGroupAPIService.UpdateNetworkEndpointGroupLogicalNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-endpoint-groups/{networkEndpointGroupId}/logical-networks/{logicalNetworkId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkEndpointGroupId"+"}", url.PathEscape(parameterValueToString(r.networkEndpointGroupId, "networkEndpointGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"logicalNetworkId"+"}", url.PathEscape(parameterValueToString(r.logicalNetworkId, "logicalNetworkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNetworkEndpointGroupLogicalNetwork == nil {
		return localVarReturnValue, nil, reportError("updateNetworkEndpointGroupLogicalNetwork is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "simple", "")
	}
	// body params
	localVarPostBody = r.updateNetworkEndpointGroupLogicalNetwork
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
