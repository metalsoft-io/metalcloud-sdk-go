/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateGroupDrive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGroupDrive{}

// CreateGroupDrive struct for CreateGroupDrive
type CreateGroupDrive struct {
	// Default disk size in MB for new Drives in the Drive Group
	DriveSizeMbDefault float32 `json:"driveSizeMbDefault"`
	ExtensionInstanceId *float32 `json:"extensionInstanceId,omitempty"`
	// Label of the Drive.
	Label *string `json:"label,omitempty"`
	// Number of drives in the Drive Group
	DriveCount float32 `json:"driveCount"`
	// The IO limit policy of the Drive Group.
	IoLimitPolicy *string `json:"ioLimitPolicy,omitempty"`
	// Flag to determine whether the Drive Group should be expanded with a Server Instance Group by adding one drive for each instance
	ExpandWithServerInstanceGroup *float32 `json:"expandWithServerInstanceGroup,omitempty"`
	// Allocation affinity of the Drive Group
	AllocationAffinity *string `json:"allocationAffinity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateGroupDrive CreateGroupDrive

// NewCreateGroupDrive instantiates a new CreateGroupDrive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGroupDrive(driveSizeMbDefault float32, driveCount float32) *CreateGroupDrive {
	this := CreateGroupDrive{}
	this.DriveSizeMbDefault = driveSizeMbDefault
	this.DriveCount = driveCount
	return &this
}

// NewCreateGroupDriveWithDefaults instantiates a new CreateGroupDrive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGroupDriveWithDefaults() *CreateGroupDrive {
	this := CreateGroupDrive{}
	return &this
}

// GetDriveSizeMbDefault returns the DriveSizeMbDefault field value
func (o *CreateGroupDrive) GetDriveSizeMbDefault() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DriveSizeMbDefault
}

// GetDriveSizeMbDefaultOk returns a tuple with the DriveSizeMbDefault field value
// and a boolean to check if the value has been set.
func (o *CreateGroupDrive) GetDriveSizeMbDefaultOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DriveSizeMbDefault, true
}

// SetDriveSizeMbDefault sets field value
func (o *CreateGroupDrive) SetDriveSizeMbDefault(v float32) {
	o.DriveSizeMbDefault = v
}

// GetExtensionInstanceId returns the ExtensionInstanceId field value if set, zero value otherwise.
func (o *CreateGroupDrive) GetExtensionInstanceId() float32 {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		var ret float32
		return ret
	}
	return *o.ExtensionInstanceId
}

// GetExtensionInstanceIdOk returns a tuple with the ExtensionInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupDrive) GetExtensionInstanceIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtensionInstanceId) {
		return nil, false
	}
	return o.ExtensionInstanceId, true
}

// HasExtensionInstanceId returns a boolean if a field has been set.
func (o *CreateGroupDrive) HasExtensionInstanceId() bool {
	if o != nil && !IsNil(o.ExtensionInstanceId) {
		return true
	}

	return false
}

// SetExtensionInstanceId gets a reference to the given float32 and assigns it to the ExtensionInstanceId field.
func (o *CreateGroupDrive) SetExtensionInstanceId(v float32) {
	o.ExtensionInstanceId = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CreateGroupDrive) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupDrive) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CreateGroupDrive) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CreateGroupDrive) SetLabel(v string) {
	o.Label = &v
}

// GetDriveCount returns the DriveCount field value
func (o *CreateGroupDrive) GetDriveCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DriveCount
}

// GetDriveCountOk returns a tuple with the DriveCount field value
// and a boolean to check if the value has been set.
func (o *CreateGroupDrive) GetDriveCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DriveCount, true
}

// SetDriveCount sets field value
func (o *CreateGroupDrive) SetDriveCount(v float32) {
	o.DriveCount = v
}

// GetIoLimitPolicy returns the IoLimitPolicy field value if set, zero value otherwise.
func (o *CreateGroupDrive) GetIoLimitPolicy() string {
	if o == nil || IsNil(o.IoLimitPolicy) {
		var ret string
		return ret
	}
	return *o.IoLimitPolicy
}

// GetIoLimitPolicyOk returns a tuple with the IoLimitPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupDrive) GetIoLimitPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.IoLimitPolicy) {
		return nil, false
	}
	return o.IoLimitPolicy, true
}

// HasIoLimitPolicy returns a boolean if a field has been set.
func (o *CreateGroupDrive) HasIoLimitPolicy() bool {
	if o != nil && !IsNil(o.IoLimitPolicy) {
		return true
	}

	return false
}

// SetIoLimitPolicy gets a reference to the given string and assigns it to the IoLimitPolicy field.
func (o *CreateGroupDrive) SetIoLimitPolicy(v string) {
	o.IoLimitPolicy = &v
}

// GetExpandWithServerInstanceGroup returns the ExpandWithServerInstanceGroup field value if set, zero value otherwise.
func (o *CreateGroupDrive) GetExpandWithServerInstanceGroup() float32 {
	if o == nil || IsNil(o.ExpandWithServerInstanceGroup) {
		var ret float32
		return ret
	}
	return *o.ExpandWithServerInstanceGroup
}

// GetExpandWithServerInstanceGroupOk returns a tuple with the ExpandWithServerInstanceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupDrive) GetExpandWithServerInstanceGroupOk() (*float32, bool) {
	if o == nil || IsNil(o.ExpandWithServerInstanceGroup) {
		return nil, false
	}
	return o.ExpandWithServerInstanceGroup, true
}

// HasExpandWithServerInstanceGroup returns a boolean if a field has been set.
func (o *CreateGroupDrive) HasExpandWithServerInstanceGroup() bool {
	if o != nil && !IsNil(o.ExpandWithServerInstanceGroup) {
		return true
	}

	return false
}

// SetExpandWithServerInstanceGroup gets a reference to the given float32 and assigns it to the ExpandWithServerInstanceGroup field.
func (o *CreateGroupDrive) SetExpandWithServerInstanceGroup(v float32) {
	o.ExpandWithServerInstanceGroup = &v
}

// GetAllocationAffinity returns the AllocationAffinity field value if set, zero value otherwise.
func (o *CreateGroupDrive) GetAllocationAffinity() string {
	if o == nil || IsNil(o.AllocationAffinity) {
		var ret string
		return ret
	}
	return *o.AllocationAffinity
}

// GetAllocationAffinityOk returns a tuple with the AllocationAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupDrive) GetAllocationAffinityOk() (*string, bool) {
	if o == nil || IsNil(o.AllocationAffinity) {
		return nil, false
	}
	return o.AllocationAffinity, true
}

// HasAllocationAffinity returns a boolean if a field has been set.
func (o *CreateGroupDrive) HasAllocationAffinity() bool {
	if o != nil && !IsNil(o.AllocationAffinity) {
		return true
	}

	return false
}

// SetAllocationAffinity gets a reference to the given string and assigns it to the AllocationAffinity field.
func (o *CreateGroupDrive) SetAllocationAffinity(v string) {
	o.AllocationAffinity = &v
}

func (o CreateGroupDrive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGroupDrive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["driveSizeMbDefault"] = o.DriveSizeMbDefault
	if !IsNil(o.ExtensionInstanceId) {
		toSerialize["extensionInstanceId"] = o.ExtensionInstanceId
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["driveCount"] = o.DriveCount
	if !IsNil(o.IoLimitPolicy) {
		toSerialize["ioLimitPolicy"] = o.IoLimitPolicy
	}
	if !IsNil(o.ExpandWithServerInstanceGroup) {
		toSerialize["expandWithServerInstanceGroup"] = o.ExpandWithServerInstanceGroup
	}
	if !IsNil(o.AllocationAffinity) {
		toSerialize["allocationAffinity"] = o.AllocationAffinity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateGroupDrive) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"driveSizeMbDefault",
		"driveCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGroupDrive := _CreateGroupDrive{}

	err = json.Unmarshal(data, &varCreateGroupDrive)

	if err != nil {
		return err
	}

	*o = CreateGroupDrive(varCreateGroupDrive)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "driveSizeMbDefault")
		delete(additionalProperties, "extensionInstanceId")
		delete(additionalProperties, "label")
		delete(additionalProperties, "driveCount")
		delete(additionalProperties, "ioLimitPolicy")
		delete(additionalProperties, "expandWithServerInstanceGroup")
		delete(additionalProperties, "allocationAffinity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateGroupDrive struct {
	value *CreateGroupDrive
	isSet bool
}

func (v NullableCreateGroupDrive) Get() *CreateGroupDrive {
	return v.value
}

func (v *NullableCreateGroupDrive) Set(val *CreateGroupDrive) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGroupDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGroupDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGroupDrive(val *CreateGroupDrive) *NullableCreateGroupDrive {
	return &NullableCreateGroupDrive{value: val, isSet: true}
}

func (v NullableCreateGroupDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGroupDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


