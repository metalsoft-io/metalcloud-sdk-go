/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UserConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserConfiguration{}

// UserConfiguration struct for UserConfiguration
type UserConfiguration struct {
	// Revision of the user configuration
	Revision float32 `json:"revision"`
	// The display name of the user
	DisplayName string `json:"displayName"`
	// The email status of the user
	EmailStatus string `json:"emailStatus"`
	// The language of the user
	Language string `json:"language"`
	// The brand of the user
	Brand string `json:"brand"`
	// Whether the user is a brand manager
	IsBrandManager bool `json:"isBrandManager"`
	// The timestamp when the user logged in last
	LastLoginTimestamp string `json:"lastLoginTimestamp"`
	// The last login type of the user
	LastLoginType string `json:"lastLoginType"`
	// Whether the user is blocked
	IsBlocked bool `json:"isBlocked"`
	// Whether the user must change password
	PasswordChangeRequired bool `json:"passwordChangeRequired"`
	// The access level of the user
	AccessLevel string `json:"accessLevel"`
	// Whether the user is billable
	IsBillable bool `json:"isBillable"`
	// Whether the user is in testing mode
	IsTestingMode bool `json:"isTestingMode"`
	// The default infrastructure ID of the user
	InfrastructureIdDefault *float32 `json:"infrastructureIdDefault,omitempty"`
	// Whether the user must change authenticator
	AuthenticatorMustChange bool `json:"authenticatorMustChange"`
	// The timestamp when the authenticator was created
	AuthenticatorCreatedTimestamp string `json:"authenticatorCreatedTimestamp"`
	// The promotion tags of the user
	PromotionTags []string `json:"promotionTags,omitempty"`
	// The experimental tags of the user
	ExperimentalTags []string `json:"experimentalTags,omitempty"`
	// The external IDs of the user
	ExternalIds map[string]interface{} `json:"externalIds,omitempty"`
	// Whether the user is excluded from reports
	ExcludeFromReports bool `json:"excludeFromReports"`
	// Whether the user is a test account
	IsTestAccount bool `json:"isTestAccount"`
	// Whether the user is a archived
	IsArchived bool `json:"isArchived"`
	// Whether the user is a datastore publisher
	IsDatastorePublisher bool `json:"isDatastorePublisher"`
	// The account ID of the user
	AccountId *float32 `json:"accountId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserConfiguration UserConfiguration

// NewUserConfiguration instantiates a new UserConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConfiguration(revision float32, displayName string, emailStatus string, language string, brand string, isBrandManager bool, lastLoginTimestamp string, lastLoginType string, isBlocked bool, passwordChangeRequired bool, accessLevel string, isBillable bool, isTestingMode bool, authenticatorMustChange bool, authenticatorCreatedTimestamp string, excludeFromReports bool, isTestAccount bool, isArchived bool, isDatastorePublisher bool) *UserConfiguration {
	this := UserConfiguration{}
	this.Revision = revision
	this.DisplayName = displayName
	this.EmailStatus = emailStatus
	this.Language = language
	this.Brand = brand
	this.IsBrandManager = isBrandManager
	this.LastLoginTimestamp = lastLoginTimestamp
	this.LastLoginType = lastLoginType
	this.IsBlocked = isBlocked
	this.PasswordChangeRequired = passwordChangeRequired
	this.AccessLevel = accessLevel
	this.IsBillable = isBillable
	this.IsTestingMode = isTestingMode
	this.AuthenticatorMustChange = authenticatorMustChange
	this.AuthenticatorCreatedTimestamp = authenticatorCreatedTimestamp
	this.ExcludeFromReports = excludeFromReports
	this.IsTestAccount = isTestAccount
	this.IsArchived = isArchived
	this.IsDatastorePublisher = isDatastorePublisher
	return &this
}

// NewUserConfigurationWithDefaults instantiates a new UserConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConfigurationWithDefaults() *UserConfiguration {
	this := UserConfiguration{}
	var brand string = "default"
	this.Brand = brand
	var lastLoginType string = "md5"
	this.LastLoginType = lastLoginType
	return &this
}

// GetRevision returns the Revision field value
func (o *UserConfiguration) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *UserConfiguration) SetRevision(v float32) {
	o.Revision = v
}

// GetDisplayName returns the DisplayName field value
func (o *UserConfiguration) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *UserConfiguration) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetEmailStatus returns the EmailStatus field value
func (o *UserConfiguration) GetEmailStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailStatus
}

// GetEmailStatusOk returns a tuple with the EmailStatus field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetEmailStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailStatus, true
}

// SetEmailStatus sets field value
func (o *UserConfiguration) SetEmailStatus(v string) {
	o.EmailStatus = v
}

// GetLanguage returns the Language field value
func (o *UserConfiguration) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *UserConfiguration) SetLanguage(v string) {
	o.Language = v
}

// GetBrand returns the Brand field value
func (o *UserConfiguration) GetBrand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Brand
}

// GetBrandOk returns a tuple with the Brand field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetBrandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Brand, true
}

// SetBrand sets field value
func (o *UserConfiguration) SetBrand(v string) {
	o.Brand = v
}

// GetIsBrandManager returns the IsBrandManager field value
func (o *UserConfiguration) GetIsBrandManager() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBrandManager
}

// GetIsBrandManagerOk returns a tuple with the IsBrandManager field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetIsBrandManagerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBrandManager, true
}

// SetIsBrandManager sets field value
func (o *UserConfiguration) SetIsBrandManager(v bool) {
	o.IsBrandManager = v
}

// GetLastLoginTimestamp returns the LastLoginTimestamp field value
func (o *UserConfiguration) GetLastLoginTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastLoginTimestamp
}

// GetLastLoginTimestampOk returns a tuple with the LastLoginTimestamp field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetLastLoginTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastLoginTimestamp, true
}

// SetLastLoginTimestamp sets field value
func (o *UserConfiguration) SetLastLoginTimestamp(v string) {
	o.LastLoginTimestamp = v
}

// GetLastLoginType returns the LastLoginType field value
func (o *UserConfiguration) GetLastLoginType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastLoginType
}

// GetLastLoginTypeOk returns a tuple with the LastLoginType field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetLastLoginTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastLoginType, true
}

// SetLastLoginType sets field value
func (o *UserConfiguration) SetLastLoginType(v string) {
	o.LastLoginType = v
}

// GetIsBlocked returns the IsBlocked field value
func (o *UserConfiguration) GetIsBlocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBlocked
}

// GetIsBlockedOk returns a tuple with the IsBlocked field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetIsBlockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBlocked, true
}

// SetIsBlocked sets field value
func (o *UserConfiguration) SetIsBlocked(v bool) {
	o.IsBlocked = v
}

// GetPasswordChangeRequired returns the PasswordChangeRequired field value
func (o *UserConfiguration) GetPasswordChangeRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PasswordChangeRequired
}

// GetPasswordChangeRequiredOk returns a tuple with the PasswordChangeRequired field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetPasswordChangeRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordChangeRequired, true
}

// SetPasswordChangeRequired sets field value
func (o *UserConfiguration) SetPasswordChangeRequired(v bool) {
	o.PasswordChangeRequired = v
}

// GetAccessLevel returns the AccessLevel field value
func (o *UserConfiguration) GetAccessLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessLevel
}

// GetAccessLevelOk returns a tuple with the AccessLevel field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetAccessLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessLevel, true
}

// SetAccessLevel sets field value
func (o *UserConfiguration) SetAccessLevel(v string) {
	o.AccessLevel = v
}

// GetIsBillable returns the IsBillable field value
func (o *UserConfiguration) GetIsBillable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBillable
}

// GetIsBillableOk returns a tuple with the IsBillable field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetIsBillableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBillable, true
}

// SetIsBillable sets field value
func (o *UserConfiguration) SetIsBillable(v bool) {
	o.IsBillable = v
}

// GetIsTestingMode returns the IsTestingMode field value
func (o *UserConfiguration) GetIsTestingMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTestingMode
}

// GetIsTestingModeOk returns a tuple with the IsTestingMode field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetIsTestingModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTestingMode, true
}

// SetIsTestingMode sets field value
func (o *UserConfiguration) SetIsTestingMode(v bool) {
	o.IsTestingMode = v
}

// GetInfrastructureIdDefault returns the InfrastructureIdDefault field value if set, zero value otherwise.
func (o *UserConfiguration) GetInfrastructureIdDefault() float32 {
	if o == nil || IsNil(o.InfrastructureIdDefault) {
		var ret float32
		return ret
	}
	return *o.InfrastructureIdDefault
}

// GetInfrastructureIdDefaultOk returns a tuple with the InfrastructureIdDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetInfrastructureIdDefaultOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureIdDefault) {
		return nil, false
	}
	return o.InfrastructureIdDefault, true
}

// HasInfrastructureIdDefault returns a boolean if a field has been set.
func (o *UserConfiguration) HasInfrastructureIdDefault() bool {
	if o != nil && !IsNil(o.InfrastructureIdDefault) {
		return true
	}

	return false
}

// SetInfrastructureIdDefault gets a reference to the given float32 and assigns it to the InfrastructureIdDefault field.
func (o *UserConfiguration) SetInfrastructureIdDefault(v float32) {
	o.InfrastructureIdDefault = &v
}

// GetAuthenticatorMustChange returns the AuthenticatorMustChange field value
func (o *UserConfiguration) GetAuthenticatorMustChange() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AuthenticatorMustChange
}

// GetAuthenticatorMustChangeOk returns a tuple with the AuthenticatorMustChange field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetAuthenticatorMustChangeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticatorMustChange, true
}

// SetAuthenticatorMustChange sets field value
func (o *UserConfiguration) SetAuthenticatorMustChange(v bool) {
	o.AuthenticatorMustChange = v
}

// GetAuthenticatorCreatedTimestamp returns the AuthenticatorCreatedTimestamp field value
func (o *UserConfiguration) GetAuthenticatorCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthenticatorCreatedTimestamp
}

// GetAuthenticatorCreatedTimestampOk returns a tuple with the AuthenticatorCreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetAuthenticatorCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthenticatorCreatedTimestamp, true
}

// SetAuthenticatorCreatedTimestamp sets field value
func (o *UserConfiguration) SetAuthenticatorCreatedTimestamp(v string) {
	o.AuthenticatorCreatedTimestamp = v
}

// GetPromotionTags returns the PromotionTags field value if set, zero value otherwise.
func (o *UserConfiguration) GetPromotionTags() []string {
	if o == nil || IsNil(o.PromotionTags) {
		var ret []string
		return ret
	}
	return o.PromotionTags
}

// GetPromotionTagsOk returns a tuple with the PromotionTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetPromotionTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.PromotionTags) {
		return nil, false
	}
	return o.PromotionTags, true
}

// HasPromotionTags returns a boolean if a field has been set.
func (o *UserConfiguration) HasPromotionTags() bool {
	if o != nil && !IsNil(o.PromotionTags) {
		return true
	}

	return false
}

// SetPromotionTags gets a reference to the given []string and assigns it to the PromotionTags field.
func (o *UserConfiguration) SetPromotionTags(v []string) {
	o.PromotionTags = v
}

// GetExperimentalTags returns the ExperimentalTags field value if set, zero value otherwise.
func (o *UserConfiguration) GetExperimentalTags() []string {
	if o == nil || IsNil(o.ExperimentalTags) {
		var ret []string
		return ret
	}
	return o.ExperimentalTags
}

// GetExperimentalTagsOk returns a tuple with the ExperimentalTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetExperimentalTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExperimentalTags) {
		return nil, false
	}
	return o.ExperimentalTags, true
}

// HasExperimentalTags returns a boolean if a field has been set.
func (o *UserConfiguration) HasExperimentalTags() bool {
	if o != nil && !IsNil(o.ExperimentalTags) {
		return true
	}

	return false
}

// SetExperimentalTags gets a reference to the given []string and assigns it to the ExperimentalTags field.
func (o *UserConfiguration) SetExperimentalTags(v []string) {
	o.ExperimentalTags = v
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise.
func (o *UserConfiguration) GetExternalIds() map[string]interface{} {
	if o == nil || IsNil(o.ExternalIds) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetExternalIdsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExternalIds) {
		return map[string]interface{}{}, false
	}
	return o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *UserConfiguration) HasExternalIds() bool {
	if o != nil && !IsNil(o.ExternalIds) {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given map[string]interface{} and assigns it to the ExternalIds field.
func (o *UserConfiguration) SetExternalIds(v map[string]interface{}) {
	o.ExternalIds = v
}

// GetExcludeFromReports returns the ExcludeFromReports field value
func (o *UserConfiguration) GetExcludeFromReports() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExcludeFromReports
}

// GetExcludeFromReportsOk returns a tuple with the ExcludeFromReports field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetExcludeFromReportsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExcludeFromReports, true
}

// SetExcludeFromReports sets field value
func (o *UserConfiguration) SetExcludeFromReports(v bool) {
	o.ExcludeFromReports = v
}

// GetIsTestAccount returns the IsTestAccount field value
func (o *UserConfiguration) GetIsTestAccount() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTestAccount
}

// GetIsTestAccountOk returns a tuple with the IsTestAccount field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetIsTestAccountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTestAccount, true
}

// SetIsTestAccount sets field value
func (o *UserConfiguration) SetIsTestAccount(v bool) {
	o.IsTestAccount = v
}

// GetIsArchived returns the IsArchived field value
func (o *UserConfiguration) GetIsArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetIsArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsArchived, true
}

// SetIsArchived sets field value
func (o *UserConfiguration) SetIsArchived(v bool) {
	o.IsArchived = v
}

// GetIsDatastorePublisher returns the IsDatastorePublisher field value
func (o *UserConfiguration) GetIsDatastorePublisher() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDatastorePublisher
}

// GetIsDatastorePublisherOk returns a tuple with the IsDatastorePublisher field value
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetIsDatastorePublisherOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDatastorePublisher, true
}

// SetIsDatastorePublisher sets field value
func (o *UserConfiguration) SetIsDatastorePublisher(v bool) {
	o.IsDatastorePublisher = v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *UserConfiguration) GetAccountId() float32 {
	if o == nil || IsNil(o.AccountId) {
		var ret float32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConfiguration) GetAccountIdOk() (*float32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *UserConfiguration) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given float32 and assigns it to the AccountId field.
func (o *UserConfiguration) SetAccountId(v float32) {
	o.AccountId = &v
}

func (o UserConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["revision"] = o.Revision
	toSerialize["displayName"] = o.DisplayName
	toSerialize["emailStatus"] = o.EmailStatus
	toSerialize["language"] = o.Language
	toSerialize["brand"] = o.Brand
	toSerialize["isBrandManager"] = o.IsBrandManager
	toSerialize["lastLoginTimestamp"] = o.LastLoginTimestamp
	toSerialize["lastLoginType"] = o.LastLoginType
	toSerialize["isBlocked"] = o.IsBlocked
	toSerialize["passwordChangeRequired"] = o.PasswordChangeRequired
	toSerialize["accessLevel"] = o.AccessLevel
	toSerialize["isBillable"] = o.IsBillable
	toSerialize["isTestingMode"] = o.IsTestingMode
	if !IsNil(o.InfrastructureIdDefault) {
		toSerialize["infrastructureIdDefault"] = o.InfrastructureIdDefault
	}
	toSerialize["authenticatorMustChange"] = o.AuthenticatorMustChange
	toSerialize["authenticatorCreatedTimestamp"] = o.AuthenticatorCreatedTimestamp
	if !IsNil(o.PromotionTags) {
		toSerialize["promotionTags"] = o.PromotionTags
	}
	if !IsNil(o.ExperimentalTags) {
		toSerialize["experimentalTags"] = o.ExperimentalTags
	}
	if !IsNil(o.ExternalIds) {
		toSerialize["externalIds"] = o.ExternalIds
	}
	toSerialize["excludeFromReports"] = o.ExcludeFromReports
	toSerialize["isTestAccount"] = o.IsTestAccount
	toSerialize["isArchived"] = o.IsArchived
	toSerialize["isDatastorePublisher"] = o.IsDatastorePublisher
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revision",
		"displayName",
		"emailStatus",
		"language",
		"brand",
		"isBrandManager",
		"lastLoginTimestamp",
		"lastLoginType",
		"isBlocked",
		"passwordChangeRequired",
		"accessLevel",
		"isBillable",
		"isTestingMode",
		"authenticatorMustChange",
		"authenticatorCreatedTimestamp",
		"excludeFromReports",
		"isTestAccount",
		"isArchived",
		"isDatastorePublisher",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserConfiguration := _UserConfiguration{}

	err = json.Unmarshal(data, &varUserConfiguration)

	if err != nil {
		return err
	}

	*o = UserConfiguration(varUserConfiguration)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "revision")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "emailStatus")
		delete(additionalProperties, "language")
		delete(additionalProperties, "brand")
		delete(additionalProperties, "isBrandManager")
		delete(additionalProperties, "lastLoginTimestamp")
		delete(additionalProperties, "lastLoginType")
		delete(additionalProperties, "isBlocked")
		delete(additionalProperties, "passwordChangeRequired")
		delete(additionalProperties, "accessLevel")
		delete(additionalProperties, "isBillable")
		delete(additionalProperties, "isTestingMode")
		delete(additionalProperties, "infrastructureIdDefault")
		delete(additionalProperties, "authenticatorMustChange")
		delete(additionalProperties, "authenticatorCreatedTimestamp")
		delete(additionalProperties, "promotionTags")
		delete(additionalProperties, "experimentalTags")
		delete(additionalProperties, "externalIds")
		delete(additionalProperties, "excludeFromReports")
		delete(additionalProperties, "isTestAccount")
		delete(additionalProperties, "isArchived")
		delete(additionalProperties, "isDatastorePublisher")
		delete(additionalProperties, "accountId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserConfiguration struct {
	value *UserConfiguration
	isSet bool
}

func (v NullableUserConfiguration) Get() *UserConfiguration {
	return v.value
}

func (v *NullableUserConfiguration) Set(val *UserConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConfiguration(val *UserConfiguration) *NullableUserConfiguration {
	return &NullableUserConfiguration{value: val, isSet: true}
}

func (v NullableUserConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


