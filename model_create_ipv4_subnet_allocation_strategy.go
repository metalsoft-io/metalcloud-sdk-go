/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// CreateIpv4SubnetAllocationStrategy - struct for CreateIpv4SubnetAllocationStrategy
type CreateIpv4SubnetAllocationStrategy struct {
	CreateAutoIpv4SubnetAllocationStrategy *CreateAutoIpv4SubnetAllocationStrategy
	CreateManualIpv4SubnetAllocationStrategy *CreateManualIpv4SubnetAllocationStrategy
}

// CreateAutoIpv4SubnetAllocationStrategyAsCreateIpv4SubnetAllocationStrategy is a convenience function that returns CreateAutoIpv4SubnetAllocationStrategy wrapped in CreateIpv4SubnetAllocationStrategy
func CreateAutoIpv4SubnetAllocationStrategyAsCreateIpv4SubnetAllocationStrategy(v *CreateAutoIpv4SubnetAllocationStrategy) CreateIpv4SubnetAllocationStrategy {
	return CreateIpv4SubnetAllocationStrategy{
		CreateAutoIpv4SubnetAllocationStrategy: v,
	}
}

// CreateManualIpv4SubnetAllocationStrategyAsCreateIpv4SubnetAllocationStrategy is a convenience function that returns CreateManualIpv4SubnetAllocationStrategy wrapped in CreateIpv4SubnetAllocationStrategy
func CreateManualIpv4SubnetAllocationStrategyAsCreateIpv4SubnetAllocationStrategy(v *CreateManualIpv4SubnetAllocationStrategy) CreateIpv4SubnetAllocationStrategy {
	return CreateIpv4SubnetAllocationStrategy{
		CreateManualIpv4SubnetAllocationStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateIpv4SubnetAllocationStrategy) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'auto'
	if jsonDict["kind"] == "auto" {
		// try to unmarshal JSON data into CreateAutoIpv4SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoIpv4SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoIpv4SubnetAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoIpv4SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateIpv4SubnetAllocationStrategy as CreateAutoIpv4SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'manual'
	if jsonDict["kind"] == "manual" {
		// try to unmarshal JSON data into CreateManualIpv4SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualIpv4SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualIpv4SubnetAllocationStrategy, return on the first match
		} else {
			dst.CreateManualIpv4SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateIpv4SubnetAllocationStrategy as CreateManualIpv4SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateAutoIpv4SubnetAllocationStrategy'
	if jsonDict["kind"] == "CreateAutoIpv4SubnetAllocationStrategy" {
		// try to unmarshal JSON data into CreateAutoIpv4SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateAutoIpv4SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateAutoIpv4SubnetAllocationStrategy, return on the first match
		} else {
			dst.CreateAutoIpv4SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateIpv4SubnetAllocationStrategy as CreateAutoIpv4SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CreateManualIpv4SubnetAllocationStrategy'
	if jsonDict["kind"] == "CreateManualIpv4SubnetAllocationStrategy" {
		// try to unmarshal JSON data into CreateManualIpv4SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.CreateManualIpv4SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.CreateManualIpv4SubnetAllocationStrategy, return on the first match
		} else {
			dst.CreateManualIpv4SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal CreateIpv4SubnetAllocationStrategy as CreateManualIpv4SubnetAllocationStrategy: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateIpv4SubnetAllocationStrategy) MarshalJSON() ([]byte, error) {
	if src.CreateAutoIpv4SubnetAllocationStrategy != nil {
		return json.Marshal(&src.CreateAutoIpv4SubnetAllocationStrategy)
	}

	if src.CreateManualIpv4SubnetAllocationStrategy != nil {
		return json.Marshal(&src.CreateManualIpv4SubnetAllocationStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateIpv4SubnetAllocationStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateAutoIpv4SubnetAllocationStrategy != nil {
		return obj.CreateAutoIpv4SubnetAllocationStrategy
	}

	if obj.CreateManualIpv4SubnetAllocationStrategy != nil {
		return obj.CreateManualIpv4SubnetAllocationStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj CreateIpv4SubnetAllocationStrategy) GetActualInstanceValue() (interface{}) {
	if obj.CreateAutoIpv4SubnetAllocationStrategy != nil {
		return *obj.CreateAutoIpv4SubnetAllocationStrategy
	}

	if obj.CreateManualIpv4SubnetAllocationStrategy != nil {
		return *obj.CreateManualIpv4SubnetAllocationStrategy
	}

	// all schemas are nil
	return nil
}

type NullableCreateIpv4SubnetAllocationStrategy struct {
	value *CreateIpv4SubnetAllocationStrategy
	isSet bool
}

func (v NullableCreateIpv4SubnetAllocationStrategy) Get() *CreateIpv4SubnetAllocationStrategy {
	return v.value
}

func (v *NullableCreateIpv4SubnetAllocationStrategy) Set(val *CreateIpv4SubnetAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIpv4SubnetAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIpv4SubnetAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIpv4SubnetAllocationStrategy(val *CreateIpv4SubnetAllocationStrategy) *NullableCreateIpv4SubnetAllocationStrategy {
	return &NullableCreateIpv4SubnetAllocationStrategy{value: val, isSet: true}
}

func (v NullableCreateIpv4SubnetAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIpv4SubnetAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


