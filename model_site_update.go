/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SiteUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteUpdate{}

// SiteUpdate struct for SiteUpdate
type SiteUpdate struct {
	// The site unique slug
	Slug *string `json:"slug,omitempty"`
	// The site name
	Name *string `json:"name,omitempty"`
	// Location details
	Location *Location `json:"location,omitempty"`
	// True if the site is hidden
	IsHidden *bool `json:"isHidden,omitempty"`
	// True if the site is in maintenance mode
	IsInMaintenance *bool `json:"isInMaintenance,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SiteUpdate SiteUpdate

// NewSiteUpdate instantiates a new SiteUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteUpdate() *SiteUpdate {
	this := SiteUpdate{}
	return &this
}

// NewSiteUpdateWithDefaults instantiates a new SiteUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteUpdateWithDefaults() *SiteUpdate {
	this := SiteUpdate{}
	return &this
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *SiteUpdate) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteUpdate) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *SiteUpdate) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *SiteUpdate) SetSlug(v string) {
	o.Slug = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SiteUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SiteUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SiteUpdate) SetName(v string) {
	o.Name = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SiteUpdate) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteUpdate) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SiteUpdate) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *SiteUpdate) SetLocation(v Location) {
	o.Location = &v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *SiteUpdate) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteUpdate) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *SiteUpdate) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *SiteUpdate) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetIsInMaintenance returns the IsInMaintenance field value if set, zero value otherwise.
func (o *SiteUpdate) GetIsInMaintenance() bool {
	if o == nil || IsNil(o.IsInMaintenance) {
		var ret bool
		return ret
	}
	return *o.IsInMaintenance
}

// GetIsInMaintenanceOk returns a tuple with the IsInMaintenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteUpdate) GetIsInMaintenanceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInMaintenance) {
		return nil, false
	}
	return o.IsInMaintenance, true
}

// HasIsInMaintenance returns a boolean if a field has been set.
func (o *SiteUpdate) HasIsInMaintenance() bool {
	if o != nil && !IsNil(o.IsInMaintenance) {
		return true
	}

	return false
}

// SetIsInMaintenance gets a reference to the given bool and assigns it to the IsInMaintenance field.
func (o *SiteUpdate) SetIsInMaintenance(v bool) {
	o.IsInMaintenance = &v
}

func (o SiteUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.IsHidden) {
		toSerialize["isHidden"] = o.IsHidden
	}
	if !IsNil(o.IsInMaintenance) {
		toSerialize["isInMaintenance"] = o.IsInMaintenance
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SiteUpdate) UnmarshalJSON(data []byte) (err error) {
	varSiteUpdate := _SiteUpdate{}

	err = json.Unmarshal(data, &varSiteUpdate)

	if err != nil {
		return err
	}

	*o = SiteUpdate(varSiteUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "slug")
		delete(additionalProperties, "name")
		delete(additionalProperties, "location")
		delete(additionalProperties, "isHidden")
		delete(additionalProperties, "isInMaintenance")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSiteUpdate struct {
	value *SiteUpdate
	isSet bool
}

func (v NullableSiteUpdate) Get() *SiteUpdate {
	return v.value
}

func (v *NullableSiteUpdate) Set(val *SiteUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteUpdate(val *SiteUpdate) *NullableSiteUpdate {
	return &NullableSiteUpdate{value: val, isSet: true}
}

func (v NullableSiteUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


