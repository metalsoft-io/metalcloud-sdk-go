/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the RedundancyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedundancyConfig{}

// RedundancyConfig struct for RedundancyConfig
type RedundancyConfig struct {
	// The redundancy mode
	Mode NetworkEndpointGroupRedundancyMode `json:"mode"`
	// The redundancy implementation configuration
	Implementation NullableRedundancyImplementation `json:"implementation,omitempty"`
	// The redundancy group index used for server only mode
	RedundancyGroupIndex NullableInt32 `json:"redundancyGroupIndex,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RedundancyConfig RedundancyConfig

// NewRedundancyConfig instantiates a new RedundancyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedundancyConfig(mode NetworkEndpointGroupRedundancyMode) *RedundancyConfig {
	this := RedundancyConfig{}
	this.Mode = mode
	return &this
}

// NewRedundancyConfigWithDefaults instantiates a new RedundancyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedundancyConfigWithDefaults() *RedundancyConfig {
	this := RedundancyConfig{}
	return &this
}

// GetMode returns the Mode field value
func (o *RedundancyConfig) GetMode() NetworkEndpointGroupRedundancyMode {
	if o == nil {
		var ret NetworkEndpointGroupRedundancyMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *RedundancyConfig) GetModeOk() (*NetworkEndpointGroupRedundancyMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *RedundancyConfig) SetMode(v NetworkEndpointGroupRedundancyMode) {
	o.Mode = v
}

// GetImplementation returns the Implementation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedundancyConfig) GetImplementation() RedundancyImplementation {
	if o == nil || IsNil(o.Implementation.Get()) {
		var ret RedundancyImplementation
		return ret
	}
	return *o.Implementation.Get()
}

// GetImplementationOk returns a tuple with the Implementation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedundancyConfig) GetImplementationOk() (*RedundancyImplementation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Implementation.Get(), o.Implementation.IsSet()
}

// HasImplementation returns a boolean if a field has been set.
func (o *RedundancyConfig) HasImplementation() bool {
	if o != nil && o.Implementation.IsSet() {
		return true
	}

	return false
}

// SetImplementation gets a reference to the given NullableRedundancyImplementation and assigns it to the Implementation field.
func (o *RedundancyConfig) SetImplementation(v RedundancyImplementation) {
	o.Implementation.Set(&v)
}
// SetImplementationNil sets the value for Implementation to be an explicit nil
func (o *RedundancyConfig) SetImplementationNil() {
	o.Implementation.Set(nil)
}

// UnsetImplementation ensures that no value is present for Implementation, not even an explicit nil
func (o *RedundancyConfig) UnsetImplementation() {
	o.Implementation.Unset()
}

// GetRedundancyGroupIndex returns the RedundancyGroupIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedundancyConfig) GetRedundancyGroupIndex() int32 {
	if o == nil || IsNil(o.RedundancyGroupIndex.Get()) {
		var ret int32
		return ret
	}
	return *o.RedundancyGroupIndex.Get()
}

// GetRedundancyGroupIndexOk returns a tuple with the RedundancyGroupIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedundancyConfig) GetRedundancyGroupIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedundancyGroupIndex.Get(), o.RedundancyGroupIndex.IsSet()
}

// HasRedundancyGroupIndex returns a boolean if a field has been set.
func (o *RedundancyConfig) HasRedundancyGroupIndex() bool {
	if o != nil && o.RedundancyGroupIndex.IsSet() {
		return true
	}

	return false
}

// SetRedundancyGroupIndex gets a reference to the given NullableInt32 and assigns it to the RedundancyGroupIndex field.
func (o *RedundancyConfig) SetRedundancyGroupIndex(v int32) {
	o.RedundancyGroupIndex.Set(&v)
}
// SetRedundancyGroupIndexNil sets the value for RedundancyGroupIndex to be an explicit nil
func (o *RedundancyConfig) SetRedundancyGroupIndexNil() {
	o.RedundancyGroupIndex.Set(nil)
}

// UnsetRedundancyGroupIndex ensures that no value is present for RedundancyGroupIndex, not even an explicit nil
func (o *RedundancyConfig) UnsetRedundancyGroupIndex() {
	o.RedundancyGroupIndex.Unset()
}

func (o RedundancyConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedundancyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mode"] = o.Mode
	if o.Implementation.IsSet() {
		toSerialize["implementation"] = o.Implementation.Get()
	}
	if o.RedundancyGroupIndex.IsSet() {
		toSerialize["redundancyGroupIndex"] = o.RedundancyGroupIndex.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RedundancyConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRedundancyConfig := _RedundancyConfig{}

	err = json.Unmarshal(data, &varRedundancyConfig)

	if err != nil {
		return err
	}

	*o = RedundancyConfig(varRedundancyConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mode")
		delete(additionalProperties, "implementation")
		delete(additionalProperties, "redundancyGroupIndex")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRedundancyConfig struct {
	value *RedundancyConfig
	isSet bool
}

func (v NullableRedundancyConfig) Get() *RedundancyConfig {
	return v.value
}

func (v *NullableRedundancyConfig) Set(val *RedundancyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRedundancyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRedundancyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedundancyConfig(val *RedundancyConfig) *NullableRedundancyConfig {
	return &NullableRedundancyConfig{value: val, isSet: true}
}

func (v NullableRedundancyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedundancyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


