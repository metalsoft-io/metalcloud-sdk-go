/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UserPasswordRevealPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPasswordRevealPermission{}

// UserPasswordRevealPermission struct for UserPasswordRevealPermission
type UserPasswordRevealPermission struct {
	// The password reveal permission for the user
	PasswordRevealPermission string `json:"passwordRevealPermission"`
	// Whether to enable the permission
	EnablePermission *bool `json:"enablePermission,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserPasswordRevealPermission UserPasswordRevealPermission

// NewUserPasswordRevealPermission instantiates a new UserPasswordRevealPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPasswordRevealPermission(passwordRevealPermission string) *UserPasswordRevealPermission {
	this := UserPasswordRevealPermission{}
	this.PasswordRevealPermission = passwordRevealPermission
	return &this
}

// NewUserPasswordRevealPermissionWithDefaults instantiates a new UserPasswordRevealPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordRevealPermissionWithDefaults() *UserPasswordRevealPermission {
	this := UserPasswordRevealPermission{}
	return &this
}

// GetPasswordRevealPermission returns the PasswordRevealPermission field value
func (o *UserPasswordRevealPermission) GetPasswordRevealPermission() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PasswordRevealPermission
}

// GetPasswordRevealPermissionOk returns a tuple with the PasswordRevealPermission field value
// and a boolean to check if the value has been set.
func (o *UserPasswordRevealPermission) GetPasswordRevealPermissionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordRevealPermission, true
}

// SetPasswordRevealPermission sets field value
func (o *UserPasswordRevealPermission) SetPasswordRevealPermission(v string) {
	o.PasswordRevealPermission = v
}

// GetEnablePermission returns the EnablePermission field value if set, zero value otherwise.
func (o *UserPasswordRevealPermission) GetEnablePermission() bool {
	if o == nil || IsNil(o.EnablePermission) {
		var ret bool
		return ret
	}
	return *o.EnablePermission
}

// GetEnablePermissionOk returns a tuple with the EnablePermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordRevealPermission) GetEnablePermissionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePermission) {
		return nil, false
	}
	return o.EnablePermission, true
}

// HasEnablePermission returns a boolean if a field has been set.
func (o *UserPasswordRevealPermission) HasEnablePermission() bool {
	if o != nil && !IsNil(o.EnablePermission) {
		return true
	}

	return false
}

// SetEnablePermission gets a reference to the given bool and assigns it to the EnablePermission field.
func (o *UserPasswordRevealPermission) SetEnablePermission(v bool) {
	o.EnablePermission = &v
}

func (o UserPasswordRevealPermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPasswordRevealPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["passwordRevealPermission"] = o.PasswordRevealPermission
	if !IsNil(o.EnablePermission) {
		toSerialize["enablePermission"] = o.EnablePermission
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserPasswordRevealPermission) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"passwordRevealPermission",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPasswordRevealPermission := _UserPasswordRevealPermission{}

	err = json.Unmarshal(data, &varUserPasswordRevealPermission)

	if err != nil {
		return err
	}

	*o = UserPasswordRevealPermission(varUserPasswordRevealPermission)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "passwordRevealPermission")
		delete(additionalProperties, "enablePermission")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserPasswordRevealPermission struct {
	value *UserPasswordRevealPermission
	isSet bool
}

func (v NullableUserPasswordRevealPermission) Get() *UserPasswordRevealPermission {
	return v.value
}

func (v *NullableUserPasswordRevealPermission) Set(val *UserPasswordRevealPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPasswordRevealPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPasswordRevealPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPasswordRevealPermission(val *UserPasswordRevealPermission) *NullableUserPasswordRevealPermission {
	return &NullableUserPasswordRevealPermission{value: val, isSet: true}
}

func (v NullableUserPasswordRevealPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPasswordRevealPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


