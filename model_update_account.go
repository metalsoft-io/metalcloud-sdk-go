/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAccount{}

// UpdateAccount struct for UpdateAccount
type UpdateAccount struct {
	// The ID of the parent account
	ParentAccountId *float32 `json:"parentAccountId,omitempty"`
	// The name of the account
	Name *string `json:"name,omitempty"`
	// The code of the account
	Code *string `json:"code,omitempty"`
	// The fiscal number of the account
	FiscalNumber *string `json:"fiscalNumber,omitempty"`
	Address *AccountAddress `json:"address,omitempty"`
	// The user ID of the primary contact
	PrimaryContactId *float32 `json:"primaryContactId,omitempty"`
	// The user ID of the secondary contact
	SecondaryContactId *float32 `json:"secondaryContactId,omitempty"`
	// Whether the account is archived
	IsArchived *bool `json:"isArchived,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateAccount UpdateAccount

// NewUpdateAccount instantiates a new UpdateAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAccount() *UpdateAccount {
	this := UpdateAccount{}
	return &this
}

// NewUpdateAccountWithDefaults instantiates a new UpdateAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAccountWithDefaults() *UpdateAccount {
	this := UpdateAccount{}
	return &this
}

// GetParentAccountId returns the ParentAccountId field value if set, zero value otherwise.
func (o *UpdateAccount) GetParentAccountId() float32 {
	if o == nil || IsNil(o.ParentAccountId) {
		var ret float32
		return ret
	}
	return *o.ParentAccountId
}

// GetParentAccountIdOk returns a tuple with the ParentAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetParentAccountIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ParentAccountId) {
		return nil, false
	}
	return o.ParentAccountId, true
}

// HasParentAccountId returns a boolean if a field has been set.
func (o *UpdateAccount) HasParentAccountId() bool {
	if o != nil && !IsNil(o.ParentAccountId) {
		return true
	}

	return false
}

// SetParentAccountId gets a reference to the given float32 and assigns it to the ParentAccountId field.
func (o *UpdateAccount) SetParentAccountId(v float32) {
	o.ParentAccountId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateAccount) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateAccount) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateAccount) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UpdateAccount) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UpdateAccount) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *UpdateAccount) SetCode(v string) {
	o.Code = &v
}

// GetFiscalNumber returns the FiscalNumber field value if set, zero value otherwise.
func (o *UpdateAccount) GetFiscalNumber() string {
	if o == nil || IsNil(o.FiscalNumber) {
		var ret string
		return ret
	}
	return *o.FiscalNumber
}

// GetFiscalNumberOk returns a tuple with the FiscalNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetFiscalNumberOk() (*string, bool) {
	if o == nil || IsNil(o.FiscalNumber) {
		return nil, false
	}
	return o.FiscalNumber, true
}

// HasFiscalNumber returns a boolean if a field has been set.
func (o *UpdateAccount) HasFiscalNumber() bool {
	if o != nil && !IsNil(o.FiscalNumber) {
		return true
	}

	return false
}

// SetFiscalNumber gets a reference to the given string and assigns it to the FiscalNumber field.
func (o *UpdateAccount) SetFiscalNumber(v string) {
	o.FiscalNumber = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *UpdateAccount) GetAddress() AccountAddress {
	if o == nil || IsNil(o.Address) {
		var ret AccountAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetAddressOk() (*AccountAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *UpdateAccount) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given AccountAddress and assigns it to the Address field.
func (o *UpdateAccount) SetAddress(v AccountAddress) {
	o.Address = &v
}

// GetPrimaryContactId returns the PrimaryContactId field value if set, zero value otherwise.
func (o *UpdateAccount) GetPrimaryContactId() float32 {
	if o == nil || IsNil(o.PrimaryContactId) {
		var ret float32
		return ret
	}
	return *o.PrimaryContactId
}

// GetPrimaryContactIdOk returns a tuple with the PrimaryContactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetPrimaryContactIdOk() (*float32, bool) {
	if o == nil || IsNil(o.PrimaryContactId) {
		return nil, false
	}
	return o.PrimaryContactId, true
}

// HasPrimaryContactId returns a boolean if a field has been set.
func (o *UpdateAccount) HasPrimaryContactId() bool {
	if o != nil && !IsNil(o.PrimaryContactId) {
		return true
	}

	return false
}

// SetPrimaryContactId gets a reference to the given float32 and assigns it to the PrimaryContactId field.
func (o *UpdateAccount) SetPrimaryContactId(v float32) {
	o.PrimaryContactId = &v
}

// GetSecondaryContactId returns the SecondaryContactId field value if set, zero value otherwise.
func (o *UpdateAccount) GetSecondaryContactId() float32 {
	if o == nil || IsNil(o.SecondaryContactId) {
		var ret float32
		return ret
	}
	return *o.SecondaryContactId
}

// GetSecondaryContactIdOk returns a tuple with the SecondaryContactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetSecondaryContactIdOk() (*float32, bool) {
	if o == nil || IsNil(o.SecondaryContactId) {
		return nil, false
	}
	return o.SecondaryContactId, true
}

// HasSecondaryContactId returns a boolean if a field has been set.
func (o *UpdateAccount) HasSecondaryContactId() bool {
	if o != nil && !IsNil(o.SecondaryContactId) {
		return true
	}

	return false
}

// SetSecondaryContactId gets a reference to the given float32 and assigns it to the SecondaryContactId field.
func (o *UpdateAccount) SetSecondaryContactId(v float32) {
	o.SecondaryContactId = &v
}

// GetIsArchived returns the IsArchived field value if set, zero value otherwise.
func (o *UpdateAccount) GetIsArchived() bool {
	if o == nil || IsNil(o.IsArchived) {
		var ret bool
		return ret
	}
	return *o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAccount) GetIsArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsArchived) {
		return nil, false
	}
	return o.IsArchived, true
}

// HasIsArchived returns a boolean if a field has been set.
func (o *UpdateAccount) HasIsArchived() bool {
	if o != nil && !IsNil(o.IsArchived) {
		return true
	}

	return false
}

// SetIsArchived gets a reference to the given bool and assigns it to the IsArchived field.
func (o *UpdateAccount) SetIsArchived(v bool) {
	o.IsArchived = &v
}

func (o UpdateAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentAccountId) {
		toSerialize["parentAccountId"] = o.ParentAccountId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.FiscalNumber) {
		toSerialize["fiscalNumber"] = o.FiscalNumber
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.PrimaryContactId) {
		toSerialize["primaryContactId"] = o.PrimaryContactId
	}
	if !IsNil(o.SecondaryContactId) {
		toSerialize["secondaryContactId"] = o.SecondaryContactId
	}
	if !IsNil(o.IsArchived) {
		toSerialize["isArchived"] = o.IsArchived
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateAccount) UnmarshalJSON(data []byte) (err error) {
	varUpdateAccount := _UpdateAccount{}

	err = json.Unmarshal(data, &varUpdateAccount)

	if err != nil {
		return err
	}

	*o = UpdateAccount(varUpdateAccount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "parentAccountId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "code")
		delete(additionalProperties, "fiscalNumber")
		delete(additionalProperties, "address")
		delete(additionalProperties, "primaryContactId")
		delete(additionalProperties, "secondaryContactId")
		delete(additionalProperties, "isArchived")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateAccount struct {
	value *UpdateAccount
	isSet bool
}

func (v NullableUpdateAccount) Get() *UpdateAccount {
	return v.value
}

func (v *NullableUpdateAccount) Set(val *UpdateAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAccount(val *UpdateAccount) *NullableUpdateAccount {
	return &NullableUpdateAccount{value: val, isSet: true}
}

func (v NullableUpdateAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


