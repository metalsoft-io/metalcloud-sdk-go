/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the StoragePortDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePortDto{}

// StoragePortDto struct for StoragePortDto
type StoragePortDto struct {
	// The ID of the port.
	PortId string `json:"portId"`
	// Director id to use (for certain storage drivers)
	DirectorId *string `json:"directorId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StoragePortDto StoragePortDto

// NewStoragePortDto instantiates a new StoragePortDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePortDto(portId string) *StoragePortDto {
	this := StoragePortDto{}
	this.PortId = portId
	return &this
}

// NewStoragePortDtoWithDefaults instantiates a new StoragePortDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePortDtoWithDefaults() *StoragePortDto {
	this := StoragePortDto{}
	return &this
}

// GetPortId returns the PortId field value
func (o *StoragePortDto) GetPortId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value
// and a boolean to check if the value has been set.
func (o *StoragePortDto) GetPortIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortId, true
}

// SetPortId sets field value
func (o *StoragePortDto) SetPortId(v string) {
	o.PortId = v
}

// GetDirectorId returns the DirectorId field value if set, zero value otherwise.
func (o *StoragePortDto) GetDirectorId() string {
	if o == nil || IsNil(o.DirectorId) {
		var ret string
		return ret
	}
	return *o.DirectorId
}

// GetDirectorIdOk returns a tuple with the DirectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePortDto) GetDirectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.DirectorId) {
		return nil, false
	}
	return o.DirectorId, true
}

// HasDirectorId returns a boolean if a field has been set.
func (o *StoragePortDto) HasDirectorId() bool {
	if o != nil && !IsNil(o.DirectorId) {
		return true
	}

	return false
}

// SetDirectorId gets a reference to the given string and assigns it to the DirectorId field.
func (o *StoragePortDto) SetDirectorId(v string) {
	o.DirectorId = &v
}

func (o StoragePortDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePortDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["portId"] = o.PortId
	if !IsNil(o.DirectorId) {
		toSerialize["directorId"] = o.DirectorId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StoragePortDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"portId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoragePortDto := _StoragePortDto{}

	err = json.Unmarshal(data, &varStoragePortDto)

	if err != nil {
		return err
	}

	*o = StoragePortDto(varStoragePortDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "portId")
		delete(additionalProperties, "directorId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStoragePortDto struct {
	value *StoragePortDto
	isSet bool
}

func (v NullableStoragePortDto) Get() *StoragePortDto {
	return v.value
}

func (v *NullableStoragePortDto) Set(val *StoragePortDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePortDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePortDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePortDto(val *StoragePortDto) *NullableStoragePortDto {
	return &NullableStoragePortDto{value: val, isSet: true}
}

func (v NullableStoragePortDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePortDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


