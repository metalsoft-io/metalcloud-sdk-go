/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SharedDriveHostBulkOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedDriveHostBulkOperation{}

// SharedDriveHostBulkOperation struct for SharedDriveHostBulkOperation
type SharedDriveHostBulkOperation struct {
	// Id of the Server Instance Group Host that will be modified
	ServerInstanceGroupId float32 `json:"serverInstanceGroupId"`
	// Operation type for the Server Instance Group Host
	OperationType string `json:"operationType"`
	AdditionalProperties map[string]interface{}
}

type _SharedDriveHostBulkOperation SharedDriveHostBulkOperation

// NewSharedDriveHostBulkOperation instantiates a new SharedDriveHostBulkOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedDriveHostBulkOperation(serverInstanceGroupId float32, operationType string) *SharedDriveHostBulkOperation {
	this := SharedDriveHostBulkOperation{}
	this.ServerInstanceGroupId = serverInstanceGroupId
	this.OperationType = operationType
	return &this
}

// NewSharedDriveHostBulkOperationWithDefaults instantiates a new SharedDriveHostBulkOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedDriveHostBulkOperationWithDefaults() *SharedDriveHostBulkOperation {
	this := SharedDriveHostBulkOperation{}
	return &this
}

// GetServerInstanceGroupId returns the ServerInstanceGroupId field value
func (o *SharedDriveHostBulkOperation) GetServerInstanceGroupId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServerInstanceGroupId
}

// GetServerInstanceGroupIdOk returns a tuple with the ServerInstanceGroupId field value
// and a boolean to check if the value has been set.
func (o *SharedDriveHostBulkOperation) GetServerInstanceGroupIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerInstanceGroupId, true
}

// SetServerInstanceGroupId sets field value
func (o *SharedDriveHostBulkOperation) SetServerInstanceGroupId(v float32) {
	o.ServerInstanceGroupId = v
}

// GetOperationType returns the OperationType field value
func (o *SharedDriveHostBulkOperation) GetOperationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value
// and a boolean to check if the value has been set.
func (o *SharedDriveHostBulkOperation) GetOperationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationType, true
}

// SetOperationType sets field value
func (o *SharedDriveHostBulkOperation) SetOperationType(v string) {
	o.OperationType = v
}

func (o SharedDriveHostBulkOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedDriveHostBulkOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverInstanceGroupId"] = o.ServerInstanceGroupId
	toSerialize["operationType"] = o.OperationType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SharedDriveHostBulkOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverInstanceGroupId",
		"operationType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedDriveHostBulkOperation := _SharedDriveHostBulkOperation{}

	err = json.Unmarshal(data, &varSharedDriveHostBulkOperation)

	if err != nil {
		return err
	}

	*o = SharedDriveHostBulkOperation(varSharedDriveHostBulkOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverInstanceGroupId")
		delete(additionalProperties, "operationType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSharedDriveHostBulkOperation struct {
	value *SharedDriveHostBulkOperation
	isSet bool
}

func (v NullableSharedDriveHostBulkOperation) Get() *SharedDriveHostBulkOperation {
	return v.value
}

func (v *NullableSharedDriveHostBulkOperation) Set(val *SharedDriveHostBulkOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedDriveHostBulkOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedDriveHostBulkOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedDriveHostBulkOperation(val *SharedDriveHostBulkOperation) *NullableSharedDriveHostBulkOperation {
	return &NullableSharedDriveHostBulkOperation{value: val, isSet: true}
}

func (v NullableSharedDriveHostBulkOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedDriveHostBulkOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


