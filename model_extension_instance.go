/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtensionInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionInstance{}

// ExtensionInstance struct for ExtensionInstance
type ExtensionInstance struct {
	// The extension instance ID.
	Id float32 `json:"id"`
	// Revision number
	Revision float32 `json:"revision"`
	// The infrastructure ID.
	InfrastructureId float32 `json:"infrastructureId"`
	// The extension ID.
	ExtensionId float32 `json:"extensionId"`
	// The extension instance label. Will be automatically generated if not provided.
	Label string `json:"label"`
	// Input variables values.
	InputVariables []ExtensionVariable `json:"inputVariables"`
	// Output variables values.
	OutputVariables []ExtensionVariable `json:"outputVariables"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionInstance ExtensionInstance

// NewExtensionInstance instantiates a new ExtensionInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionInstance(id float32, revision float32, infrastructureId float32, extensionId float32, label string, inputVariables []ExtensionVariable, outputVariables []ExtensionVariable) *ExtensionInstance {
	this := ExtensionInstance{}
	this.Id = id
	this.Revision = revision
	this.InfrastructureId = infrastructureId
	this.ExtensionId = extensionId
	this.Label = label
	this.InputVariables = inputVariables
	this.OutputVariables = outputVariables
	return &this
}

// NewExtensionInstanceWithDefaults instantiates a new ExtensionInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionInstanceWithDefaults() *ExtensionInstance {
	this := ExtensionInstance{}
	return &this
}

// GetId returns the Id field value
func (o *ExtensionInstance) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExtensionInstance) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExtensionInstance) SetId(v float32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *ExtensionInstance) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *ExtensionInstance) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *ExtensionInstance) SetRevision(v float32) {
	o.Revision = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *ExtensionInstance) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *ExtensionInstance) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *ExtensionInstance) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetExtensionId returns the ExtensionId field value
func (o *ExtensionInstance) GetExtensionId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ExtensionId
}

// GetExtensionIdOk returns a tuple with the ExtensionId field value
// and a boolean to check if the value has been set.
func (o *ExtensionInstance) GetExtensionIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtensionId, true
}

// SetExtensionId sets field value
func (o *ExtensionInstance) SetExtensionId(v float32) {
	o.ExtensionId = v
}

// GetLabel returns the Label field value
func (o *ExtensionInstance) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ExtensionInstance) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ExtensionInstance) SetLabel(v string) {
	o.Label = v
}

// GetInputVariables returns the InputVariables field value
func (o *ExtensionInstance) GetInputVariables() []ExtensionVariable {
	if o == nil {
		var ret []ExtensionVariable
		return ret
	}

	return o.InputVariables
}

// GetInputVariablesOk returns a tuple with the InputVariables field value
// and a boolean to check if the value has been set.
func (o *ExtensionInstance) GetInputVariablesOk() ([]ExtensionVariable, bool) {
	if o == nil {
		return nil, false
	}
	return o.InputVariables, true
}

// SetInputVariables sets field value
func (o *ExtensionInstance) SetInputVariables(v []ExtensionVariable) {
	o.InputVariables = v
}

// GetOutputVariables returns the OutputVariables field value
func (o *ExtensionInstance) GetOutputVariables() []ExtensionVariable {
	if o == nil {
		var ret []ExtensionVariable
		return ret
	}

	return o.OutputVariables
}

// GetOutputVariablesOk returns a tuple with the OutputVariables field value
// and a boolean to check if the value has been set.
func (o *ExtensionInstance) GetOutputVariablesOk() ([]ExtensionVariable, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutputVariables, true
}

// SetOutputVariables sets field value
func (o *ExtensionInstance) SetOutputVariables(v []ExtensionVariable) {
	o.OutputVariables = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExtensionInstance) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionInstance) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExtensionInstance) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ExtensionInstance) SetLinks(v []Link) {
	o.Links = v
}

func (o ExtensionInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["extensionId"] = o.ExtensionId
	toSerialize["label"] = o.Label
	toSerialize["inputVariables"] = o.InputVariables
	toSerialize["outputVariables"] = o.OutputVariables
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"revision",
		"infrastructureId",
		"extensionId",
		"label",
		"inputVariables",
		"outputVariables",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionInstance := _ExtensionInstance{}

	err = json.Unmarshal(data, &varExtensionInstance)

	if err != nil {
		return err
	}

	*o = ExtensionInstance(varExtensionInstance)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "extensionId")
		delete(additionalProperties, "label")
		delete(additionalProperties, "inputVariables")
		delete(additionalProperties, "outputVariables")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionInstance struct {
	value *ExtensionInstance
	isSet bool
}

func (v NullableExtensionInstance) Get() *ExtensionInstance {
	return v.value
}

func (v *NullableExtensionInstance) Set(val *ExtensionInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionInstance(val *ExtensionInstance) *NullableExtensionInstance {
	return &NullableExtensionInstance{value: val, isSet: true}
}

func (v NullableExtensionInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


