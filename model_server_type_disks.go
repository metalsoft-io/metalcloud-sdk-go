/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerTypeDisks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTypeDisks{}

// ServerTypeDisks struct for ServerTypeDisks
type ServerTypeDisks struct {
	// The size of the disk in GB.
	DiskSizeGb float32 `json:"diskSizeGb"`
	// The type of the disk.
	DiskType string `json:"diskType"`
	// The count of the disks.
	DiskCount float32 `json:"diskCount"`
	AdditionalProperties map[string]interface{}
}

type _ServerTypeDisks ServerTypeDisks

// NewServerTypeDisks instantiates a new ServerTypeDisks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTypeDisks(diskSizeGb float32, diskType string, diskCount float32) *ServerTypeDisks {
	this := ServerTypeDisks{}
	this.DiskSizeGb = diskSizeGb
	this.DiskType = diskType
	this.DiskCount = diskCount
	return &this
}

// NewServerTypeDisksWithDefaults instantiates a new ServerTypeDisks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeDisksWithDefaults() *ServerTypeDisks {
	this := ServerTypeDisks{}
	return &this
}

// GetDiskSizeGb returns the DiskSizeGb field value
func (o *ServerTypeDisks) GetDiskSizeGb() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DiskSizeGb
}

// GetDiskSizeGbOk returns a tuple with the DiskSizeGb field value
// and a boolean to check if the value has been set.
func (o *ServerTypeDisks) GetDiskSizeGbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSizeGb, true
}

// SetDiskSizeGb sets field value
func (o *ServerTypeDisks) SetDiskSizeGb(v float32) {
	o.DiskSizeGb = v
}

// GetDiskType returns the DiskType field value
func (o *ServerTypeDisks) GetDiskType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiskType
}

// GetDiskTypeOk returns a tuple with the DiskType field value
// and a boolean to check if the value has been set.
func (o *ServerTypeDisks) GetDiskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskType, true
}

// SetDiskType sets field value
func (o *ServerTypeDisks) SetDiskType(v string) {
	o.DiskType = v
}

// GetDiskCount returns the DiskCount field value
func (o *ServerTypeDisks) GetDiskCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DiskCount
}

// GetDiskCountOk returns a tuple with the DiskCount field value
// and a boolean to check if the value has been set.
func (o *ServerTypeDisks) GetDiskCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskCount, true
}

// SetDiskCount sets field value
func (o *ServerTypeDisks) SetDiskCount(v float32) {
	o.DiskCount = v
}

func (o ServerTypeDisks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTypeDisks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["diskSizeGb"] = o.DiskSizeGb
	toSerialize["diskType"] = o.DiskType
	toSerialize["diskCount"] = o.DiskCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerTypeDisks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"diskSizeGb",
		"diskType",
		"diskCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerTypeDisks := _ServerTypeDisks{}

	err = json.Unmarshal(data, &varServerTypeDisks)

	if err != nil {
		return err
	}

	*o = ServerTypeDisks(varServerTypeDisks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "diskSizeGb")
		delete(additionalProperties, "diskType")
		delete(additionalProperties, "diskCount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerTypeDisks struct {
	value *ServerTypeDisks
	isSet bool
}

func (v NullableServerTypeDisks) Get() *ServerTypeDisks {
	return v.value
}

func (v *NullableServerTypeDisks) Set(val *ServerTypeDisks) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTypeDisks) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTypeDisks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTypeDisks(val *ServerTypeDisks) *NullableServerTypeDisks {
	return &NullableServerTypeDisks{value: val, isSet: true}
}

func (v NullableServerTypeDisks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTypeDisks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


