/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InfrastructureDeployShutdownOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureDeployShutdownOptions{}

// InfrastructureDeployShutdownOptions struct for InfrastructureDeployShutdownOptions
type InfrastructureDeployShutdownOptions struct {
	// Attempt soft shutdown
	AttemptSoftShutdown bool `json:"attemptSoftShutdown"`
	// Soft shutdown timeout in seconds
	SoftShutdownTimeout float32 `json:"softShutdownTimeout"`
	// Attempt hard shutdown after softShutdownTimeout expires
	AttemptHardShutdown bool `json:"attemptHardShutdown"`
	// Force shutdown
	ForceShutdown bool `json:"forceShutdown"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureDeployShutdownOptions InfrastructureDeployShutdownOptions

// NewInfrastructureDeployShutdownOptions instantiates a new InfrastructureDeployShutdownOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureDeployShutdownOptions(attemptSoftShutdown bool, softShutdownTimeout float32, attemptHardShutdown bool, forceShutdown bool) *InfrastructureDeployShutdownOptions {
	this := InfrastructureDeployShutdownOptions{}
	this.AttemptSoftShutdown = attemptSoftShutdown
	this.SoftShutdownTimeout = softShutdownTimeout
	this.AttemptHardShutdown = attemptHardShutdown
	this.ForceShutdown = forceShutdown
	return &this
}

// NewInfrastructureDeployShutdownOptionsWithDefaults instantiates a new InfrastructureDeployShutdownOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureDeployShutdownOptionsWithDefaults() *InfrastructureDeployShutdownOptions {
	this := InfrastructureDeployShutdownOptions{}
	return &this
}

// GetAttemptSoftShutdown returns the AttemptSoftShutdown field value
func (o *InfrastructureDeployShutdownOptions) GetAttemptSoftShutdown() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AttemptSoftShutdown
}

// GetAttemptSoftShutdownOk returns a tuple with the AttemptSoftShutdown field value
// and a boolean to check if the value has been set.
func (o *InfrastructureDeployShutdownOptions) GetAttemptSoftShutdownOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttemptSoftShutdown, true
}

// SetAttemptSoftShutdown sets field value
func (o *InfrastructureDeployShutdownOptions) SetAttemptSoftShutdown(v bool) {
	o.AttemptSoftShutdown = v
}

// GetSoftShutdownTimeout returns the SoftShutdownTimeout field value
func (o *InfrastructureDeployShutdownOptions) GetSoftShutdownTimeout() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SoftShutdownTimeout
}

// GetSoftShutdownTimeoutOk returns a tuple with the SoftShutdownTimeout field value
// and a boolean to check if the value has been set.
func (o *InfrastructureDeployShutdownOptions) GetSoftShutdownTimeoutOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoftShutdownTimeout, true
}

// SetSoftShutdownTimeout sets field value
func (o *InfrastructureDeployShutdownOptions) SetSoftShutdownTimeout(v float32) {
	o.SoftShutdownTimeout = v
}

// GetAttemptHardShutdown returns the AttemptHardShutdown field value
func (o *InfrastructureDeployShutdownOptions) GetAttemptHardShutdown() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AttemptHardShutdown
}

// GetAttemptHardShutdownOk returns a tuple with the AttemptHardShutdown field value
// and a boolean to check if the value has been set.
func (o *InfrastructureDeployShutdownOptions) GetAttemptHardShutdownOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttemptHardShutdown, true
}

// SetAttemptHardShutdown sets field value
func (o *InfrastructureDeployShutdownOptions) SetAttemptHardShutdown(v bool) {
	o.AttemptHardShutdown = v
}

// GetForceShutdown returns the ForceShutdown field value
func (o *InfrastructureDeployShutdownOptions) GetForceShutdown() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ForceShutdown
}

// GetForceShutdownOk returns a tuple with the ForceShutdown field value
// and a boolean to check if the value has been set.
func (o *InfrastructureDeployShutdownOptions) GetForceShutdownOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForceShutdown, true
}

// SetForceShutdown sets field value
func (o *InfrastructureDeployShutdownOptions) SetForceShutdown(v bool) {
	o.ForceShutdown = v
}

func (o InfrastructureDeployShutdownOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureDeployShutdownOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attemptSoftShutdown"] = o.AttemptSoftShutdown
	toSerialize["softShutdownTimeout"] = o.SoftShutdownTimeout
	toSerialize["attemptHardShutdown"] = o.AttemptHardShutdown
	toSerialize["forceShutdown"] = o.ForceShutdown

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureDeployShutdownOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attemptSoftShutdown",
		"softShutdownTimeout",
		"attemptHardShutdown",
		"forceShutdown",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfrastructureDeployShutdownOptions := _InfrastructureDeployShutdownOptions{}

	err = json.Unmarshal(data, &varInfrastructureDeployShutdownOptions)

	if err != nil {
		return err
	}

	*o = InfrastructureDeployShutdownOptions(varInfrastructureDeployShutdownOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "attemptSoftShutdown")
		delete(additionalProperties, "softShutdownTimeout")
		delete(additionalProperties, "attemptHardShutdown")
		delete(additionalProperties, "forceShutdown")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureDeployShutdownOptions struct {
	value *InfrastructureDeployShutdownOptions
	isSet bool
}

func (v NullableInfrastructureDeployShutdownOptions) Get() *InfrastructureDeployShutdownOptions {
	return v.value
}

func (v *NullableInfrastructureDeployShutdownOptions) Set(val *InfrastructureDeployShutdownOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureDeployShutdownOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureDeployShutdownOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureDeployShutdownOptions(val *InfrastructureDeployShutdownOptions) *NullableInfrastructureDeployShutdownOptions {
	return &NullableInfrastructureDeployShutdownOptions{value: val, isSet: true}
}

func (v NullableInfrastructureDeployShutdownOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureDeployShutdownOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


