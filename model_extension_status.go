/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ExtensionStatus Extension status
type ExtensionStatus string

// List of ExtensionStatus
const (
	EXTENSIONSTATUS_DRAFT ExtensionStatus = "draft"
	EXTENSIONSTATUS_ACTIVE ExtensionStatus = "active"
	EXTENSIONSTATUS_ARCHIVED ExtensionStatus = "archived"
)

// All allowed values of ExtensionStatus enum
var AllowedExtensionStatusEnumValues = []ExtensionStatus{
	"draft",
	"active",
	"archived",
}

func (v *ExtensionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExtensionStatus(value)
	for _, existing := range AllowedExtensionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExtensionStatus", value)
}

// NewExtensionStatusFromValue returns a pointer to a valid ExtensionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExtensionStatusFromValue(v string) (*ExtensionStatus, error) {
	ev := ExtensionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExtensionStatus: valid values are %v", v, AllowedExtensionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExtensionStatus) IsValid() bool {
	for _, existing := range AllowedExtensionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExtensionStatus value
func (v ExtensionStatus) Ptr() *ExtensionStatus {
	return &v
}

type NullableExtensionStatus struct {
	value *ExtensionStatus
	isSet bool
}

func (v NullableExtensionStatus) Get() *ExtensionStatus {
	return v.value
}

func (v *NullableExtensionStatus) Set(val *ExtensionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionStatus(val *ExtensionStatus) *NullableExtensionStatus {
	return &NullableExtensionStatus{value: val, isSet: true}
}

func (v NullableExtensionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

