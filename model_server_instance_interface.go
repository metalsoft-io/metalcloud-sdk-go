/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceInterface{}

// ServerInstanceInterface struct for ServerInstanceInterface
type ServerInstanceInterface struct {
	// The server instance interface ID.
	Id *int32 `json:"id,omitempty"`
	// Revision number
	Revision float32 `json:"revision"`
	// The server instance interface label.
	Label *string `json:"label,omitempty"`
	// Subdomain of the Server Group.
	Subdomain *string `json:"subdomain,omitempty"`
	// Subdomain permanent of the Server Group.
	SubdomainPermanent *string `json:"subdomainPermanent,omitempty"`
	// Id of the DNS subdomain for the Server Group.
	DnsSubdomainId *int32 `json:"dnsSubdomainId,omitempty"`
	// Id of the permanent DNS subdomain for the Server Group.
	DnsSubdomainPermanentId *int32 `json:"dnsSubdomainPermanentId,omitempty"`
	// Timestamp of the Server Instance creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Timestamp of the latest update for the Server Instance.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// GUI settings in JSON format.
	Meta *GenericGUISettings `json:"meta,omitempty"`
	InfrastructureId int32 `json:"infrastructureId"`
	InstanceId int32 `json:"instanceId"`
	// The index of the interface (0-based) on this server.
	Index int32 `json:"index"`
	CapacityMbps int32 `json:"capacityMbps"`
	// The ID of the network to which this interface is to be attached to.
	NetworkId *int32 `json:"networkId,omitempty"`
	SubnetPoolSanIndex *int32 `json:"subnetPoolSanIndex,omitempty"`
	VlanIdentifier *int32 `json:"vlanIdentifier,omitempty"`
	AclIdentifier *int32 `json:"aclIdentifier,omitempty"`
	NetworkEquipmentSubnetPoolSanId *int32 `json:"networkEquipmentSubnetPoolSanId,omitempty"`
	ServerInterfaceId *int32 `json:"serverInterfaceId,omitempty"`
	DirtyBit bool `json:"dirtyBit"`
	// Current status of the server instance interface.
	ServiceStatus string `json:"serviceStatus"`
	Config *ServerInstanceInterfaceConfiguration `json:"config,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceInterface ServerInstanceInterface

// NewServerInstanceInterface instantiates a new ServerInstanceInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceInterface(revision float32, createdTimestamp string, updatedTimestamp string, infrastructureId int32, instanceId int32, index int32, capacityMbps int32, dirtyBit bool, serviceStatus string) *ServerInstanceInterface {
	this := ServerInstanceInterface{}
	this.Revision = revision
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.InfrastructureId = infrastructureId
	this.InstanceId = instanceId
	this.Index = index
	this.CapacityMbps = capacityMbps
	this.DirtyBit = dirtyBit
	this.ServiceStatus = serviceStatus
	return &this
}

// NewServerInstanceInterfaceWithDefaults instantiates a new ServerInstanceInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceInterfaceWithDefaults() *ServerInstanceInterface {
	this := ServerInstanceInterface{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ServerInstanceInterface) SetId(v int32) {
	o.Id = &v
}

// GetRevision returns the Revision field value
func (o *ServerInstanceInterface) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *ServerInstanceInterface) SetRevision(v float32) {
	o.Revision = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ServerInstanceInterface) SetLabel(v string) {
	o.Label = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *ServerInstanceInterface) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetSubdomainPermanent() string {
	if o == nil || IsNil(o.SubdomainPermanent) {
		var ret string
		return ret
	}
	return *o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil || IsNil(o.SubdomainPermanent) {
		return nil, false
	}
	return o.SubdomainPermanent, true
}

// HasSubdomainPermanent returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasSubdomainPermanent() bool {
	if o != nil && !IsNil(o.SubdomainPermanent) {
		return true
	}

	return false
}

// SetSubdomainPermanent gets a reference to the given string and assigns it to the SubdomainPermanent field.
func (o *ServerInstanceInterface) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = &v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetDnsSubdomainId() int32 {
	if o == nil || IsNil(o.DnsSubdomainId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetDnsSubdomainIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainId) {
		return nil, false
	}
	return o.DnsSubdomainId, true
}

// HasDnsSubdomainId returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasDnsSubdomainId() bool {
	if o != nil && !IsNil(o.DnsSubdomainId) {
		return true
	}

	return false
}

// SetDnsSubdomainId gets a reference to the given int32 and assigns it to the DnsSubdomainId field.
func (o *ServerInstanceInterface) SetDnsSubdomainId(v int32) {
	o.DnsSubdomainId = &v
}

// GetDnsSubdomainPermanentId returns the DnsSubdomainPermanentId field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetDnsSubdomainPermanentId() int32 {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		var ret int32
		return ret
	}
	return *o.DnsSubdomainPermanentId
}

// GetDnsSubdomainPermanentIdOk returns a tuple with the DnsSubdomainPermanentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetDnsSubdomainPermanentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		return nil, false
	}
	return o.DnsSubdomainPermanentId, true
}

// HasDnsSubdomainPermanentId returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasDnsSubdomainPermanentId() bool {
	if o != nil && !IsNil(o.DnsSubdomainPermanentId) {
		return true
	}

	return false
}

// SetDnsSubdomainPermanentId gets a reference to the given int32 and assigns it to the DnsSubdomainPermanentId field.
func (o *ServerInstanceInterface) SetDnsSubdomainPermanentId(v int32) {
	o.DnsSubdomainPermanentId = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *ServerInstanceInterface) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *ServerInstanceInterface) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *ServerInstanceInterface) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *ServerInstanceInterface) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetMeta() GenericGUISettings {
	if o == nil || IsNil(o.Meta) {
		var ret GenericGUISettings
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetMetaOk() (*GenericGUISettings, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given GenericGUISettings and assigns it to the Meta field.
func (o *ServerInstanceInterface) SetMeta(v GenericGUISettings) {
	o.Meta = &v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *ServerInstanceInterface) GetInfrastructureId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetInfrastructureIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *ServerInstanceInterface) SetInfrastructureId(v int32) {
	o.InfrastructureId = v
}

// GetInstanceId returns the InstanceId field value
func (o *ServerInstanceInterface) GetInstanceId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetInstanceIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *ServerInstanceInterface) SetInstanceId(v int32) {
	o.InstanceId = v
}

// GetIndex returns the Index field value
func (o *ServerInstanceInterface) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *ServerInstanceInterface) SetIndex(v int32) {
	o.Index = v
}

// GetCapacityMbps returns the CapacityMbps field value
func (o *ServerInstanceInterface) GetCapacityMbps() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CapacityMbps
}

// GetCapacityMbpsOk returns a tuple with the CapacityMbps field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetCapacityMbpsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CapacityMbps, true
}

// SetCapacityMbps sets field value
func (o *ServerInstanceInterface) SetCapacityMbps(v int32) {
	o.CapacityMbps = v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetNetworkId() int32 {
	if o == nil || IsNil(o.NetworkId) {
		var ret int32
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetNetworkIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkId) {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasNetworkId() bool {
	if o != nil && !IsNil(o.NetworkId) {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given int32 and assigns it to the NetworkId field.
func (o *ServerInstanceInterface) SetNetworkId(v int32) {
	o.NetworkId = &v
}

// GetSubnetPoolSanIndex returns the SubnetPoolSanIndex field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetSubnetPoolSanIndex() int32 {
	if o == nil || IsNil(o.SubnetPoolSanIndex) {
		var ret int32
		return ret
	}
	return *o.SubnetPoolSanIndex
}

// GetSubnetPoolSanIndexOk returns a tuple with the SubnetPoolSanIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetSubnetPoolSanIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.SubnetPoolSanIndex) {
		return nil, false
	}
	return o.SubnetPoolSanIndex, true
}

// HasSubnetPoolSanIndex returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasSubnetPoolSanIndex() bool {
	if o != nil && !IsNil(o.SubnetPoolSanIndex) {
		return true
	}

	return false
}

// SetSubnetPoolSanIndex gets a reference to the given int32 and assigns it to the SubnetPoolSanIndex field.
func (o *ServerInstanceInterface) SetSubnetPoolSanIndex(v int32) {
	o.SubnetPoolSanIndex = &v
}

// GetVlanIdentifier returns the VlanIdentifier field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetVlanIdentifier() int32 {
	if o == nil || IsNil(o.VlanIdentifier) {
		var ret int32
		return ret
	}
	return *o.VlanIdentifier
}

// GetVlanIdentifierOk returns a tuple with the VlanIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetVlanIdentifierOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanIdentifier) {
		return nil, false
	}
	return o.VlanIdentifier, true
}

// HasVlanIdentifier returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasVlanIdentifier() bool {
	if o != nil && !IsNil(o.VlanIdentifier) {
		return true
	}

	return false
}

// SetVlanIdentifier gets a reference to the given int32 and assigns it to the VlanIdentifier field.
func (o *ServerInstanceInterface) SetVlanIdentifier(v int32) {
	o.VlanIdentifier = &v
}

// GetAclIdentifier returns the AclIdentifier field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetAclIdentifier() int32 {
	if o == nil || IsNil(o.AclIdentifier) {
		var ret int32
		return ret
	}
	return *o.AclIdentifier
}

// GetAclIdentifierOk returns a tuple with the AclIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetAclIdentifierOk() (*int32, bool) {
	if o == nil || IsNil(o.AclIdentifier) {
		return nil, false
	}
	return o.AclIdentifier, true
}

// HasAclIdentifier returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasAclIdentifier() bool {
	if o != nil && !IsNil(o.AclIdentifier) {
		return true
	}

	return false
}

// SetAclIdentifier gets a reference to the given int32 and assigns it to the AclIdentifier field.
func (o *ServerInstanceInterface) SetAclIdentifier(v int32) {
	o.AclIdentifier = &v
}

// GetNetworkEquipmentSubnetPoolSanId returns the NetworkEquipmentSubnetPoolSanId field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetNetworkEquipmentSubnetPoolSanId() int32 {
	if o == nil || IsNil(o.NetworkEquipmentSubnetPoolSanId) {
		var ret int32
		return ret
	}
	return *o.NetworkEquipmentSubnetPoolSanId
}

// GetNetworkEquipmentSubnetPoolSanIdOk returns a tuple with the NetworkEquipmentSubnetPoolSanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetNetworkEquipmentSubnetPoolSanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkEquipmentSubnetPoolSanId) {
		return nil, false
	}
	return o.NetworkEquipmentSubnetPoolSanId, true
}

// HasNetworkEquipmentSubnetPoolSanId returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasNetworkEquipmentSubnetPoolSanId() bool {
	if o != nil && !IsNil(o.NetworkEquipmentSubnetPoolSanId) {
		return true
	}

	return false
}

// SetNetworkEquipmentSubnetPoolSanId gets a reference to the given int32 and assigns it to the NetworkEquipmentSubnetPoolSanId field.
func (o *ServerInstanceInterface) SetNetworkEquipmentSubnetPoolSanId(v int32) {
	o.NetworkEquipmentSubnetPoolSanId = &v
}

// GetServerInterfaceId returns the ServerInterfaceId field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetServerInterfaceId() int32 {
	if o == nil || IsNil(o.ServerInterfaceId) {
		var ret int32
		return ret
	}
	return *o.ServerInterfaceId
}

// GetServerInterfaceIdOk returns a tuple with the ServerInterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetServerInterfaceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerInterfaceId) {
		return nil, false
	}
	return o.ServerInterfaceId, true
}

// HasServerInterfaceId returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasServerInterfaceId() bool {
	if o != nil && !IsNil(o.ServerInterfaceId) {
		return true
	}

	return false
}

// SetServerInterfaceId gets a reference to the given int32 and assigns it to the ServerInterfaceId field.
func (o *ServerInstanceInterface) SetServerInterfaceId(v int32) {
	o.ServerInterfaceId = &v
}

// GetDirtyBit returns the DirtyBit field value
func (o *ServerInstanceInterface) GetDirtyBit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DirtyBit
}

// GetDirtyBitOk returns a tuple with the DirtyBit field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetDirtyBitOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DirtyBit, true
}

// SetDirtyBit sets field value
func (o *ServerInstanceInterface) SetDirtyBit(v bool) {
	o.DirtyBit = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *ServerInstanceInterface) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *ServerInstanceInterface) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetConfig() ServerInstanceInterfaceConfiguration {
	if o == nil || IsNil(o.Config) {
		var ret ServerInstanceInterfaceConfiguration
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetConfigOk() (*ServerInstanceInterfaceConfiguration, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ServerInstanceInterfaceConfiguration and assigns it to the Config field.
func (o *ServerInstanceInterface) SetConfig(v ServerInstanceInterfaceConfiguration) {
	o.Config = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ServerInstanceInterface) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceInterface) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ServerInstanceInterface) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ServerInstanceInterface) SetLinks(v []Link) {
	o.Links = v
}

func (o ServerInstanceInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["revision"] = o.Revision
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.SubdomainPermanent) {
		toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	}
	if !IsNil(o.DnsSubdomainId) {
		toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	}
	if !IsNil(o.DnsSubdomainPermanentId) {
		toSerialize["dnsSubdomainPermanentId"] = o.DnsSubdomainPermanentId
	}
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["instanceId"] = o.InstanceId
	toSerialize["index"] = o.Index
	toSerialize["capacityMbps"] = o.CapacityMbps
	if !IsNil(o.NetworkId) {
		toSerialize["networkId"] = o.NetworkId
	}
	if !IsNil(o.SubnetPoolSanIndex) {
		toSerialize["subnetPoolSanIndex"] = o.SubnetPoolSanIndex
	}
	if !IsNil(o.VlanIdentifier) {
		toSerialize["vlanIdentifier"] = o.VlanIdentifier
	}
	if !IsNil(o.AclIdentifier) {
		toSerialize["aclIdentifier"] = o.AclIdentifier
	}
	if !IsNil(o.NetworkEquipmentSubnetPoolSanId) {
		toSerialize["networkEquipmentSubnetPoolSanId"] = o.NetworkEquipmentSubnetPoolSanId
	}
	if !IsNil(o.ServerInterfaceId) {
		toSerialize["serverInterfaceId"] = o.ServerInterfaceId
	}
	toSerialize["dirtyBit"] = o.DirtyBit
	toSerialize["serviceStatus"] = o.ServiceStatus
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revision",
		"createdTimestamp",
		"updatedTimestamp",
		"infrastructureId",
		"instanceId",
		"index",
		"capacityMbps",
		"dirtyBit",
		"serviceStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceInterface := _ServerInstanceInterface{}

	err = json.Unmarshal(data, &varServerInstanceInterface)

	if err != nil {
		return err
	}

	*o = ServerInstanceInterface(varServerInstanceInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "dnsSubdomainId")
		delete(additionalProperties, "dnsSubdomainPermanentId")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "index")
		delete(additionalProperties, "capacityMbps")
		delete(additionalProperties, "networkId")
		delete(additionalProperties, "subnetPoolSanIndex")
		delete(additionalProperties, "vlanIdentifier")
		delete(additionalProperties, "aclIdentifier")
		delete(additionalProperties, "networkEquipmentSubnetPoolSanId")
		delete(additionalProperties, "serverInterfaceId")
		delete(additionalProperties, "dirtyBit")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "config")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceInterface struct {
	value *ServerInstanceInterface
	isSet bool
}

func (v NullableServerInstanceInterface) Get() *ServerInstanceInterface {
	return v.value
}

func (v *NullableServerInstanceInterface) Set(val *ServerInstanceInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceInterface(val *ServerInstanceInterface) *NullableServerInstanceInterface {
	return &NullableServerInstanceInterface{value: val, isSet: true}
}

func (v NullableServerInstanceInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


