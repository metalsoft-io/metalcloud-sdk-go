/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UserLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLimits{}

// UserLimits struct for UserLimits
type UserLimits struct {
	ContainerArrayContainersMaxCount *float32 `json:"containerArrayContainersMaxCount,omitempty"`
	ContainerArrayContainersMinCount *float32 `json:"containerArrayContainersMinCount,omitempty"`
	ContainerArrayDriveArraysMaxCount *float32 `json:"containerArrayDriveArraysMaxCount,omitempty"`
	ContainerArrayDriveArraysMinCount *float32 `json:"containerArrayDriveArraysMinCount,omitempty"`
	ContainerArraySecretsMaxCount *float32 `json:"containerArraySecretsMaxCount,omitempty"`
	ContainerPlatformContainerArrayMaxCount *float32 `json:"containerPlatformContainerArrayMaxCount,omitempty"`
	DriveArrayDrivesMaxCount *float32 `json:"driveArrayDrivesMaxCount,omitempty"`
	DriveArrayDrivesMinCount *float32 `json:"driveArrayDrivesMinCount,omitempty"`
	DriveMaxSizeMbytes *float32 `json:"driveMaxSizeMbytes,omitempty"`
	DriveMinSizeMbytes *float32 `json:"driveMinSizeMbytes,omitempty"`
	InfrastructureActiveMaxCount *float32 `json:"infrastructureActiveMaxCount,omitempty"`
	InfrastructureClusterMaxCount *float32 `json:"infrastructureClusterMaxCount,omitempty"`
	InfrastructureClusterMysqlAllowed *bool `json:"infrastructureClusterMysqlAllowed,omitempty"`
	InfrastructureContainerClusterKafkaAllowed *bool `json:"infrastructureContainerClusterKafkaAllowed,omitempty"`
	InfrastructureContainerClusterMaxCount *float32 `json:"infrastructureContainerClusterMaxCount,omitempty"`
	InfrastructureContainerClusterPostgresqlAllowed *bool `json:"infrastructureContainerClusterPostgresqlAllowed,omitempty"`
	InfrastructureContainerClusterSparkArrayAllowed *bool `json:"infrastructureContainerClusterSparkArrayAllowed,omitempty"`
	InfrastructureContainerClusterSparksqlAllowed *bool `json:"infrastructureContainerClusterSparksqlAllowed,omitempty"`
	InfrastructureContainerClusterStreamsetsAllowed *bool `json:"infrastructureContainerClusterStreamsetsAllowed,omitempty"`
	InfrastructureContainerClusterZookeeperAllowed *bool `json:"infrastructureContainerClusterZookeeperAllowed,omitempty"`
	InfrastructureContainerClusterZoomdataAllowed *bool `json:"infrastructureContainerClusterZoomdataAllowed,omitempty"`
	InfrastructureContainerPlatformMaxCount *float32 `json:"infrastructureContainerPlatformMaxCount,omitempty"`
	InfrastructureDataLakeEnabled *bool `json:"infrastructureDataLakeEnabled,omitempty"`
	InfrastructureDataLakeMaxCount *float32 `json:"infrastructureDataLakeMaxCount,omitempty"`
	InfrastructureDeletedMaxCount *float32 `json:"infrastructureDeletedMaxCount,omitempty"`
	InfrastructureDriveArrayMaxCount *float32 `json:"infrastructureDriveArrayMaxCount,omitempty"`
	InfrastructureInactiveMaxCount *float32 `json:"infrastructureInactiveMaxCount,omitempty"`
	InfrastructureInstanceArrayMaxCount *float32 `json:"infrastructureInstanceArrayMaxCount,omitempty"`
	InfrastructureLanMaxCount *float32 `json:"infrastructureLanMaxCount,omitempty"`
	InfrastructureSanMaxCount *float32 `json:"infrastructureSanMaxCount,omitempty"`
	InfrastructureSharedDriveMaxCount *float32 `json:"infrastructureSharedDriveMaxCount,omitempty"`
	InfrastructureFileShareMaxCount *float32 `json:"infrastructureFileShareMaxCount,omitempty"`
	InfrastructureBucketMaxCount *float32 `json:"infrastructureBucketMaxCount,omitempty"`
	InfrastructureVolumeTemplateExperimentalAllowed *bool `json:"infrastructureVolumeTemplateExperimentalAllowed,omitempty"`
	InfrastructureWanMaxCount *float32 `json:"infrastructureWanMaxCount,omitempty"`
	InstanceArrayInstancesMaxCount *float32 `json:"instanceArrayInstancesMaxCount,omitempty"`
	InstanceArrayInstancesMinCount *float32 `json:"instanceArrayInstancesMinCount,omitempty"`
	InfrastructureVmInstanceGroupMaxCount *float32 `json:"infrastructureVmInstanceGroupMaxCount,omitempty"`
	VmInstanceGroupVmInstancesMaxCount *float32 `json:"vmInstanceGroupVmInstancesMaxCount,omitempty"`
	VmInstanceMaxDiskSizeMbytes *float32 `json:"vmInstanceMaxDiskSizeMbytes,omitempty"`
	OwnerIsBillable *bool `json:"ownerIsBillable,omitempty"`
	ServerTypeReservationMaxCount *float32 `json:"serverTypeReservationMaxCount,omitempty"`
	ServerTypeReservationMaxQuantity *float32 `json:"serverTypeReservationMaxQuantity,omitempty"`
	SharedDriveMaxSizeMbytes *float32 `json:"sharedDriveMaxSizeMbytes,omitempty"`
	SharedDriveMinSizeMbytes *float32 `json:"sharedDriveMinSizeMbytes,omitempty"`
	FileShareMaxSizeGb *float32 `json:"fileShareMaxSizeGb,omitempty"`
	FileShareMinSizeGb *float32 `json:"fileShareMinSizeGb,omitempty"`
	BucketMaxSizeGb *float32 `json:"bucketMaxSizeGb,omitempty"`
	BucketMinSizeGb *float32 `json:"bucketMinSizeGb,omitempty"`
	AllowVlanOverrides *bool `json:"allowVlanOverrides,omitempty"`
	AllowNetworkProfiles *bool `json:"allowNetworkProfiles,omitempty"`
	ShowOperatingSystemImagesTab *bool `json:"showOperatingSystemImagesTab,omitempty"`
	ShowTemplateAssetsView *bool `json:"showTemplateAssetsView,omitempty"`
	StorageTypes []string `json:"storageTypes,omitempty"`
	ThresholdMaxCount *float32 `json:"thresholdMaxCount,omitempty"`
	UserResourceIscsiStorageSpaceMaxGbytes *float32 `json:"userResourceIscsiStorageSpaceMaxGbytes,omitempty"`
	UserResourceServersMaxCount *float32 `json:"userResourceServersMaxCount,omitempty"`
	UserResourceServerTypeNameToMaxCount map[string]interface{} `json:"userResourceServerTypeNameToMaxCount,omitempty"`
	UserSshKeysCountMax *float32 `json:"userSshKeysCountMax,omitempty"`
	WanSubnetIpv4MaxCount *float32 `json:"wanSubnetIpv4MaxCount,omitempty"`
	WanSubnetIpv6MaxCount *float32 `json:"wanSubnetIpv6MaxCount,omitempty"`
	WanSubnetPrefixSizeToMaxCount map[string]interface{} `json:"wanSubnetPrefixSizeToMaxCount,omitempty"`
	ShowLegacyPages *bool `json:"showLegacyPages,omitempty"`
	ShowExperimentalPages *bool `json:"showExperimentalPages,omitempty"`
	ShowDiagramAppsGlobal *bool `json:"showDiagramAppsGlobal,omitempty"`
	ShowDiagramAppClusterTypeCloudera *bool `json:"showDiagramAppClusterTypeCloudera,omitempty"`
	ShowDiagramAppClusterTypeCouchbase *bool `json:"showDiagramAppClusterTypeCouchbase,omitempty"`
	ShowDiagramAppClusterTypeDatameer *bool `json:"showDiagramAppClusterTypeDatameer,omitempty"`
	ShowDiagramAppClusterTypeDatastax *bool `json:"showDiagramAppClusterTypeDatastax,omitempty"`
	ShowDiagramAppClusterTypeElasticsearch *bool `json:"showDiagramAppClusterTypeElasticsearch,omitempty"`
	ShowDiagramAppClusterTypeExasol *bool `json:"showDiagramAppClusterTypeExasol,omitempty"`
	ShowDiagramAppClusterTypeHortonworks *bool `json:"showDiagramAppClusterTypeHortonworks,omitempty"`
	ShowDiagramAppClusterTypeKubernetes *bool `json:"showDiagramAppClusterTypeKubernetes,omitempty"`
	ShowDiagramAppClusterTypeMapr *bool `json:"showDiagramAppClusterTypeMapr,omitempty"`
	ShowDiagramAppClusterTypeMesos *bool `json:"showDiagramAppClusterTypeMesos,omitempty"`
	ShowDiagramAppClusterTypeMysqlPercona *bool `json:"showDiagramAppClusterTypeMysqlPercona,omitempty"`
	ShowDiagramAppClusterTypeSplunk *bool `json:"showDiagramAppClusterTypeSplunk,omitempty"`
	ShowDiagramAppClusterTypeVmwareVsphere *bool `json:"showDiagramAppClusterTypeVmwareVsphere,omitempty"`
	ShowDiagramAppClusterTypeVmwareVcf *bool `json:"showDiagramAppClusterTypeVmwareVcf,omitempty"`
	ShowDiagramAppClusterTypeKubernetesEksa *bool `json:"showDiagramAppClusterTypeKubernetesEksa,omitempty"`
	ShowDiagramVmInstanceGroups *bool `json:"showDiagramVmInstanceGroups,omitempty"`
	ShowEliChatBot *bool `json:"showEliChatBot,omitempty"`
	EnableCustomRaidConfiguration *bool `json:"enableCustomRaidConfiguration,omitempty"`
	EnableCustomSubnets *bool `json:"enableCustomSubnets,omitempty"`
	ShowStackTrace *bool `json:"showStackTrace,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserLimits UserLimits

// NewUserLimits instantiates a new UserLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLimits() *UserLimits {
	this := UserLimits{}
	return &this
}

// NewUserLimitsWithDefaults instantiates a new UserLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLimitsWithDefaults() *UserLimits {
	this := UserLimits{}
	return &this
}

// GetContainerArrayContainersMaxCount returns the ContainerArrayContainersMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetContainerArrayContainersMaxCount() float32 {
	if o == nil || IsNil(o.ContainerArrayContainersMaxCount) {
		var ret float32
		return ret
	}
	return *o.ContainerArrayContainersMaxCount
}

// GetContainerArrayContainersMaxCountOk returns a tuple with the ContainerArrayContainersMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetContainerArrayContainersMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ContainerArrayContainersMaxCount) {
		return nil, false
	}
	return o.ContainerArrayContainersMaxCount, true
}

// HasContainerArrayContainersMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasContainerArrayContainersMaxCount() bool {
	if o != nil && !IsNil(o.ContainerArrayContainersMaxCount) {
		return true
	}

	return false
}

// SetContainerArrayContainersMaxCount gets a reference to the given float32 and assigns it to the ContainerArrayContainersMaxCount field.
func (o *UserLimits) SetContainerArrayContainersMaxCount(v float32) {
	o.ContainerArrayContainersMaxCount = &v
}

// GetContainerArrayContainersMinCount returns the ContainerArrayContainersMinCount field value if set, zero value otherwise.
func (o *UserLimits) GetContainerArrayContainersMinCount() float32 {
	if o == nil || IsNil(o.ContainerArrayContainersMinCount) {
		var ret float32
		return ret
	}
	return *o.ContainerArrayContainersMinCount
}

// GetContainerArrayContainersMinCountOk returns a tuple with the ContainerArrayContainersMinCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetContainerArrayContainersMinCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ContainerArrayContainersMinCount) {
		return nil, false
	}
	return o.ContainerArrayContainersMinCount, true
}

// HasContainerArrayContainersMinCount returns a boolean if a field has been set.
func (o *UserLimits) HasContainerArrayContainersMinCount() bool {
	if o != nil && !IsNil(o.ContainerArrayContainersMinCount) {
		return true
	}

	return false
}

// SetContainerArrayContainersMinCount gets a reference to the given float32 and assigns it to the ContainerArrayContainersMinCount field.
func (o *UserLimits) SetContainerArrayContainersMinCount(v float32) {
	o.ContainerArrayContainersMinCount = &v
}

// GetContainerArrayDriveArraysMaxCount returns the ContainerArrayDriveArraysMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetContainerArrayDriveArraysMaxCount() float32 {
	if o == nil || IsNil(o.ContainerArrayDriveArraysMaxCount) {
		var ret float32
		return ret
	}
	return *o.ContainerArrayDriveArraysMaxCount
}

// GetContainerArrayDriveArraysMaxCountOk returns a tuple with the ContainerArrayDriveArraysMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetContainerArrayDriveArraysMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ContainerArrayDriveArraysMaxCount) {
		return nil, false
	}
	return o.ContainerArrayDriveArraysMaxCount, true
}

// HasContainerArrayDriveArraysMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasContainerArrayDriveArraysMaxCount() bool {
	if o != nil && !IsNil(o.ContainerArrayDriveArraysMaxCount) {
		return true
	}

	return false
}

// SetContainerArrayDriveArraysMaxCount gets a reference to the given float32 and assigns it to the ContainerArrayDriveArraysMaxCount field.
func (o *UserLimits) SetContainerArrayDriveArraysMaxCount(v float32) {
	o.ContainerArrayDriveArraysMaxCount = &v
}

// GetContainerArrayDriveArraysMinCount returns the ContainerArrayDriveArraysMinCount field value if set, zero value otherwise.
func (o *UserLimits) GetContainerArrayDriveArraysMinCount() float32 {
	if o == nil || IsNil(o.ContainerArrayDriveArraysMinCount) {
		var ret float32
		return ret
	}
	return *o.ContainerArrayDriveArraysMinCount
}

// GetContainerArrayDriveArraysMinCountOk returns a tuple with the ContainerArrayDriveArraysMinCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetContainerArrayDriveArraysMinCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ContainerArrayDriveArraysMinCount) {
		return nil, false
	}
	return o.ContainerArrayDriveArraysMinCount, true
}

// HasContainerArrayDriveArraysMinCount returns a boolean if a field has been set.
func (o *UserLimits) HasContainerArrayDriveArraysMinCount() bool {
	if o != nil && !IsNil(o.ContainerArrayDriveArraysMinCount) {
		return true
	}

	return false
}

// SetContainerArrayDriveArraysMinCount gets a reference to the given float32 and assigns it to the ContainerArrayDriveArraysMinCount field.
func (o *UserLimits) SetContainerArrayDriveArraysMinCount(v float32) {
	o.ContainerArrayDriveArraysMinCount = &v
}

// GetContainerArraySecretsMaxCount returns the ContainerArraySecretsMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetContainerArraySecretsMaxCount() float32 {
	if o == nil || IsNil(o.ContainerArraySecretsMaxCount) {
		var ret float32
		return ret
	}
	return *o.ContainerArraySecretsMaxCount
}

// GetContainerArraySecretsMaxCountOk returns a tuple with the ContainerArraySecretsMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetContainerArraySecretsMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ContainerArraySecretsMaxCount) {
		return nil, false
	}
	return o.ContainerArraySecretsMaxCount, true
}

// HasContainerArraySecretsMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasContainerArraySecretsMaxCount() bool {
	if o != nil && !IsNil(o.ContainerArraySecretsMaxCount) {
		return true
	}

	return false
}

// SetContainerArraySecretsMaxCount gets a reference to the given float32 and assigns it to the ContainerArraySecretsMaxCount field.
func (o *UserLimits) SetContainerArraySecretsMaxCount(v float32) {
	o.ContainerArraySecretsMaxCount = &v
}

// GetContainerPlatformContainerArrayMaxCount returns the ContainerPlatformContainerArrayMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetContainerPlatformContainerArrayMaxCount() float32 {
	if o == nil || IsNil(o.ContainerPlatformContainerArrayMaxCount) {
		var ret float32
		return ret
	}
	return *o.ContainerPlatformContainerArrayMaxCount
}

// GetContainerPlatformContainerArrayMaxCountOk returns a tuple with the ContainerPlatformContainerArrayMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetContainerPlatformContainerArrayMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ContainerPlatformContainerArrayMaxCount) {
		return nil, false
	}
	return o.ContainerPlatformContainerArrayMaxCount, true
}

// HasContainerPlatformContainerArrayMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasContainerPlatformContainerArrayMaxCount() bool {
	if o != nil && !IsNil(o.ContainerPlatformContainerArrayMaxCount) {
		return true
	}

	return false
}

// SetContainerPlatformContainerArrayMaxCount gets a reference to the given float32 and assigns it to the ContainerPlatformContainerArrayMaxCount field.
func (o *UserLimits) SetContainerPlatformContainerArrayMaxCount(v float32) {
	o.ContainerPlatformContainerArrayMaxCount = &v
}

// GetDriveArrayDrivesMaxCount returns the DriveArrayDrivesMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetDriveArrayDrivesMaxCount() float32 {
	if o == nil || IsNil(o.DriveArrayDrivesMaxCount) {
		var ret float32
		return ret
	}
	return *o.DriveArrayDrivesMaxCount
}

// GetDriveArrayDrivesMaxCountOk returns a tuple with the DriveArrayDrivesMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetDriveArrayDrivesMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.DriveArrayDrivesMaxCount) {
		return nil, false
	}
	return o.DriveArrayDrivesMaxCount, true
}

// HasDriveArrayDrivesMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasDriveArrayDrivesMaxCount() bool {
	if o != nil && !IsNil(o.DriveArrayDrivesMaxCount) {
		return true
	}

	return false
}

// SetDriveArrayDrivesMaxCount gets a reference to the given float32 and assigns it to the DriveArrayDrivesMaxCount field.
func (o *UserLimits) SetDriveArrayDrivesMaxCount(v float32) {
	o.DriveArrayDrivesMaxCount = &v
}

// GetDriveArrayDrivesMinCount returns the DriveArrayDrivesMinCount field value if set, zero value otherwise.
func (o *UserLimits) GetDriveArrayDrivesMinCount() float32 {
	if o == nil || IsNil(o.DriveArrayDrivesMinCount) {
		var ret float32
		return ret
	}
	return *o.DriveArrayDrivesMinCount
}

// GetDriveArrayDrivesMinCountOk returns a tuple with the DriveArrayDrivesMinCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetDriveArrayDrivesMinCountOk() (*float32, bool) {
	if o == nil || IsNil(o.DriveArrayDrivesMinCount) {
		return nil, false
	}
	return o.DriveArrayDrivesMinCount, true
}

// HasDriveArrayDrivesMinCount returns a boolean if a field has been set.
func (o *UserLimits) HasDriveArrayDrivesMinCount() bool {
	if o != nil && !IsNil(o.DriveArrayDrivesMinCount) {
		return true
	}

	return false
}

// SetDriveArrayDrivesMinCount gets a reference to the given float32 and assigns it to the DriveArrayDrivesMinCount field.
func (o *UserLimits) SetDriveArrayDrivesMinCount(v float32) {
	o.DriveArrayDrivesMinCount = &v
}

// GetDriveMaxSizeMbytes returns the DriveMaxSizeMbytes field value if set, zero value otherwise.
func (o *UserLimits) GetDriveMaxSizeMbytes() float32 {
	if o == nil || IsNil(o.DriveMaxSizeMbytes) {
		var ret float32
		return ret
	}
	return *o.DriveMaxSizeMbytes
}

// GetDriveMaxSizeMbytesOk returns a tuple with the DriveMaxSizeMbytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetDriveMaxSizeMbytesOk() (*float32, bool) {
	if o == nil || IsNil(o.DriveMaxSizeMbytes) {
		return nil, false
	}
	return o.DriveMaxSizeMbytes, true
}

// HasDriveMaxSizeMbytes returns a boolean if a field has been set.
func (o *UserLimits) HasDriveMaxSizeMbytes() bool {
	if o != nil && !IsNil(o.DriveMaxSizeMbytes) {
		return true
	}

	return false
}

// SetDriveMaxSizeMbytes gets a reference to the given float32 and assigns it to the DriveMaxSizeMbytes field.
func (o *UserLimits) SetDriveMaxSizeMbytes(v float32) {
	o.DriveMaxSizeMbytes = &v
}

// GetDriveMinSizeMbytes returns the DriveMinSizeMbytes field value if set, zero value otherwise.
func (o *UserLimits) GetDriveMinSizeMbytes() float32 {
	if o == nil || IsNil(o.DriveMinSizeMbytes) {
		var ret float32
		return ret
	}
	return *o.DriveMinSizeMbytes
}

// GetDriveMinSizeMbytesOk returns a tuple with the DriveMinSizeMbytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetDriveMinSizeMbytesOk() (*float32, bool) {
	if o == nil || IsNil(o.DriveMinSizeMbytes) {
		return nil, false
	}
	return o.DriveMinSizeMbytes, true
}

// HasDriveMinSizeMbytes returns a boolean if a field has been set.
func (o *UserLimits) HasDriveMinSizeMbytes() bool {
	if o != nil && !IsNil(o.DriveMinSizeMbytes) {
		return true
	}

	return false
}

// SetDriveMinSizeMbytes gets a reference to the given float32 and assigns it to the DriveMinSizeMbytes field.
func (o *UserLimits) SetDriveMinSizeMbytes(v float32) {
	o.DriveMinSizeMbytes = &v
}

// GetInfrastructureActiveMaxCount returns the InfrastructureActiveMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureActiveMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureActiveMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureActiveMaxCount
}

// GetInfrastructureActiveMaxCountOk returns a tuple with the InfrastructureActiveMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureActiveMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureActiveMaxCount) {
		return nil, false
	}
	return o.InfrastructureActiveMaxCount, true
}

// HasInfrastructureActiveMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureActiveMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureActiveMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureActiveMaxCount gets a reference to the given float32 and assigns it to the InfrastructureActiveMaxCount field.
func (o *UserLimits) SetInfrastructureActiveMaxCount(v float32) {
	o.InfrastructureActiveMaxCount = &v
}

// GetInfrastructureClusterMaxCount returns the InfrastructureClusterMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureClusterMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureClusterMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureClusterMaxCount
}

// GetInfrastructureClusterMaxCountOk returns a tuple with the InfrastructureClusterMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureClusterMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureClusterMaxCount) {
		return nil, false
	}
	return o.InfrastructureClusterMaxCount, true
}

// HasInfrastructureClusterMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureClusterMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureClusterMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureClusterMaxCount gets a reference to the given float32 and assigns it to the InfrastructureClusterMaxCount field.
func (o *UserLimits) SetInfrastructureClusterMaxCount(v float32) {
	o.InfrastructureClusterMaxCount = &v
}

// GetInfrastructureClusterMysqlAllowed returns the InfrastructureClusterMysqlAllowed field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureClusterMysqlAllowed() bool {
	if o == nil || IsNil(o.InfrastructureClusterMysqlAllowed) {
		var ret bool
		return ret
	}
	return *o.InfrastructureClusterMysqlAllowed
}

// GetInfrastructureClusterMysqlAllowedOk returns a tuple with the InfrastructureClusterMysqlAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureClusterMysqlAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureClusterMysqlAllowed) {
		return nil, false
	}
	return o.InfrastructureClusterMysqlAllowed, true
}

// HasInfrastructureClusterMysqlAllowed returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureClusterMysqlAllowed() bool {
	if o != nil && !IsNil(o.InfrastructureClusterMysqlAllowed) {
		return true
	}

	return false
}

// SetInfrastructureClusterMysqlAllowed gets a reference to the given bool and assigns it to the InfrastructureClusterMysqlAllowed field.
func (o *UserLimits) SetInfrastructureClusterMysqlAllowed(v bool) {
	o.InfrastructureClusterMysqlAllowed = &v
}

// GetInfrastructureContainerClusterKafkaAllowed returns the InfrastructureContainerClusterKafkaAllowed field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureContainerClusterKafkaAllowed() bool {
	if o == nil || IsNil(o.InfrastructureContainerClusterKafkaAllowed) {
		var ret bool
		return ret
	}
	return *o.InfrastructureContainerClusterKafkaAllowed
}

// GetInfrastructureContainerClusterKafkaAllowedOk returns a tuple with the InfrastructureContainerClusterKafkaAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureContainerClusterKafkaAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureContainerClusterKafkaAllowed) {
		return nil, false
	}
	return o.InfrastructureContainerClusterKafkaAllowed, true
}

// HasInfrastructureContainerClusterKafkaAllowed returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureContainerClusterKafkaAllowed() bool {
	if o != nil && !IsNil(o.InfrastructureContainerClusterKafkaAllowed) {
		return true
	}

	return false
}

// SetInfrastructureContainerClusterKafkaAllowed gets a reference to the given bool and assigns it to the InfrastructureContainerClusterKafkaAllowed field.
func (o *UserLimits) SetInfrastructureContainerClusterKafkaAllowed(v bool) {
	o.InfrastructureContainerClusterKafkaAllowed = &v
}

// GetInfrastructureContainerClusterMaxCount returns the InfrastructureContainerClusterMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureContainerClusterMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureContainerClusterMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureContainerClusterMaxCount
}

// GetInfrastructureContainerClusterMaxCountOk returns a tuple with the InfrastructureContainerClusterMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureContainerClusterMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureContainerClusterMaxCount) {
		return nil, false
	}
	return o.InfrastructureContainerClusterMaxCount, true
}

// HasInfrastructureContainerClusterMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureContainerClusterMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureContainerClusterMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureContainerClusterMaxCount gets a reference to the given float32 and assigns it to the InfrastructureContainerClusterMaxCount field.
func (o *UserLimits) SetInfrastructureContainerClusterMaxCount(v float32) {
	o.InfrastructureContainerClusterMaxCount = &v
}

// GetInfrastructureContainerClusterPostgresqlAllowed returns the InfrastructureContainerClusterPostgresqlAllowed field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureContainerClusterPostgresqlAllowed() bool {
	if o == nil || IsNil(o.InfrastructureContainerClusterPostgresqlAllowed) {
		var ret bool
		return ret
	}
	return *o.InfrastructureContainerClusterPostgresqlAllowed
}

// GetInfrastructureContainerClusterPostgresqlAllowedOk returns a tuple with the InfrastructureContainerClusterPostgresqlAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureContainerClusterPostgresqlAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureContainerClusterPostgresqlAllowed) {
		return nil, false
	}
	return o.InfrastructureContainerClusterPostgresqlAllowed, true
}

// HasInfrastructureContainerClusterPostgresqlAllowed returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureContainerClusterPostgresqlAllowed() bool {
	if o != nil && !IsNil(o.InfrastructureContainerClusterPostgresqlAllowed) {
		return true
	}

	return false
}

// SetInfrastructureContainerClusterPostgresqlAllowed gets a reference to the given bool and assigns it to the InfrastructureContainerClusterPostgresqlAllowed field.
func (o *UserLimits) SetInfrastructureContainerClusterPostgresqlAllowed(v bool) {
	o.InfrastructureContainerClusterPostgresqlAllowed = &v
}

// GetInfrastructureContainerClusterSparkArrayAllowed returns the InfrastructureContainerClusterSparkArrayAllowed field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureContainerClusterSparkArrayAllowed() bool {
	if o == nil || IsNil(o.InfrastructureContainerClusterSparkArrayAllowed) {
		var ret bool
		return ret
	}
	return *o.InfrastructureContainerClusterSparkArrayAllowed
}

// GetInfrastructureContainerClusterSparkArrayAllowedOk returns a tuple with the InfrastructureContainerClusterSparkArrayAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureContainerClusterSparkArrayAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureContainerClusterSparkArrayAllowed) {
		return nil, false
	}
	return o.InfrastructureContainerClusterSparkArrayAllowed, true
}

// HasInfrastructureContainerClusterSparkArrayAllowed returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureContainerClusterSparkArrayAllowed() bool {
	if o != nil && !IsNil(o.InfrastructureContainerClusterSparkArrayAllowed) {
		return true
	}

	return false
}

// SetInfrastructureContainerClusterSparkArrayAllowed gets a reference to the given bool and assigns it to the InfrastructureContainerClusterSparkArrayAllowed field.
func (o *UserLimits) SetInfrastructureContainerClusterSparkArrayAllowed(v bool) {
	o.InfrastructureContainerClusterSparkArrayAllowed = &v
}

// GetInfrastructureContainerClusterSparksqlAllowed returns the InfrastructureContainerClusterSparksqlAllowed field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureContainerClusterSparksqlAllowed() bool {
	if o == nil || IsNil(o.InfrastructureContainerClusterSparksqlAllowed) {
		var ret bool
		return ret
	}
	return *o.InfrastructureContainerClusterSparksqlAllowed
}

// GetInfrastructureContainerClusterSparksqlAllowedOk returns a tuple with the InfrastructureContainerClusterSparksqlAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureContainerClusterSparksqlAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureContainerClusterSparksqlAllowed) {
		return nil, false
	}
	return o.InfrastructureContainerClusterSparksqlAllowed, true
}

// HasInfrastructureContainerClusterSparksqlAllowed returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureContainerClusterSparksqlAllowed() bool {
	if o != nil && !IsNil(o.InfrastructureContainerClusterSparksqlAllowed) {
		return true
	}

	return false
}

// SetInfrastructureContainerClusterSparksqlAllowed gets a reference to the given bool and assigns it to the InfrastructureContainerClusterSparksqlAllowed field.
func (o *UserLimits) SetInfrastructureContainerClusterSparksqlAllowed(v bool) {
	o.InfrastructureContainerClusterSparksqlAllowed = &v
}

// GetInfrastructureContainerClusterStreamsetsAllowed returns the InfrastructureContainerClusterStreamsetsAllowed field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureContainerClusterStreamsetsAllowed() bool {
	if o == nil || IsNil(o.InfrastructureContainerClusterStreamsetsAllowed) {
		var ret bool
		return ret
	}
	return *o.InfrastructureContainerClusterStreamsetsAllowed
}

// GetInfrastructureContainerClusterStreamsetsAllowedOk returns a tuple with the InfrastructureContainerClusterStreamsetsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureContainerClusterStreamsetsAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureContainerClusterStreamsetsAllowed) {
		return nil, false
	}
	return o.InfrastructureContainerClusterStreamsetsAllowed, true
}

// HasInfrastructureContainerClusterStreamsetsAllowed returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureContainerClusterStreamsetsAllowed() bool {
	if o != nil && !IsNil(o.InfrastructureContainerClusterStreamsetsAllowed) {
		return true
	}

	return false
}

// SetInfrastructureContainerClusterStreamsetsAllowed gets a reference to the given bool and assigns it to the InfrastructureContainerClusterStreamsetsAllowed field.
func (o *UserLimits) SetInfrastructureContainerClusterStreamsetsAllowed(v bool) {
	o.InfrastructureContainerClusterStreamsetsAllowed = &v
}

// GetInfrastructureContainerClusterZookeeperAllowed returns the InfrastructureContainerClusterZookeeperAllowed field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureContainerClusterZookeeperAllowed() bool {
	if o == nil || IsNil(o.InfrastructureContainerClusterZookeeperAllowed) {
		var ret bool
		return ret
	}
	return *o.InfrastructureContainerClusterZookeeperAllowed
}

// GetInfrastructureContainerClusterZookeeperAllowedOk returns a tuple with the InfrastructureContainerClusterZookeeperAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureContainerClusterZookeeperAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureContainerClusterZookeeperAllowed) {
		return nil, false
	}
	return o.InfrastructureContainerClusterZookeeperAllowed, true
}

// HasInfrastructureContainerClusterZookeeperAllowed returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureContainerClusterZookeeperAllowed() bool {
	if o != nil && !IsNil(o.InfrastructureContainerClusterZookeeperAllowed) {
		return true
	}

	return false
}

// SetInfrastructureContainerClusterZookeeperAllowed gets a reference to the given bool and assigns it to the InfrastructureContainerClusterZookeeperAllowed field.
func (o *UserLimits) SetInfrastructureContainerClusterZookeeperAllowed(v bool) {
	o.InfrastructureContainerClusterZookeeperAllowed = &v
}

// GetInfrastructureContainerClusterZoomdataAllowed returns the InfrastructureContainerClusterZoomdataAllowed field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureContainerClusterZoomdataAllowed() bool {
	if o == nil || IsNil(o.InfrastructureContainerClusterZoomdataAllowed) {
		var ret bool
		return ret
	}
	return *o.InfrastructureContainerClusterZoomdataAllowed
}

// GetInfrastructureContainerClusterZoomdataAllowedOk returns a tuple with the InfrastructureContainerClusterZoomdataAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureContainerClusterZoomdataAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureContainerClusterZoomdataAllowed) {
		return nil, false
	}
	return o.InfrastructureContainerClusterZoomdataAllowed, true
}

// HasInfrastructureContainerClusterZoomdataAllowed returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureContainerClusterZoomdataAllowed() bool {
	if o != nil && !IsNil(o.InfrastructureContainerClusterZoomdataAllowed) {
		return true
	}

	return false
}

// SetInfrastructureContainerClusterZoomdataAllowed gets a reference to the given bool and assigns it to the InfrastructureContainerClusterZoomdataAllowed field.
func (o *UserLimits) SetInfrastructureContainerClusterZoomdataAllowed(v bool) {
	o.InfrastructureContainerClusterZoomdataAllowed = &v
}

// GetInfrastructureContainerPlatformMaxCount returns the InfrastructureContainerPlatformMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureContainerPlatformMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureContainerPlatformMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureContainerPlatformMaxCount
}

// GetInfrastructureContainerPlatformMaxCountOk returns a tuple with the InfrastructureContainerPlatformMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureContainerPlatformMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureContainerPlatformMaxCount) {
		return nil, false
	}
	return o.InfrastructureContainerPlatformMaxCount, true
}

// HasInfrastructureContainerPlatformMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureContainerPlatformMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureContainerPlatformMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureContainerPlatformMaxCount gets a reference to the given float32 and assigns it to the InfrastructureContainerPlatformMaxCount field.
func (o *UserLimits) SetInfrastructureContainerPlatformMaxCount(v float32) {
	o.InfrastructureContainerPlatformMaxCount = &v
}

// GetInfrastructureDataLakeEnabled returns the InfrastructureDataLakeEnabled field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureDataLakeEnabled() bool {
	if o == nil || IsNil(o.InfrastructureDataLakeEnabled) {
		var ret bool
		return ret
	}
	return *o.InfrastructureDataLakeEnabled
}

// GetInfrastructureDataLakeEnabledOk returns a tuple with the InfrastructureDataLakeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureDataLakeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureDataLakeEnabled) {
		return nil, false
	}
	return o.InfrastructureDataLakeEnabled, true
}

// HasInfrastructureDataLakeEnabled returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureDataLakeEnabled() bool {
	if o != nil && !IsNil(o.InfrastructureDataLakeEnabled) {
		return true
	}

	return false
}

// SetInfrastructureDataLakeEnabled gets a reference to the given bool and assigns it to the InfrastructureDataLakeEnabled field.
func (o *UserLimits) SetInfrastructureDataLakeEnabled(v bool) {
	o.InfrastructureDataLakeEnabled = &v
}

// GetInfrastructureDataLakeMaxCount returns the InfrastructureDataLakeMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureDataLakeMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureDataLakeMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureDataLakeMaxCount
}

// GetInfrastructureDataLakeMaxCountOk returns a tuple with the InfrastructureDataLakeMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureDataLakeMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureDataLakeMaxCount) {
		return nil, false
	}
	return o.InfrastructureDataLakeMaxCount, true
}

// HasInfrastructureDataLakeMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureDataLakeMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureDataLakeMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureDataLakeMaxCount gets a reference to the given float32 and assigns it to the InfrastructureDataLakeMaxCount field.
func (o *UserLimits) SetInfrastructureDataLakeMaxCount(v float32) {
	o.InfrastructureDataLakeMaxCount = &v
}

// GetInfrastructureDeletedMaxCount returns the InfrastructureDeletedMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureDeletedMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureDeletedMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureDeletedMaxCount
}

// GetInfrastructureDeletedMaxCountOk returns a tuple with the InfrastructureDeletedMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureDeletedMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureDeletedMaxCount) {
		return nil, false
	}
	return o.InfrastructureDeletedMaxCount, true
}

// HasInfrastructureDeletedMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureDeletedMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureDeletedMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureDeletedMaxCount gets a reference to the given float32 and assigns it to the InfrastructureDeletedMaxCount field.
func (o *UserLimits) SetInfrastructureDeletedMaxCount(v float32) {
	o.InfrastructureDeletedMaxCount = &v
}

// GetInfrastructureDriveArrayMaxCount returns the InfrastructureDriveArrayMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureDriveArrayMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureDriveArrayMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureDriveArrayMaxCount
}

// GetInfrastructureDriveArrayMaxCountOk returns a tuple with the InfrastructureDriveArrayMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureDriveArrayMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureDriveArrayMaxCount) {
		return nil, false
	}
	return o.InfrastructureDriveArrayMaxCount, true
}

// HasInfrastructureDriveArrayMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureDriveArrayMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureDriveArrayMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureDriveArrayMaxCount gets a reference to the given float32 and assigns it to the InfrastructureDriveArrayMaxCount field.
func (o *UserLimits) SetInfrastructureDriveArrayMaxCount(v float32) {
	o.InfrastructureDriveArrayMaxCount = &v
}

// GetInfrastructureInactiveMaxCount returns the InfrastructureInactiveMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureInactiveMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureInactiveMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureInactiveMaxCount
}

// GetInfrastructureInactiveMaxCountOk returns a tuple with the InfrastructureInactiveMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureInactiveMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureInactiveMaxCount) {
		return nil, false
	}
	return o.InfrastructureInactiveMaxCount, true
}

// HasInfrastructureInactiveMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureInactiveMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureInactiveMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureInactiveMaxCount gets a reference to the given float32 and assigns it to the InfrastructureInactiveMaxCount field.
func (o *UserLimits) SetInfrastructureInactiveMaxCount(v float32) {
	o.InfrastructureInactiveMaxCount = &v
}

// GetInfrastructureInstanceArrayMaxCount returns the InfrastructureInstanceArrayMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureInstanceArrayMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureInstanceArrayMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureInstanceArrayMaxCount
}

// GetInfrastructureInstanceArrayMaxCountOk returns a tuple with the InfrastructureInstanceArrayMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureInstanceArrayMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureInstanceArrayMaxCount) {
		return nil, false
	}
	return o.InfrastructureInstanceArrayMaxCount, true
}

// HasInfrastructureInstanceArrayMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureInstanceArrayMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureInstanceArrayMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureInstanceArrayMaxCount gets a reference to the given float32 and assigns it to the InfrastructureInstanceArrayMaxCount field.
func (o *UserLimits) SetInfrastructureInstanceArrayMaxCount(v float32) {
	o.InfrastructureInstanceArrayMaxCount = &v
}

// GetInfrastructureLanMaxCount returns the InfrastructureLanMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureLanMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureLanMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureLanMaxCount
}

// GetInfrastructureLanMaxCountOk returns a tuple with the InfrastructureLanMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureLanMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureLanMaxCount) {
		return nil, false
	}
	return o.InfrastructureLanMaxCount, true
}

// HasInfrastructureLanMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureLanMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureLanMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureLanMaxCount gets a reference to the given float32 and assigns it to the InfrastructureLanMaxCount field.
func (o *UserLimits) SetInfrastructureLanMaxCount(v float32) {
	o.InfrastructureLanMaxCount = &v
}

// GetInfrastructureSanMaxCount returns the InfrastructureSanMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureSanMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureSanMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureSanMaxCount
}

// GetInfrastructureSanMaxCountOk returns a tuple with the InfrastructureSanMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureSanMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureSanMaxCount) {
		return nil, false
	}
	return o.InfrastructureSanMaxCount, true
}

// HasInfrastructureSanMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureSanMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureSanMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureSanMaxCount gets a reference to the given float32 and assigns it to the InfrastructureSanMaxCount field.
func (o *UserLimits) SetInfrastructureSanMaxCount(v float32) {
	o.InfrastructureSanMaxCount = &v
}

// GetInfrastructureSharedDriveMaxCount returns the InfrastructureSharedDriveMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureSharedDriveMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureSharedDriveMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureSharedDriveMaxCount
}

// GetInfrastructureSharedDriveMaxCountOk returns a tuple with the InfrastructureSharedDriveMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureSharedDriveMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureSharedDriveMaxCount) {
		return nil, false
	}
	return o.InfrastructureSharedDriveMaxCount, true
}

// HasInfrastructureSharedDriveMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureSharedDriveMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureSharedDriveMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureSharedDriveMaxCount gets a reference to the given float32 and assigns it to the InfrastructureSharedDriveMaxCount field.
func (o *UserLimits) SetInfrastructureSharedDriveMaxCount(v float32) {
	o.InfrastructureSharedDriveMaxCount = &v
}

// GetInfrastructureFileShareMaxCount returns the InfrastructureFileShareMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureFileShareMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureFileShareMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureFileShareMaxCount
}

// GetInfrastructureFileShareMaxCountOk returns a tuple with the InfrastructureFileShareMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureFileShareMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureFileShareMaxCount) {
		return nil, false
	}
	return o.InfrastructureFileShareMaxCount, true
}

// HasInfrastructureFileShareMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureFileShareMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureFileShareMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureFileShareMaxCount gets a reference to the given float32 and assigns it to the InfrastructureFileShareMaxCount field.
func (o *UserLimits) SetInfrastructureFileShareMaxCount(v float32) {
	o.InfrastructureFileShareMaxCount = &v
}

// GetInfrastructureBucketMaxCount returns the InfrastructureBucketMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureBucketMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureBucketMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureBucketMaxCount
}

// GetInfrastructureBucketMaxCountOk returns a tuple with the InfrastructureBucketMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureBucketMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureBucketMaxCount) {
		return nil, false
	}
	return o.InfrastructureBucketMaxCount, true
}

// HasInfrastructureBucketMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureBucketMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureBucketMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureBucketMaxCount gets a reference to the given float32 and assigns it to the InfrastructureBucketMaxCount field.
func (o *UserLimits) SetInfrastructureBucketMaxCount(v float32) {
	o.InfrastructureBucketMaxCount = &v
}

// GetInfrastructureVolumeTemplateExperimentalAllowed returns the InfrastructureVolumeTemplateExperimentalAllowed field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureVolumeTemplateExperimentalAllowed() bool {
	if o == nil || IsNil(o.InfrastructureVolumeTemplateExperimentalAllowed) {
		var ret bool
		return ret
	}
	return *o.InfrastructureVolumeTemplateExperimentalAllowed
}

// GetInfrastructureVolumeTemplateExperimentalAllowedOk returns a tuple with the InfrastructureVolumeTemplateExperimentalAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureVolumeTemplateExperimentalAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.InfrastructureVolumeTemplateExperimentalAllowed) {
		return nil, false
	}
	return o.InfrastructureVolumeTemplateExperimentalAllowed, true
}

// HasInfrastructureVolumeTemplateExperimentalAllowed returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureVolumeTemplateExperimentalAllowed() bool {
	if o != nil && !IsNil(o.InfrastructureVolumeTemplateExperimentalAllowed) {
		return true
	}

	return false
}

// SetInfrastructureVolumeTemplateExperimentalAllowed gets a reference to the given bool and assigns it to the InfrastructureVolumeTemplateExperimentalAllowed field.
func (o *UserLimits) SetInfrastructureVolumeTemplateExperimentalAllowed(v bool) {
	o.InfrastructureVolumeTemplateExperimentalAllowed = &v
}

// GetInfrastructureWanMaxCount returns the InfrastructureWanMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureWanMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureWanMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureWanMaxCount
}

// GetInfrastructureWanMaxCountOk returns a tuple with the InfrastructureWanMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureWanMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureWanMaxCount) {
		return nil, false
	}
	return o.InfrastructureWanMaxCount, true
}

// HasInfrastructureWanMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureWanMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureWanMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureWanMaxCount gets a reference to the given float32 and assigns it to the InfrastructureWanMaxCount field.
func (o *UserLimits) SetInfrastructureWanMaxCount(v float32) {
	o.InfrastructureWanMaxCount = &v
}

// GetInstanceArrayInstancesMaxCount returns the InstanceArrayInstancesMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInstanceArrayInstancesMaxCount() float32 {
	if o == nil || IsNil(o.InstanceArrayInstancesMaxCount) {
		var ret float32
		return ret
	}
	return *o.InstanceArrayInstancesMaxCount
}

// GetInstanceArrayInstancesMaxCountOk returns a tuple with the InstanceArrayInstancesMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInstanceArrayInstancesMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InstanceArrayInstancesMaxCount) {
		return nil, false
	}
	return o.InstanceArrayInstancesMaxCount, true
}

// HasInstanceArrayInstancesMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInstanceArrayInstancesMaxCount() bool {
	if o != nil && !IsNil(o.InstanceArrayInstancesMaxCount) {
		return true
	}

	return false
}

// SetInstanceArrayInstancesMaxCount gets a reference to the given float32 and assigns it to the InstanceArrayInstancesMaxCount field.
func (o *UserLimits) SetInstanceArrayInstancesMaxCount(v float32) {
	o.InstanceArrayInstancesMaxCount = &v
}

// GetInstanceArrayInstancesMinCount returns the InstanceArrayInstancesMinCount field value if set, zero value otherwise.
func (o *UserLimits) GetInstanceArrayInstancesMinCount() float32 {
	if o == nil || IsNil(o.InstanceArrayInstancesMinCount) {
		var ret float32
		return ret
	}
	return *o.InstanceArrayInstancesMinCount
}

// GetInstanceArrayInstancesMinCountOk returns a tuple with the InstanceArrayInstancesMinCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInstanceArrayInstancesMinCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InstanceArrayInstancesMinCount) {
		return nil, false
	}
	return o.InstanceArrayInstancesMinCount, true
}

// HasInstanceArrayInstancesMinCount returns a boolean if a field has been set.
func (o *UserLimits) HasInstanceArrayInstancesMinCount() bool {
	if o != nil && !IsNil(o.InstanceArrayInstancesMinCount) {
		return true
	}

	return false
}

// SetInstanceArrayInstancesMinCount gets a reference to the given float32 and assigns it to the InstanceArrayInstancesMinCount field.
func (o *UserLimits) SetInstanceArrayInstancesMinCount(v float32) {
	o.InstanceArrayInstancesMinCount = &v
}

// GetInfrastructureVmInstanceGroupMaxCount returns the InfrastructureVmInstanceGroupMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetInfrastructureVmInstanceGroupMaxCount() float32 {
	if o == nil || IsNil(o.InfrastructureVmInstanceGroupMaxCount) {
		var ret float32
		return ret
	}
	return *o.InfrastructureVmInstanceGroupMaxCount
}

// GetInfrastructureVmInstanceGroupMaxCountOk returns a tuple with the InfrastructureVmInstanceGroupMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetInfrastructureVmInstanceGroupMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureVmInstanceGroupMaxCount) {
		return nil, false
	}
	return o.InfrastructureVmInstanceGroupMaxCount, true
}

// HasInfrastructureVmInstanceGroupMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasInfrastructureVmInstanceGroupMaxCount() bool {
	if o != nil && !IsNil(o.InfrastructureVmInstanceGroupMaxCount) {
		return true
	}

	return false
}

// SetInfrastructureVmInstanceGroupMaxCount gets a reference to the given float32 and assigns it to the InfrastructureVmInstanceGroupMaxCount field.
func (o *UserLimits) SetInfrastructureVmInstanceGroupMaxCount(v float32) {
	o.InfrastructureVmInstanceGroupMaxCount = &v
}

// GetVmInstanceGroupVmInstancesMaxCount returns the VmInstanceGroupVmInstancesMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetVmInstanceGroupVmInstancesMaxCount() float32 {
	if o == nil || IsNil(o.VmInstanceGroupVmInstancesMaxCount) {
		var ret float32
		return ret
	}
	return *o.VmInstanceGroupVmInstancesMaxCount
}

// GetVmInstanceGroupVmInstancesMaxCountOk returns a tuple with the VmInstanceGroupVmInstancesMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetVmInstanceGroupVmInstancesMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.VmInstanceGroupVmInstancesMaxCount) {
		return nil, false
	}
	return o.VmInstanceGroupVmInstancesMaxCount, true
}

// HasVmInstanceGroupVmInstancesMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasVmInstanceGroupVmInstancesMaxCount() bool {
	if o != nil && !IsNil(o.VmInstanceGroupVmInstancesMaxCount) {
		return true
	}

	return false
}

// SetVmInstanceGroupVmInstancesMaxCount gets a reference to the given float32 and assigns it to the VmInstanceGroupVmInstancesMaxCount field.
func (o *UserLimits) SetVmInstanceGroupVmInstancesMaxCount(v float32) {
	o.VmInstanceGroupVmInstancesMaxCount = &v
}

// GetVmInstanceMaxDiskSizeMbytes returns the VmInstanceMaxDiskSizeMbytes field value if set, zero value otherwise.
func (o *UserLimits) GetVmInstanceMaxDiskSizeMbytes() float32 {
	if o == nil || IsNil(o.VmInstanceMaxDiskSizeMbytes) {
		var ret float32
		return ret
	}
	return *o.VmInstanceMaxDiskSizeMbytes
}

// GetVmInstanceMaxDiskSizeMbytesOk returns a tuple with the VmInstanceMaxDiskSizeMbytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetVmInstanceMaxDiskSizeMbytesOk() (*float32, bool) {
	if o == nil || IsNil(o.VmInstanceMaxDiskSizeMbytes) {
		return nil, false
	}
	return o.VmInstanceMaxDiskSizeMbytes, true
}

// HasVmInstanceMaxDiskSizeMbytes returns a boolean if a field has been set.
func (o *UserLimits) HasVmInstanceMaxDiskSizeMbytes() bool {
	if o != nil && !IsNil(o.VmInstanceMaxDiskSizeMbytes) {
		return true
	}

	return false
}

// SetVmInstanceMaxDiskSizeMbytes gets a reference to the given float32 and assigns it to the VmInstanceMaxDiskSizeMbytes field.
func (o *UserLimits) SetVmInstanceMaxDiskSizeMbytes(v float32) {
	o.VmInstanceMaxDiskSizeMbytes = &v
}

// GetOwnerIsBillable returns the OwnerIsBillable field value if set, zero value otherwise.
func (o *UserLimits) GetOwnerIsBillable() bool {
	if o == nil || IsNil(o.OwnerIsBillable) {
		var ret bool
		return ret
	}
	return *o.OwnerIsBillable
}

// GetOwnerIsBillableOk returns a tuple with the OwnerIsBillable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetOwnerIsBillableOk() (*bool, bool) {
	if o == nil || IsNil(o.OwnerIsBillable) {
		return nil, false
	}
	return o.OwnerIsBillable, true
}

// HasOwnerIsBillable returns a boolean if a field has been set.
func (o *UserLimits) HasOwnerIsBillable() bool {
	if o != nil && !IsNil(o.OwnerIsBillable) {
		return true
	}

	return false
}

// SetOwnerIsBillable gets a reference to the given bool and assigns it to the OwnerIsBillable field.
func (o *UserLimits) SetOwnerIsBillable(v bool) {
	o.OwnerIsBillable = &v
}

// GetServerTypeReservationMaxCount returns the ServerTypeReservationMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetServerTypeReservationMaxCount() float32 {
	if o == nil || IsNil(o.ServerTypeReservationMaxCount) {
		var ret float32
		return ret
	}
	return *o.ServerTypeReservationMaxCount
}

// GetServerTypeReservationMaxCountOk returns a tuple with the ServerTypeReservationMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetServerTypeReservationMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerTypeReservationMaxCount) {
		return nil, false
	}
	return o.ServerTypeReservationMaxCount, true
}

// HasServerTypeReservationMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasServerTypeReservationMaxCount() bool {
	if o != nil && !IsNil(o.ServerTypeReservationMaxCount) {
		return true
	}

	return false
}

// SetServerTypeReservationMaxCount gets a reference to the given float32 and assigns it to the ServerTypeReservationMaxCount field.
func (o *UserLimits) SetServerTypeReservationMaxCount(v float32) {
	o.ServerTypeReservationMaxCount = &v
}

// GetServerTypeReservationMaxQuantity returns the ServerTypeReservationMaxQuantity field value if set, zero value otherwise.
func (o *UserLimits) GetServerTypeReservationMaxQuantity() float32 {
	if o == nil || IsNil(o.ServerTypeReservationMaxQuantity) {
		var ret float32
		return ret
	}
	return *o.ServerTypeReservationMaxQuantity
}

// GetServerTypeReservationMaxQuantityOk returns a tuple with the ServerTypeReservationMaxQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetServerTypeReservationMaxQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerTypeReservationMaxQuantity) {
		return nil, false
	}
	return o.ServerTypeReservationMaxQuantity, true
}

// HasServerTypeReservationMaxQuantity returns a boolean if a field has been set.
func (o *UserLimits) HasServerTypeReservationMaxQuantity() bool {
	if o != nil && !IsNil(o.ServerTypeReservationMaxQuantity) {
		return true
	}

	return false
}

// SetServerTypeReservationMaxQuantity gets a reference to the given float32 and assigns it to the ServerTypeReservationMaxQuantity field.
func (o *UserLimits) SetServerTypeReservationMaxQuantity(v float32) {
	o.ServerTypeReservationMaxQuantity = &v
}

// GetSharedDriveMaxSizeMbytes returns the SharedDriveMaxSizeMbytes field value if set, zero value otherwise.
func (o *UserLimits) GetSharedDriveMaxSizeMbytes() float32 {
	if o == nil || IsNil(o.SharedDriveMaxSizeMbytes) {
		var ret float32
		return ret
	}
	return *o.SharedDriveMaxSizeMbytes
}

// GetSharedDriveMaxSizeMbytesOk returns a tuple with the SharedDriveMaxSizeMbytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetSharedDriveMaxSizeMbytesOk() (*float32, bool) {
	if o == nil || IsNil(o.SharedDriveMaxSizeMbytes) {
		return nil, false
	}
	return o.SharedDriveMaxSizeMbytes, true
}

// HasSharedDriveMaxSizeMbytes returns a boolean if a field has been set.
func (o *UserLimits) HasSharedDriveMaxSizeMbytes() bool {
	if o != nil && !IsNil(o.SharedDriveMaxSizeMbytes) {
		return true
	}

	return false
}

// SetSharedDriveMaxSizeMbytes gets a reference to the given float32 and assigns it to the SharedDriveMaxSizeMbytes field.
func (o *UserLimits) SetSharedDriveMaxSizeMbytes(v float32) {
	o.SharedDriveMaxSizeMbytes = &v
}

// GetSharedDriveMinSizeMbytes returns the SharedDriveMinSizeMbytes field value if set, zero value otherwise.
func (o *UserLimits) GetSharedDriveMinSizeMbytes() float32 {
	if o == nil || IsNil(o.SharedDriveMinSizeMbytes) {
		var ret float32
		return ret
	}
	return *o.SharedDriveMinSizeMbytes
}

// GetSharedDriveMinSizeMbytesOk returns a tuple with the SharedDriveMinSizeMbytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetSharedDriveMinSizeMbytesOk() (*float32, bool) {
	if o == nil || IsNil(o.SharedDriveMinSizeMbytes) {
		return nil, false
	}
	return o.SharedDriveMinSizeMbytes, true
}

// HasSharedDriveMinSizeMbytes returns a boolean if a field has been set.
func (o *UserLimits) HasSharedDriveMinSizeMbytes() bool {
	if o != nil && !IsNil(o.SharedDriveMinSizeMbytes) {
		return true
	}

	return false
}

// SetSharedDriveMinSizeMbytes gets a reference to the given float32 and assigns it to the SharedDriveMinSizeMbytes field.
func (o *UserLimits) SetSharedDriveMinSizeMbytes(v float32) {
	o.SharedDriveMinSizeMbytes = &v
}

// GetFileShareMaxSizeGb returns the FileShareMaxSizeGb field value if set, zero value otherwise.
func (o *UserLimits) GetFileShareMaxSizeGb() float32 {
	if o == nil || IsNil(o.FileShareMaxSizeGb) {
		var ret float32
		return ret
	}
	return *o.FileShareMaxSizeGb
}

// GetFileShareMaxSizeGbOk returns a tuple with the FileShareMaxSizeGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetFileShareMaxSizeGbOk() (*float32, bool) {
	if o == nil || IsNil(o.FileShareMaxSizeGb) {
		return nil, false
	}
	return o.FileShareMaxSizeGb, true
}

// HasFileShareMaxSizeGb returns a boolean if a field has been set.
func (o *UserLimits) HasFileShareMaxSizeGb() bool {
	if o != nil && !IsNil(o.FileShareMaxSizeGb) {
		return true
	}

	return false
}

// SetFileShareMaxSizeGb gets a reference to the given float32 and assigns it to the FileShareMaxSizeGb field.
func (o *UserLimits) SetFileShareMaxSizeGb(v float32) {
	o.FileShareMaxSizeGb = &v
}

// GetFileShareMinSizeGb returns the FileShareMinSizeGb field value if set, zero value otherwise.
func (o *UserLimits) GetFileShareMinSizeGb() float32 {
	if o == nil || IsNil(o.FileShareMinSizeGb) {
		var ret float32
		return ret
	}
	return *o.FileShareMinSizeGb
}

// GetFileShareMinSizeGbOk returns a tuple with the FileShareMinSizeGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetFileShareMinSizeGbOk() (*float32, bool) {
	if o == nil || IsNil(o.FileShareMinSizeGb) {
		return nil, false
	}
	return o.FileShareMinSizeGb, true
}

// HasFileShareMinSizeGb returns a boolean if a field has been set.
func (o *UserLimits) HasFileShareMinSizeGb() bool {
	if o != nil && !IsNil(o.FileShareMinSizeGb) {
		return true
	}

	return false
}

// SetFileShareMinSizeGb gets a reference to the given float32 and assigns it to the FileShareMinSizeGb field.
func (o *UserLimits) SetFileShareMinSizeGb(v float32) {
	o.FileShareMinSizeGb = &v
}

// GetBucketMaxSizeGb returns the BucketMaxSizeGb field value if set, zero value otherwise.
func (o *UserLimits) GetBucketMaxSizeGb() float32 {
	if o == nil || IsNil(o.BucketMaxSizeGb) {
		var ret float32
		return ret
	}
	return *o.BucketMaxSizeGb
}

// GetBucketMaxSizeGbOk returns a tuple with the BucketMaxSizeGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetBucketMaxSizeGbOk() (*float32, bool) {
	if o == nil || IsNil(o.BucketMaxSizeGb) {
		return nil, false
	}
	return o.BucketMaxSizeGb, true
}

// HasBucketMaxSizeGb returns a boolean if a field has been set.
func (o *UserLimits) HasBucketMaxSizeGb() bool {
	if o != nil && !IsNil(o.BucketMaxSizeGb) {
		return true
	}

	return false
}

// SetBucketMaxSizeGb gets a reference to the given float32 and assigns it to the BucketMaxSizeGb field.
func (o *UserLimits) SetBucketMaxSizeGb(v float32) {
	o.BucketMaxSizeGb = &v
}

// GetBucketMinSizeGb returns the BucketMinSizeGb field value if set, zero value otherwise.
func (o *UserLimits) GetBucketMinSizeGb() float32 {
	if o == nil || IsNil(o.BucketMinSizeGb) {
		var ret float32
		return ret
	}
	return *o.BucketMinSizeGb
}

// GetBucketMinSizeGbOk returns a tuple with the BucketMinSizeGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetBucketMinSizeGbOk() (*float32, bool) {
	if o == nil || IsNil(o.BucketMinSizeGb) {
		return nil, false
	}
	return o.BucketMinSizeGb, true
}

// HasBucketMinSizeGb returns a boolean if a field has been set.
func (o *UserLimits) HasBucketMinSizeGb() bool {
	if o != nil && !IsNil(o.BucketMinSizeGb) {
		return true
	}

	return false
}

// SetBucketMinSizeGb gets a reference to the given float32 and assigns it to the BucketMinSizeGb field.
func (o *UserLimits) SetBucketMinSizeGb(v float32) {
	o.BucketMinSizeGb = &v
}

// GetAllowVlanOverrides returns the AllowVlanOverrides field value if set, zero value otherwise.
func (o *UserLimits) GetAllowVlanOverrides() bool {
	if o == nil || IsNil(o.AllowVlanOverrides) {
		var ret bool
		return ret
	}
	return *o.AllowVlanOverrides
}

// GetAllowVlanOverridesOk returns a tuple with the AllowVlanOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetAllowVlanOverridesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowVlanOverrides) {
		return nil, false
	}
	return o.AllowVlanOverrides, true
}

// HasAllowVlanOverrides returns a boolean if a field has been set.
func (o *UserLimits) HasAllowVlanOverrides() bool {
	if o != nil && !IsNil(o.AllowVlanOverrides) {
		return true
	}

	return false
}

// SetAllowVlanOverrides gets a reference to the given bool and assigns it to the AllowVlanOverrides field.
func (o *UserLimits) SetAllowVlanOverrides(v bool) {
	o.AllowVlanOverrides = &v
}

// GetAllowNetworkProfiles returns the AllowNetworkProfiles field value if set, zero value otherwise.
func (o *UserLimits) GetAllowNetworkProfiles() bool {
	if o == nil || IsNil(o.AllowNetworkProfiles) {
		var ret bool
		return ret
	}
	return *o.AllowNetworkProfiles
}

// GetAllowNetworkProfilesOk returns a tuple with the AllowNetworkProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetAllowNetworkProfilesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowNetworkProfiles) {
		return nil, false
	}
	return o.AllowNetworkProfiles, true
}

// HasAllowNetworkProfiles returns a boolean if a field has been set.
func (o *UserLimits) HasAllowNetworkProfiles() bool {
	if o != nil && !IsNil(o.AllowNetworkProfiles) {
		return true
	}

	return false
}

// SetAllowNetworkProfiles gets a reference to the given bool and assigns it to the AllowNetworkProfiles field.
func (o *UserLimits) SetAllowNetworkProfiles(v bool) {
	o.AllowNetworkProfiles = &v
}

// GetShowOperatingSystemImagesTab returns the ShowOperatingSystemImagesTab field value if set, zero value otherwise.
func (o *UserLimits) GetShowOperatingSystemImagesTab() bool {
	if o == nil || IsNil(o.ShowOperatingSystemImagesTab) {
		var ret bool
		return ret
	}
	return *o.ShowOperatingSystemImagesTab
}

// GetShowOperatingSystemImagesTabOk returns a tuple with the ShowOperatingSystemImagesTab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowOperatingSystemImagesTabOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowOperatingSystemImagesTab) {
		return nil, false
	}
	return o.ShowOperatingSystemImagesTab, true
}

// HasShowOperatingSystemImagesTab returns a boolean if a field has been set.
func (o *UserLimits) HasShowOperatingSystemImagesTab() bool {
	if o != nil && !IsNil(o.ShowOperatingSystemImagesTab) {
		return true
	}

	return false
}

// SetShowOperatingSystemImagesTab gets a reference to the given bool and assigns it to the ShowOperatingSystemImagesTab field.
func (o *UserLimits) SetShowOperatingSystemImagesTab(v bool) {
	o.ShowOperatingSystemImagesTab = &v
}

// GetShowTemplateAssetsView returns the ShowTemplateAssetsView field value if set, zero value otherwise.
func (o *UserLimits) GetShowTemplateAssetsView() bool {
	if o == nil || IsNil(o.ShowTemplateAssetsView) {
		var ret bool
		return ret
	}
	return *o.ShowTemplateAssetsView
}

// GetShowTemplateAssetsViewOk returns a tuple with the ShowTemplateAssetsView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowTemplateAssetsViewOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowTemplateAssetsView) {
		return nil, false
	}
	return o.ShowTemplateAssetsView, true
}

// HasShowTemplateAssetsView returns a boolean if a field has been set.
func (o *UserLimits) HasShowTemplateAssetsView() bool {
	if o != nil && !IsNil(o.ShowTemplateAssetsView) {
		return true
	}

	return false
}

// SetShowTemplateAssetsView gets a reference to the given bool and assigns it to the ShowTemplateAssetsView field.
func (o *UserLimits) SetShowTemplateAssetsView(v bool) {
	o.ShowTemplateAssetsView = &v
}

// GetStorageTypes returns the StorageTypes field value if set, zero value otherwise.
func (o *UserLimits) GetStorageTypes() []string {
	if o == nil || IsNil(o.StorageTypes) {
		var ret []string
		return ret
	}
	return o.StorageTypes
}

// GetStorageTypesOk returns a tuple with the StorageTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetStorageTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.StorageTypes) {
		return nil, false
	}
	return o.StorageTypes, true
}

// HasStorageTypes returns a boolean if a field has been set.
func (o *UserLimits) HasStorageTypes() bool {
	if o != nil && !IsNil(o.StorageTypes) {
		return true
	}

	return false
}

// SetStorageTypes gets a reference to the given []string and assigns it to the StorageTypes field.
func (o *UserLimits) SetStorageTypes(v []string) {
	o.StorageTypes = v
}

// GetThresholdMaxCount returns the ThresholdMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetThresholdMaxCount() float32 {
	if o == nil || IsNil(o.ThresholdMaxCount) {
		var ret float32
		return ret
	}
	return *o.ThresholdMaxCount
}

// GetThresholdMaxCountOk returns a tuple with the ThresholdMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetThresholdMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ThresholdMaxCount) {
		return nil, false
	}
	return o.ThresholdMaxCount, true
}

// HasThresholdMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasThresholdMaxCount() bool {
	if o != nil && !IsNil(o.ThresholdMaxCount) {
		return true
	}

	return false
}

// SetThresholdMaxCount gets a reference to the given float32 and assigns it to the ThresholdMaxCount field.
func (o *UserLimits) SetThresholdMaxCount(v float32) {
	o.ThresholdMaxCount = &v
}

// GetUserResourceIscsiStorageSpaceMaxGbytes returns the UserResourceIscsiStorageSpaceMaxGbytes field value if set, zero value otherwise.
func (o *UserLimits) GetUserResourceIscsiStorageSpaceMaxGbytes() float32 {
	if o == nil || IsNil(o.UserResourceIscsiStorageSpaceMaxGbytes) {
		var ret float32
		return ret
	}
	return *o.UserResourceIscsiStorageSpaceMaxGbytes
}

// GetUserResourceIscsiStorageSpaceMaxGbytesOk returns a tuple with the UserResourceIscsiStorageSpaceMaxGbytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetUserResourceIscsiStorageSpaceMaxGbytesOk() (*float32, bool) {
	if o == nil || IsNil(o.UserResourceIscsiStorageSpaceMaxGbytes) {
		return nil, false
	}
	return o.UserResourceIscsiStorageSpaceMaxGbytes, true
}

// HasUserResourceIscsiStorageSpaceMaxGbytes returns a boolean if a field has been set.
func (o *UserLimits) HasUserResourceIscsiStorageSpaceMaxGbytes() bool {
	if o != nil && !IsNil(o.UserResourceIscsiStorageSpaceMaxGbytes) {
		return true
	}

	return false
}

// SetUserResourceIscsiStorageSpaceMaxGbytes gets a reference to the given float32 and assigns it to the UserResourceIscsiStorageSpaceMaxGbytes field.
func (o *UserLimits) SetUserResourceIscsiStorageSpaceMaxGbytes(v float32) {
	o.UserResourceIscsiStorageSpaceMaxGbytes = &v
}

// GetUserResourceServersMaxCount returns the UserResourceServersMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetUserResourceServersMaxCount() float32 {
	if o == nil || IsNil(o.UserResourceServersMaxCount) {
		var ret float32
		return ret
	}
	return *o.UserResourceServersMaxCount
}

// GetUserResourceServersMaxCountOk returns a tuple with the UserResourceServersMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetUserResourceServersMaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.UserResourceServersMaxCount) {
		return nil, false
	}
	return o.UserResourceServersMaxCount, true
}

// HasUserResourceServersMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasUserResourceServersMaxCount() bool {
	if o != nil && !IsNil(o.UserResourceServersMaxCount) {
		return true
	}

	return false
}

// SetUserResourceServersMaxCount gets a reference to the given float32 and assigns it to the UserResourceServersMaxCount field.
func (o *UserLimits) SetUserResourceServersMaxCount(v float32) {
	o.UserResourceServersMaxCount = &v
}

// GetUserResourceServerTypeNameToMaxCount returns the UserResourceServerTypeNameToMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetUserResourceServerTypeNameToMaxCount() map[string]interface{} {
	if o == nil || IsNil(o.UserResourceServerTypeNameToMaxCount) {
		var ret map[string]interface{}
		return ret
	}
	return o.UserResourceServerTypeNameToMaxCount
}

// GetUserResourceServerTypeNameToMaxCountOk returns a tuple with the UserResourceServerTypeNameToMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetUserResourceServerTypeNameToMaxCountOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UserResourceServerTypeNameToMaxCount) {
		return map[string]interface{}{}, false
	}
	return o.UserResourceServerTypeNameToMaxCount, true
}

// HasUserResourceServerTypeNameToMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasUserResourceServerTypeNameToMaxCount() bool {
	if o != nil && !IsNil(o.UserResourceServerTypeNameToMaxCount) {
		return true
	}

	return false
}

// SetUserResourceServerTypeNameToMaxCount gets a reference to the given map[string]interface{} and assigns it to the UserResourceServerTypeNameToMaxCount field.
func (o *UserLimits) SetUserResourceServerTypeNameToMaxCount(v map[string]interface{}) {
	o.UserResourceServerTypeNameToMaxCount = v
}

// GetUserSshKeysCountMax returns the UserSshKeysCountMax field value if set, zero value otherwise.
func (o *UserLimits) GetUserSshKeysCountMax() float32 {
	if o == nil || IsNil(o.UserSshKeysCountMax) {
		var ret float32
		return ret
	}
	return *o.UserSshKeysCountMax
}

// GetUserSshKeysCountMaxOk returns a tuple with the UserSshKeysCountMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetUserSshKeysCountMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.UserSshKeysCountMax) {
		return nil, false
	}
	return o.UserSshKeysCountMax, true
}

// HasUserSshKeysCountMax returns a boolean if a field has been set.
func (o *UserLimits) HasUserSshKeysCountMax() bool {
	if o != nil && !IsNil(o.UserSshKeysCountMax) {
		return true
	}

	return false
}

// SetUserSshKeysCountMax gets a reference to the given float32 and assigns it to the UserSshKeysCountMax field.
func (o *UserLimits) SetUserSshKeysCountMax(v float32) {
	o.UserSshKeysCountMax = &v
}

// GetWanSubnetIpv4MaxCount returns the WanSubnetIpv4MaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetWanSubnetIpv4MaxCount() float32 {
	if o == nil || IsNil(o.WanSubnetIpv4MaxCount) {
		var ret float32
		return ret
	}
	return *o.WanSubnetIpv4MaxCount
}

// GetWanSubnetIpv4MaxCountOk returns a tuple with the WanSubnetIpv4MaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetWanSubnetIpv4MaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.WanSubnetIpv4MaxCount) {
		return nil, false
	}
	return o.WanSubnetIpv4MaxCount, true
}

// HasWanSubnetIpv4MaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasWanSubnetIpv4MaxCount() bool {
	if o != nil && !IsNil(o.WanSubnetIpv4MaxCount) {
		return true
	}

	return false
}

// SetWanSubnetIpv4MaxCount gets a reference to the given float32 and assigns it to the WanSubnetIpv4MaxCount field.
func (o *UserLimits) SetWanSubnetIpv4MaxCount(v float32) {
	o.WanSubnetIpv4MaxCount = &v
}

// GetWanSubnetIpv6MaxCount returns the WanSubnetIpv6MaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetWanSubnetIpv6MaxCount() float32 {
	if o == nil || IsNil(o.WanSubnetIpv6MaxCount) {
		var ret float32
		return ret
	}
	return *o.WanSubnetIpv6MaxCount
}

// GetWanSubnetIpv6MaxCountOk returns a tuple with the WanSubnetIpv6MaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetWanSubnetIpv6MaxCountOk() (*float32, bool) {
	if o == nil || IsNil(o.WanSubnetIpv6MaxCount) {
		return nil, false
	}
	return o.WanSubnetIpv6MaxCount, true
}

// HasWanSubnetIpv6MaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasWanSubnetIpv6MaxCount() bool {
	if o != nil && !IsNil(o.WanSubnetIpv6MaxCount) {
		return true
	}

	return false
}

// SetWanSubnetIpv6MaxCount gets a reference to the given float32 and assigns it to the WanSubnetIpv6MaxCount field.
func (o *UserLimits) SetWanSubnetIpv6MaxCount(v float32) {
	o.WanSubnetIpv6MaxCount = &v
}

// GetWanSubnetPrefixSizeToMaxCount returns the WanSubnetPrefixSizeToMaxCount field value if set, zero value otherwise.
func (o *UserLimits) GetWanSubnetPrefixSizeToMaxCount() map[string]interface{} {
	if o == nil || IsNil(o.WanSubnetPrefixSizeToMaxCount) {
		var ret map[string]interface{}
		return ret
	}
	return o.WanSubnetPrefixSizeToMaxCount
}

// GetWanSubnetPrefixSizeToMaxCountOk returns a tuple with the WanSubnetPrefixSizeToMaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetWanSubnetPrefixSizeToMaxCountOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.WanSubnetPrefixSizeToMaxCount) {
		return map[string]interface{}{}, false
	}
	return o.WanSubnetPrefixSizeToMaxCount, true
}

// HasWanSubnetPrefixSizeToMaxCount returns a boolean if a field has been set.
func (o *UserLimits) HasWanSubnetPrefixSizeToMaxCount() bool {
	if o != nil && !IsNil(o.WanSubnetPrefixSizeToMaxCount) {
		return true
	}

	return false
}

// SetWanSubnetPrefixSizeToMaxCount gets a reference to the given map[string]interface{} and assigns it to the WanSubnetPrefixSizeToMaxCount field.
func (o *UserLimits) SetWanSubnetPrefixSizeToMaxCount(v map[string]interface{}) {
	o.WanSubnetPrefixSizeToMaxCount = v
}

// GetShowLegacyPages returns the ShowLegacyPages field value if set, zero value otherwise.
func (o *UserLimits) GetShowLegacyPages() bool {
	if o == nil || IsNil(o.ShowLegacyPages) {
		var ret bool
		return ret
	}
	return *o.ShowLegacyPages
}

// GetShowLegacyPagesOk returns a tuple with the ShowLegacyPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowLegacyPagesOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowLegacyPages) {
		return nil, false
	}
	return o.ShowLegacyPages, true
}

// HasShowLegacyPages returns a boolean if a field has been set.
func (o *UserLimits) HasShowLegacyPages() bool {
	if o != nil && !IsNil(o.ShowLegacyPages) {
		return true
	}

	return false
}

// SetShowLegacyPages gets a reference to the given bool and assigns it to the ShowLegacyPages field.
func (o *UserLimits) SetShowLegacyPages(v bool) {
	o.ShowLegacyPages = &v
}

// GetShowExperimentalPages returns the ShowExperimentalPages field value if set, zero value otherwise.
func (o *UserLimits) GetShowExperimentalPages() bool {
	if o == nil || IsNil(o.ShowExperimentalPages) {
		var ret bool
		return ret
	}
	return *o.ShowExperimentalPages
}

// GetShowExperimentalPagesOk returns a tuple with the ShowExperimentalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowExperimentalPagesOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowExperimentalPages) {
		return nil, false
	}
	return o.ShowExperimentalPages, true
}

// HasShowExperimentalPages returns a boolean if a field has been set.
func (o *UserLimits) HasShowExperimentalPages() bool {
	if o != nil && !IsNil(o.ShowExperimentalPages) {
		return true
	}

	return false
}

// SetShowExperimentalPages gets a reference to the given bool and assigns it to the ShowExperimentalPages field.
func (o *UserLimits) SetShowExperimentalPages(v bool) {
	o.ShowExperimentalPages = &v
}

// GetShowDiagramAppsGlobal returns the ShowDiagramAppsGlobal field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppsGlobal() bool {
	if o == nil || IsNil(o.ShowDiagramAppsGlobal) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppsGlobal
}

// GetShowDiagramAppsGlobalOk returns a tuple with the ShowDiagramAppsGlobal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppsGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppsGlobal) {
		return nil, false
	}
	return o.ShowDiagramAppsGlobal, true
}

// HasShowDiagramAppsGlobal returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppsGlobal() bool {
	if o != nil && !IsNil(o.ShowDiagramAppsGlobal) {
		return true
	}

	return false
}

// SetShowDiagramAppsGlobal gets a reference to the given bool and assigns it to the ShowDiagramAppsGlobal field.
func (o *UserLimits) SetShowDiagramAppsGlobal(v bool) {
	o.ShowDiagramAppsGlobal = &v
}

// GetShowDiagramAppClusterTypeCloudera returns the ShowDiagramAppClusterTypeCloudera field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeCloudera() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeCloudera) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeCloudera
}

// GetShowDiagramAppClusterTypeClouderaOk returns a tuple with the ShowDiagramAppClusterTypeCloudera field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeClouderaOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeCloudera) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeCloudera, true
}

// HasShowDiagramAppClusterTypeCloudera returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeCloudera() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeCloudera) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeCloudera gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeCloudera field.
func (o *UserLimits) SetShowDiagramAppClusterTypeCloudera(v bool) {
	o.ShowDiagramAppClusterTypeCloudera = &v
}

// GetShowDiagramAppClusterTypeCouchbase returns the ShowDiagramAppClusterTypeCouchbase field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeCouchbase() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeCouchbase) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeCouchbase
}

// GetShowDiagramAppClusterTypeCouchbaseOk returns a tuple with the ShowDiagramAppClusterTypeCouchbase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeCouchbaseOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeCouchbase) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeCouchbase, true
}

// HasShowDiagramAppClusterTypeCouchbase returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeCouchbase() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeCouchbase) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeCouchbase gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeCouchbase field.
func (o *UserLimits) SetShowDiagramAppClusterTypeCouchbase(v bool) {
	o.ShowDiagramAppClusterTypeCouchbase = &v
}

// GetShowDiagramAppClusterTypeDatameer returns the ShowDiagramAppClusterTypeDatameer field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeDatameer() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeDatameer) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeDatameer
}

// GetShowDiagramAppClusterTypeDatameerOk returns a tuple with the ShowDiagramAppClusterTypeDatameer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeDatameerOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeDatameer) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeDatameer, true
}

// HasShowDiagramAppClusterTypeDatameer returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeDatameer() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeDatameer) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeDatameer gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeDatameer field.
func (o *UserLimits) SetShowDiagramAppClusterTypeDatameer(v bool) {
	o.ShowDiagramAppClusterTypeDatameer = &v
}

// GetShowDiagramAppClusterTypeDatastax returns the ShowDiagramAppClusterTypeDatastax field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeDatastax() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeDatastax) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeDatastax
}

// GetShowDiagramAppClusterTypeDatastaxOk returns a tuple with the ShowDiagramAppClusterTypeDatastax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeDatastaxOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeDatastax) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeDatastax, true
}

// HasShowDiagramAppClusterTypeDatastax returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeDatastax() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeDatastax) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeDatastax gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeDatastax field.
func (o *UserLimits) SetShowDiagramAppClusterTypeDatastax(v bool) {
	o.ShowDiagramAppClusterTypeDatastax = &v
}

// GetShowDiagramAppClusterTypeElasticsearch returns the ShowDiagramAppClusterTypeElasticsearch field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeElasticsearch() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeElasticsearch) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeElasticsearch
}

// GetShowDiagramAppClusterTypeElasticsearchOk returns a tuple with the ShowDiagramAppClusterTypeElasticsearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeElasticsearchOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeElasticsearch) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeElasticsearch, true
}

// HasShowDiagramAppClusterTypeElasticsearch returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeElasticsearch() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeElasticsearch) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeElasticsearch gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeElasticsearch field.
func (o *UserLimits) SetShowDiagramAppClusterTypeElasticsearch(v bool) {
	o.ShowDiagramAppClusterTypeElasticsearch = &v
}

// GetShowDiagramAppClusterTypeExasol returns the ShowDiagramAppClusterTypeExasol field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeExasol() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeExasol) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeExasol
}

// GetShowDiagramAppClusterTypeExasolOk returns a tuple with the ShowDiagramAppClusterTypeExasol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeExasolOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeExasol) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeExasol, true
}

// HasShowDiagramAppClusterTypeExasol returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeExasol() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeExasol) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeExasol gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeExasol field.
func (o *UserLimits) SetShowDiagramAppClusterTypeExasol(v bool) {
	o.ShowDiagramAppClusterTypeExasol = &v
}

// GetShowDiagramAppClusterTypeHortonworks returns the ShowDiagramAppClusterTypeHortonworks field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeHortonworks() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeHortonworks) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeHortonworks
}

// GetShowDiagramAppClusterTypeHortonworksOk returns a tuple with the ShowDiagramAppClusterTypeHortonworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeHortonworksOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeHortonworks) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeHortonworks, true
}

// HasShowDiagramAppClusterTypeHortonworks returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeHortonworks() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeHortonworks) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeHortonworks gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeHortonworks field.
func (o *UserLimits) SetShowDiagramAppClusterTypeHortonworks(v bool) {
	o.ShowDiagramAppClusterTypeHortonworks = &v
}

// GetShowDiagramAppClusterTypeKubernetes returns the ShowDiagramAppClusterTypeKubernetes field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeKubernetes() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeKubernetes) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeKubernetes
}

// GetShowDiagramAppClusterTypeKubernetesOk returns a tuple with the ShowDiagramAppClusterTypeKubernetes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeKubernetesOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeKubernetes) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeKubernetes, true
}

// HasShowDiagramAppClusterTypeKubernetes returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeKubernetes() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeKubernetes) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeKubernetes gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeKubernetes field.
func (o *UserLimits) SetShowDiagramAppClusterTypeKubernetes(v bool) {
	o.ShowDiagramAppClusterTypeKubernetes = &v
}

// GetShowDiagramAppClusterTypeMapr returns the ShowDiagramAppClusterTypeMapr field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeMapr() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeMapr) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeMapr
}

// GetShowDiagramAppClusterTypeMaprOk returns a tuple with the ShowDiagramAppClusterTypeMapr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeMaprOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeMapr) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeMapr, true
}

// HasShowDiagramAppClusterTypeMapr returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeMapr() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeMapr) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeMapr gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeMapr field.
func (o *UserLimits) SetShowDiagramAppClusterTypeMapr(v bool) {
	o.ShowDiagramAppClusterTypeMapr = &v
}

// GetShowDiagramAppClusterTypeMesos returns the ShowDiagramAppClusterTypeMesos field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeMesos() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeMesos) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeMesos
}

// GetShowDiagramAppClusterTypeMesosOk returns a tuple with the ShowDiagramAppClusterTypeMesos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeMesosOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeMesos) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeMesos, true
}

// HasShowDiagramAppClusterTypeMesos returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeMesos() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeMesos) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeMesos gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeMesos field.
func (o *UserLimits) SetShowDiagramAppClusterTypeMesos(v bool) {
	o.ShowDiagramAppClusterTypeMesos = &v
}

// GetShowDiagramAppClusterTypeMysqlPercona returns the ShowDiagramAppClusterTypeMysqlPercona field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeMysqlPercona() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeMysqlPercona) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeMysqlPercona
}

// GetShowDiagramAppClusterTypeMysqlPerconaOk returns a tuple with the ShowDiagramAppClusterTypeMysqlPercona field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeMysqlPerconaOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeMysqlPercona) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeMysqlPercona, true
}

// HasShowDiagramAppClusterTypeMysqlPercona returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeMysqlPercona() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeMysqlPercona) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeMysqlPercona gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeMysqlPercona field.
func (o *UserLimits) SetShowDiagramAppClusterTypeMysqlPercona(v bool) {
	o.ShowDiagramAppClusterTypeMysqlPercona = &v
}

// GetShowDiagramAppClusterTypeSplunk returns the ShowDiagramAppClusterTypeSplunk field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeSplunk() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeSplunk) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeSplunk
}

// GetShowDiagramAppClusterTypeSplunkOk returns a tuple with the ShowDiagramAppClusterTypeSplunk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeSplunkOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeSplunk) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeSplunk, true
}

// HasShowDiagramAppClusterTypeSplunk returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeSplunk() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeSplunk) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeSplunk gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeSplunk field.
func (o *UserLimits) SetShowDiagramAppClusterTypeSplunk(v bool) {
	o.ShowDiagramAppClusterTypeSplunk = &v
}

// GetShowDiagramAppClusterTypeVmwareVsphere returns the ShowDiagramAppClusterTypeVmwareVsphere field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeVmwareVsphere() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeVmwareVsphere) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeVmwareVsphere
}

// GetShowDiagramAppClusterTypeVmwareVsphereOk returns a tuple with the ShowDiagramAppClusterTypeVmwareVsphere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeVmwareVsphereOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeVmwareVsphere) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeVmwareVsphere, true
}

// HasShowDiagramAppClusterTypeVmwareVsphere returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeVmwareVsphere() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeVmwareVsphere) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeVmwareVsphere gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeVmwareVsphere field.
func (o *UserLimits) SetShowDiagramAppClusterTypeVmwareVsphere(v bool) {
	o.ShowDiagramAppClusterTypeVmwareVsphere = &v
}

// GetShowDiagramAppClusterTypeVmwareVcf returns the ShowDiagramAppClusterTypeVmwareVcf field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeVmwareVcf() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeVmwareVcf) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeVmwareVcf
}

// GetShowDiagramAppClusterTypeVmwareVcfOk returns a tuple with the ShowDiagramAppClusterTypeVmwareVcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeVmwareVcfOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeVmwareVcf) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeVmwareVcf, true
}

// HasShowDiagramAppClusterTypeVmwareVcf returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeVmwareVcf() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeVmwareVcf) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeVmwareVcf gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeVmwareVcf field.
func (o *UserLimits) SetShowDiagramAppClusterTypeVmwareVcf(v bool) {
	o.ShowDiagramAppClusterTypeVmwareVcf = &v
}

// GetShowDiagramAppClusterTypeKubernetesEksa returns the ShowDiagramAppClusterTypeKubernetesEksa field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramAppClusterTypeKubernetesEksa() bool {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeKubernetesEksa) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramAppClusterTypeKubernetesEksa
}

// GetShowDiagramAppClusterTypeKubernetesEksaOk returns a tuple with the ShowDiagramAppClusterTypeKubernetesEksa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramAppClusterTypeKubernetesEksaOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramAppClusterTypeKubernetesEksa) {
		return nil, false
	}
	return o.ShowDiagramAppClusterTypeKubernetesEksa, true
}

// HasShowDiagramAppClusterTypeKubernetesEksa returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramAppClusterTypeKubernetesEksa() bool {
	if o != nil && !IsNil(o.ShowDiagramAppClusterTypeKubernetesEksa) {
		return true
	}

	return false
}

// SetShowDiagramAppClusterTypeKubernetesEksa gets a reference to the given bool and assigns it to the ShowDiagramAppClusterTypeKubernetesEksa field.
func (o *UserLimits) SetShowDiagramAppClusterTypeKubernetesEksa(v bool) {
	o.ShowDiagramAppClusterTypeKubernetesEksa = &v
}

// GetShowDiagramVmInstanceGroups returns the ShowDiagramVmInstanceGroups field value if set, zero value otherwise.
func (o *UserLimits) GetShowDiagramVmInstanceGroups() bool {
	if o == nil || IsNil(o.ShowDiagramVmInstanceGroups) {
		var ret bool
		return ret
	}
	return *o.ShowDiagramVmInstanceGroups
}

// GetShowDiagramVmInstanceGroupsOk returns a tuple with the ShowDiagramVmInstanceGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowDiagramVmInstanceGroupsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiagramVmInstanceGroups) {
		return nil, false
	}
	return o.ShowDiagramVmInstanceGroups, true
}

// HasShowDiagramVmInstanceGroups returns a boolean if a field has been set.
func (o *UserLimits) HasShowDiagramVmInstanceGroups() bool {
	if o != nil && !IsNil(o.ShowDiagramVmInstanceGroups) {
		return true
	}

	return false
}

// SetShowDiagramVmInstanceGroups gets a reference to the given bool and assigns it to the ShowDiagramVmInstanceGroups field.
func (o *UserLimits) SetShowDiagramVmInstanceGroups(v bool) {
	o.ShowDiagramVmInstanceGroups = &v
}

// GetShowEliChatBot returns the ShowEliChatBot field value if set, zero value otherwise.
func (o *UserLimits) GetShowEliChatBot() bool {
	if o == nil || IsNil(o.ShowEliChatBot) {
		var ret bool
		return ret
	}
	return *o.ShowEliChatBot
}

// GetShowEliChatBotOk returns a tuple with the ShowEliChatBot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowEliChatBotOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowEliChatBot) {
		return nil, false
	}
	return o.ShowEliChatBot, true
}

// HasShowEliChatBot returns a boolean if a field has been set.
func (o *UserLimits) HasShowEliChatBot() bool {
	if o != nil && !IsNil(o.ShowEliChatBot) {
		return true
	}

	return false
}

// SetShowEliChatBot gets a reference to the given bool and assigns it to the ShowEliChatBot field.
func (o *UserLimits) SetShowEliChatBot(v bool) {
	o.ShowEliChatBot = &v
}

// GetEnableCustomRaidConfiguration returns the EnableCustomRaidConfiguration field value if set, zero value otherwise.
func (o *UserLimits) GetEnableCustomRaidConfiguration() bool {
	if o == nil || IsNil(o.EnableCustomRaidConfiguration) {
		var ret bool
		return ret
	}
	return *o.EnableCustomRaidConfiguration
}

// GetEnableCustomRaidConfigurationOk returns a tuple with the EnableCustomRaidConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetEnableCustomRaidConfigurationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCustomRaidConfiguration) {
		return nil, false
	}
	return o.EnableCustomRaidConfiguration, true
}

// HasEnableCustomRaidConfiguration returns a boolean if a field has been set.
func (o *UserLimits) HasEnableCustomRaidConfiguration() bool {
	if o != nil && !IsNil(o.EnableCustomRaidConfiguration) {
		return true
	}

	return false
}

// SetEnableCustomRaidConfiguration gets a reference to the given bool and assigns it to the EnableCustomRaidConfiguration field.
func (o *UserLimits) SetEnableCustomRaidConfiguration(v bool) {
	o.EnableCustomRaidConfiguration = &v
}

// GetEnableCustomSubnets returns the EnableCustomSubnets field value if set, zero value otherwise.
func (o *UserLimits) GetEnableCustomSubnets() bool {
	if o == nil || IsNil(o.EnableCustomSubnets) {
		var ret bool
		return ret
	}
	return *o.EnableCustomSubnets
}

// GetEnableCustomSubnetsOk returns a tuple with the EnableCustomSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetEnableCustomSubnetsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCustomSubnets) {
		return nil, false
	}
	return o.EnableCustomSubnets, true
}

// HasEnableCustomSubnets returns a boolean if a field has been set.
func (o *UserLimits) HasEnableCustomSubnets() bool {
	if o != nil && !IsNil(o.EnableCustomSubnets) {
		return true
	}

	return false
}

// SetEnableCustomSubnets gets a reference to the given bool and assigns it to the EnableCustomSubnets field.
func (o *UserLimits) SetEnableCustomSubnets(v bool) {
	o.EnableCustomSubnets = &v
}

// GetShowStackTrace returns the ShowStackTrace field value if set, zero value otherwise.
func (o *UserLimits) GetShowStackTrace() bool {
	if o == nil || IsNil(o.ShowStackTrace) {
		var ret bool
		return ret
	}
	return *o.ShowStackTrace
}

// GetShowStackTraceOk returns a tuple with the ShowStackTrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetShowStackTraceOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowStackTrace) {
		return nil, false
	}
	return o.ShowStackTrace, true
}

// HasShowStackTrace returns a boolean if a field has been set.
func (o *UserLimits) HasShowStackTrace() bool {
	if o != nil && !IsNil(o.ShowStackTrace) {
		return true
	}

	return false
}

// SetShowStackTrace gets a reference to the given bool and assigns it to the ShowStackTrace field.
func (o *UserLimits) SetShowStackTrace(v bool) {
	o.ShowStackTrace = &v
}

func (o UserLimits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContainerArrayContainersMaxCount) {
		toSerialize["containerArrayContainersMaxCount"] = o.ContainerArrayContainersMaxCount
	}
	if !IsNil(o.ContainerArrayContainersMinCount) {
		toSerialize["containerArrayContainersMinCount"] = o.ContainerArrayContainersMinCount
	}
	if !IsNil(o.ContainerArrayDriveArraysMaxCount) {
		toSerialize["containerArrayDriveArraysMaxCount"] = o.ContainerArrayDriveArraysMaxCount
	}
	if !IsNil(o.ContainerArrayDriveArraysMinCount) {
		toSerialize["containerArrayDriveArraysMinCount"] = o.ContainerArrayDriveArraysMinCount
	}
	if !IsNil(o.ContainerArraySecretsMaxCount) {
		toSerialize["containerArraySecretsMaxCount"] = o.ContainerArraySecretsMaxCount
	}
	if !IsNil(o.ContainerPlatformContainerArrayMaxCount) {
		toSerialize["containerPlatformContainerArrayMaxCount"] = o.ContainerPlatformContainerArrayMaxCount
	}
	if !IsNil(o.DriveArrayDrivesMaxCount) {
		toSerialize["driveArrayDrivesMaxCount"] = o.DriveArrayDrivesMaxCount
	}
	if !IsNil(o.DriveArrayDrivesMinCount) {
		toSerialize["driveArrayDrivesMinCount"] = o.DriveArrayDrivesMinCount
	}
	if !IsNil(o.DriveMaxSizeMbytes) {
		toSerialize["driveMaxSizeMbytes"] = o.DriveMaxSizeMbytes
	}
	if !IsNil(o.DriveMinSizeMbytes) {
		toSerialize["driveMinSizeMbytes"] = o.DriveMinSizeMbytes
	}
	if !IsNil(o.InfrastructureActiveMaxCount) {
		toSerialize["infrastructureActiveMaxCount"] = o.InfrastructureActiveMaxCount
	}
	if !IsNil(o.InfrastructureClusterMaxCount) {
		toSerialize["infrastructureClusterMaxCount"] = o.InfrastructureClusterMaxCount
	}
	if !IsNil(o.InfrastructureClusterMysqlAllowed) {
		toSerialize["infrastructureClusterMysqlAllowed"] = o.InfrastructureClusterMysqlAllowed
	}
	if !IsNil(o.InfrastructureContainerClusterKafkaAllowed) {
		toSerialize["infrastructureContainerClusterKafkaAllowed"] = o.InfrastructureContainerClusterKafkaAllowed
	}
	if !IsNil(o.InfrastructureContainerClusterMaxCount) {
		toSerialize["infrastructureContainerClusterMaxCount"] = o.InfrastructureContainerClusterMaxCount
	}
	if !IsNil(o.InfrastructureContainerClusterPostgresqlAllowed) {
		toSerialize["infrastructureContainerClusterPostgresqlAllowed"] = o.InfrastructureContainerClusterPostgresqlAllowed
	}
	if !IsNil(o.InfrastructureContainerClusterSparkArrayAllowed) {
		toSerialize["infrastructureContainerClusterSparkArrayAllowed"] = o.InfrastructureContainerClusterSparkArrayAllowed
	}
	if !IsNil(o.InfrastructureContainerClusterSparksqlAllowed) {
		toSerialize["infrastructureContainerClusterSparksqlAllowed"] = o.InfrastructureContainerClusterSparksqlAllowed
	}
	if !IsNil(o.InfrastructureContainerClusterStreamsetsAllowed) {
		toSerialize["infrastructureContainerClusterStreamsetsAllowed"] = o.InfrastructureContainerClusterStreamsetsAllowed
	}
	if !IsNil(o.InfrastructureContainerClusterZookeeperAllowed) {
		toSerialize["infrastructureContainerClusterZookeeperAllowed"] = o.InfrastructureContainerClusterZookeeperAllowed
	}
	if !IsNil(o.InfrastructureContainerClusterZoomdataAllowed) {
		toSerialize["infrastructureContainerClusterZoomdataAllowed"] = o.InfrastructureContainerClusterZoomdataAllowed
	}
	if !IsNil(o.InfrastructureContainerPlatformMaxCount) {
		toSerialize["infrastructureContainerPlatformMaxCount"] = o.InfrastructureContainerPlatformMaxCount
	}
	if !IsNil(o.InfrastructureDataLakeEnabled) {
		toSerialize["infrastructureDataLakeEnabled"] = o.InfrastructureDataLakeEnabled
	}
	if !IsNil(o.InfrastructureDataLakeMaxCount) {
		toSerialize["infrastructureDataLakeMaxCount"] = o.InfrastructureDataLakeMaxCount
	}
	if !IsNil(o.InfrastructureDeletedMaxCount) {
		toSerialize["infrastructureDeletedMaxCount"] = o.InfrastructureDeletedMaxCount
	}
	if !IsNil(o.InfrastructureDriveArrayMaxCount) {
		toSerialize["infrastructureDriveArrayMaxCount"] = o.InfrastructureDriveArrayMaxCount
	}
	if !IsNil(o.InfrastructureInactiveMaxCount) {
		toSerialize["infrastructureInactiveMaxCount"] = o.InfrastructureInactiveMaxCount
	}
	if !IsNil(o.InfrastructureInstanceArrayMaxCount) {
		toSerialize["infrastructureInstanceArrayMaxCount"] = o.InfrastructureInstanceArrayMaxCount
	}
	if !IsNil(o.InfrastructureLanMaxCount) {
		toSerialize["infrastructureLanMaxCount"] = o.InfrastructureLanMaxCount
	}
	if !IsNil(o.InfrastructureSanMaxCount) {
		toSerialize["infrastructureSanMaxCount"] = o.InfrastructureSanMaxCount
	}
	if !IsNil(o.InfrastructureSharedDriveMaxCount) {
		toSerialize["infrastructureSharedDriveMaxCount"] = o.InfrastructureSharedDriveMaxCount
	}
	if !IsNil(o.InfrastructureFileShareMaxCount) {
		toSerialize["infrastructureFileShareMaxCount"] = o.InfrastructureFileShareMaxCount
	}
	if !IsNil(o.InfrastructureBucketMaxCount) {
		toSerialize["infrastructureBucketMaxCount"] = o.InfrastructureBucketMaxCount
	}
	if !IsNil(o.InfrastructureVolumeTemplateExperimentalAllowed) {
		toSerialize["infrastructureVolumeTemplateExperimentalAllowed"] = o.InfrastructureVolumeTemplateExperimentalAllowed
	}
	if !IsNil(o.InfrastructureWanMaxCount) {
		toSerialize["infrastructureWanMaxCount"] = o.InfrastructureWanMaxCount
	}
	if !IsNil(o.InstanceArrayInstancesMaxCount) {
		toSerialize["instanceArrayInstancesMaxCount"] = o.InstanceArrayInstancesMaxCount
	}
	if !IsNil(o.InstanceArrayInstancesMinCount) {
		toSerialize["instanceArrayInstancesMinCount"] = o.InstanceArrayInstancesMinCount
	}
	if !IsNil(o.InfrastructureVmInstanceGroupMaxCount) {
		toSerialize["infrastructureVmInstanceGroupMaxCount"] = o.InfrastructureVmInstanceGroupMaxCount
	}
	if !IsNil(o.VmInstanceGroupVmInstancesMaxCount) {
		toSerialize["vmInstanceGroupVmInstancesMaxCount"] = o.VmInstanceGroupVmInstancesMaxCount
	}
	if !IsNil(o.VmInstanceMaxDiskSizeMbytes) {
		toSerialize["vmInstanceMaxDiskSizeMbytes"] = o.VmInstanceMaxDiskSizeMbytes
	}
	if !IsNil(o.OwnerIsBillable) {
		toSerialize["ownerIsBillable"] = o.OwnerIsBillable
	}
	if !IsNil(o.ServerTypeReservationMaxCount) {
		toSerialize["serverTypeReservationMaxCount"] = o.ServerTypeReservationMaxCount
	}
	if !IsNil(o.ServerTypeReservationMaxQuantity) {
		toSerialize["serverTypeReservationMaxQuantity"] = o.ServerTypeReservationMaxQuantity
	}
	if !IsNil(o.SharedDriveMaxSizeMbytes) {
		toSerialize["sharedDriveMaxSizeMbytes"] = o.SharedDriveMaxSizeMbytes
	}
	if !IsNil(o.SharedDriveMinSizeMbytes) {
		toSerialize["sharedDriveMinSizeMbytes"] = o.SharedDriveMinSizeMbytes
	}
	if !IsNil(o.FileShareMaxSizeGb) {
		toSerialize["fileShareMaxSizeGb"] = o.FileShareMaxSizeGb
	}
	if !IsNil(o.FileShareMinSizeGb) {
		toSerialize["fileShareMinSizeGb"] = o.FileShareMinSizeGb
	}
	if !IsNil(o.BucketMaxSizeGb) {
		toSerialize["bucketMaxSizeGb"] = o.BucketMaxSizeGb
	}
	if !IsNil(o.BucketMinSizeGb) {
		toSerialize["bucketMinSizeGb"] = o.BucketMinSizeGb
	}
	if !IsNil(o.AllowVlanOverrides) {
		toSerialize["allowVlanOverrides"] = o.AllowVlanOverrides
	}
	if !IsNil(o.AllowNetworkProfiles) {
		toSerialize["allowNetworkProfiles"] = o.AllowNetworkProfiles
	}
	if !IsNil(o.ShowOperatingSystemImagesTab) {
		toSerialize["showOperatingSystemImagesTab"] = o.ShowOperatingSystemImagesTab
	}
	if !IsNil(o.ShowTemplateAssetsView) {
		toSerialize["showTemplateAssetsView"] = o.ShowTemplateAssetsView
	}
	if !IsNil(o.StorageTypes) {
		toSerialize["storageTypes"] = o.StorageTypes
	}
	if !IsNil(o.ThresholdMaxCount) {
		toSerialize["thresholdMaxCount"] = o.ThresholdMaxCount
	}
	if !IsNil(o.UserResourceIscsiStorageSpaceMaxGbytes) {
		toSerialize["userResourceIscsiStorageSpaceMaxGbytes"] = o.UserResourceIscsiStorageSpaceMaxGbytes
	}
	if !IsNil(o.UserResourceServersMaxCount) {
		toSerialize["userResourceServersMaxCount"] = o.UserResourceServersMaxCount
	}
	if !IsNil(o.UserResourceServerTypeNameToMaxCount) {
		toSerialize["userResourceServerTypeNameToMaxCount"] = o.UserResourceServerTypeNameToMaxCount
	}
	if !IsNil(o.UserSshKeysCountMax) {
		toSerialize["userSshKeysCountMax"] = o.UserSshKeysCountMax
	}
	if !IsNil(o.WanSubnetIpv4MaxCount) {
		toSerialize["wanSubnetIpv4MaxCount"] = o.WanSubnetIpv4MaxCount
	}
	if !IsNil(o.WanSubnetIpv6MaxCount) {
		toSerialize["wanSubnetIpv6MaxCount"] = o.WanSubnetIpv6MaxCount
	}
	if !IsNil(o.WanSubnetPrefixSizeToMaxCount) {
		toSerialize["wanSubnetPrefixSizeToMaxCount"] = o.WanSubnetPrefixSizeToMaxCount
	}
	if !IsNil(o.ShowLegacyPages) {
		toSerialize["showLegacyPages"] = o.ShowLegacyPages
	}
	if !IsNil(o.ShowExperimentalPages) {
		toSerialize["showExperimentalPages"] = o.ShowExperimentalPages
	}
	if !IsNil(o.ShowDiagramAppsGlobal) {
		toSerialize["showDiagramAppsGlobal"] = o.ShowDiagramAppsGlobal
	}
	if !IsNil(o.ShowDiagramAppClusterTypeCloudera) {
		toSerialize["showDiagramAppClusterTypeCloudera"] = o.ShowDiagramAppClusterTypeCloudera
	}
	if !IsNil(o.ShowDiagramAppClusterTypeCouchbase) {
		toSerialize["showDiagramAppClusterTypeCouchbase"] = o.ShowDiagramAppClusterTypeCouchbase
	}
	if !IsNil(o.ShowDiagramAppClusterTypeDatameer) {
		toSerialize["showDiagramAppClusterTypeDatameer"] = o.ShowDiagramAppClusterTypeDatameer
	}
	if !IsNil(o.ShowDiagramAppClusterTypeDatastax) {
		toSerialize["showDiagramAppClusterTypeDatastax"] = o.ShowDiagramAppClusterTypeDatastax
	}
	if !IsNil(o.ShowDiagramAppClusterTypeElasticsearch) {
		toSerialize["showDiagramAppClusterTypeElasticsearch"] = o.ShowDiagramAppClusterTypeElasticsearch
	}
	if !IsNil(o.ShowDiagramAppClusterTypeExasol) {
		toSerialize["showDiagramAppClusterTypeExasol"] = o.ShowDiagramAppClusterTypeExasol
	}
	if !IsNil(o.ShowDiagramAppClusterTypeHortonworks) {
		toSerialize["showDiagramAppClusterTypeHortonworks"] = o.ShowDiagramAppClusterTypeHortonworks
	}
	if !IsNil(o.ShowDiagramAppClusterTypeKubernetes) {
		toSerialize["showDiagramAppClusterTypeKubernetes"] = o.ShowDiagramAppClusterTypeKubernetes
	}
	if !IsNil(o.ShowDiagramAppClusterTypeMapr) {
		toSerialize["showDiagramAppClusterTypeMapr"] = o.ShowDiagramAppClusterTypeMapr
	}
	if !IsNil(o.ShowDiagramAppClusterTypeMesos) {
		toSerialize["showDiagramAppClusterTypeMesos"] = o.ShowDiagramAppClusterTypeMesos
	}
	if !IsNil(o.ShowDiagramAppClusterTypeMysqlPercona) {
		toSerialize["showDiagramAppClusterTypeMysqlPercona"] = o.ShowDiagramAppClusterTypeMysqlPercona
	}
	if !IsNil(o.ShowDiagramAppClusterTypeSplunk) {
		toSerialize["showDiagramAppClusterTypeSplunk"] = o.ShowDiagramAppClusterTypeSplunk
	}
	if !IsNil(o.ShowDiagramAppClusterTypeVmwareVsphere) {
		toSerialize["showDiagramAppClusterTypeVmwareVsphere"] = o.ShowDiagramAppClusterTypeVmwareVsphere
	}
	if !IsNil(o.ShowDiagramAppClusterTypeVmwareVcf) {
		toSerialize["showDiagramAppClusterTypeVmwareVcf"] = o.ShowDiagramAppClusterTypeVmwareVcf
	}
	if !IsNil(o.ShowDiagramAppClusterTypeKubernetesEksa) {
		toSerialize["showDiagramAppClusterTypeKubernetesEksa"] = o.ShowDiagramAppClusterTypeKubernetesEksa
	}
	if !IsNil(o.ShowDiagramVmInstanceGroups) {
		toSerialize["showDiagramVmInstanceGroups"] = o.ShowDiagramVmInstanceGroups
	}
	if !IsNil(o.ShowEliChatBot) {
		toSerialize["showEliChatBot"] = o.ShowEliChatBot
	}
	if !IsNil(o.EnableCustomRaidConfiguration) {
		toSerialize["enableCustomRaidConfiguration"] = o.EnableCustomRaidConfiguration
	}
	if !IsNil(o.EnableCustomSubnets) {
		toSerialize["enableCustomSubnets"] = o.EnableCustomSubnets
	}
	if !IsNil(o.ShowStackTrace) {
		toSerialize["showStackTrace"] = o.ShowStackTrace
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserLimits) UnmarshalJSON(data []byte) (err error) {
	varUserLimits := _UserLimits{}

	err = json.Unmarshal(data, &varUserLimits)

	if err != nil {
		return err
	}

	*o = UserLimits(varUserLimits)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "containerArrayContainersMaxCount")
		delete(additionalProperties, "containerArrayContainersMinCount")
		delete(additionalProperties, "containerArrayDriveArraysMaxCount")
		delete(additionalProperties, "containerArrayDriveArraysMinCount")
		delete(additionalProperties, "containerArraySecretsMaxCount")
		delete(additionalProperties, "containerPlatformContainerArrayMaxCount")
		delete(additionalProperties, "driveArrayDrivesMaxCount")
		delete(additionalProperties, "driveArrayDrivesMinCount")
		delete(additionalProperties, "driveMaxSizeMbytes")
		delete(additionalProperties, "driveMinSizeMbytes")
		delete(additionalProperties, "infrastructureActiveMaxCount")
		delete(additionalProperties, "infrastructureClusterMaxCount")
		delete(additionalProperties, "infrastructureClusterMysqlAllowed")
		delete(additionalProperties, "infrastructureContainerClusterKafkaAllowed")
		delete(additionalProperties, "infrastructureContainerClusterMaxCount")
		delete(additionalProperties, "infrastructureContainerClusterPostgresqlAllowed")
		delete(additionalProperties, "infrastructureContainerClusterSparkArrayAllowed")
		delete(additionalProperties, "infrastructureContainerClusterSparksqlAllowed")
		delete(additionalProperties, "infrastructureContainerClusterStreamsetsAllowed")
		delete(additionalProperties, "infrastructureContainerClusterZookeeperAllowed")
		delete(additionalProperties, "infrastructureContainerClusterZoomdataAllowed")
		delete(additionalProperties, "infrastructureContainerPlatformMaxCount")
		delete(additionalProperties, "infrastructureDataLakeEnabled")
		delete(additionalProperties, "infrastructureDataLakeMaxCount")
		delete(additionalProperties, "infrastructureDeletedMaxCount")
		delete(additionalProperties, "infrastructureDriveArrayMaxCount")
		delete(additionalProperties, "infrastructureInactiveMaxCount")
		delete(additionalProperties, "infrastructureInstanceArrayMaxCount")
		delete(additionalProperties, "infrastructureLanMaxCount")
		delete(additionalProperties, "infrastructureSanMaxCount")
		delete(additionalProperties, "infrastructureSharedDriveMaxCount")
		delete(additionalProperties, "infrastructureFileShareMaxCount")
		delete(additionalProperties, "infrastructureBucketMaxCount")
		delete(additionalProperties, "infrastructureVolumeTemplateExperimentalAllowed")
		delete(additionalProperties, "infrastructureWanMaxCount")
		delete(additionalProperties, "instanceArrayInstancesMaxCount")
		delete(additionalProperties, "instanceArrayInstancesMinCount")
		delete(additionalProperties, "infrastructureVmInstanceGroupMaxCount")
		delete(additionalProperties, "vmInstanceGroupVmInstancesMaxCount")
		delete(additionalProperties, "vmInstanceMaxDiskSizeMbytes")
		delete(additionalProperties, "ownerIsBillable")
		delete(additionalProperties, "serverTypeReservationMaxCount")
		delete(additionalProperties, "serverTypeReservationMaxQuantity")
		delete(additionalProperties, "sharedDriveMaxSizeMbytes")
		delete(additionalProperties, "sharedDriveMinSizeMbytes")
		delete(additionalProperties, "fileShareMaxSizeGb")
		delete(additionalProperties, "fileShareMinSizeGb")
		delete(additionalProperties, "bucketMaxSizeGb")
		delete(additionalProperties, "bucketMinSizeGb")
		delete(additionalProperties, "allowVlanOverrides")
		delete(additionalProperties, "allowNetworkProfiles")
		delete(additionalProperties, "showOperatingSystemImagesTab")
		delete(additionalProperties, "showTemplateAssetsView")
		delete(additionalProperties, "storageTypes")
		delete(additionalProperties, "thresholdMaxCount")
		delete(additionalProperties, "userResourceIscsiStorageSpaceMaxGbytes")
		delete(additionalProperties, "userResourceServersMaxCount")
		delete(additionalProperties, "userResourceServerTypeNameToMaxCount")
		delete(additionalProperties, "userSshKeysCountMax")
		delete(additionalProperties, "wanSubnetIpv4MaxCount")
		delete(additionalProperties, "wanSubnetIpv6MaxCount")
		delete(additionalProperties, "wanSubnetPrefixSizeToMaxCount")
		delete(additionalProperties, "showLegacyPages")
		delete(additionalProperties, "showExperimentalPages")
		delete(additionalProperties, "showDiagramAppsGlobal")
		delete(additionalProperties, "showDiagramAppClusterTypeCloudera")
		delete(additionalProperties, "showDiagramAppClusterTypeCouchbase")
		delete(additionalProperties, "showDiagramAppClusterTypeDatameer")
		delete(additionalProperties, "showDiagramAppClusterTypeDatastax")
		delete(additionalProperties, "showDiagramAppClusterTypeElasticsearch")
		delete(additionalProperties, "showDiagramAppClusterTypeExasol")
		delete(additionalProperties, "showDiagramAppClusterTypeHortonworks")
		delete(additionalProperties, "showDiagramAppClusterTypeKubernetes")
		delete(additionalProperties, "showDiagramAppClusterTypeMapr")
		delete(additionalProperties, "showDiagramAppClusterTypeMesos")
		delete(additionalProperties, "showDiagramAppClusterTypeMysqlPercona")
		delete(additionalProperties, "showDiagramAppClusterTypeSplunk")
		delete(additionalProperties, "showDiagramAppClusterTypeVmwareVsphere")
		delete(additionalProperties, "showDiagramAppClusterTypeVmwareVcf")
		delete(additionalProperties, "showDiagramAppClusterTypeKubernetesEksa")
		delete(additionalProperties, "showDiagramVmInstanceGroups")
		delete(additionalProperties, "showEliChatBot")
		delete(additionalProperties, "enableCustomRaidConfiguration")
		delete(additionalProperties, "enableCustomSubnets")
		delete(additionalProperties, "showStackTrace")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserLimits struct {
	value *UserLimits
	isSet bool
}

func (v NullableUserLimits) Get() *UserLimits {
	return v.value
}

func (v *NullableUserLimits) Set(val *UserLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLimits(val *UserLimits) *NullableUserLimits {
	return &NullableUserLimits{value: val, isSet: true}
}

func (v NullableUserLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


