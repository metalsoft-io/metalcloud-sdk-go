/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMPoolHostInterfaces type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMPoolHostInterfaces{}

// VMPoolHostInterfaces struct for VMPoolHostInterfaces
type VMPoolHostInterfaces struct {
	// VM Pool Host Interface ID
	Id float32 `json:"id"`
	// VM Pool Host ID
	HostId float32 `json:"hostId"`
	// Name of the VM Pool Host Interface
	Name string `json:"name"`
	// MAC Address of the VM Pool Host Interface
	MacAddress string `json:"macAddress"`
	// Links to other resources
	Links map[string]interface{} `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _VMPoolHostInterfaces VMPoolHostInterfaces

// NewVMPoolHostInterfaces instantiates a new VMPoolHostInterfaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMPoolHostInterfaces(id float32, hostId float32, name string, macAddress string, links map[string]interface{}) *VMPoolHostInterfaces {
	this := VMPoolHostInterfaces{}
	this.Id = id
	this.HostId = hostId
	this.Name = name
	this.MacAddress = macAddress
	this.Links = links
	return &this
}

// NewVMPoolHostInterfacesWithDefaults instantiates a new VMPoolHostInterfaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMPoolHostInterfacesWithDefaults() *VMPoolHostInterfaces {
	this := VMPoolHostInterfaces{}
	return &this
}

// GetId returns the Id field value
func (o *VMPoolHostInterfaces) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VMPoolHostInterfaces) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VMPoolHostInterfaces) SetId(v float32) {
	o.Id = v
}

// GetHostId returns the HostId field value
func (o *VMPoolHostInterfaces) GetHostId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value
// and a boolean to check if the value has been set.
func (o *VMPoolHostInterfaces) GetHostIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostId, true
}

// SetHostId sets field value
func (o *VMPoolHostInterfaces) SetHostId(v float32) {
	o.HostId = v
}

// GetName returns the Name field value
func (o *VMPoolHostInterfaces) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VMPoolHostInterfaces) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VMPoolHostInterfaces) SetName(v string) {
	o.Name = v
}

// GetMacAddress returns the MacAddress field value
func (o *VMPoolHostInterfaces) GetMacAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value
// and a boolean to check if the value has been set.
func (o *VMPoolHostInterfaces) GetMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MacAddress, true
}

// SetMacAddress sets field value
func (o *VMPoolHostInterfaces) SetMacAddress(v string) {
	o.MacAddress = v
}

// GetLinks returns the Links field value
func (o *VMPoolHostInterfaces) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *VMPoolHostInterfaces) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *VMPoolHostInterfaces) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o VMPoolHostInterfaces) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMPoolHostInterfaces) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["hostId"] = o.HostId
	toSerialize["name"] = o.Name
	toSerialize["macAddress"] = o.MacAddress
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMPoolHostInterfaces) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"hostId",
		"name",
		"macAddress",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMPoolHostInterfaces := _VMPoolHostInterfaces{}

	err = json.Unmarshal(data, &varVMPoolHostInterfaces)

	if err != nil {
		return err
	}

	*o = VMPoolHostInterfaces(varVMPoolHostInterfaces)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "hostId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "macAddress")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMPoolHostInterfaces struct {
	value *VMPoolHostInterfaces
	isSet bool
}

func (v NullableVMPoolHostInterfaces) Get() *VMPoolHostInterfaces {
	return v.value
}

func (v *NullableVMPoolHostInterfaces) Set(val *VMPoolHostInterfaces) {
	v.value = val
	v.isSet = true
}

func (v NullableVMPoolHostInterfaces) IsSet() bool {
	return v.isSet
}

func (v *NullableVMPoolHostInterfaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMPoolHostInterfaces(val *VMPoolHostInterfaces) *NullableVMPoolHostInterfaces {
	return &NullableVMPoolHostInterfaces{value: val, isSet: true}
}

func (v NullableVMPoolHostInterfaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMPoolHostInterfaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


