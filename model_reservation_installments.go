/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ReservationInstallments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationInstallments{}

// ReservationInstallments struct for ReservationInstallments
type ReservationInstallments struct {
	// List of server types
	ServerTypes []map[string]interface{} `json:"serverTypes"`
	// List of drives
	Drives []map[string]interface{} `json:"drives"`
	// List of subnets
	Subnets []map[string]interface{} `json:"subnets"`
	AdditionalProperties map[string]interface{}
}

type _ReservationInstallments ReservationInstallments

// NewReservationInstallments instantiates a new ReservationInstallments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationInstallments(serverTypes []map[string]interface{}, drives []map[string]interface{}, subnets []map[string]interface{}) *ReservationInstallments {
	this := ReservationInstallments{}
	this.ServerTypes = serverTypes
	this.Drives = drives
	this.Subnets = subnets
	return &this
}

// NewReservationInstallmentsWithDefaults instantiates a new ReservationInstallments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationInstallmentsWithDefaults() *ReservationInstallments {
	this := ReservationInstallments{}
	return &this
}

// GetServerTypes returns the ServerTypes field value
func (o *ReservationInstallments) GetServerTypes() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.ServerTypes
}

// GetServerTypesOk returns a tuple with the ServerTypes field value
// and a boolean to check if the value has been set.
func (o *ReservationInstallments) GetServerTypesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerTypes, true
}

// SetServerTypes sets field value
func (o *ReservationInstallments) SetServerTypes(v []map[string]interface{}) {
	o.ServerTypes = v
}

// GetDrives returns the Drives field value
func (o *ReservationInstallments) GetDrives() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value
// and a boolean to check if the value has been set.
func (o *ReservationInstallments) GetDrivesOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Drives, true
}

// SetDrives sets field value
func (o *ReservationInstallments) SetDrives(v []map[string]interface{}) {
	o.Drives = v
}

// GetSubnets returns the Subnets field value
func (o *ReservationInstallments) GetSubnets() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value
// and a boolean to check if the value has been set.
func (o *ReservationInstallments) GetSubnetsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnets, true
}

// SetSubnets sets field value
func (o *ReservationInstallments) SetSubnets(v []map[string]interface{}) {
	o.Subnets = v
}

func (o ReservationInstallments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationInstallments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverTypes"] = o.ServerTypes
	toSerialize["drives"] = o.Drives
	toSerialize["subnets"] = o.Subnets

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReservationInstallments) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverTypes",
		"drives",
		"subnets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReservationInstallments := _ReservationInstallments{}

	err = json.Unmarshal(data, &varReservationInstallments)

	if err != nil {
		return err
	}

	*o = ReservationInstallments(varReservationInstallments)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverTypes")
		delete(additionalProperties, "drives")
		delete(additionalProperties, "subnets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReservationInstallments struct {
	value *ReservationInstallments
	isSet bool
}

func (v NullableReservationInstallments) Get() *ReservationInstallments {
	return v.value
}

func (v *NullableReservationInstallments) Set(val *ReservationInstallments) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationInstallments) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationInstallments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationInstallments(val *ReservationInstallments) *NullableReservationInstallments {
	return &NullableReservationInstallments{value: val, isSet: true}
}

func (v NullableReservationInstallments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationInstallments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


