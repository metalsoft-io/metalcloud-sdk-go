/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the LogicalNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalNetwork{}

// LogicalNetwork struct for LogicalNetwork
type LogicalNetwork struct {
	// ID of the logical network
	Id float32 `json:"id"`
	// Revision number of the logical network
	Revision float32 `json:"revision"`
	// Label for the logical network
	Label *string `json:"label,omitempty"`
	// Name of the logical network
	Name *string `json:"name,omitempty"`
	// Description of the logical network
	Description *string `json:"description,omitempty"`
	// Annotations for the logical network
	Annotations map[string]interface{} `json:"annotations,omitempty"`
	// Fabric ID associated with the logical network
	FabricId float32 `json:"fabricId"`
	// Infrastructure ID associated with the logical network
	InfrastructureId *float32 `json:"infrastructureId,omitempty"`
	// Type of the logical network
	LogicalNetworkType string `json:"logicalNetworkType"`
	AdditionalProperties map[string]interface{}
}

type _LogicalNetwork LogicalNetwork

// NewLogicalNetwork instantiates a new LogicalNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalNetwork(id float32, revision float32, fabricId float32, logicalNetworkType string) *LogicalNetwork {
	this := LogicalNetwork{}
	this.Id = id
	this.Revision = revision
	this.FabricId = fabricId
	this.LogicalNetworkType = logicalNetworkType
	return &this
}

// NewLogicalNetworkWithDefaults instantiates a new LogicalNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalNetworkWithDefaults() *LogicalNetwork {
	this := LogicalNetwork{}
	return &this
}

// GetId returns the Id field value
func (o *LogicalNetwork) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LogicalNetwork) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LogicalNetwork) SetId(v float32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *LogicalNetwork) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *LogicalNetwork) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *LogicalNetwork) SetRevision(v float32) {
	o.Revision = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *LogicalNetwork) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetwork) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *LogicalNetwork) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *LogicalNetwork) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LogicalNetwork) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetwork) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LogicalNetwork) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LogicalNetwork) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LogicalNetwork) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetwork) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LogicalNetwork) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LogicalNetwork) SetDescription(v string) {
	o.Description = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *LogicalNetwork) GetAnnotations() map[string]interface{} {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]interface{}
		return ret
	}
	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetwork) GetAnnotationsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Annotations) {
		return map[string]interface{}{}, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *LogicalNetwork) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]interface{} and assigns it to the Annotations field.
func (o *LogicalNetwork) SetAnnotations(v map[string]interface{}) {
	o.Annotations = v
}

// GetFabricId returns the FabricId field value
func (o *LogicalNetwork) GetFabricId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FabricId
}

// GetFabricIdOk returns a tuple with the FabricId field value
// and a boolean to check if the value has been set.
func (o *LogicalNetwork) GetFabricIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FabricId, true
}

// SetFabricId sets field value
func (o *LogicalNetwork) SetFabricId(v float32) {
	o.FabricId = v
}

// GetInfrastructureId returns the InfrastructureId field value if set, zero value otherwise.
func (o *LogicalNetwork) GetInfrastructureId() float32 {
	if o == nil || IsNil(o.InfrastructureId) {
		var ret float32
		return ret
	}
	return *o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalNetwork) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil || IsNil(o.InfrastructureId) {
		return nil, false
	}
	return o.InfrastructureId, true
}

// HasInfrastructureId returns a boolean if a field has been set.
func (o *LogicalNetwork) HasInfrastructureId() bool {
	if o != nil && !IsNil(o.InfrastructureId) {
		return true
	}

	return false
}

// SetInfrastructureId gets a reference to the given float32 and assigns it to the InfrastructureId field.
func (o *LogicalNetwork) SetInfrastructureId(v float32) {
	o.InfrastructureId = &v
}

// GetLogicalNetworkType returns the LogicalNetworkType field value
func (o *LogicalNetwork) GetLogicalNetworkType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogicalNetworkType
}

// GetLogicalNetworkTypeOk returns a tuple with the LogicalNetworkType field value
// and a boolean to check if the value has been set.
func (o *LogicalNetwork) GetLogicalNetworkTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogicalNetworkType, true
}

// SetLogicalNetworkType sets field value
func (o *LogicalNetwork) SetLogicalNetworkType(v string) {
	o.LogicalNetworkType = v
}

func (o LogicalNetwork) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	toSerialize["fabricId"] = o.FabricId
	if !IsNil(o.InfrastructureId) {
		toSerialize["infrastructureId"] = o.InfrastructureId
	}
	toSerialize["logicalNetworkType"] = o.LogicalNetworkType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalNetwork) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"revision",
		"fabricId",
		"logicalNetworkType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogicalNetwork := _LogicalNetwork{}

	err = json.Unmarshal(data, &varLogicalNetwork)

	if err != nil {
		return err
	}

	*o = LogicalNetwork(varLogicalNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "annotations")
		delete(additionalProperties, "fabricId")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "logicalNetworkType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalNetwork struct {
	value *LogicalNetwork
	isSet bool
}

func (v NullableLogicalNetwork) Get() *LogicalNetwork {
	return v.value
}

func (v *NullableLogicalNetwork) Set(val *LogicalNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalNetwork(val *LogicalNetwork) *NullableLogicalNetwork {
	return &NullableLogicalNetwork{value: val, isSet: true}
}

func (v NullableLogicalNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


