/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceStatistics{}

// ServerInstanceStatistics struct for ServerInstanceStatistics
type ServerInstanceStatistics struct {
	// An object containing server status as key and count as value
	ServerStatus map[string]interface{} `json:"serverStatus"`
	// An object containing server site name as key and count as value
	Site map[string]interface{} `json:"site"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceStatistics ServerInstanceStatistics

// NewServerInstanceStatistics instantiates a new ServerInstanceStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceStatistics(serverStatus map[string]interface{}, site map[string]interface{}) *ServerInstanceStatistics {
	this := ServerInstanceStatistics{}
	this.ServerStatus = serverStatus
	this.Site = site
	return &this
}

// NewServerInstanceStatisticsWithDefaults instantiates a new ServerInstanceStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceStatisticsWithDefaults() *ServerInstanceStatistics {
	this := ServerInstanceStatistics{}
	return &this
}

// GetServerStatus returns the ServerStatus field value
func (o *ServerInstanceStatistics) GetServerStatus() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ServerStatus
}

// GetServerStatusOk returns a tuple with the ServerStatus field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceStatistics) GetServerStatusOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ServerStatus, true
}

// SetServerStatus sets field value
func (o *ServerInstanceStatistics) SetServerStatus(v map[string]interface{}) {
	o.ServerStatus = v
}

// GetSite returns the Site field value
func (o *ServerInstanceStatistics) GetSite() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Site
}

// GetSiteOk returns a tuple with the Site field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceStatistics) GetSiteOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Site, true
}

// SetSite sets field value
func (o *ServerInstanceStatistics) SetSite(v map[string]interface{}) {
	o.Site = v
}

func (o ServerInstanceStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverStatus"] = o.ServerStatus
	toSerialize["site"] = o.Site

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverStatus",
		"site",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceStatistics := _ServerInstanceStatistics{}

	err = json.Unmarshal(data, &varServerInstanceStatistics)

	if err != nil {
		return err
	}

	*o = ServerInstanceStatistics(varServerInstanceStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverStatus")
		delete(additionalProperties, "site")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceStatistics struct {
	value *ServerInstanceStatistics
	isSet bool
}

func (v NullableServerInstanceStatistics) Get() *ServerInstanceStatistics {
	return v.value
}

func (v *NullableServerInstanceStatistics) Set(val *ServerInstanceStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceStatistics(val *ServerInstanceStatistics) *NullableServerInstanceStatistics {
	return &NullableServerInstanceStatistics{value: val, isSet: true}
}

func (v NullableServerInstanceStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


