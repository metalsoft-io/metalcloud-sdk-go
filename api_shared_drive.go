/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// SharedDriveAPIService SharedDriveAPI service
type SharedDriveAPIService service

type SharedDriveAPICreateSharedDriveRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	infrastructureId float32
	sharedDriveId float32
	createSharedDrive *CreateSharedDrive
}

func (r SharedDriveAPICreateSharedDriveRequest) CreateSharedDrive(createSharedDrive CreateSharedDrive) SharedDriveAPICreateSharedDriveRequest {
	r.createSharedDrive = &createSharedDrive
	return r
}

func (r SharedDriveAPICreateSharedDriveRequest) Execute() (*SharedDrive, *http.Response, error) {
	return r.ApiService.CreateSharedDriveExecute(r)
}

/*
CreateSharedDrive Create a new Shared Drive

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param sharedDriveId
 @return SharedDriveAPICreateSharedDriveRequest
*/
func (a *SharedDriveAPIService) CreateSharedDrive(ctx context.Context, infrastructureId float32, sharedDriveId float32) SharedDriveAPICreateSharedDriveRequest {
	return SharedDriveAPICreateSharedDriveRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		sharedDriveId: sharedDriveId,
	}
}

// Execute executes the request
//  @return SharedDrive
func (a *SharedDriveAPIService) CreateSharedDriveExecute(r SharedDriveAPICreateSharedDriveRequest) (*SharedDrive, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SharedDrive
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.CreateSharedDrive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/shared-drives"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveId"+"}", url.PathEscape(parameterValueToString(r.sharedDriveId, "sharedDriveId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createSharedDrive == nil {
		return localVarReturnValue, nil, reportError("createSharedDrive is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createSharedDrive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedDriveAPIDeleteSharedDriveRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	infrastructureId float32
	sharedDriveId float32
	ifMatch *string
}

// Entity tag
func (r SharedDriveAPIDeleteSharedDriveRequest) IfMatch(ifMatch string) SharedDriveAPIDeleteSharedDriveRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r SharedDriveAPIDeleteSharedDriveRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSharedDriveExecute(r)
}

/*
DeleteSharedDrive Deletes a Shared Drive

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param sharedDriveId
 @return SharedDriveAPIDeleteSharedDriveRequest
*/
func (a *SharedDriveAPIService) DeleteSharedDrive(ctx context.Context, infrastructureId float32, sharedDriveId float32) SharedDriveAPIDeleteSharedDriveRequest {
	return SharedDriveAPIDeleteSharedDriveRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		sharedDriveId: sharedDriveId,
	}
}

// Execute executes the request
func (a *SharedDriveAPIService) DeleteSharedDriveExecute(r SharedDriveAPIDeleteSharedDriveRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.DeleteSharedDrive")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/shared-drives/{sharedDriveId}"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveId"+"}", url.PathEscape(parameterValueToString(r.sharedDriveId, "sharedDriveId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SharedDriveAPIGetInfrastructureSharedDriveRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	infrastructureId float32
	sharedDriveId float32
}

func (r SharedDriveAPIGetInfrastructureSharedDriveRequest) Execute() (*SharedDrive, *http.Response, error) {
	return r.ApiService.GetInfrastructureSharedDriveExecute(r)
}

/*
GetInfrastructureSharedDrive Get Shared Drive information

Returns Shared Drive information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param sharedDriveId
 @return SharedDriveAPIGetInfrastructureSharedDriveRequest
*/
func (a *SharedDriveAPIService) GetInfrastructureSharedDrive(ctx context.Context, infrastructureId float32, sharedDriveId float32) SharedDriveAPIGetInfrastructureSharedDriveRequest {
	return SharedDriveAPIGetInfrastructureSharedDriveRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		sharedDriveId: sharedDriveId,
	}
}

// Execute executes the request
//  @return SharedDrive
func (a *SharedDriveAPIService) GetInfrastructureSharedDriveExecute(r SharedDriveAPIGetInfrastructureSharedDriveRequest) (*SharedDrive, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SharedDrive
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.GetInfrastructureSharedDrive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/shared-drives/{sharedDriveId}"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveId"+"}", url.PathEscape(parameterValueToString(r.sharedDriveId, "sharedDriveId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedDriveAPIGetInfrastructureSharedDrivesRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	infrastructureId float32
	page *float32
	limit *float32
	filterLabel *[]string
	filterSubdomain *[]string
	filterSubdomainPermanent *[]string
	filterInfrastructureId *[]string
	filterStoragePoolId *[]string
	filterServiceStatus *[]string
	filterWwn *[]string
	filterIoLimitPolicy *[]string
	filterNetworkVlanId *[]string
	filterAllocationAffinity *[]string
	filterProvisioningProtocol *[]string
	filterConfigDeployStatus *[]string
	filterConfigDeployType *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) Page(page float32) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) Limit(limit float32) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.limit = &limit
	return r
}

// Filter by label query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.label&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.label&#x3D;$not:$like:John Doe&amp;filter.label&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterLabel(filterLabel []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterLabel = &filterLabel
	return r
}

// Filter by subdomain query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.subdomain&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.subdomain&#x3D;$not:$like:John Doe&amp;filter.subdomain&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterSubdomain(filterSubdomain []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterSubdomain = &filterSubdomain
	return r
}

// Filter by subdomainPermanent query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.subdomainPermanent&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.subdomainPermanent&#x3D;$not:$like:John Doe&amp;filter.subdomainPermanent&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterSubdomainPermanent(filterSubdomainPermanent []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterSubdomainPermanent = &filterSubdomainPermanent
	return r
}

// Filter by infrastructureId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.infrastructureId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.infrastructureId&#x3D;$not:$like:John Doe&amp;filter.infrastructureId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterInfrastructureId(filterInfrastructureId []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterInfrastructureId = &filterInfrastructureId
	return r
}

// Filter by storagePoolId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.storagePoolId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.storagePoolId&#x3D;$not:$like:John Doe&amp;filter.storagePoolId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterStoragePoolId(filterStoragePoolId []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterStoragePoolId = &filterStoragePoolId
	return r
}

// Filter by serviceStatus query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.serviceStatus&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.serviceStatus&#x3D;$not:$like:John Doe&amp;filter.serviceStatus&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterServiceStatus(filterServiceStatus []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterServiceStatus = &filterServiceStatus
	return r
}

// Filter by wwn query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.wwn&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.wwn&#x3D;$not:$like:John Doe&amp;filter.wwn&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterWwn(filterWwn []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterWwn = &filterWwn
	return r
}

// Filter by ioLimitPolicy query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.ioLimitPolicy&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.ioLimitPolicy&#x3D;$not:$like:John Doe&amp;filter.ioLimitPolicy&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterIoLimitPolicy(filterIoLimitPolicy []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterIoLimitPolicy = &filterIoLimitPolicy
	return r
}

// Filter by networkVlanId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.networkVlanId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.networkVlanId&#x3D;$not:$like:John Doe&amp;filter.networkVlanId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterNetworkVlanId(filterNetworkVlanId []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterNetworkVlanId = &filterNetworkVlanId
	return r
}

// Filter by allocationAffinity query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.allocationAffinity&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.allocationAffinity&#x3D;$not:$like:John Doe&amp;filter.allocationAffinity&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterAllocationAffinity(filterAllocationAffinity []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterAllocationAffinity = &filterAllocationAffinity
	return r
}

// Filter by provisioningProtocol query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.provisioningProtocol&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.provisioningProtocol&#x3D;$not:$like:John Doe&amp;filter.provisioningProtocol&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterProvisioningProtocol(filterProvisioningProtocol []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterProvisioningProtocol = &filterProvisioningProtocol
	return r
}

// Filter by config.deployStatus query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.config.deployStatus&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.config.deployStatus&#x3D;$not:$like:John Doe&amp;filter.config.deployStatus&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterConfigDeployStatus(filterConfigDeployStatus []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterConfigDeployStatus = &filterConfigDeployStatus
	return r
}

// Filter by config.deployType query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.config.deployType&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.config.deployType&#x3D;$not:$like:John Doe&amp;filter.config.deployType&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt;&lt;/ul&gt;
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) FilterConfigDeployType(filterConfigDeployType []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.filterConfigDeployType = &filterConfigDeployType
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;storagePoolId&lt;/li&gt; &lt;li&gt;infrastructureId&lt;/li&gt; &lt;li&gt;serviceStatus&lt;/li&gt; &lt;li&gt;config.deployStatus&lt;/li&gt; &lt;li&gt;config.deployType&lt;/li&gt;&lt;/ul&gt;       
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) SortBy(sortBy []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) Search(search string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; id,label,subdomain,subdomainPermanent,infrastructureId           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;label&lt;/li&gt; &lt;li&gt;subdomain&lt;/li&gt; &lt;li&gt;subdomainPermanent&lt;/li&gt; &lt;li&gt;infrastructureId&lt;/li&gt; &lt;li&gt;storagePoolId&lt;/li&gt; &lt;li&gt;serviceStatus&lt;/li&gt; &lt;li&gt;wwn&lt;/li&gt; &lt;li&gt;ioLimitPolicy&lt;/li&gt; &lt;li&gt;networkVlanId&lt;/li&gt; &lt;li&gt;allocationAffinity&lt;/li&gt; &lt;li&gt;provisioningProtocol&lt;/li&gt; &lt;li&gt;config.deployStatus&lt;/li&gt; &lt;li&gt;config.deployType&lt;/li&gt;&lt;/ul&gt;         
func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) SearchBy(searchBy []string) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	r.searchBy = &searchBy
	return r
}

func (r SharedDriveAPIGetInfrastructureSharedDrivesRequest) Execute() (*SharedDrivePaginatedList, *http.Response, error) {
	return r.ApiService.GetInfrastructureSharedDrivesExecute(r)
}

/*
GetInfrastructureSharedDrives Get all Shared Drives on the infrastructure

Returns list of all Shared Drives on the infrastructure

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @return SharedDriveAPIGetInfrastructureSharedDrivesRequest
*/
func (a *SharedDriveAPIService) GetInfrastructureSharedDrives(ctx context.Context, infrastructureId float32) SharedDriveAPIGetInfrastructureSharedDrivesRequest {
	return SharedDriveAPIGetInfrastructureSharedDrivesRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
	}
}

// Execute executes the request
//  @return SharedDrivePaginatedList
func (a *SharedDriveAPIService) GetInfrastructureSharedDrivesExecute(r SharedDriveAPIGetInfrastructureSharedDrivesRequest) (*SharedDrivePaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SharedDrivePaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.GetInfrastructureSharedDrives")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/shared-drives"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterLabel != nil {
		t := *r.filterLabel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.label", t, "form", "multi")
		}
	}
	if r.filterSubdomain != nil {
		t := *r.filterSubdomain
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.subdomain", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.subdomain", t, "form", "multi")
		}
	}
	if r.filterSubdomainPermanent != nil {
		t := *r.filterSubdomainPermanent
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.subdomainPermanent", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.subdomainPermanent", t, "form", "multi")
		}
	}
	if r.filterInfrastructureId != nil {
		t := *r.filterInfrastructureId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.infrastructureId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.infrastructureId", t, "form", "multi")
		}
	}
	if r.filterStoragePoolId != nil {
		t := *r.filterStoragePoolId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.storagePoolId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.storagePoolId", t, "form", "multi")
		}
	}
	if r.filterServiceStatus != nil {
		t := *r.filterServiceStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serviceStatus", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.serviceStatus", t, "form", "multi")
		}
	}
	if r.filterWwn != nil {
		t := *r.filterWwn
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.wwn", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.wwn", t, "form", "multi")
		}
	}
	if r.filterIoLimitPolicy != nil {
		t := *r.filterIoLimitPolicy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.ioLimitPolicy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.ioLimitPolicy", t, "form", "multi")
		}
	}
	if r.filterNetworkVlanId != nil {
		t := *r.filterNetworkVlanId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkVlanId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.networkVlanId", t, "form", "multi")
		}
	}
	if r.filterAllocationAffinity != nil {
		t := *r.filterAllocationAffinity
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.allocationAffinity", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.allocationAffinity", t, "form", "multi")
		}
	}
	if r.filterProvisioningProtocol != nil {
		t := *r.filterProvisioningProtocol
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.provisioningProtocol", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.provisioningProtocol", t, "form", "multi")
		}
	}
	if r.filterConfigDeployStatus != nil {
		t := *r.filterConfigDeployStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.config.deployStatus", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.config.deployStatus", t, "form", "multi")
		}
	}
	if r.filterConfigDeployType != nil {
		t := *r.filterConfigDeployType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.config.deployType", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.config.deployType", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedDriveAPIGetSharedDriveRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	sharedDriveId float32
}

func (r SharedDriveAPIGetSharedDriveRequest) Execute() (*SharedDrive, *http.Response, error) {
	return r.ApiService.GetSharedDriveExecute(r)
}

/*
GetSharedDrive Get Shared Drive information

Returns Shared Drive information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveId
 @return SharedDriveAPIGetSharedDriveRequest
*/
func (a *SharedDriveAPIService) GetSharedDrive(ctx context.Context, sharedDriveId float32) SharedDriveAPIGetSharedDriveRequest {
	return SharedDriveAPIGetSharedDriveRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveId: sharedDriveId,
	}
}

// Execute executes the request
//  @return SharedDrive
func (a *SharedDriveAPIService) GetSharedDriveExecute(r SharedDriveAPIGetSharedDriveRequest) (*SharedDrive, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SharedDrive
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.GetSharedDrive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/shared-drives/{sharedDriveId}"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveId"+"}", url.PathEscape(parameterValueToString(r.sharedDriveId, "sharedDriveId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedDriveAPIGetSharedDriveConfigInfoRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	infrastructureId float32
	sharedDriveId float32
}

func (r SharedDriveAPIGetSharedDriveConfigInfoRequest) Execute() (*SharedDriveConfiguration, *http.Response, error) {
	return r.ApiService.GetSharedDriveConfigInfoExecute(r)
}

/*
GetSharedDriveConfigInfo Get configuration information about the specified Shared Drive

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param sharedDriveId
 @return SharedDriveAPIGetSharedDriveConfigInfoRequest
*/
func (a *SharedDriveAPIService) GetSharedDriveConfigInfo(ctx context.Context, infrastructureId float32, sharedDriveId float32) SharedDriveAPIGetSharedDriveConfigInfoRequest {
	return SharedDriveAPIGetSharedDriveConfigInfoRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		sharedDriveId: sharedDriveId,
	}
}

// Execute executes the request
//  @return SharedDriveConfiguration
func (a *SharedDriveAPIService) GetSharedDriveConfigInfoExecute(r SharedDriveAPIGetSharedDriveConfigInfoRequest) (*SharedDriveConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SharedDriveConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.GetSharedDriveConfigInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/shared-drives/{sharedDriveId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveId"+"}", url.PathEscape(parameterValueToString(r.sharedDriveId, "sharedDriveId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedDriveAPIGetSharedDriveHostsRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	infrastructureId float32
	sharedDriveId float32
}

func (r SharedDriveAPIGetSharedDriveHostsRequest) Execute() (*SharedDriveHosts, *http.Response, error) {
	return r.ApiService.GetSharedDriveHostsExecute(r)
}

/*
GetSharedDriveHosts Get the Hosts of Shared Drive

Returns the Hosts of Shared Drive

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param sharedDriveId
 @return SharedDriveAPIGetSharedDriveHostsRequest
*/
func (a *SharedDriveAPIService) GetSharedDriveHosts(ctx context.Context, infrastructureId float32, sharedDriveId float32) SharedDriveAPIGetSharedDriveHostsRequest {
	return SharedDriveAPIGetSharedDriveHostsRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		sharedDriveId: sharedDriveId,
	}
}

// Execute executes the request
//  @return SharedDriveHosts
func (a *SharedDriveAPIService) GetSharedDriveHostsExecute(r SharedDriveAPIGetSharedDriveHostsRequest) (*SharedDriveHosts, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SharedDriveHosts
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.GetSharedDriveHosts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/shared-drives/{sharedDriveId}/hosts"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveId"+"}", url.PathEscape(parameterValueToString(r.sharedDriveId, "sharedDriveId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedDriveAPIPatchSharedDriveConfigRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	infrastructureId float32
	sharedDriveId float32
	updateSharedDrive *UpdateSharedDrive
	ifMatch *string
}

func (r SharedDriveAPIPatchSharedDriveConfigRequest) UpdateSharedDrive(updateSharedDrive UpdateSharedDrive) SharedDriveAPIPatchSharedDriveConfigRequest {
	r.updateSharedDrive = &updateSharedDrive
	return r
}

// Entity tag
func (r SharedDriveAPIPatchSharedDriveConfigRequest) IfMatch(ifMatch string) SharedDriveAPIPatchSharedDriveConfigRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r SharedDriveAPIPatchSharedDriveConfigRequest) Execute() (*SharedDrive, *http.Response, error) {
	return r.ApiService.PatchSharedDriveConfigExecute(r)
}

/*
PatchSharedDriveConfig Updates the config of a Shared Drive

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param sharedDriveId
 @return SharedDriveAPIPatchSharedDriveConfigRequest
*/
func (a *SharedDriveAPIService) PatchSharedDriveConfig(ctx context.Context, infrastructureId float32, sharedDriveId float32) SharedDriveAPIPatchSharedDriveConfigRequest {
	return SharedDriveAPIPatchSharedDriveConfigRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		sharedDriveId: sharedDriveId,
	}
}

// Execute executes the request
//  @return SharedDrive
func (a *SharedDriveAPIService) PatchSharedDriveConfigExecute(r SharedDriveAPIPatchSharedDriveConfigRequest) (*SharedDrive, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SharedDrive
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.PatchSharedDriveConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/shared-drives/{sharedDriveId}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveId"+"}", url.PathEscape(parameterValueToString(r.sharedDriveId, "sharedDriveId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateSharedDrive == nil {
		return localVarReturnValue, nil, reportError("updateSharedDrive is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "If-Match", r.ifMatch, "simple", "")
	}
	// body params
	localVarPostBody = r.updateSharedDrive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedDriveAPIPatchSharedDriveMetaRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	infrastructureId float32
	sharedDriveId float32
	updateSharedDriveMeta *UpdateSharedDriveMeta
}

func (r SharedDriveAPIPatchSharedDriveMetaRequest) UpdateSharedDriveMeta(updateSharedDriveMeta UpdateSharedDriveMeta) SharedDriveAPIPatchSharedDriveMetaRequest {
	r.updateSharedDriveMeta = &updateSharedDriveMeta
	return r
}

func (r SharedDriveAPIPatchSharedDriveMetaRequest) Execute() (*SharedDrive, *http.Response, error) {
	return r.ApiService.PatchSharedDriveMetaExecute(r)
}

/*
PatchSharedDriveMeta Updates the meta of a Shared Drive

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param sharedDriveId
 @return SharedDriveAPIPatchSharedDriveMetaRequest
*/
func (a *SharedDriveAPIService) PatchSharedDriveMeta(ctx context.Context, infrastructureId float32, sharedDriveId float32) SharedDriveAPIPatchSharedDriveMetaRequest {
	return SharedDriveAPIPatchSharedDriveMetaRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		sharedDriveId: sharedDriveId,
	}
}

// Execute executes the request
//  @return SharedDrive
func (a *SharedDriveAPIService) PatchSharedDriveMetaExecute(r SharedDriveAPIPatchSharedDriveMetaRequest) (*SharedDrive, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SharedDrive
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.PatchSharedDriveMeta")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/shared-drives/{sharedDriveId}/meta"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveId"+"}", url.PathEscape(parameterValueToString(r.sharedDriveId, "sharedDriveId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateSharedDriveMeta == nil {
		return localVarReturnValue, nil, reportError("updateSharedDriveMeta is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateSharedDriveMeta
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SharedDriveAPIUpdateSharedDriveInstanceArrayHostsBulkRequest struct {
	ctx context.Context
	ApiService *SharedDriveAPIService
	infrastructureId float32
	sharedDriveId float32
	sharedDriveHostsModifyBulk *SharedDriveHostsModifyBulk
}

// The Shared Drive Instance Array Hosts update object
func (r SharedDriveAPIUpdateSharedDriveInstanceArrayHostsBulkRequest) SharedDriveHostsModifyBulk(sharedDriveHostsModifyBulk SharedDriveHostsModifyBulk) SharedDriveAPIUpdateSharedDriveInstanceArrayHostsBulkRequest {
	r.sharedDriveHostsModifyBulk = &sharedDriveHostsModifyBulk
	return r
}

func (r SharedDriveAPIUpdateSharedDriveInstanceArrayHostsBulkRequest) Execute() (*SharedDriveHosts, *http.Response, error) {
	return r.ApiService.UpdateSharedDriveInstanceArrayHostsBulkExecute(r)
}

/*
UpdateSharedDriveInstanceArrayHostsBulk Updates Instance Array Hosts on the Shared Drive

Updates Instance Array Hosts on the Shared Drive

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param infrastructureId
 @param sharedDriveId
 @return SharedDriveAPIUpdateSharedDriveInstanceArrayHostsBulkRequest
*/
func (a *SharedDriveAPIService) UpdateSharedDriveInstanceArrayHostsBulk(ctx context.Context, infrastructureId float32, sharedDriveId float32) SharedDriveAPIUpdateSharedDriveInstanceArrayHostsBulkRequest {
	return SharedDriveAPIUpdateSharedDriveInstanceArrayHostsBulkRequest{
		ApiService: a,
		ctx: ctx,
		infrastructureId: infrastructureId,
		sharedDriveId: sharedDriveId,
	}
}

// Execute executes the request
//  @return SharedDriveHosts
func (a *SharedDriveAPIService) UpdateSharedDriveInstanceArrayHostsBulkExecute(r SharedDriveAPIUpdateSharedDriveInstanceArrayHostsBulkRequest) (*SharedDriveHosts, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SharedDriveHosts
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharedDriveAPIService.UpdateSharedDriveInstanceArrayHostsBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/infrastructures/{infrastructureId}/shared-drives/{sharedDriveId}/actions/modify-instance-array-hosts-bulk"
	localVarPath = strings.Replace(localVarPath, "{"+"infrastructureId"+"}", url.PathEscape(parameterValueToString(r.infrastructureId, "infrastructureId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveId"+"}", url.PathEscape(parameterValueToString(r.sharedDriveId, "sharedDriveId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sharedDriveHostsModifyBulk == nil {
		return localVarReturnValue, nil, reportError("sharedDriveHostsModifyBulk is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sharedDriveHostsModifyBulk
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
