/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMInstanceGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMInstanceGroup{}

// VMInstanceGroup struct for VMInstanceGroup
type VMInstanceGroup struct {
	// Id of the VM Instance Group.
	Id float32 `json:"id"`
	// Id of the Infrastructure.
	InfrastructureId float32 `json:"infrastructureId"`
	// Status of the VM Instance Group.
	ServiceStatus string `json:"serviceStatus"`
	// Id of the VM Instance Group change object.
	ChangeId float32 `json:"changeId"`
	// Name of the VM Instance Group.
	Label string `json:"label"`
	// Number of VM instances in the VM Instance Group.
	InstanceCount float32 `json:"instanceCount"`
	// Timestamp of the VM Instance Group creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Timestamp of the VM Instance Group update.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Operation object for the VM Instance Group.
	Operation map[string]interface{} `json:"operation"`
	// Array of VM instances in the VM Instance Group.
	VmInstance []VMInstance `json:"vmInstance"`
	// Tags for the VM Instance Group.
	Tags []string `json:"tags,omitempty"`
	// Disk size in GB for each VM Instance in the VM Instance Group.
	DiskSizeGB float32 `json:"diskSizeGB"`
	// Id of the template used by the VM Instance Group.
	VolumeTemplateId *float32 `json:"volumeTemplateId,omitempty"`
	// Interfaces for the VM Instance Group
	VmInstanceGroupInterfaces []VMInstanceGroupInterface `json:"vmInstanceGroupInterfaces,omitempty"`
	// Network Id to Network Profile Id for the VM Instance Group. This is a JSON object.
	NetworkIdToNetworkProfileId map[string]interface{} `json:"networkIdToNetworkProfileId,omitempty"`
	// Custom variables for the VM Instance.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	GuiSettings *GenericGUISettings `json:"guiSettings,omitempty"`
	// Links to other resources
	Links map[string]interface{} `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _VMInstanceGroup VMInstanceGroup

// NewVMInstanceGroup instantiates a new VMInstanceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMInstanceGroup(id float32, infrastructureId float32, serviceStatus string, changeId float32, label string, instanceCount float32, createdTimestamp string, updatedTimestamp string, operation map[string]interface{}, vmInstance []VMInstance, diskSizeGB float32, links map[string]interface{}) *VMInstanceGroup {
	this := VMInstanceGroup{}
	this.Id = id
	this.InfrastructureId = infrastructureId
	this.ServiceStatus = serviceStatus
	this.ChangeId = changeId
	this.Label = label
	this.InstanceCount = instanceCount
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.Operation = operation
	this.VmInstance = vmInstance
	this.DiskSizeGB = diskSizeGB
	this.Links = links
	return &this
}

// NewVMInstanceGroupWithDefaults instantiates a new VMInstanceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMInstanceGroupWithDefaults() *VMInstanceGroup {
	this := VMInstanceGroup{}
	return &this
}

// GetId returns the Id field value
func (o *VMInstanceGroup) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VMInstanceGroup) SetId(v float32) {
	o.Id = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *VMInstanceGroup) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *VMInstanceGroup) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *VMInstanceGroup) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *VMInstanceGroup) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetChangeId returns the ChangeId field value
func (o *VMInstanceGroup) GetChangeId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ChangeId
}

// GetChangeIdOk returns a tuple with the ChangeId field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetChangeIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeId, true
}

// SetChangeId sets field value
func (o *VMInstanceGroup) SetChangeId(v float32) {
	o.ChangeId = v
}

// GetLabel returns the Label field value
func (o *VMInstanceGroup) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *VMInstanceGroup) SetLabel(v string) {
	o.Label = v
}

// GetInstanceCount returns the InstanceCount field value
func (o *VMInstanceGroup) GetInstanceCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetInstanceCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceCount, true
}

// SetInstanceCount sets field value
func (o *VMInstanceGroup) SetInstanceCount(v float32) {
	o.InstanceCount = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *VMInstanceGroup) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *VMInstanceGroup) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *VMInstanceGroup) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *VMInstanceGroup) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetOperation returns the Operation field value
func (o *VMInstanceGroup) GetOperation() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetOperationOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Operation, true
}

// SetOperation sets field value
func (o *VMInstanceGroup) SetOperation(v map[string]interface{}) {
	o.Operation = v
}

// GetVmInstance returns the VmInstance field value
func (o *VMInstanceGroup) GetVmInstance() []VMInstance {
	if o == nil {
		var ret []VMInstance
		return ret
	}

	return o.VmInstance
}

// GetVmInstanceOk returns a tuple with the VmInstance field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetVmInstanceOk() ([]VMInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmInstance, true
}

// SetVmInstance sets field value
func (o *VMInstanceGroup) SetVmInstance(v []VMInstance) {
	o.VmInstance = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *VMInstanceGroup) SetTags(v []string) {
	o.Tags = v
}

// GetDiskSizeGB returns the DiskSizeGB field value
func (o *VMInstanceGroup) GetDiskSizeGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DiskSizeGB
}

// GetDiskSizeGBOk returns a tuple with the DiskSizeGB field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetDiskSizeGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSizeGB, true
}

// SetDiskSizeGB sets field value
func (o *VMInstanceGroup) SetDiskSizeGB(v float32) {
	o.DiskSizeGB = v
}

// GetVolumeTemplateId returns the VolumeTemplateId field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetVolumeTemplateId() float32 {
	if o == nil || IsNil(o.VolumeTemplateId) {
		var ret float32
		return ret
	}
	return *o.VolumeTemplateId
}

// GetVolumeTemplateIdOk returns a tuple with the VolumeTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetVolumeTemplateIdOk() (*float32, bool) {
	if o == nil || IsNil(o.VolumeTemplateId) {
		return nil, false
	}
	return o.VolumeTemplateId, true
}

// HasVolumeTemplateId returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasVolumeTemplateId() bool {
	if o != nil && !IsNil(o.VolumeTemplateId) {
		return true
	}

	return false
}

// SetVolumeTemplateId gets a reference to the given float32 and assigns it to the VolumeTemplateId field.
func (o *VMInstanceGroup) SetVolumeTemplateId(v float32) {
	o.VolumeTemplateId = &v
}

// GetVmInstanceGroupInterfaces returns the VmInstanceGroupInterfaces field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetVmInstanceGroupInterfaces() []VMInstanceGroupInterface {
	if o == nil || IsNil(o.VmInstanceGroupInterfaces) {
		var ret []VMInstanceGroupInterface
		return ret
	}
	return o.VmInstanceGroupInterfaces
}

// GetVmInstanceGroupInterfacesOk returns a tuple with the VmInstanceGroupInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetVmInstanceGroupInterfacesOk() ([]VMInstanceGroupInterface, bool) {
	if o == nil || IsNil(o.VmInstanceGroupInterfaces) {
		return nil, false
	}
	return o.VmInstanceGroupInterfaces, true
}

// HasVmInstanceGroupInterfaces returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasVmInstanceGroupInterfaces() bool {
	if o != nil && !IsNil(o.VmInstanceGroupInterfaces) {
		return true
	}

	return false
}

// SetVmInstanceGroupInterfaces gets a reference to the given []VMInstanceGroupInterface and assigns it to the VmInstanceGroupInterfaces field.
func (o *VMInstanceGroup) SetVmInstanceGroupInterfaces(v []VMInstanceGroupInterface) {
	o.VmInstanceGroupInterfaces = v
}

// GetNetworkIdToNetworkProfileId returns the NetworkIdToNetworkProfileId field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetNetworkIdToNetworkProfileId() map[string]interface{} {
	if o == nil || IsNil(o.NetworkIdToNetworkProfileId) {
		var ret map[string]interface{}
		return ret
	}
	return o.NetworkIdToNetworkProfileId
}

// GetNetworkIdToNetworkProfileIdOk returns a tuple with the NetworkIdToNetworkProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetNetworkIdToNetworkProfileIdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NetworkIdToNetworkProfileId) {
		return map[string]interface{}{}, false
	}
	return o.NetworkIdToNetworkProfileId, true
}

// HasNetworkIdToNetworkProfileId returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasNetworkIdToNetworkProfileId() bool {
	if o != nil && !IsNil(o.NetworkIdToNetworkProfileId) {
		return true
	}

	return false
}

// SetNetworkIdToNetworkProfileId gets a reference to the given map[string]interface{} and assigns it to the NetworkIdToNetworkProfileId field.
func (o *VMInstanceGroup) SetNetworkIdToNetworkProfileId(v map[string]interface{}) {
	o.NetworkIdToNetworkProfileId = v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *VMInstanceGroup) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetGuiSettings returns the GuiSettings field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetGuiSettings() GenericGUISettings {
	if o == nil || IsNil(o.GuiSettings) {
		var ret GenericGUISettings
		return ret
	}
	return *o.GuiSettings
}

// GetGuiSettingsOk returns a tuple with the GuiSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetGuiSettingsOk() (*GenericGUISettings, bool) {
	if o == nil || IsNil(o.GuiSettings) {
		return nil, false
	}
	return o.GuiSettings, true
}

// HasGuiSettings returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasGuiSettings() bool {
	if o != nil && !IsNil(o.GuiSettings) {
		return true
	}

	return false
}

// SetGuiSettings gets a reference to the given GenericGUISettings and assigns it to the GuiSettings field.
func (o *VMInstanceGroup) SetGuiSettings(v GenericGUISettings) {
	o.GuiSettings = &v
}

// GetLinks returns the Links field value
func (o *VMInstanceGroup) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *VMInstanceGroup) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o VMInstanceGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMInstanceGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["serviceStatus"] = o.ServiceStatus
	toSerialize["changeId"] = o.ChangeId
	toSerialize["label"] = o.Label
	toSerialize["instanceCount"] = o.InstanceCount
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	toSerialize["operation"] = o.Operation
	toSerialize["vmInstance"] = o.VmInstance
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["diskSizeGB"] = o.DiskSizeGB
	if !IsNil(o.VolumeTemplateId) {
		toSerialize["volumeTemplateId"] = o.VolumeTemplateId
	}
	if !IsNil(o.VmInstanceGroupInterfaces) {
		toSerialize["vmInstanceGroupInterfaces"] = o.VmInstanceGroupInterfaces
	}
	if !IsNil(o.NetworkIdToNetworkProfileId) {
		toSerialize["networkIdToNetworkProfileId"] = o.NetworkIdToNetworkProfileId
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	if !IsNil(o.GuiSettings) {
		toSerialize["guiSettings"] = o.GuiSettings
	}
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMInstanceGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"infrastructureId",
		"serviceStatus",
		"changeId",
		"label",
		"instanceCount",
		"createdTimestamp",
		"updatedTimestamp",
		"operation",
		"vmInstance",
		"diskSizeGB",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMInstanceGroup := _VMInstanceGroup{}

	err = json.Unmarshal(data, &varVMInstanceGroup)

	if err != nil {
		return err
	}

	*o = VMInstanceGroup(varVMInstanceGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "changeId")
		delete(additionalProperties, "label")
		delete(additionalProperties, "instanceCount")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "operation")
		delete(additionalProperties, "vmInstance")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "diskSizeGB")
		delete(additionalProperties, "volumeTemplateId")
		delete(additionalProperties, "vmInstanceGroupInterfaces")
		delete(additionalProperties, "networkIdToNetworkProfileId")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "guiSettings")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMInstanceGroup struct {
	value *VMInstanceGroup
	isSet bool
}

func (v NullableVMInstanceGroup) Get() *VMInstanceGroup {
	return v.value
}

func (v *NullableVMInstanceGroup) Set(val *VMInstanceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableVMInstanceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableVMInstanceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMInstanceGroup(val *VMInstanceGroup) *NullableVMInstanceGroup {
	return &NullableVMInstanceGroup{value: val, isSet: true}
}

func (v NullableVMInstanceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMInstanceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


