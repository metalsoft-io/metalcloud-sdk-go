/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VMInstanceGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMInstanceGroup{}

// VMInstanceGroup struct for VMInstanceGroup
type VMInstanceGroup struct {
	// Name of the VM Instance Group.
	Label string `json:"label"`
	// Subdomain of the VM Instance Group.
	Subdomain *string `json:"subdomain,omitempty"`
	InstanceCount *float32 `json:"instanceCount,omitempty"`
	// Custom variables for the VM Instance Group.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	// Timestamp of the VM Instance Group last update.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// Id of the VM Instance Group.
	Id float32 `json:"id"`
	// Revision of the VM Instance Group State
	Revision float32 `json:"revision"`
	// Id of the Infrastructure.
	InfrastructureId float32 `json:"infrastructureId"`
	// The network endpoint group identifier
	NetworkEndpointGroupId *int32 `json:"networkEndpointGroupId,omitempty"`
	// Infrastructure information
	Infrastructure ParentInfrastructure `json:"infrastructure"`
	// Status of the VM Instance Group.
	ServiceStatus string `json:"serviceStatus"`
	// Disk size in GB for each VM Instance in the VM Instance Group.
	DiskSizeGB float32 `json:"diskSizeGB"`
	// Subdomain permanent of the VM Instance Group.
	SubdomainPermanent *string `json:"subdomainPermanent,omitempty"`
	// Id of the DNS subdomain for the VM Instance Group.
	DnsSubdomainId *float32 `json:"dnsSubdomainId,omitempty"`
	// Id of the permanent DNS subdomain for the VM Instance Group.
	DnsSubdomainPermanentId *float32 `json:"dnsSubdomainPermanentId,omitempty"`
	// Timestamp of the VM Instance Group creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// The current changes to be deployed for the VM Instance Group.
	Config VMInstanceGroupConfiguration `json:"config"`
	// Meta information of the VM Instance Group.
	Meta VMInstanceGroupMeta `json:"meta"`
	// Links to other resources
	Links map[string]interface{} `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _VMInstanceGroup VMInstanceGroup

// NewVMInstanceGroup instantiates a new VMInstanceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMInstanceGroup(label string, updatedTimestamp string, id float32, revision float32, infrastructureId float32, infrastructure ParentInfrastructure, serviceStatus string, diskSizeGB float32, createdTimestamp string, config VMInstanceGroupConfiguration, meta VMInstanceGroupMeta, links map[string]interface{}) *VMInstanceGroup {
	this := VMInstanceGroup{}
	this.Label = label
	var instanceCount float32 = 1
	this.InstanceCount = &instanceCount
	this.UpdatedTimestamp = updatedTimestamp
	this.Id = id
	this.Revision = revision
	this.InfrastructureId = infrastructureId
	this.Infrastructure = infrastructure
	this.ServiceStatus = serviceStatus
	this.DiskSizeGB = diskSizeGB
	this.CreatedTimestamp = createdTimestamp
	this.Config = config
	this.Meta = meta
	this.Links = links
	return &this
}

// NewVMInstanceGroupWithDefaults instantiates a new VMInstanceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMInstanceGroupWithDefaults() *VMInstanceGroup {
	this := VMInstanceGroup{}
	var instanceCount float32 = 1
	this.InstanceCount = &instanceCount
	return &this
}

// GetLabel returns the Label field value
func (o *VMInstanceGroup) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *VMInstanceGroup) SetLabel(v string) {
	o.Label = v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *VMInstanceGroup) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetInstanceCount returns the InstanceCount field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetInstanceCount() float32 {
	if o == nil || IsNil(o.InstanceCount) {
		var ret float32
		return ret
	}
	return *o.InstanceCount
}

// GetInstanceCountOk returns a tuple with the InstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetInstanceCountOk() (*float32, bool) {
	if o == nil || IsNil(o.InstanceCount) {
		return nil, false
	}
	return o.InstanceCount, true
}

// HasInstanceCount returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasInstanceCount() bool {
	if o != nil && !IsNil(o.InstanceCount) {
		return true
	}

	return false
}

// SetInstanceCount gets a reference to the given float32 and assigns it to the InstanceCount field.
func (o *VMInstanceGroup) SetInstanceCount(v float32) {
	o.InstanceCount = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *VMInstanceGroup) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *VMInstanceGroup) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *VMInstanceGroup) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetId returns the Id field value
func (o *VMInstanceGroup) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VMInstanceGroup) SetId(v float32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *VMInstanceGroup) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *VMInstanceGroup) SetRevision(v float32) {
	o.Revision = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *VMInstanceGroup) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *VMInstanceGroup) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetNetworkEndpointGroupId returns the NetworkEndpointGroupId field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetNetworkEndpointGroupId() int32 {
	if o == nil || IsNil(o.NetworkEndpointGroupId) {
		var ret int32
		return ret
	}
	return *o.NetworkEndpointGroupId
}

// GetNetworkEndpointGroupIdOk returns a tuple with the NetworkEndpointGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetNetworkEndpointGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkEndpointGroupId) {
		return nil, false
	}
	return o.NetworkEndpointGroupId, true
}

// HasNetworkEndpointGroupId returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasNetworkEndpointGroupId() bool {
	if o != nil && !IsNil(o.NetworkEndpointGroupId) {
		return true
	}

	return false
}

// SetNetworkEndpointGroupId gets a reference to the given int32 and assigns it to the NetworkEndpointGroupId field.
func (o *VMInstanceGroup) SetNetworkEndpointGroupId(v int32) {
	o.NetworkEndpointGroupId = &v
}

// GetInfrastructure returns the Infrastructure field value
func (o *VMInstanceGroup) GetInfrastructure() ParentInfrastructure {
	if o == nil {
		var ret ParentInfrastructure
		return ret
	}

	return o.Infrastructure
}

// GetInfrastructureOk returns a tuple with the Infrastructure field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetInfrastructureOk() (*ParentInfrastructure, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Infrastructure, true
}

// SetInfrastructure sets field value
func (o *VMInstanceGroup) SetInfrastructure(v ParentInfrastructure) {
	o.Infrastructure = v
}

// GetServiceStatus returns the ServiceStatus field value
func (o *VMInstanceGroup) GetServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceStatus, true
}

// SetServiceStatus sets field value
func (o *VMInstanceGroup) SetServiceStatus(v string) {
	o.ServiceStatus = v
}

// GetDiskSizeGB returns the DiskSizeGB field value
func (o *VMInstanceGroup) GetDiskSizeGB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DiskSizeGB
}

// GetDiskSizeGBOk returns a tuple with the DiskSizeGB field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetDiskSizeGBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskSizeGB, true
}

// SetDiskSizeGB sets field value
func (o *VMInstanceGroup) SetDiskSizeGB(v float32) {
	o.DiskSizeGB = v
}

// GetSubdomainPermanent returns the SubdomainPermanent field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetSubdomainPermanent() string {
	if o == nil || IsNil(o.SubdomainPermanent) {
		var ret string
		return ret
	}
	return *o.SubdomainPermanent
}

// GetSubdomainPermanentOk returns a tuple with the SubdomainPermanent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetSubdomainPermanentOk() (*string, bool) {
	if o == nil || IsNil(o.SubdomainPermanent) {
		return nil, false
	}
	return o.SubdomainPermanent, true
}

// HasSubdomainPermanent returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasSubdomainPermanent() bool {
	if o != nil && !IsNil(o.SubdomainPermanent) {
		return true
	}

	return false
}

// SetSubdomainPermanent gets a reference to the given string and assigns it to the SubdomainPermanent field.
func (o *VMInstanceGroup) SetSubdomainPermanent(v string) {
	o.SubdomainPermanent = &v
}

// GetDnsSubdomainId returns the DnsSubdomainId field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetDnsSubdomainId() float32 {
	if o == nil || IsNil(o.DnsSubdomainId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainId
}

// GetDnsSubdomainIdOk returns a tuple with the DnsSubdomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetDnsSubdomainIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainId) {
		return nil, false
	}
	return o.DnsSubdomainId, true
}

// HasDnsSubdomainId returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasDnsSubdomainId() bool {
	if o != nil && !IsNil(o.DnsSubdomainId) {
		return true
	}

	return false
}

// SetDnsSubdomainId gets a reference to the given float32 and assigns it to the DnsSubdomainId field.
func (o *VMInstanceGroup) SetDnsSubdomainId(v float32) {
	o.DnsSubdomainId = &v
}

// GetDnsSubdomainPermanentId returns the DnsSubdomainPermanentId field value if set, zero value otherwise.
func (o *VMInstanceGroup) GetDnsSubdomainPermanentId() float32 {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		var ret float32
		return ret
	}
	return *o.DnsSubdomainPermanentId
}

// GetDnsSubdomainPermanentIdOk returns a tuple with the DnsSubdomainPermanentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetDnsSubdomainPermanentIdOk() (*float32, bool) {
	if o == nil || IsNil(o.DnsSubdomainPermanentId) {
		return nil, false
	}
	return o.DnsSubdomainPermanentId, true
}

// HasDnsSubdomainPermanentId returns a boolean if a field has been set.
func (o *VMInstanceGroup) HasDnsSubdomainPermanentId() bool {
	if o != nil && !IsNil(o.DnsSubdomainPermanentId) {
		return true
	}

	return false
}

// SetDnsSubdomainPermanentId gets a reference to the given float32 and assigns it to the DnsSubdomainPermanentId field.
func (o *VMInstanceGroup) SetDnsSubdomainPermanentId(v float32) {
	o.DnsSubdomainPermanentId = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *VMInstanceGroup) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *VMInstanceGroup) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetConfig returns the Config field value
func (o *VMInstanceGroup) GetConfig() VMInstanceGroupConfiguration {
	if o == nil {
		var ret VMInstanceGroupConfiguration
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetConfigOk() (*VMInstanceGroupConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *VMInstanceGroup) SetConfig(v VMInstanceGroupConfiguration) {
	o.Config = v
}

// GetMeta returns the Meta field value
func (o *VMInstanceGroup) GetMeta() VMInstanceGroupMeta {
	if o == nil {
		var ret VMInstanceGroupMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetMetaOk() (*VMInstanceGroupMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *VMInstanceGroup) SetMeta(v VMInstanceGroupMeta) {
	o.Meta = v
}

// GetLinks returns the Links field value
func (o *VMInstanceGroup) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *VMInstanceGroup) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *VMInstanceGroup) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o VMInstanceGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMInstanceGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.InstanceCount) {
		toSerialize["instanceCount"] = o.InstanceCount
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	toSerialize["infrastructureId"] = o.InfrastructureId
	if !IsNil(o.NetworkEndpointGroupId) {
		toSerialize["networkEndpointGroupId"] = o.NetworkEndpointGroupId
	}
	toSerialize["infrastructure"] = o.Infrastructure
	toSerialize["serviceStatus"] = o.ServiceStatus
	toSerialize["diskSizeGB"] = o.DiskSizeGB
	if !IsNil(o.SubdomainPermanent) {
		toSerialize["subdomainPermanent"] = o.SubdomainPermanent
	}
	if !IsNil(o.DnsSubdomainId) {
		toSerialize["dnsSubdomainId"] = o.DnsSubdomainId
	}
	if !IsNil(o.DnsSubdomainPermanentId) {
		toSerialize["dnsSubdomainPermanentId"] = o.DnsSubdomainPermanentId
	}
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["config"] = o.Config
	toSerialize["meta"] = o.Meta
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VMInstanceGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"updatedTimestamp",
		"id",
		"revision",
		"infrastructureId",
		"infrastructure",
		"serviceStatus",
		"diskSizeGB",
		"createdTimestamp",
		"config",
		"meta",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMInstanceGroup := _VMInstanceGroup{}

	err = json.Unmarshal(data, &varVMInstanceGroup)

	if err != nil {
		return err
	}

	*o = VMInstanceGroup(varVMInstanceGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "subdomain")
		delete(additionalProperties, "instanceCount")
		delete(additionalProperties, "customVariables")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "networkEndpointGroupId")
		delete(additionalProperties, "infrastructure")
		delete(additionalProperties, "serviceStatus")
		delete(additionalProperties, "diskSizeGB")
		delete(additionalProperties, "subdomainPermanent")
		delete(additionalProperties, "dnsSubdomainId")
		delete(additionalProperties, "dnsSubdomainPermanentId")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "config")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMInstanceGroup struct {
	value *VMInstanceGroup
	isSet bool
}

func (v NullableVMInstanceGroup) Get() *VMInstanceGroup {
	return v.value
}

func (v *NullableVMInstanceGroup) Set(val *VMInstanceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableVMInstanceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableVMInstanceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMInstanceGroup(val *VMInstanceGroup) *NullableVMInstanceGroup {
	return &NullableVMInstanceGroup{value: val, isSet: true}
}

func (v NullableVMInstanceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMInstanceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


