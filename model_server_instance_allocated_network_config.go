/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ServerInstanceAllocatedNetworkConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceAllocatedNetworkConfig{}

// ServerInstanceAllocatedNetworkConfig struct for ServerInstanceAllocatedNetworkConfig
type ServerInstanceAllocatedNetworkConfig struct {
	// The list of bond network configurations indexed by LAG id.
	BondNetworkConfigs *map[string]ServerInstanceBondNetworkConfig `json:"bondNetworkConfigs,omitempty"`
	// The list of physical network configurations indexed by physical interface id.
	PhysicalInterfaceNetworkConfigs *map[string]ServerInstancePhysicalNetworkConfig `json:"physicalInterfaceNetworkConfigs,omitempty"`
	// The list of trunk network configurations indexed by VLAN id.
	TrunkNetworkConfigs *map[string]ServerInstanceTrunkNetworkConfig `json:"trunkNetworkConfigs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceAllocatedNetworkConfig ServerInstanceAllocatedNetworkConfig

// NewServerInstanceAllocatedNetworkConfig instantiates a new ServerInstanceAllocatedNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceAllocatedNetworkConfig() *ServerInstanceAllocatedNetworkConfig {
	this := ServerInstanceAllocatedNetworkConfig{}
	return &this
}

// NewServerInstanceAllocatedNetworkConfigWithDefaults instantiates a new ServerInstanceAllocatedNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceAllocatedNetworkConfigWithDefaults() *ServerInstanceAllocatedNetworkConfig {
	this := ServerInstanceAllocatedNetworkConfig{}
	return &this
}

// GetBondNetworkConfigs returns the BondNetworkConfigs field value if set, zero value otherwise.
func (o *ServerInstanceAllocatedNetworkConfig) GetBondNetworkConfigs() map[string]ServerInstanceBondNetworkConfig {
	if o == nil || IsNil(o.BondNetworkConfigs) {
		var ret map[string]ServerInstanceBondNetworkConfig
		return ret
	}
	return *o.BondNetworkConfigs
}

// GetBondNetworkConfigsOk returns a tuple with the BondNetworkConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceAllocatedNetworkConfig) GetBondNetworkConfigsOk() (*map[string]ServerInstanceBondNetworkConfig, bool) {
	if o == nil || IsNil(o.BondNetworkConfigs) {
		return nil, false
	}
	return o.BondNetworkConfigs, true
}

// HasBondNetworkConfigs returns a boolean if a field has been set.
func (o *ServerInstanceAllocatedNetworkConfig) HasBondNetworkConfigs() bool {
	if o != nil && !IsNil(o.BondNetworkConfigs) {
		return true
	}

	return false
}

// SetBondNetworkConfigs gets a reference to the given map[string]ServerInstanceBondNetworkConfig and assigns it to the BondNetworkConfigs field.
func (o *ServerInstanceAllocatedNetworkConfig) SetBondNetworkConfigs(v map[string]ServerInstanceBondNetworkConfig) {
	o.BondNetworkConfigs = &v
}

// GetPhysicalInterfaceNetworkConfigs returns the PhysicalInterfaceNetworkConfigs field value if set, zero value otherwise.
func (o *ServerInstanceAllocatedNetworkConfig) GetPhysicalInterfaceNetworkConfigs() map[string]ServerInstancePhysicalNetworkConfig {
	if o == nil || IsNil(o.PhysicalInterfaceNetworkConfigs) {
		var ret map[string]ServerInstancePhysicalNetworkConfig
		return ret
	}
	return *o.PhysicalInterfaceNetworkConfigs
}

// GetPhysicalInterfaceNetworkConfigsOk returns a tuple with the PhysicalInterfaceNetworkConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceAllocatedNetworkConfig) GetPhysicalInterfaceNetworkConfigsOk() (*map[string]ServerInstancePhysicalNetworkConfig, bool) {
	if o == nil || IsNil(o.PhysicalInterfaceNetworkConfigs) {
		return nil, false
	}
	return o.PhysicalInterfaceNetworkConfigs, true
}

// HasPhysicalInterfaceNetworkConfigs returns a boolean if a field has been set.
func (o *ServerInstanceAllocatedNetworkConfig) HasPhysicalInterfaceNetworkConfigs() bool {
	if o != nil && !IsNil(o.PhysicalInterfaceNetworkConfigs) {
		return true
	}

	return false
}

// SetPhysicalInterfaceNetworkConfigs gets a reference to the given map[string]ServerInstancePhysicalNetworkConfig and assigns it to the PhysicalInterfaceNetworkConfigs field.
func (o *ServerInstanceAllocatedNetworkConfig) SetPhysicalInterfaceNetworkConfigs(v map[string]ServerInstancePhysicalNetworkConfig) {
	o.PhysicalInterfaceNetworkConfigs = &v
}

// GetTrunkNetworkConfigs returns the TrunkNetworkConfigs field value if set, zero value otherwise.
func (o *ServerInstanceAllocatedNetworkConfig) GetTrunkNetworkConfigs() map[string]ServerInstanceTrunkNetworkConfig {
	if o == nil || IsNil(o.TrunkNetworkConfigs) {
		var ret map[string]ServerInstanceTrunkNetworkConfig
		return ret
	}
	return *o.TrunkNetworkConfigs
}

// GetTrunkNetworkConfigsOk returns a tuple with the TrunkNetworkConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceAllocatedNetworkConfig) GetTrunkNetworkConfigsOk() (*map[string]ServerInstanceTrunkNetworkConfig, bool) {
	if o == nil || IsNil(o.TrunkNetworkConfigs) {
		return nil, false
	}
	return o.TrunkNetworkConfigs, true
}

// HasTrunkNetworkConfigs returns a boolean if a field has been set.
func (o *ServerInstanceAllocatedNetworkConfig) HasTrunkNetworkConfigs() bool {
	if o != nil && !IsNil(o.TrunkNetworkConfigs) {
		return true
	}

	return false
}

// SetTrunkNetworkConfigs gets a reference to the given map[string]ServerInstanceTrunkNetworkConfig and assigns it to the TrunkNetworkConfigs field.
func (o *ServerInstanceAllocatedNetworkConfig) SetTrunkNetworkConfigs(v map[string]ServerInstanceTrunkNetworkConfig) {
	o.TrunkNetworkConfigs = &v
}

func (o ServerInstanceAllocatedNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceAllocatedNetworkConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BondNetworkConfigs) {
		toSerialize["bondNetworkConfigs"] = o.BondNetworkConfigs
	}
	if !IsNil(o.PhysicalInterfaceNetworkConfigs) {
		toSerialize["physicalInterfaceNetworkConfigs"] = o.PhysicalInterfaceNetworkConfigs
	}
	if !IsNil(o.TrunkNetworkConfigs) {
		toSerialize["trunkNetworkConfigs"] = o.TrunkNetworkConfigs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceAllocatedNetworkConfig) UnmarshalJSON(data []byte) (err error) {
	varServerInstanceAllocatedNetworkConfig := _ServerInstanceAllocatedNetworkConfig{}

	err = json.Unmarshal(data, &varServerInstanceAllocatedNetworkConfig)

	if err != nil {
		return err
	}

	*o = ServerInstanceAllocatedNetworkConfig(varServerInstanceAllocatedNetworkConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bondNetworkConfigs")
		delete(additionalProperties, "physicalInterfaceNetworkConfigs")
		delete(additionalProperties, "trunkNetworkConfigs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceAllocatedNetworkConfig struct {
	value *ServerInstanceAllocatedNetworkConfig
	isSet bool
}

func (v NullableServerInstanceAllocatedNetworkConfig) Get() *ServerInstanceAllocatedNetworkConfig {
	return v.value
}

func (v *NullableServerInstanceAllocatedNetworkConfig) Set(val *ServerInstanceAllocatedNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceAllocatedNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceAllocatedNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceAllocatedNetworkConfig(val *ServerInstanceAllocatedNetworkConfig) *NullableServerInstanceAllocatedNetworkConfig {
	return &NullableServerInstanceAllocatedNetworkConfig{value: val, isSet: true}
}

func (v NullableServerInstanceAllocatedNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceAllocatedNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


