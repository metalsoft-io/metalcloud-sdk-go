/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerCapabilities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerCapabilities{}

// ServerCapabilities struct for ServerCapabilities
type ServerCapabilities struct {
	// Server supports firmware upgrades
	FirmwareUpgradeSupported bool `json:"firmwareUpgradeSupported"`
	// Server supports firmware upgrades on reboot
	FirmwareUpgradeApplyOnRebootSupported bool `json:"firmwareUpgradeApplyOnRebootSupported"`
	// The number of virtual media devices supported by the server
	VirtualMediaDeviceCount float32 `json:"virtualMediaDeviceCount"`
	// Server has VNC enabled
	VncEnabled bool `json:"vncEnabled"`
	AdditionalProperties map[string]interface{}
}

type _ServerCapabilities ServerCapabilities

// NewServerCapabilities instantiates a new ServerCapabilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerCapabilities(firmwareUpgradeSupported bool, firmwareUpgradeApplyOnRebootSupported bool, virtualMediaDeviceCount float32, vncEnabled bool) *ServerCapabilities {
	this := ServerCapabilities{}
	this.FirmwareUpgradeSupported = firmwareUpgradeSupported
	this.FirmwareUpgradeApplyOnRebootSupported = firmwareUpgradeApplyOnRebootSupported
	this.VirtualMediaDeviceCount = virtualMediaDeviceCount
	this.VncEnabled = vncEnabled
	return &this
}

// NewServerCapabilitiesWithDefaults instantiates a new ServerCapabilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerCapabilitiesWithDefaults() *ServerCapabilities {
	this := ServerCapabilities{}
	return &this
}

// GetFirmwareUpgradeSupported returns the FirmwareUpgradeSupported field value
func (o *ServerCapabilities) GetFirmwareUpgradeSupported() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FirmwareUpgradeSupported
}

// GetFirmwareUpgradeSupportedOk returns a tuple with the FirmwareUpgradeSupported field value
// and a boolean to check if the value has been set.
func (o *ServerCapabilities) GetFirmwareUpgradeSupportedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirmwareUpgradeSupported, true
}

// SetFirmwareUpgradeSupported sets field value
func (o *ServerCapabilities) SetFirmwareUpgradeSupported(v bool) {
	o.FirmwareUpgradeSupported = v
}

// GetFirmwareUpgradeApplyOnRebootSupported returns the FirmwareUpgradeApplyOnRebootSupported field value
func (o *ServerCapabilities) GetFirmwareUpgradeApplyOnRebootSupported() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FirmwareUpgradeApplyOnRebootSupported
}

// GetFirmwareUpgradeApplyOnRebootSupportedOk returns a tuple with the FirmwareUpgradeApplyOnRebootSupported field value
// and a boolean to check if the value has been set.
func (o *ServerCapabilities) GetFirmwareUpgradeApplyOnRebootSupportedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirmwareUpgradeApplyOnRebootSupported, true
}

// SetFirmwareUpgradeApplyOnRebootSupported sets field value
func (o *ServerCapabilities) SetFirmwareUpgradeApplyOnRebootSupported(v bool) {
	o.FirmwareUpgradeApplyOnRebootSupported = v
}

// GetVirtualMediaDeviceCount returns the VirtualMediaDeviceCount field value
func (o *ServerCapabilities) GetVirtualMediaDeviceCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VirtualMediaDeviceCount
}

// GetVirtualMediaDeviceCountOk returns a tuple with the VirtualMediaDeviceCount field value
// and a boolean to check if the value has been set.
func (o *ServerCapabilities) GetVirtualMediaDeviceCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualMediaDeviceCount, true
}

// SetVirtualMediaDeviceCount sets field value
func (o *ServerCapabilities) SetVirtualMediaDeviceCount(v float32) {
	o.VirtualMediaDeviceCount = v
}

// GetVncEnabled returns the VncEnabled field value
func (o *ServerCapabilities) GetVncEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VncEnabled
}

// GetVncEnabledOk returns a tuple with the VncEnabled field value
// and a boolean to check if the value has been set.
func (o *ServerCapabilities) GetVncEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VncEnabled, true
}

// SetVncEnabled sets field value
func (o *ServerCapabilities) SetVncEnabled(v bool) {
	o.VncEnabled = v
}

func (o ServerCapabilities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerCapabilities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firmwareUpgradeSupported"] = o.FirmwareUpgradeSupported
	toSerialize["firmwareUpgradeApplyOnRebootSupported"] = o.FirmwareUpgradeApplyOnRebootSupported
	toSerialize["virtualMediaDeviceCount"] = o.VirtualMediaDeviceCount
	toSerialize["vncEnabled"] = o.VncEnabled

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerCapabilities) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firmwareUpgradeSupported",
		"firmwareUpgradeApplyOnRebootSupported",
		"virtualMediaDeviceCount",
		"vncEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerCapabilities := _ServerCapabilities{}

	err = json.Unmarshal(data, &varServerCapabilities)

	if err != nil {
		return err
	}

	*o = ServerCapabilities(varServerCapabilities)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "firmwareUpgradeSupported")
		delete(additionalProperties, "firmwareUpgradeApplyOnRebootSupported")
		delete(additionalProperties, "virtualMediaDeviceCount")
		delete(additionalProperties, "vncEnabled")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerCapabilities struct {
	value *ServerCapabilities
	isSet bool
}

func (v NullableServerCapabilities) Get() *ServerCapabilities {
	return v.value
}

func (v *NullableServerCapabilities) Set(val *ServerCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableServerCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableServerCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerCapabilities(val *ServerCapabilities) *NullableServerCapabilities {
	return &NullableServerCapabilities{value: val, isSet: true}
}

func (v NullableServerCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


