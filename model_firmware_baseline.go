/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the FirmwareBaseline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirmwareBaseline{}

// FirmwareBaseline struct for FirmwareBaseline
type FirmwareBaseline struct {
	// Unique identifier for the firmware baseline
	Id float32 `json:"id"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Catalog []string `json:"catalog,omitempty"`
	Level BaselineLevelType `json:"level"`
	LevelFilter []string `json:"levelFilter"`
	// Timestamp when the baseline was created
	CreatedTimestamp string `json:"createdTimestamp"`
	// Links to other resources
	Links map[string]interface{} `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _FirmwareBaseline FirmwareBaseline

// NewFirmwareBaseline instantiates a new FirmwareBaseline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirmwareBaseline(id float32, name string, level BaselineLevelType, levelFilter []string, createdTimestamp string, links map[string]interface{}) *FirmwareBaseline {
	this := FirmwareBaseline{}
	this.Id = id
	this.Name = name
	this.Level = level
	this.LevelFilter = levelFilter
	this.CreatedTimestamp = createdTimestamp
	this.Links = links
	return &this
}

// NewFirmwareBaselineWithDefaults instantiates a new FirmwareBaseline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirmwareBaselineWithDefaults() *FirmwareBaseline {
	this := FirmwareBaseline{}
	return &this
}

// GetId returns the Id field value
func (o *FirmwareBaseline) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FirmwareBaseline) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FirmwareBaseline) SetId(v float32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *FirmwareBaseline) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FirmwareBaseline) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FirmwareBaseline) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FirmwareBaseline) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareBaseline) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FirmwareBaseline) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FirmwareBaseline) SetDescription(v string) {
	o.Description = &v
}

// GetCatalog returns the Catalog field value if set, zero value otherwise.
func (o *FirmwareBaseline) GetCatalog() []string {
	if o == nil || IsNil(o.Catalog) {
		var ret []string
		return ret
	}
	return o.Catalog
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirmwareBaseline) GetCatalogOk() ([]string, bool) {
	if o == nil || IsNil(o.Catalog) {
		return nil, false
	}
	return o.Catalog, true
}

// HasCatalog returns a boolean if a field has been set.
func (o *FirmwareBaseline) HasCatalog() bool {
	if o != nil && !IsNil(o.Catalog) {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given []string and assigns it to the Catalog field.
func (o *FirmwareBaseline) SetCatalog(v []string) {
	o.Catalog = v
}

// GetLevel returns the Level field value
func (o *FirmwareBaseline) GetLevel() BaselineLevelType {
	if o == nil {
		var ret BaselineLevelType
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *FirmwareBaseline) GetLevelOk() (*BaselineLevelType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *FirmwareBaseline) SetLevel(v BaselineLevelType) {
	o.Level = v
}

// GetLevelFilter returns the LevelFilter field value
func (o *FirmwareBaseline) GetLevelFilter() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LevelFilter
}

// GetLevelFilterOk returns a tuple with the LevelFilter field value
// and a boolean to check if the value has been set.
func (o *FirmwareBaseline) GetLevelFilterOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LevelFilter, true
}

// SetLevelFilter sets field value
func (o *FirmwareBaseline) SetLevelFilter(v []string) {
	o.LevelFilter = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *FirmwareBaseline) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *FirmwareBaseline) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *FirmwareBaseline) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetLinks returns the Links field value
func (o *FirmwareBaseline) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *FirmwareBaseline) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *FirmwareBaseline) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o FirmwareBaseline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirmwareBaseline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Catalog) {
		toSerialize["catalog"] = o.Catalog
	}
	toSerialize["level"] = o.Level
	toSerialize["levelFilter"] = o.LevelFilter
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FirmwareBaseline) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"level",
		"levelFilter",
		"createdTimestamp",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirmwareBaseline := _FirmwareBaseline{}

	err = json.Unmarshal(data, &varFirmwareBaseline)

	if err != nil {
		return err
	}

	*o = FirmwareBaseline(varFirmwareBaseline)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "catalog")
		delete(additionalProperties, "level")
		delete(additionalProperties, "levelFilter")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFirmwareBaseline struct {
	value *FirmwareBaseline
	isSet bool
}

func (v NullableFirmwareBaseline) Get() *FirmwareBaseline {
	return v.value
}

func (v *NullableFirmwareBaseline) Set(val *FirmwareBaseline) {
	v.value = val
	v.isSet = true
}

func (v NullableFirmwareBaseline) IsSet() bool {
	return v.isSet
}

func (v *NullableFirmwareBaseline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirmwareBaseline(val *FirmwareBaseline) *NullableFirmwareBaseline {
	return &NullableFirmwareBaseline{value: val, isSet: true}
}

func (v NullableFirmwareBaseline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirmwareBaseline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


