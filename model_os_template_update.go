/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the OSTemplateUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSTemplateUpdate{}

// OSTemplateUpdate struct for OSTemplateUpdate
type OSTemplateUpdate struct {
	// The OS template name
	Name string `json:"name"`
	// The OS template description
	Description *string `json:"description,omitempty"`
	// The OS template label. It must be unique
	Label *string `json:"label,omitempty"`
	Device OSTemplateDevice `json:"device"`
	Install OSTemplateInstall `json:"install"`
	ImageBuild OSTemplateImageBuild `json:"imageBuild"`
	Os OSTemplateOs `json:"os"`
	// The visibility of the OS template.                     If the visibility is PUBLIC any user can use the OS template in deployments                     If the visibility is PRIVATE the OS template can be used in deployments only                     by the user who created and/or updated the template
	Visibility *string `json:"visibility,omitempty"`
	// The status, let the user to decide with templates to delete and when,                     and how much to keep them in the history (archived status). Also, it allows the user to                     resurrect the archived templates if needed.                     Status: READY                         - is the initial status of the template                         - the OS template is ready for deployment                         - the OS template can be deleted, use in deployments and updated                     Status: ACTIVE                         - the OS template is part of at least one ongoing deployment                         - can't be deleted (the template service will have validation for this)                         - the status can't be changed to ARCHIVED (the template service will have validation for this)                     Status: USED                         - the OS Template is part of at least one finished deployment, that is not deleted                         - can't be deleted (the template service will have validation for this)                         - can be updated, deploy or ARCHIVED                     Status: ARCHIVED                         - the OS Template is kept in the system for historical reasons                         - can't be deleted (the template service will have validation for this)                         - can't be updated or deployed                         - the status can be changed to READY or USED, if it needs to be used again or deleted
	Status *string `json:"status,omitempty"`
	// The tags associated with the OS template
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OSTemplateUpdate OSTemplateUpdate

// NewOSTemplateUpdate instantiates a new OSTemplateUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSTemplateUpdate(name string, device OSTemplateDevice, install OSTemplateInstall, imageBuild OSTemplateImageBuild, os OSTemplateOs) *OSTemplateUpdate {
	this := OSTemplateUpdate{}
	this.Name = name
	this.Device = device
	this.Install = install
	this.ImageBuild = imageBuild
	this.Os = os
	return &this
}

// NewOSTemplateUpdateWithDefaults instantiates a new OSTemplateUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSTemplateUpdateWithDefaults() *OSTemplateUpdate {
	this := OSTemplateUpdate{}
	return &this
}

// GetName returns the Name field value
func (o *OSTemplateUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OSTemplateUpdate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OSTemplateUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OSTemplateUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OSTemplateUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *OSTemplateUpdate) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *OSTemplateUpdate) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *OSTemplateUpdate) SetLabel(v string) {
	o.Label = &v
}

// GetDevice returns the Device field value
func (o *OSTemplateUpdate) GetDevice() OSTemplateDevice {
	if o == nil {
		var ret OSTemplateDevice
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetDeviceOk() (*OSTemplateDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *OSTemplateUpdate) SetDevice(v OSTemplateDevice) {
	o.Device = v
}

// GetInstall returns the Install field value
func (o *OSTemplateUpdate) GetInstall() OSTemplateInstall {
	if o == nil {
		var ret OSTemplateInstall
		return ret
	}

	return o.Install
}

// GetInstallOk returns a tuple with the Install field value
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetInstallOk() (*OSTemplateInstall, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Install, true
}

// SetInstall sets field value
func (o *OSTemplateUpdate) SetInstall(v OSTemplateInstall) {
	o.Install = v
}

// GetImageBuild returns the ImageBuild field value
func (o *OSTemplateUpdate) GetImageBuild() OSTemplateImageBuild {
	if o == nil {
		var ret OSTemplateImageBuild
		return ret
	}

	return o.ImageBuild
}

// GetImageBuildOk returns a tuple with the ImageBuild field value
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetImageBuildOk() (*OSTemplateImageBuild, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageBuild, true
}

// SetImageBuild sets field value
func (o *OSTemplateUpdate) SetImageBuild(v OSTemplateImageBuild) {
	o.ImageBuild = v
}

// GetOs returns the Os field value
func (o *OSTemplateUpdate) GetOs() OSTemplateOs {
	if o == nil {
		var ret OSTemplateOs
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetOsOk() (*OSTemplateOs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *OSTemplateUpdate) SetOs(v OSTemplateOs) {
	o.Os = v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *OSTemplateUpdate) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *OSTemplateUpdate) HasVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *OSTemplateUpdate) SetVisibility(v string) {
	o.Visibility = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OSTemplateUpdate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OSTemplateUpdate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *OSTemplateUpdate) SetStatus(v string) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *OSTemplateUpdate) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSTemplateUpdate) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *OSTemplateUpdate) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *OSTemplateUpdate) SetTags(v []string) {
	o.Tags = v
}

func (o OSTemplateUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSTemplateUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["device"] = o.Device
	toSerialize["install"] = o.Install
	toSerialize["imageBuild"] = o.ImageBuild
	toSerialize["os"] = o.Os
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OSTemplateUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"device",
		"install",
		"imageBuild",
		"os",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSTemplateUpdate := _OSTemplateUpdate{}

	err = json.Unmarshal(data, &varOSTemplateUpdate)

	if err != nil {
		return err
	}

	*o = OSTemplateUpdate(varOSTemplateUpdate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "label")
		delete(additionalProperties, "device")
		delete(additionalProperties, "install")
		delete(additionalProperties, "imageBuild")
		delete(additionalProperties, "os")
		delete(additionalProperties, "visibility")
		delete(additionalProperties, "status")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOSTemplateUpdate struct {
	value *OSTemplateUpdate
	isSet bool
}

func (v NullableOSTemplateUpdate) Get() *OSTemplateUpdate {
	return v.value
}

func (v *NullableOSTemplateUpdate) Set(val *OSTemplateUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableOSTemplateUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableOSTemplateUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSTemplateUpdate(val *OSTemplateUpdate) *NullableOSTemplateUpdate {
	return &NullableOSTemplateUpdate{value: val, isSet: true}
}

func (v NullableOSTemplateUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSTemplateUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


