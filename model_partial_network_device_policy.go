/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the PartialNetworkDevicePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartialNetworkDevicePolicy{}

// PartialNetworkDevicePolicy struct for PartialNetworkDevicePolicy
type PartialNetworkDevicePolicy struct {
	// Whether zero-touch registration is enabled
	ZeroTouchRegistrationEnabled *bool `json:"zeroTouchRegistrationEnabled,omitempty"`
	// Whether gNMI subscription is enabled
	GNMISubscriptionEnabled *bool `json:"gNMISubscriptionEnabled,omitempty"`
	// Whether syslog monitoring is enabled
	SyslogMonitoringEnabled *bool `json:"syslogMonitoringEnabled,omitempty"`
	// Whether leaf switches have MLAG pairs
	LeafSwitchesHaveMlagPairs *bool `json:"leafSwitchesHaveMlagPairs,omitempty"`
	// Minimum number of spines needed to bootstrap leafs
	MinimumNumberOfSpinesNeededToBootstrapLeafs *int32 `json:"minimumNumberOfSpinesNeededToBootstrapLeafs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PartialNetworkDevicePolicy PartialNetworkDevicePolicy

// NewPartialNetworkDevicePolicy instantiates a new PartialNetworkDevicePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartialNetworkDevicePolicy() *PartialNetworkDevicePolicy {
	this := PartialNetworkDevicePolicy{}
	return &this
}

// NewPartialNetworkDevicePolicyWithDefaults instantiates a new PartialNetworkDevicePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartialNetworkDevicePolicyWithDefaults() *PartialNetworkDevicePolicy {
	this := PartialNetworkDevicePolicy{}
	return &this
}

// GetZeroTouchRegistrationEnabled returns the ZeroTouchRegistrationEnabled field value if set, zero value otherwise.
func (o *PartialNetworkDevicePolicy) GetZeroTouchRegistrationEnabled() bool {
	if o == nil || IsNil(o.ZeroTouchRegistrationEnabled) {
		var ret bool
		return ret
	}
	return *o.ZeroTouchRegistrationEnabled
}

// GetZeroTouchRegistrationEnabledOk returns a tuple with the ZeroTouchRegistrationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialNetworkDevicePolicy) GetZeroTouchRegistrationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ZeroTouchRegistrationEnabled) {
		return nil, false
	}
	return o.ZeroTouchRegistrationEnabled, true
}

// HasZeroTouchRegistrationEnabled returns a boolean if a field has been set.
func (o *PartialNetworkDevicePolicy) HasZeroTouchRegistrationEnabled() bool {
	if o != nil && !IsNil(o.ZeroTouchRegistrationEnabled) {
		return true
	}

	return false
}

// SetZeroTouchRegistrationEnabled gets a reference to the given bool and assigns it to the ZeroTouchRegistrationEnabled field.
func (o *PartialNetworkDevicePolicy) SetZeroTouchRegistrationEnabled(v bool) {
	o.ZeroTouchRegistrationEnabled = &v
}

// GetGNMISubscriptionEnabled returns the GNMISubscriptionEnabled field value if set, zero value otherwise.
func (o *PartialNetworkDevicePolicy) GetGNMISubscriptionEnabled() bool {
	if o == nil || IsNil(o.GNMISubscriptionEnabled) {
		var ret bool
		return ret
	}
	return *o.GNMISubscriptionEnabled
}

// GetGNMISubscriptionEnabledOk returns a tuple with the GNMISubscriptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialNetworkDevicePolicy) GetGNMISubscriptionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GNMISubscriptionEnabled) {
		return nil, false
	}
	return o.GNMISubscriptionEnabled, true
}

// HasGNMISubscriptionEnabled returns a boolean if a field has been set.
func (o *PartialNetworkDevicePolicy) HasGNMISubscriptionEnabled() bool {
	if o != nil && !IsNil(o.GNMISubscriptionEnabled) {
		return true
	}

	return false
}

// SetGNMISubscriptionEnabled gets a reference to the given bool and assigns it to the GNMISubscriptionEnabled field.
func (o *PartialNetworkDevicePolicy) SetGNMISubscriptionEnabled(v bool) {
	o.GNMISubscriptionEnabled = &v
}

// GetSyslogMonitoringEnabled returns the SyslogMonitoringEnabled field value if set, zero value otherwise.
func (o *PartialNetworkDevicePolicy) GetSyslogMonitoringEnabled() bool {
	if o == nil || IsNil(o.SyslogMonitoringEnabled) {
		var ret bool
		return ret
	}
	return *o.SyslogMonitoringEnabled
}

// GetSyslogMonitoringEnabledOk returns a tuple with the SyslogMonitoringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialNetworkDevicePolicy) GetSyslogMonitoringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SyslogMonitoringEnabled) {
		return nil, false
	}
	return o.SyslogMonitoringEnabled, true
}

// HasSyslogMonitoringEnabled returns a boolean if a field has been set.
func (o *PartialNetworkDevicePolicy) HasSyslogMonitoringEnabled() bool {
	if o != nil && !IsNil(o.SyslogMonitoringEnabled) {
		return true
	}

	return false
}

// SetSyslogMonitoringEnabled gets a reference to the given bool and assigns it to the SyslogMonitoringEnabled field.
func (o *PartialNetworkDevicePolicy) SetSyslogMonitoringEnabled(v bool) {
	o.SyslogMonitoringEnabled = &v
}

// GetLeafSwitchesHaveMlagPairs returns the LeafSwitchesHaveMlagPairs field value if set, zero value otherwise.
func (o *PartialNetworkDevicePolicy) GetLeafSwitchesHaveMlagPairs() bool {
	if o == nil || IsNil(o.LeafSwitchesHaveMlagPairs) {
		var ret bool
		return ret
	}
	return *o.LeafSwitchesHaveMlagPairs
}

// GetLeafSwitchesHaveMlagPairsOk returns a tuple with the LeafSwitchesHaveMlagPairs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialNetworkDevicePolicy) GetLeafSwitchesHaveMlagPairsOk() (*bool, bool) {
	if o == nil || IsNil(o.LeafSwitchesHaveMlagPairs) {
		return nil, false
	}
	return o.LeafSwitchesHaveMlagPairs, true
}

// HasLeafSwitchesHaveMlagPairs returns a boolean if a field has been set.
func (o *PartialNetworkDevicePolicy) HasLeafSwitchesHaveMlagPairs() bool {
	if o != nil && !IsNil(o.LeafSwitchesHaveMlagPairs) {
		return true
	}

	return false
}

// SetLeafSwitchesHaveMlagPairs gets a reference to the given bool and assigns it to the LeafSwitchesHaveMlagPairs field.
func (o *PartialNetworkDevicePolicy) SetLeafSwitchesHaveMlagPairs(v bool) {
	o.LeafSwitchesHaveMlagPairs = &v
}

// GetMinimumNumberOfSpinesNeededToBootstrapLeafs returns the MinimumNumberOfSpinesNeededToBootstrapLeafs field value if set, zero value otherwise.
func (o *PartialNetworkDevicePolicy) GetMinimumNumberOfSpinesNeededToBootstrapLeafs() int32 {
	if o == nil || IsNil(o.MinimumNumberOfSpinesNeededToBootstrapLeafs) {
		var ret int32
		return ret
	}
	return *o.MinimumNumberOfSpinesNeededToBootstrapLeafs
}

// GetMinimumNumberOfSpinesNeededToBootstrapLeafsOk returns a tuple with the MinimumNumberOfSpinesNeededToBootstrapLeafs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartialNetworkDevicePolicy) GetMinimumNumberOfSpinesNeededToBootstrapLeafsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumNumberOfSpinesNeededToBootstrapLeafs) {
		return nil, false
	}
	return o.MinimumNumberOfSpinesNeededToBootstrapLeafs, true
}

// HasMinimumNumberOfSpinesNeededToBootstrapLeafs returns a boolean if a field has been set.
func (o *PartialNetworkDevicePolicy) HasMinimumNumberOfSpinesNeededToBootstrapLeafs() bool {
	if o != nil && !IsNil(o.MinimumNumberOfSpinesNeededToBootstrapLeafs) {
		return true
	}

	return false
}

// SetMinimumNumberOfSpinesNeededToBootstrapLeafs gets a reference to the given int32 and assigns it to the MinimumNumberOfSpinesNeededToBootstrapLeafs field.
func (o *PartialNetworkDevicePolicy) SetMinimumNumberOfSpinesNeededToBootstrapLeafs(v int32) {
	o.MinimumNumberOfSpinesNeededToBootstrapLeafs = &v
}

func (o PartialNetworkDevicePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartialNetworkDevicePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ZeroTouchRegistrationEnabled) {
		toSerialize["zeroTouchRegistrationEnabled"] = o.ZeroTouchRegistrationEnabled
	}
	if !IsNil(o.GNMISubscriptionEnabled) {
		toSerialize["gNMISubscriptionEnabled"] = o.GNMISubscriptionEnabled
	}
	if !IsNil(o.SyslogMonitoringEnabled) {
		toSerialize["syslogMonitoringEnabled"] = o.SyslogMonitoringEnabled
	}
	if !IsNil(o.LeafSwitchesHaveMlagPairs) {
		toSerialize["leafSwitchesHaveMlagPairs"] = o.LeafSwitchesHaveMlagPairs
	}
	if !IsNil(o.MinimumNumberOfSpinesNeededToBootstrapLeafs) {
		toSerialize["minimumNumberOfSpinesNeededToBootstrapLeafs"] = o.MinimumNumberOfSpinesNeededToBootstrapLeafs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PartialNetworkDevicePolicy) UnmarshalJSON(data []byte) (err error) {
	varPartialNetworkDevicePolicy := _PartialNetworkDevicePolicy{}

	err = json.Unmarshal(data, &varPartialNetworkDevicePolicy)

	if err != nil {
		return err
	}

	*o = PartialNetworkDevicePolicy(varPartialNetworkDevicePolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "zeroTouchRegistrationEnabled")
		delete(additionalProperties, "gNMISubscriptionEnabled")
		delete(additionalProperties, "syslogMonitoringEnabled")
		delete(additionalProperties, "leafSwitchesHaveMlagPairs")
		delete(additionalProperties, "minimumNumberOfSpinesNeededToBootstrapLeafs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePartialNetworkDevicePolicy struct {
	value *PartialNetworkDevicePolicy
	isSet bool
}

func (v NullablePartialNetworkDevicePolicy) Get() *PartialNetworkDevicePolicy {
	return v.value
}

func (v *NullablePartialNetworkDevicePolicy) Set(val *PartialNetworkDevicePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullablePartialNetworkDevicePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePartialNetworkDevicePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartialNetworkDevicePolicy(val *PartialNetworkDevicePolicy) *NullablePartialNetworkDevicePolicy {
	return &NullablePartialNetworkDevicePolicy{value: val, isSet: true}
}

func (v NullablePartialNetworkDevicePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartialNetworkDevicePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


