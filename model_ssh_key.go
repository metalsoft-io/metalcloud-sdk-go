/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the SSHKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SSHKey{}

// SSHKey struct for SSHKey
type SSHKey struct {
	// The SSH key ID.
	Id int32 `json:"id"`
	// The SSH key name.
	Name *string `json:"name,omitempty"`
	// The SSH key public key.
	PublicKey string `json:"publicKey"`
	// The SSH key user ID.
	UserId *int32 `json:"userId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SSHKey SSHKey

// NewSSHKey instantiates a new SSHKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSHKey(id int32, publicKey string) *SSHKey {
	this := SSHKey{}
	this.Id = id
	this.PublicKey = publicKey
	return &this
}

// NewSSHKeyWithDefaults instantiates a new SSHKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSHKeyWithDefaults() *SSHKey {
	this := SSHKey{}
	return &this
}

// GetId returns the Id field value
func (o *SSHKey) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SSHKey) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SSHKey) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SSHKey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSHKey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SSHKey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SSHKey) SetName(v string) {
	o.Name = &v
}

// GetPublicKey returns the PublicKey field value
func (o *SSHKey) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *SSHKey) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *SSHKey) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SSHKey) GetUserId() int32 {
	if o == nil || IsNil(o.UserId) {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSHKey) GetUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SSHKey) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *SSHKey) SetUserId(v int32) {
	o.UserId = &v
}

func (o SSHKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SSHKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["publicKey"] = o.PublicKey
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SSHKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"publicKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSSHKey := _SSHKey{}

	err = json.Unmarshal(data, &varSSHKey)

	if err != nil {
		return err
	}

	*o = SSHKey(varSSHKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "publicKey")
		delete(additionalProperties, "userId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSSHKey struct {
	value *SSHKey
	isSet bool
}

func (v NullableSSHKey) Get() *SSHKey {
	return v.value
}

func (v *NullableSSHKey) Set(val *SSHKey) {
	v.value = val
	v.isSet = true
}

func (v NullableSSHKey) IsSet() bool {
	return v.isSet
}

func (v *NullableSSHKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSHKey(val *SSHKey) *NullableSSHKey {
	return &NullableSSHKey{value: val, isSet: true}
}

func (v NullableSSHKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSHKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


