/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the AddUserToInfrastructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddUserToInfrastructure{}

// AddUserToInfrastructure struct for AddUserToInfrastructure
type AddUserToInfrastructure struct {
	// The email of the user
	UserEmail string `json:"userEmail"`
	// Create a new user if the user does not exist
	CreateIfNotExists bool `json:"createIfNotExists"`
	AdditionalProperties map[string]interface{}
}

type _AddUserToInfrastructure AddUserToInfrastructure

// NewAddUserToInfrastructure instantiates a new AddUserToInfrastructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUserToInfrastructure(userEmail string, createIfNotExists bool) *AddUserToInfrastructure {
	this := AddUserToInfrastructure{}
	this.UserEmail = userEmail
	this.CreateIfNotExists = createIfNotExists
	return &this
}

// NewAddUserToInfrastructureWithDefaults instantiates a new AddUserToInfrastructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUserToInfrastructureWithDefaults() *AddUserToInfrastructure {
	this := AddUserToInfrastructure{}
	var createIfNotExists bool = false
	this.CreateIfNotExists = createIfNotExists
	return &this
}

// GetUserEmail returns the UserEmail field value
func (o *AddUserToInfrastructure) GetUserEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value
// and a boolean to check if the value has been set.
func (o *AddUserToInfrastructure) GetUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserEmail, true
}

// SetUserEmail sets field value
func (o *AddUserToInfrastructure) SetUserEmail(v string) {
	o.UserEmail = v
}

// GetCreateIfNotExists returns the CreateIfNotExists field value
func (o *AddUserToInfrastructure) GetCreateIfNotExists() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CreateIfNotExists
}

// GetCreateIfNotExistsOk returns a tuple with the CreateIfNotExists field value
// and a boolean to check if the value has been set.
func (o *AddUserToInfrastructure) GetCreateIfNotExistsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreateIfNotExists, true
}

// SetCreateIfNotExists sets field value
func (o *AddUserToInfrastructure) SetCreateIfNotExists(v bool) {
	o.CreateIfNotExists = v
}

func (o AddUserToInfrastructure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddUserToInfrastructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userEmail"] = o.UserEmail
	toSerialize["createIfNotExists"] = o.CreateIfNotExists

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AddUserToInfrastructure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userEmail",
		"createIfNotExists",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddUserToInfrastructure := _AddUserToInfrastructure{}

	err = json.Unmarshal(data, &varAddUserToInfrastructure)

	if err != nil {
		return err
	}

	*o = AddUserToInfrastructure(varAddUserToInfrastructure)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "userEmail")
		delete(additionalProperties, "createIfNotExists")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAddUserToInfrastructure struct {
	value *AddUserToInfrastructure
	isSet bool
}

func (v NullableAddUserToInfrastructure) Get() *AddUserToInfrastructure {
	return v.value
}

func (v *NullableAddUserToInfrastructure) Set(val *AddUserToInfrastructure) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUserToInfrastructure) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUserToInfrastructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUserToInfrastructure(val *AddUserToInfrastructure) *NullableAddUserToInfrastructure {
	return &NullableAddUserToInfrastructure{value: val, isSet: true}
}

func (v NullableAddUserToInfrastructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUserToInfrastructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


