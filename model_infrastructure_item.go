/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InfrastructureItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureItem{}

// InfrastructureItem struct for InfrastructureItem
type InfrastructureItem struct {
	// Infrastructure ID
	InfrastructureId float32 `json:"infrastructureId"`
	// Infrastructure label
	InfrastructureLabel string `json:"infrastructureLabel"`
	// Infrastructure service status
	InfrastructureServiceStatus string `json:"infrastructureServiceStatus"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureItem InfrastructureItem

// NewInfrastructureItem instantiates a new InfrastructureItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureItem(infrastructureId float32, infrastructureLabel string, infrastructureServiceStatus string) *InfrastructureItem {
	this := InfrastructureItem{}
	this.InfrastructureId = infrastructureId
	this.InfrastructureLabel = infrastructureLabel
	this.InfrastructureServiceStatus = infrastructureServiceStatus
	return &this
}

// NewInfrastructureItemWithDefaults instantiates a new InfrastructureItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureItemWithDefaults() *InfrastructureItem {
	this := InfrastructureItem{}
	return &this
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *InfrastructureItem) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *InfrastructureItem) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *InfrastructureItem) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetInfrastructureLabel returns the InfrastructureLabel field value
func (o *InfrastructureItem) GetInfrastructureLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InfrastructureLabel
}

// GetInfrastructureLabelOk returns a tuple with the InfrastructureLabel field value
// and a boolean to check if the value has been set.
func (o *InfrastructureItem) GetInfrastructureLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureLabel, true
}

// SetInfrastructureLabel sets field value
func (o *InfrastructureItem) SetInfrastructureLabel(v string) {
	o.InfrastructureLabel = v
}

// GetInfrastructureServiceStatus returns the InfrastructureServiceStatus field value
func (o *InfrastructureItem) GetInfrastructureServiceStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InfrastructureServiceStatus
}

// GetInfrastructureServiceStatusOk returns a tuple with the InfrastructureServiceStatus field value
// and a boolean to check if the value has been set.
func (o *InfrastructureItem) GetInfrastructureServiceStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureServiceStatus, true
}

// SetInfrastructureServiceStatus sets field value
func (o *InfrastructureItem) SetInfrastructureServiceStatus(v string) {
	o.InfrastructureServiceStatus = v
}

func (o InfrastructureItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["infrastructureLabel"] = o.InfrastructureLabel
	toSerialize["infrastructureServiceStatus"] = o.InfrastructureServiceStatus

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"infrastructureId",
		"infrastructureLabel",
		"infrastructureServiceStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfrastructureItem := _InfrastructureItem{}

	err = json.Unmarshal(data, &varInfrastructureItem)

	if err != nil {
		return err
	}

	*o = InfrastructureItem(varInfrastructureItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "infrastructureLabel")
		delete(additionalProperties, "infrastructureServiceStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureItem struct {
	value *InfrastructureItem
	isSet bool
}

func (v NullableInfrastructureItem) Get() *InfrastructureItem {
	return v.value
}

func (v *NullableInfrastructureItem) Set(val *InfrastructureItem) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureItem) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureItem(val *InfrastructureItem) *NullableInfrastructureItem {
	return &NullableInfrastructureItem{value: val, isSet: true}
}

func (v NullableInfrastructureItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


