/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateEndpointInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEndpointInterface{}

// UpdateEndpointInterface struct for UpdateEndpointInterface
type UpdateEndpointInterface struct {
	// Device interface mac address
	MacAddress *string `json:"macAddress,omitempty"`
	// Network device interface id
	NetworkDeviceInterfaceId *float32 `json:"networkDeviceInterfaceId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateEndpointInterface UpdateEndpointInterface

// NewUpdateEndpointInterface instantiates a new UpdateEndpointInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEndpointInterface() *UpdateEndpointInterface {
	this := UpdateEndpointInterface{}
	return &this
}

// NewUpdateEndpointInterfaceWithDefaults instantiates a new UpdateEndpointInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEndpointInterfaceWithDefaults() *UpdateEndpointInterface {
	this := UpdateEndpointInterface{}
	return &this
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *UpdateEndpointInterface) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpointInterface) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *UpdateEndpointInterface) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *UpdateEndpointInterface) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetNetworkDeviceInterfaceId returns the NetworkDeviceInterfaceId field value if set, zero value otherwise.
func (o *UpdateEndpointInterface) GetNetworkDeviceInterfaceId() float32 {
	if o == nil || IsNil(o.NetworkDeviceInterfaceId) {
		var ret float32
		return ret
	}
	return *o.NetworkDeviceInterfaceId
}

// GetNetworkDeviceInterfaceIdOk returns a tuple with the NetworkDeviceInterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEndpointInterface) GetNetworkDeviceInterfaceIdOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkDeviceInterfaceId) {
		return nil, false
	}
	return o.NetworkDeviceInterfaceId, true
}

// HasNetworkDeviceInterfaceId returns a boolean if a field has been set.
func (o *UpdateEndpointInterface) HasNetworkDeviceInterfaceId() bool {
	if o != nil && !IsNil(o.NetworkDeviceInterfaceId) {
		return true
	}

	return false
}

// SetNetworkDeviceInterfaceId gets a reference to the given float32 and assigns it to the NetworkDeviceInterfaceId field.
func (o *UpdateEndpointInterface) SetNetworkDeviceInterfaceId(v float32) {
	o.NetworkDeviceInterfaceId = &v
}

func (o UpdateEndpointInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEndpointInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MacAddress) {
		toSerialize["macAddress"] = o.MacAddress
	}
	if !IsNil(o.NetworkDeviceInterfaceId) {
		toSerialize["networkDeviceInterfaceId"] = o.NetworkDeviceInterfaceId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateEndpointInterface) UnmarshalJSON(data []byte) (err error) {
	varUpdateEndpointInterface := _UpdateEndpointInterface{}

	err = json.Unmarshal(data, &varUpdateEndpointInterface)

	if err != nil {
		return err
	}

	*o = UpdateEndpointInterface(varUpdateEndpointInterface)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "macAddress")
		delete(additionalProperties, "networkDeviceInterfaceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateEndpointInterface struct {
	value *UpdateEndpointInterface
	isSet bool
}

func (v NullableUpdateEndpointInterface) Get() *UpdateEndpointInterface {
	return v.value
}

func (v *NullableUpdateEndpointInterface) Set(val *UpdateEndpointInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEndpointInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEndpointInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEndpointInterface(val *UpdateEndpointInterface) *NullableUpdateEndpointInterface {
	return &NullableUpdateEndpointInterface{value: val, isSet: true}
}

func (v NullableUpdateEndpointInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEndpointInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


