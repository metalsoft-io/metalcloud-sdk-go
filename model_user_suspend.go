/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UserSuspend type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSuspend{}

// UserSuspend struct for UserSuspend
type UserSuspend struct {
	// The suspend reason of the user
	SuspendReason string `json:"suspendReason"`
	// The public comment for the suspension
	SuspendReasonPublicComment string `json:"suspendReasonPublicComment"`
	// The private comment for the suspension
	SuspendReasonPrivateComment *string `json:"suspendReasonPrivateComment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserSuspend UserSuspend

// NewUserSuspend instantiates a new UserSuspend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSuspend(suspendReason string, suspendReasonPublicComment string) *UserSuspend {
	this := UserSuspend{}
	this.SuspendReason = suspendReason
	this.SuspendReasonPublicComment = suspendReasonPublicComment
	return &this
}

// NewUserSuspendWithDefaults instantiates a new UserSuspend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSuspendWithDefaults() *UserSuspend {
	this := UserSuspend{}
	return &this
}

// GetSuspendReason returns the SuspendReason field value
func (o *UserSuspend) GetSuspendReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuspendReason
}

// GetSuspendReasonOk returns a tuple with the SuspendReason field value
// and a boolean to check if the value has been set.
func (o *UserSuspend) GetSuspendReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuspendReason, true
}

// SetSuspendReason sets field value
func (o *UserSuspend) SetSuspendReason(v string) {
	o.SuspendReason = v
}

// GetSuspendReasonPublicComment returns the SuspendReasonPublicComment field value
func (o *UserSuspend) GetSuspendReasonPublicComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuspendReasonPublicComment
}

// GetSuspendReasonPublicCommentOk returns a tuple with the SuspendReasonPublicComment field value
// and a boolean to check if the value has been set.
func (o *UserSuspend) GetSuspendReasonPublicCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuspendReasonPublicComment, true
}

// SetSuspendReasonPublicComment sets field value
func (o *UserSuspend) SetSuspendReasonPublicComment(v string) {
	o.SuspendReasonPublicComment = v
}

// GetSuspendReasonPrivateComment returns the SuspendReasonPrivateComment field value if set, zero value otherwise.
func (o *UserSuspend) GetSuspendReasonPrivateComment() string {
	if o == nil || IsNil(o.SuspendReasonPrivateComment) {
		var ret string
		return ret
	}
	return *o.SuspendReasonPrivateComment
}

// GetSuspendReasonPrivateCommentOk returns a tuple with the SuspendReasonPrivateComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSuspend) GetSuspendReasonPrivateCommentOk() (*string, bool) {
	if o == nil || IsNil(o.SuspendReasonPrivateComment) {
		return nil, false
	}
	return o.SuspendReasonPrivateComment, true
}

// HasSuspendReasonPrivateComment returns a boolean if a field has been set.
func (o *UserSuspend) HasSuspendReasonPrivateComment() bool {
	if o != nil && !IsNil(o.SuspendReasonPrivateComment) {
		return true
	}

	return false
}

// SetSuspendReasonPrivateComment gets a reference to the given string and assigns it to the SuspendReasonPrivateComment field.
func (o *UserSuspend) SetSuspendReasonPrivateComment(v string) {
	o.SuspendReasonPrivateComment = &v
}

func (o UserSuspend) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSuspend) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["suspendReason"] = o.SuspendReason
	toSerialize["suspendReasonPublicComment"] = o.SuspendReasonPublicComment
	if !IsNil(o.SuspendReasonPrivateComment) {
		toSerialize["suspendReasonPrivateComment"] = o.SuspendReasonPrivateComment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserSuspend) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"suspendReason",
		"suspendReasonPublicComment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserSuspend := _UserSuspend{}

	err = json.Unmarshal(data, &varUserSuspend)

	if err != nil {
		return err
	}

	*o = UserSuspend(varUserSuspend)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "suspendReason")
		delete(additionalProperties, "suspendReasonPublicComment")
		delete(additionalProperties, "suspendReasonPrivateComment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserSuspend struct {
	value *UserSuspend
	isSet bool
}

func (v NullableUserSuspend) Get() *UserSuspend {
	return v.value
}

func (v *NullableUserSuspend) Set(val *UserSuspend) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSuspend) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSuspend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSuspend(val *UserSuspend) *NullableUserSuspend {
	return &NullableUserSuspend{value: val, isSet: true}
}

func (v NullableUserSuspend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSuspend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


