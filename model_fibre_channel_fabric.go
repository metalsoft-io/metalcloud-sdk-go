/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the FibreChannelFabric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FibreChannelFabric{}

// FibreChannelFabric struct for FibreChannelFabric
type FibreChannelFabric struct {
	// The type of network fabric
	FabricType FabricType `json:"fabricType"`
	// Unique identifier for the default network profile. Must be a positive integer (minimum: 1) corresponding to an existing profile.
	DefaultNetworkProfileId *int32 `json:"defaultNetworkProfileId,omitempty"`
	// Enables gNMI monitoring for telemetry data collection using the gNMI protocol.
	GnmiMonitoringEnabled *bool `json:"gnmiMonitoringEnabled,omitempty"`
	// Enables syslog monitoring for capturing system logs for diagnostics and troubleshooting.
	SyslogMonitoringEnabled *bool `json:"syslogMonitoringEnabled,omitempty"`
	// Enables zero-touch provisioning for automatic device configuration.
	ZeroTouchEnabled *bool `json:"zeroTouchEnabled,omitempty"`
	// VSAN ID for the Fibre Channel fabric
	VsanId *int32 `json:"vsanId,omitempty"`
	// Fabric topology type
	TopologyType FabricTopologyType `json:"topologyType"`
	// Maximum transmission unit (MTU) size in bytes
	Mtu *float32 `json:"mtu,omitempty"`
	// Zoning configuration for the fabric
	ZoningConfiguration map[string]interface{} `json:"zoningConfiguration,omitempty"`
	// Interoperability mode for multi-vendor environments
	InteropMode *string `json:"interopMode,omitempty"`
	// Quality of Service (QoS) configuration
	QosConfiguration map[string]interface{} `json:"qosConfiguration,omitempty"`
	// Trunking configuration for ISLs (Inter-Switch Links)
	TrunkingConfiguration map[string]interface{} `json:"trunkingConfiguration,omitempty"`
	// Port channel configuration for ISLs
	PortChannelConfiguration map[string]interface{} `json:"portChannelConfiguration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FibreChannelFabric FibreChannelFabric

// NewFibreChannelFabric instantiates a new FibreChannelFabric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFibreChannelFabric(fabricType FabricType, topologyType FabricTopologyType) *FibreChannelFabric {
	this := FibreChannelFabric{}
	this.FabricType = fabricType
	this.TopologyType = topologyType
	return &this
}

// NewFibreChannelFabricWithDefaults instantiates a new FibreChannelFabric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFibreChannelFabricWithDefaults() *FibreChannelFabric {
	this := FibreChannelFabric{}
	return &this
}

// GetFabricType returns the FabricType field value
func (o *FibreChannelFabric) GetFabricType() FabricType {
	if o == nil {
		var ret FabricType
		return ret
	}

	return o.FabricType
}

// GetFabricTypeOk returns a tuple with the FabricType field value
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetFabricTypeOk() (*FabricType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FabricType, true
}

// SetFabricType sets field value
func (o *FibreChannelFabric) SetFabricType(v FabricType) {
	o.FabricType = v
}

// GetDefaultNetworkProfileId returns the DefaultNetworkProfileId field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetDefaultNetworkProfileId() int32 {
	if o == nil || IsNil(o.DefaultNetworkProfileId) {
		var ret int32
		return ret
	}
	return *o.DefaultNetworkProfileId
}

// GetDefaultNetworkProfileIdOk returns a tuple with the DefaultNetworkProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetDefaultNetworkProfileIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultNetworkProfileId) {
		return nil, false
	}
	return o.DefaultNetworkProfileId, true
}

// HasDefaultNetworkProfileId returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasDefaultNetworkProfileId() bool {
	if o != nil && !IsNil(o.DefaultNetworkProfileId) {
		return true
	}

	return false
}

// SetDefaultNetworkProfileId gets a reference to the given int32 and assigns it to the DefaultNetworkProfileId field.
func (o *FibreChannelFabric) SetDefaultNetworkProfileId(v int32) {
	o.DefaultNetworkProfileId = &v
}

// GetGnmiMonitoringEnabled returns the GnmiMonitoringEnabled field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetGnmiMonitoringEnabled() bool {
	if o == nil || IsNil(o.GnmiMonitoringEnabled) {
		var ret bool
		return ret
	}
	return *o.GnmiMonitoringEnabled
}

// GetGnmiMonitoringEnabledOk returns a tuple with the GnmiMonitoringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetGnmiMonitoringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GnmiMonitoringEnabled) {
		return nil, false
	}
	return o.GnmiMonitoringEnabled, true
}

// HasGnmiMonitoringEnabled returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasGnmiMonitoringEnabled() bool {
	if o != nil && !IsNil(o.GnmiMonitoringEnabled) {
		return true
	}

	return false
}

// SetGnmiMonitoringEnabled gets a reference to the given bool and assigns it to the GnmiMonitoringEnabled field.
func (o *FibreChannelFabric) SetGnmiMonitoringEnabled(v bool) {
	o.GnmiMonitoringEnabled = &v
}

// GetSyslogMonitoringEnabled returns the SyslogMonitoringEnabled field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetSyslogMonitoringEnabled() bool {
	if o == nil || IsNil(o.SyslogMonitoringEnabled) {
		var ret bool
		return ret
	}
	return *o.SyslogMonitoringEnabled
}

// GetSyslogMonitoringEnabledOk returns a tuple with the SyslogMonitoringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetSyslogMonitoringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SyslogMonitoringEnabled) {
		return nil, false
	}
	return o.SyslogMonitoringEnabled, true
}

// HasSyslogMonitoringEnabled returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasSyslogMonitoringEnabled() bool {
	if o != nil && !IsNil(o.SyslogMonitoringEnabled) {
		return true
	}

	return false
}

// SetSyslogMonitoringEnabled gets a reference to the given bool and assigns it to the SyslogMonitoringEnabled field.
func (o *FibreChannelFabric) SetSyslogMonitoringEnabled(v bool) {
	o.SyslogMonitoringEnabled = &v
}

// GetZeroTouchEnabled returns the ZeroTouchEnabled field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetZeroTouchEnabled() bool {
	if o == nil || IsNil(o.ZeroTouchEnabled) {
		var ret bool
		return ret
	}
	return *o.ZeroTouchEnabled
}

// GetZeroTouchEnabledOk returns a tuple with the ZeroTouchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetZeroTouchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ZeroTouchEnabled) {
		return nil, false
	}
	return o.ZeroTouchEnabled, true
}

// HasZeroTouchEnabled returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasZeroTouchEnabled() bool {
	if o != nil && !IsNil(o.ZeroTouchEnabled) {
		return true
	}

	return false
}

// SetZeroTouchEnabled gets a reference to the given bool and assigns it to the ZeroTouchEnabled field.
func (o *FibreChannelFabric) SetZeroTouchEnabled(v bool) {
	o.ZeroTouchEnabled = &v
}

// GetVsanId returns the VsanId field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetVsanId() int32 {
	if o == nil || IsNil(o.VsanId) {
		var ret int32
		return ret
	}
	return *o.VsanId
}

// GetVsanIdOk returns a tuple with the VsanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetVsanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VsanId) {
		return nil, false
	}
	return o.VsanId, true
}

// HasVsanId returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasVsanId() bool {
	if o != nil && !IsNil(o.VsanId) {
		return true
	}

	return false
}

// SetVsanId gets a reference to the given int32 and assigns it to the VsanId field.
func (o *FibreChannelFabric) SetVsanId(v int32) {
	o.VsanId = &v
}

// GetTopologyType returns the TopologyType field value
func (o *FibreChannelFabric) GetTopologyType() FabricTopologyType {
	if o == nil {
		var ret FabricTopologyType
		return ret
	}

	return o.TopologyType
}

// GetTopologyTypeOk returns a tuple with the TopologyType field value
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetTopologyTypeOk() (*FabricTopologyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopologyType, true
}

// SetTopologyType sets field value
func (o *FibreChannelFabric) SetTopologyType(v FabricTopologyType) {
	o.TopologyType = v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetMtu() float32 {
	if o == nil || IsNil(o.Mtu) {
		var ret float32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetMtuOk() (*float32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given float32 and assigns it to the Mtu field.
func (o *FibreChannelFabric) SetMtu(v float32) {
	o.Mtu = &v
}

// GetZoningConfiguration returns the ZoningConfiguration field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetZoningConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.ZoningConfiguration) {
		var ret map[string]interface{}
		return ret
	}
	return o.ZoningConfiguration
}

// GetZoningConfigurationOk returns a tuple with the ZoningConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetZoningConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ZoningConfiguration) {
		return map[string]interface{}{}, false
	}
	return o.ZoningConfiguration, true
}

// HasZoningConfiguration returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasZoningConfiguration() bool {
	if o != nil && !IsNil(o.ZoningConfiguration) {
		return true
	}

	return false
}

// SetZoningConfiguration gets a reference to the given map[string]interface{} and assigns it to the ZoningConfiguration field.
func (o *FibreChannelFabric) SetZoningConfiguration(v map[string]interface{}) {
	o.ZoningConfiguration = v
}

// GetInteropMode returns the InteropMode field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetInteropMode() string {
	if o == nil || IsNil(o.InteropMode) {
		var ret string
		return ret
	}
	return *o.InteropMode
}

// GetInteropModeOk returns a tuple with the InteropMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetInteropModeOk() (*string, bool) {
	if o == nil || IsNil(o.InteropMode) {
		return nil, false
	}
	return o.InteropMode, true
}

// HasInteropMode returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasInteropMode() bool {
	if o != nil && !IsNil(o.InteropMode) {
		return true
	}

	return false
}

// SetInteropMode gets a reference to the given string and assigns it to the InteropMode field.
func (o *FibreChannelFabric) SetInteropMode(v string) {
	o.InteropMode = &v
}

// GetQosConfiguration returns the QosConfiguration field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetQosConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.QosConfiguration) {
		var ret map[string]interface{}
		return ret
	}
	return o.QosConfiguration
}

// GetQosConfigurationOk returns a tuple with the QosConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetQosConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.QosConfiguration) {
		return map[string]interface{}{}, false
	}
	return o.QosConfiguration, true
}

// HasQosConfiguration returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasQosConfiguration() bool {
	if o != nil && !IsNil(o.QosConfiguration) {
		return true
	}

	return false
}

// SetQosConfiguration gets a reference to the given map[string]interface{} and assigns it to the QosConfiguration field.
func (o *FibreChannelFabric) SetQosConfiguration(v map[string]interface{}) {
	o.QosConfiguration = v
}

// GetTrunkingConfiguration returns the TrunkingConfiguration field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetTrunkingConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.TrunkingConfiguration) {
		var ret map[string]interface{}
		return ret
	}
	return o.TrunkingConfiguration
}

// GetTrunkingConfigurationOk returns a tuple with the TrunkingConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetTrunkingConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TrunkingConfiguration) {
		return map[string]interface{}{}, false
	}
	return o.TrunkingConfiguration, true
}

// HasTrunkingConfiguration returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasTrunkingConfiguration() bool {
	if o != nil && !IsNil(o.TrunkingConfiguration) {
		return true
	}

	return false
}

// SetTrunkingConfiguration gets a reference to the given map[string]interface{} and assigns it to the TrunkingConfiguration field.
func (o *FibreChannelFabric) SetTrunkingConfiguration(v map[string]interface{}) {
	o.TrunkingConfiguration = v
}

// GetPortChannelConfiguration returns the PortChannelConfiguration field value if set, zero value otherwise.
func (o *FibreChannelFabric) GetPortChannelConfiguration() map[string]interface{} {
	if o == nil || IsNil(o.PortChannelConfiguration) {
		var ret map[string]interface{}
		return ret
	}
	return o.PortChannelConfiguration
}

// GetPortChannelConfigurationOk returns a tuple with the PortChannelConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FibreChannelFabric) GetPortChannelConfigurationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PortChannelConfiguration) {
		return map[string]interface{}{}, false
	}
	return o.PortChannelConfiguration, true
}

// HasPortChannelConfiguration returns a boolean if a field has been set.
func (o *FibreChannelFabric) HasPortChannelConfiguration() bool {
	if o != nil && !IsNil(o.PortChannelConfiguration) {
		return true
	}

	return false
}

// SetPortChannelConfiguration gets a reference to the given map[string]interface{} and assigns it to the PortChannelConfiguration field.
func (o *FibreChannelFabric) SetPortChannelConfiguration(v map[string]interface{}) {
	o.PortChannelConfiguration = v
}

func (o FibreChannelFabric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FibreChannelFabric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fabricType"] = o.FabricType
	if !IsNil(o.DefaultNetworkProfileId) {
		toSerialize["defaultNetworkProfileId"] = o.DefaultNetworkProfileId
	}
	if !IsNil(o.GnmiMonitoringEnabled) {
		toSerialize["gnmiMonitoringEnabled"] = o.GnmiMonitoringEnabled
	}
	if !IsNil(o.SyslogMonitoringEnabled) {
		toSerialize["syslogMonitoringEnabled"] = o.SyslogMonitoringEnabled
	}
	if !IsNil(o.ZeroTouchEnabled) {
		toSerialize["zeroTouchEnabled"] = o.ZeroTouchEnabled
	}
	if !IsNil(o.VsanId) {
		toSerialize["vsanId"] = o.VsanId
	}
	toSerialize["topologyType"] = o.TopologyType
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.ZoningConfiguration) {
		toSerialize["zoningConfiguration"] = o.ZoningConfiguration
	}
	if !IsNil(o.InteropMode) {
		toSerialize["interopMode"] = o.InteropMode
	}
	if !IsNil(o.QosConfiguration) {
		toSerialize["qosConfiguration"] = o.QosConfiguration
	}
	if !IsNil(o.TrunkingConfiguration) {
		toSerialize["trunkingConfiguration"] = o.TrunkingConfiguration
	}
	if !IsNil(o.PortChannelConfiguration) {
		toSerialize["portChannelConfiguration"] = o.PortChannelConfiguration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FibreChannelFabric) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fabricType",
		"topologyType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFibreChannelFabric := _FibreChannelFabric{}

	err = json.Unmarshal(data, &varFibreChannelFabric)

	if err != nil {
		return err
	}

	*o = FibreChannelFabric(varFibreChannelFabric)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fabricType")
		delete(additionalProperties, "defaultNetworkProfileId")
		delete(additionalProperties, "gnmiMonitoringEnabled")
		delete(additionalProperties, "syslogMonitoringEnabled")
		delete(additionalProperties, "zeroTouchEnabled")
		delete(additionalProperties, "vsanId")
		delete(additionalProperties, "topologyType")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "zoningConfiguration")
		delete(additionalProperties, "interopMode")
		delete(additionalProperties, "qosConfiguration")
		delete(additionalProperties, "trunkingConfiguration")
		delete(additionalProperties, "portChannelConfiguration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFibreChannelFabric struct {
	value *FibreChannelFabric
	isSet bool
}

func (v NullableFibreChannelFabric) Get() *FibreChannelFabric {
	return v.value
}

func (v *NullableFibreChannelFabric) Set(val *FibreChannelFabric) {
	v.value = val
	v.isSet = true
}

func (v NullableFibreChannelFabric) IsSet() bool {
	return v.isSet
}

func (v *NullableFibreChannelFabric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFibreChannelFabric(val *FibreChannelFabric) *NullableFibreChannelFabric {
	return &NullableFibreChannelFabric{value: val, isSet: true}
}

func (v NullableFibreChannelFabric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFibreChannelFabric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


