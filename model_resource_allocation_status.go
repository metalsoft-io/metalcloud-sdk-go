/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ResourceAllocationStatus the model 'ResourceAllocationStatus'
type ResourceAllocationStatus string

// List of ResourceAllocationStatus
const (
	RESOURCEALLOCATIONSTATUS_ALLOCATED ResourceAllocationStatus = "allocated"
	RESOURCEALLOCATIONSTATUS_PENDING_ALLOCATION ResourceAllocationStatus = "pending_allocation"
	RESOURCEALLOCATIONSTATUS_DELETING ResourceAllocationStatus = "deleting"
)

// All allowed values of ResourceAllocationStatus enum
var AllowedResourceAllocationStatusEnumValues = []ResourceAllocationStatus{
	"allocated",
	"pending_allocation",
	"deleting",
}

func (v *ResourceAllocationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceAllocationStatus(value)
	for _, existing := range AllowedResourceAllocationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceAllocationStatus", value)
}

// NewResourceAllocationStatusFromValue returns a pointer to a valid ResourceAllocationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceAllocationStatusFromValue(v string) (*ResourceAllocationStatus, error) {
	ev := ResourceAllocationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceAllocationStatus: valid values are %v", v, AllowedResourceAllocationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceAllocationStatus) IsValid() bool {
	for _, existing := range AllowedResourceAllocationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceAllocationStatus value
func (v ResourceAllocationStatus) Ptr() *ResourceAllocationStatus {
	return &v
}

type NullableResourceAllocationStatus struct {
	value *ResourceAllocationStatus
	isSet bool
}

func (v NullableResourceAllocationStatus) Get() *ResourceAllocationStatus {
	return v.value
}

func (v *NullableResourceAllocationStatus) Set(val *ResourceAllocationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceAllocationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceAllocationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceAllocationStatus(val *ResourceAllocationStatus) *NullableResourceAllocationStatus {
	return &NullableResourceAllocationStatus{value: val, isSet: true}
}

func (v NullableResourceAllocationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceAllocationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

