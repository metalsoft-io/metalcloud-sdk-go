/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateUserPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserPermissions{}

// UpdateUserPermissions struct for UpdateUserPermissions
type UpdateUserPermissions struct {
	// Admin password reveal permissions
	AdminPasswordRevealPermissions *AdminPasswordRevealPermissions `json:"adminPasswordRevealPermissions,omitempty"`
	// Special permissions
	SpecialPermissions *SpecialPermissions `json:"specialPermissions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateUserPermissions UpdateUserPermissions

// NewUpdateUserPermissions instantiates a new UpdateUserPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserPermissions() *UpdateUserPermissions {
	this := UpdateUserPermissions{}
	return &this
}

// NewUpdateUserPermissionsWithDefaults instantiates a new UpdateUserPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserPermissionsWithDefaults() *UpdateUserPermissions {
	this := UpdateUserPermissions{}
	return &this
}

// GetAdminPasswordRevealPermissions returns the AdminPasswordRevealPermissions field value if set, zero value otherwise.
func (o *UpdateUserPermissions) GetAdminPasswordRevealPermissions() AdminPasswordRevealPermissions {
	if o == nil || IsNil(o.AdminPasswordRevealPermissions) {
		var ret AdminPasswordRevealPermissions
		return ret
	}
	return *o.AdminPasswordRevealPermissions
}

// GetAdminPasswordRevealPermissionsOk returns a tuple with the AdminPasswordRevealPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPermissions) GetAdminPasswordRevealPermissionsOk() (*AdminPasswordRevealPermissions, bool) {
	if o == nil || IsNil(o.AdminPasswordRevealPermissions) {
		return nil, false
	}
	return o.AdminPasswordRevealPermissions, true
}

// HasAdminPasswordRevealPermissions returns a boolean if a field has been set.
func (o *UpdateUserPermissions) HasAdminPasswordRevealPermissions() bool {
	if o != nil && !IsNil(o.AdminPasswordRevealPermissions) {
		return true
	}

	return false
}

// SetAdminPasswordRevealPermissions gets a reference to the given AdminPasswordRevealPermissions and assigns it to the AdminPasswordRevealPermissions field.
func (o *UpdateUserPermissions) SetAdminPasswordRevealPermissions(v AdminPasswordRevealPermissions) {
	o.AdminPasswordRevealPermissions = &v
}

// GetSpecialPermissions returns the SpecialPermissions field value if set, zero value otherwise.
func (o *UpdateUserPermissions) GetSpecialPermissions() SpecialPermissions {
	if o == nil || IsNil(o.SpecialPermissions) {
		var ret SpecialPermissions
		return ret
	}
	return *o.SpecialPermissions
}

// GetSpecialPermissionsOk returns a tuple with the SpecialPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserPermissions) GetSpecialPermissionsOk() (*SpecialPermissions, bool) {
	if o == nil || IsNil(o.SpecialPermissions) {
		return nil, false
	}
	return o.SpecialPermissions, true
}

// HasSpecialPermissions returns a boolean if a field has been set.
func (o *UpdateUserPermissions) HasSpecialPermissions() bool {
	if o != nil && !IsNil(o.SpecialPermissions) {
		return true
	}

	return false
}

// SetSpecialPermissions gets a reference to the given SpecialPermissions and assigns it to the SpecialPermissions field.
func (o *UpdateUserPermissions) SetSpecialPermissions(v SpecialPermissions) {
	o.SpecialPermissions = &v
}

func (o UpdateUserPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminPasswordRevealPermissions) {
		toSerialize["adminPasswordRevealPermissions"] = o.AdminPasswordRevealPermissions
	}
	if !IsNil(o.SpecialPermissions) {
		toSerialize["specialPermissions"] = o.SpecialPermissions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateUserPermissions) UnmarshalJSON(data []byte) (err error) {
	varUpdateUserPermissions := _UpdateUserPermissions{}

	err = json.Unmarshal(data, &varUpdateUserPermissions)

	if err != nil {
		return err
	}

	*o = UpdateUserPermissions(varUpdateUserPermissions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "adminPasswordRevealPermissions")
		delete(additionalProperties, "specialPermissions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateUserPermissions struct {
	value *UpdateUserPermissions
	isSet bool
}

func (v NullableUpdateUserPermissions) Get() *UpdateUserPermissions {
	return v.value
}

func (v *NullableUpdateUserPermissions) Set(val *UpdateUserPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserPermissions(val *UpdateUserPermissions) *NullableUpdateUserPermissions {
	return &NullableUpdateUserPermissions{value: val, isSet: true}
}

func (v NullableUpdateUserPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


