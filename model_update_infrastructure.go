/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateInfrastructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateInfrastructure{}

// UpdateInfrastructure struct for UpdateInfrastructure
type UpdateInfrastructure struct {
	Label *string `json:"label,omitempty"`
	// Custom variables in JSON format.
	CustomVariables map[string]interface{} `json:"customVariables,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateInfrastructure UpdateInfrastructure

// NewUpdateInfrastructure instantiates a new UpdateInfrastructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInfrastructure() *UpdateInfrastructure {
	this := UpdateInfrastructure{}
	return &this
}

// NewUpdateInfrastructureWithDefaults instantiates a new UpdateInfrastructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInfrastructureWithDefaults() *UpdateInfrastructure {
	this := UpdateInfrastructure{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UpdateInfrastructure) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInfrastructure) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UpdateInfrastructure) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *UpdateInfrastructure) SetLabel(v string) {
	o.Label = &v
}

// GetCustomVariables returns the CustomVariables field value if set, zero value otherwise.
func (o *UpdateInfrastructure) GetCustomVariables() map[string]interface{} {
	if o == nil || IsNil(o.CustomVariables) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomVariables
}

// GetCustomVariablesOk returns a tuple with the CustomVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInfrastructure) GetCustomVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomVariables) {
		return map[string]interface{}{}, false
	}
	return o.CustomVariables, true
}

// HasCustomVariables returns a boolean if a field has been set.
func (o *UpdateInfrastructure) HasCustomVariables() bool {
	if o != nil && !IsNil(o.CustomVariables) {
		return true
	}

	return false
}

// SetCustomVariables gets a reference to the given map[string]interface{} and assigns it to the CustomVariables field.
func (o *UpdateInfrastructure) SetCustomVariables(v map[string]interface{}) {
	o.CustomVariables = v
}

func (o UpdateInfrastructure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateInfrastructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.CustomVariables) {
		toSerialize["customVariables"] = o.CustomVariables
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateInfrastructure) UnmarshalJSON(data []byte) (err error) {
	varUpdateInfrastructure := _UpdateInfrastructure{}

	err = json.Unmarshal(data, &varUpdateInfrastructure)

	if err != nil {
		return err
	}

	*o = UpdateInfrastructure(varUpdateInfrastructure)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "customVariables")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateInfrastructure struct {
	value *UpdateInfrastructure
	isSet bool
}

func (v NullableUpdateInfrastructure) Get() *UpdateInfrastructure {
	return v.value
}

func (v *NullableUpdateInfrastructure) Set(val *UpdateInfrastructure) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInfrastructure) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInfrastructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInfrastructure(val *UpdateInfrastructure) *NullableUpdateInfrastructure {
	return &NullableUpdateInfrastructure{value: val, isSet: true}
}

func (v NullableUpdateInfrastructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInfrastructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


