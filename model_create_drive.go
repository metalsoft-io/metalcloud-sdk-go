/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateDrive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDrive{}

// CreateDrive struct for CreateDrive
type CreateDrive struct {
	// Disk size in MB for Drive
	SizeMb float32 `json:"sizeMb"`
	// Id of the Logical Network for the Drive.
	LogicalNetworkId *float32 `json:"logicalNetworkId,omitempty"`
	// Display name of the File Share.
	Label *string `json:"label,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateDrive CreateDrive

// NewCreateDrive instantiates a new CreateDrive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDrive(sizeMb float32) *CreateDrive {
	this := CreateDrive{}
	this.SizeMb = sizeMb
	return &this
}

// NewCreateDriveWithDefaults instantiates a new CreateDrive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDriveWithDefaults() *CreateDrive {
	this := CreateDrive{}
	return &this
}

// GetSizeMb returns the SizeMb field value
func (o *CreateDrive) GetSizeMb() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SizeMb
}

// GetSizeMbOk returns a tuple with the SizeMb field value
// and a boolean to check if the value has been set.
func (o *CreateDrive) GetSizeMbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeMb, true
}

// SetSizeMb sets field value
func (o *CreateDrive) SetSizeMb(v float32) {
	o.SizeMb = v
}

// GetLogicalNetworkId returns the LogicalNetworkId field value if set, zero value otherwise.
func (o *CreateDrive) GetLogicalNetworkId() float32 {
	if o == nil || IsNil(o.LogicalNetworkId) {
		var ret float32
		return ret
	}
	return *o.LogicalNetworkId
}

// GetLogicalNetworkIdOk returns a tuple with the LogicalNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDrive) GetLogicalNetworkIdOk() (*float32, bool) {
	if o == nil || IsNil(o.LogicalNetworkId) {
		return nil, false
	}
	return o.LogicalNetworkId, true
}

// HasLogicalNetworkId returns a boolean if a field has been set.
func (o *CreateDrive) HasLogicalNetworkId() bool {
	if o != nil && !IsNil(o.LogicalNetworkId) {
		return true
	}

	return false
}

// SetLogicalNetworkId gets a reference to the given float32 and assigns it to the LogicalNetworkId field.
func (o *CreateDrive) SetLogicalNetworkId(v float32) {
	o.LogicalNetworkId = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CreateDrive) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDrive) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CreateDrive) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CreateDrive) SetLabel(v string) {
	o.Label = &v
}

func (o CreateDrive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDrive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sizeMb"] = o.SizeMb
	if !IsNil(o.LogicalNetworkId) {
		toSerialize["logicalNetworkId"] = o.LogicalNetworkId
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateDrive) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sizeMb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDrive := _CreateDrive{}

	err = json.Unmarshal(data, &varCreateDrive)

	if err != nil {
		return err
	}

	*o = CreateDrive(varCreateDrive)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sizeMb")
		delete(additionalProperties, "logicalNetworkId")
		delete(additionalProperties, "label")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateDrive struct {
	value *CreateDrive
	isSet bool
}

func (v NullableCreateDrive) Get() *CreateDrive {
	return v.value
}

func (v *NullableCreateDrive) Set(val *CreateDrive) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDrive) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDrive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDrive(val *CreateDrive) *NullableCreateDrive {
	return &NullableCreateDrive{value: val, isSet: true}
}

func (v NullableCreateDrive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDrive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


