/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtensionDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionDefinition{}

// ExtensionDefinition struct for ExtensionDefinition
type ExtensionDefinition struct {
	// The kind of extension.
	Kind string `json:"kind"`
	// Schema version of the extension.
	SchemaVersion string `json:"schemaVersion"`
	// Name of the extension.
	Name string `json:"name"`
	// Label of the extension.
	Label string `json:"label"`
	// Type of the extension.
	ExtensionType string `json:"extensionType"`
	// Vendor of the extension.
	Vendor string `json:"vendor"`
	// Version of the extension.
	ExtensionVersion string `json:"extensionVersion"`
	// Description of the extension.
	Description *string `json:"description,omitempty"`
	// Icon of the extension.
	Icon string `json:"icon"`
	Dependencies ExtensionDependency `json:"dependencies"`
	// List of inputs for the platform service.
	Inputs []ExtensionInput `json:"inputs"`
	// List of outputs for the platform service.
	Outputs []ExtensionOutput `json:"outputs"`
	Infrastructure *ExtensionInfrastructure `json:"infrastructure,omitempty"`
	// List of assets for the platform service.
	Assets []ExtensionAsset `json:"assets"`
	OnCreate *ExtensionActions `json:"onCreate,omitempty"`
	OnEdit *ExtensionActions `json:"onEdit,omitempty"`
	OnDelete *ExtensionActions `json:"onDelete,omitempty"`
	// Tasks. Only for extensions of kind action
	Tasks []ExtensionTask `json:"tasks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionDefinition ExtensionDefinition

// NewExtensionDefinition instantiates a new ExtensionDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionDefinition(kind string, schemaVersion string, name string, label string, extensionType string, vendor string, extensionVersion string, icon string, dependencies ExtensionDependency, inputs []ExtensionInput, outputs []ExtensionOutput, assets []ExtensionAsset) *ExtensionDefinition {
	this := ExtensionDefinition{}
	this.Kind = kind
	this.SchemaVersion = schemaVersion
	this.Name = name
	this.Label = label
	this.ExtensionType = extensionType
	this.Vendor = vendor
	this.ExtensionVersion = extensionVersion
	this.Icon = icon
	this.Dependencies = dependencies
	this.Inputs = inputs
	this.Outputs = outputs
	this.Assets = assets
	return &this
}

// NewExtensionDefinitionWithDefaults instantiates a new ExtensionDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionDefinitionWithDefaults() *ExtensionDefinition {
	this := ExtensionDefinition{}
	return &this
}

// GetKind returns the Kind field value
func (o *ExtensionDefinition) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ExtensionDefinition) SetKind(v string) {
	o.Kind = v
}

// GetSchemaVersion returns the SchemaVersion field value
func (o *ExtensionDefinition) GetSchemaVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchemaVersion, true
}

// SetSchemaVersion sets field value
func (o *ExtensionDefinition) SetSchemaVersion(v string) {
	o.SchemaVersion = v
}

// GetName returns the Name field value
func (o *ExtensionDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExtensionDefinition) SetName(v string) {
	o.Name = v
}

// GetLabel returns the Label field value
func (o *ExtensionDefinition) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ExtensionDefinition) SetLabel(v string) {
	o.Label = v
}

// GetExtensionType returns the ExtensionType field value
func (o *ExtensionDefinition) GetExtensionType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExtensionType
}

// GetExtensionTypeOk returns a tuple with the ExtensionType field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetExtensionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtensionType, true
}

// SetExtensionType sets field value
func (o *ExtensionDefinition) SetExtensionType(v string) {
	o.ExtensionType = v
}

// GetVendor returns the Vendor field value
func (o *ExtensionDefinition) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *ExtensionDefinition) SetVendor(v string) {
	o.Vendor = v
}

// GetExtensionVersion returns the ExtensionVersion field value
func (o *ExtensionDefinition) GetExtensionVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExtensionVersion
}

// GetExtensionVersionOk returns a tuple with the ExtensionVersion field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetExtensionVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtensionVersion, true
}

// SetExtensionVersion sets field value
func (o *ExtensionDefinition) SetExtensionVersion(v string) {
	o.ExtensionVersion = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExtensionDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExtensionDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExtensionDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value
func (o *ExtensionDefinition) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *ExtensionDefinition) SetIcon(v string) {
	o.Icon = v
}

// GetDependencies returns the Dependencies field value
func (o *ExtensionDefinition) GetDependencies() ExtensionDependency {
	if o == nil {
		var ret ExtensionDependency
		return ret
	}

	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetDependenciesOk() (*ExtensionDependency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dependencies, true
}

// SetDependencies sets field value
func (o *ExtensionDefinition) SetDependencies(v ExtensionDependency) {
	o.Dependencies = v
}

// GetInputs returns the Inputs field value
func (o *ExtensionDefinition) GetInputs() []ExtensionInput {
	if o == nil {
		var ret []ExtensionInput
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetInputsOk() ([]ExtensionInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *ExtensionDefinition) SetInputs(v []ExtensionInput) {
	o.Inputs = v
}

// GetOutputs returns the Outputs field value
func (o *ExtensionDefinition) GetOutputs() []ExtensionOutput {
	if o == nil {
		var ret []ExtensionOutput
		return ret
	}

	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetOutputsOk() ([]ExtensionOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Outputs, true
}

// SetOutputs sets field value
func (o *ExtensionDefinition) SetOutputs(v []ExtensionOutput) {
	o.Outputs = v
}

// GetInfrastructure returns the Infrastructure field value if set, zero value otherwise.
func (o *ExtensionDefinition) GetInfrastructure() ExtensionInfrastructure {
	if o == nil || IsNil(o.Infrastructure) {
		var ret ExtensionInfrastructure
		return ret
	}
	return *o.Infrastructure
}

// GetInfrastructureOk returns a tuple with the Infrastructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetInfrastructureOk() (*ExtensionInfrastructure, bool) {
	if o == nil || IsNil(o.Infrastructure) {
		return nil, false
	}
	return o.Infrastructure, true
}

// HasInfrastructure returns a boolean if a field has been set.
func (o *ExtensionDefinition) HasInfrastructure() bool {
	if o != nil && !IsNil(o.Infrastructure) {
		return true
	}

	return false
}

// SetInfrastructure gets a reference to the given ExtensionInfrastructure and assigns it to the Infrastructure field.
func (o *ExtensionDefinition) SetInfrastructure(v ExtensionInfrastructure) {
	o.Infrastructure = &v
}

// GetAssets returns the Assets field value
func (o *ExtensionDefinition) GetAssets() []ExtensionAsset {
	if o == nil {
		var ret []ExtensionAsset
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetAssetsOk() ([]ExtensionAsset, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assets, true
}

// SetAssets sets field value
func (o *ExtensionDefinition) SetAssets(v []ExtensionAsset) {
	o.Assets = v
}

// GetOnCreate returns the OnCreate field value if set, zero value otherwise.
func (o *ExtensionDefinition) GetOnCreate() ExtensionActions {
	if o == nil || IsNil(o.OnCreate) {
		var ret ExtensionActions
		return ret
	}
	return *o.OnCreate
}

// GetOnCreateOk returns a tuple with the OnCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetOnCreateOk() (*ExtensionActions, bool) {
	if o == nil || IsNil(o.OnCreate) {
		return nil, false
	}
	return o.OnCreate, true
}

// HasOnCreate returns a boolean if a field has been set.
func (o *ExtensionDefinition) HasOnCreate() bool {
	if o != nil && !IsNil(o.OnCreate) {
		return true
	}

	return false
}

// SetOnCreate gets a reference to the given ExtensionActions and assigns it to the OnCreate field.
func (o *ExtensionDefinition) SetOnCreate(v ExtensionActions) {
	o.OnCreate = &v
}

// GetOnEdit returns the OnEdit field value if set, zero value otherwise.
func (o *ExtensionDefinition) GetOnEdit() ExtensionActions {
	if o == nil || IsNil(o.OnEdit) {
		var ret ExtensionActions
		return ret
	}
	return *o.OnEdit
}

// GetOnEditOk returns a tuple with the OnEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetOnEditOk() (*ExtensionActions, bool) {
	if o == nil || IsNil(o.OnEdit) {
		return nil, false
	}
	return o.OnEdit, true
}

// HasOnEdit returns a boolean if a field has been set.
func (o *ExtensionDefinition) HasOnEdit() bool {
	if o != nil && !IsNil(o.OnEdit) {
		return true
	}

	return false
}

// SetOnEdit gets a reference to the given ExtensionActions and assigns it to the OnEdit field.
func (o *ExtensionDefinition) SetOnEdit(v ExtensionActions) {
	o.OnEdit = &v
}

// GetOnDelete returns the OnDelete field value if set, zero value otherwise.
func (o *ExtensionDefinition) GetOnDelete() ExtensionActions {
	if o == nil || IsNil(o.OnDelete) {
		var ret ExtensionActions
		return ret
	}
	return *o.OnDelete
}

// GetOnDeleteOk returns a tuple with the OnDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetOnDeleteOk() (*ExtensionActions, bool) {
	if o == nil || IsNil(o.OnDelete) {
		return nil, false
	}
	return o.OnDelete, true
}

// HasOnDelete returns a boolean if a field has been set.
func (o *ExtensionDefinition) HasOnDelete() bool {
	if o != nil && !IsNil(o.OnDelete) {
		return true
	}

	return false
}

// SetOnDelete gets a reference to the given ExtensionActions and assigns it to the OnDelete field.
func (o *ExtensionDefinition) SetOnDelete(v ExtensionActions) {
	o.OnDelete = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ExtensionDefinition) GetTasks() []ExtensionTask {
	if o == nil || IsNil(o.Tasks) {
		var ret []ExtensionTask
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDefinition) GetTasksOk() ([]ExtensionTask, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ExtensionDefinition) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []ExtensionTask and assigns it to the Tasks field.
func (o *ExtensionDefinition) SetTasks(v []ExtensionTask) {
	o.Tasks = v
}

func (o ExtensionDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["schemaVersion"] = o.SchemaVersion
	toSerialize["name"] = o.Name
	toSerialize["label"] = o.Label
	toSerialize["extensionType"] = o.ExtensionType
	toSerialize["vendor"] = o.Vendor
	toSerialize["extensionVersion"] = o.ExtensionVersion
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["icon"] = o.Icon
	toSerialize["dependencies"] = o.Dependencies
	toSerialize["inputs"] = o.Inputs
	toSerialize["outputs"] = o.Outputs
	if !IsNil(o.Infrastructure) {
		toSerialize["infrastructure"] = o.Infrastructure
	}
	toSerialize["assets"] = o.Assets
	if !IsNil(o.OnCreate) {
		toSerialize["onCreate"] = o.OnCreate
	}
	if !IsNil(o.OnEdit) {
		toSerialize["onEdit"] = o.OnEdit
	}
	if !IsNil(o.OnDelete) {
		toSerialize["onDelete"] = o.OnDelete
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"schemaVersion",
		"name",
		"label",
		"extensionType",
		"vendor",
		"extensionVersion",
		"icon",
		"dependencies",
		"inputs",
		"outputs",
		"assets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionDefinition := _ExtensionDefinition{}

	err = json.Unmarshal(data, &varExtensionDefinition)

	if err != nil {
		return err
	}

	*o = ExtensionDefinition(varExtensionDefinition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kind")
		delete(additionalProperties, "schemaVersion")
		delete(additionalProperties, "name")
		delete(additionalProperties, "label")
		delete(additionalProperties, "extensionType")
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "extensionVersion")
		delete(additionalProperties, "description")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "dependencies")
		delete(additionalProperties, "inputs")
		delete(additionalProperties, "outputs")
		delete(additionalProperties, "infrastructure")
		delete(additionalProperties, "assets")
		delete(additionalProperties, "onCreate")
		delete(additionalProperties, "onEdit")
		delete(additionalProperties, "onDelete")
		delete(additionalProperties, "tasks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionDefinition struct {
	value *ExtensionDefinition
	isSet bool
}

func (v NullableExtensionDefinition) Get() *ExtensionDefinition {
	return v.value
}

func (v *NullableExtensionDefinition) Set(val *ExtensionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionDefinition(val *ExtensionDefinition) *NullableExtensionDefinition {
	return &NullableExtensionDefinition{value: val, isSet: true}
}

func (v NullableExtensionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


