/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the GetResourceUtilizationDetailed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetResourceUtilizationDetailed{}

// GetResourceUtilizationDetailed struct for GetResourceUtilizationDetailed
type GetResourceUtilizationDetailed struct {
	// User ID of the owner
	UserIdOwner float32 `json:"userIdOwner"`
	// Start timestamp for the resource utilization
	StartTimestamp string `json:"startTimestamp"`
	// End timestamp for the resource utilization
	EndTimestamp string `json:"endTimestamp"`
	// List of infrastructure IDs
	InfrastructureIds []float32 `json:"infrastructureIds,omitempty"`
	// List of site IDs
	SiteIds []float32 `json:"siteIds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetResourceUtilizationDetailed GetResourceUtilizationDetailed

// NewGetResourceUtilizationDetailed instantiates a new GetResourceUtilizationDetailed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetResourceUtilizationDetailed(userIdOwner float32, startTimestamp string, endTimestamp string) *GetResourceUtilizationDetailed {
	this := GetResourceUtilizationDetailed{}
	this.UserIdOwner = userIdOwner
	this.StartTimestamp = startTimestamp
	this.EndTimestamp = endTimestamp
	return &this
}

// NewGetResourceUtilizationDetailedWithDefaults instantiates a new GetResourceUtilizationDetailed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetResourceUtilizationDetailedWithDefaults() *GetResourceUtilizationDetailed {
	this := GetResourceUtilizationDetailed{}
	return &this
}

// GetUserIdOwner returns the UserIdOwner field value
func (o *GetResourceUtilizationDetailed) GetUserIdOwner() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UserIdOwner
}

// GetUserIdOwnerOk returns a tuple with the UserIdOwner field value
// and a boolean to check if the value has been set.
func (o *GetResourceUtilizationDetailed) GetUserIdOwnerOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserIdOwner, true
}

// SetUserIdOwner sets field value
func (o *GetResourceUtilizationDetailed) SetUserIdOwner(v float32) {
	o.UserIdOwner = v
}

// GetStartTimestamp returns the StartTimestamp field value
func (o *GetResourceUtilizationDetailed) GetStartTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value
// and a boolean to check if the value has been set.
func (o *GetResourceUtilizationDetailed) GetStartTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTimestamp, true
}

// SetStartTimestamp sets field value
func (o *GetResourceUtilizationDetailed) SetStartTimestamp(v string) {
	o.StartTimestamp = v
}

// GetEndTimestamp returns the EndTimestamp field value
func (o *GetResourceUtilizationDetailed) GetEndTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value
// and a boolean to check if the value has been set.
func (o *GetResourceUtilizationDetailed) GetEndTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTimestamp, true
}

// SetEndTimestamp sets field value
func (o *GetResourceUtilizationDetailed) SetEndTimestamp(v string) {
	o.EndTimestamp = v
}

// GetInfrastructureIds returns the InfrastructureIds field value if set, zero value otherwise.
func (o *GetResourceUtilizationDetailed) GetInfrastructureIds() []float32 {
	if o == nil || IsNil(o.InfrastructureIds) {
		var ret []float32
		return ret
	}
	return o.InfrastructureIds
}

// GetInfrastructureIdsOk returns a tuple with the InfrastructureIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetResourceUtilizationDetailed) GetInfrastructureIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.InfrastructureIds) {
		return nil, false
	}
	return o.InfrastructureIds, true
}

// HasInfrastructureIds returns a boolean if a field has been set.
func (o *GetResourceUtilizationDetailed) HasInfrastructureIds() bool {
	if o != nil && !IsNil(o.InfrastructureIds) {
		return true
	}

	return false
}

// SetInfrastructureIds gets a reference to the given []float32 and assigns it to the InfrastructureIds field.
func (o *GetResourceUtilizationDetailed) SetInfrastructureIds(v []float32) {
	o.InfrastructureIds = v
}

// GetSiteIds returns the SiteIds field value if set, zero value otherwise.
func (o *GetResourceUtilizationDetailed) GetSiteIds() []float32 {
	if o == nil || IsNil(o.SiteIds) {
		var ret []float32
		return ret
	}
	return o.SiteIds
}

// GetSiteIdsOk returns a tuple with the SiteIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetResourceUtilizationDetailed) GetSiteIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.SiteIds) {
		return nil, false
	}
	return o.SiteIds, true
}

// HasSiteIds returns a boolean if a field has been set.
func (o *GetResourceUtilizationDetailed) HasSiteIds() bool {
	if o != nil && !IsNil(o.SiteIds) {
		return true
	}

	return false
}

// SetSiteIds gets a reference to the given []float32 and assigns it to the SiteIds field.
func (o *GetResourceUtilizationDetailed) SetSiteIds(v []float32) {
	o.SiteIds = v
}

func (o GetResourceUtilizationDetailed) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetResourceUtilizationDetailed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userIdOwner"] = o.UserIdOwner
	toSerialize["startTimestamp"] = o.StartTimestamp
	toSerialize["endTimestamp"] = o.EndTimestamp
	if !IsNil(o.InfrastructureIds) {
		toSerialize["infrastructureIds"] = o.InfrastructureIds
	}
	if !IsNil(o.SiteIds) {
		toSerialize["siteIds"] = o.SiteIds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetResourceUtilizationDetailed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userIdOwner",
		"startTimestamp",
		"endTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetResourceUtilizationDetailed := _GetResourceUtilizationDetailed{}

	err = json.Unmarshal(data, &varGetResourceUtilizationDetailed)

	if err != nil {
		return err
	}

	*o = GetResourceUtilizationDetailed(varGetResourceUtilizationDetailed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "userIdOwner")
		delete(additionalProperties, "startTimestamp")
		delete(additionalProperties, "endTimestamp")
		delete(additionalProperties, "infrastructureIds")
		delete(additionalProperties, "siteIds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetResourceUtilizationDetailed struct {
	value *GetResourceUtilizationDetailed
	isSet bool
}

func (v NullableGetResourceUtilizationDetailed) Get() *GetResourceUtilizationDetailed {
	return v.value
}

func (v *NullableGetResourceUtilizationDetailed) Set(val *GetResourceUtilizationDetailed) {
	v.value = val
	v.isSet = true
}

func (v NullableGetResourceUtilizationDetailed) IsSet() bool {
	return v.isSet
}

func (v *NullableGetResourceUtilizationDetailed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetResourceUtilizationDetailed(val *GetResourceUtilizationDetailed) *NullableGetResourceUtilizationDetailed {
	return &NullableGetResourceUtilizationDetailed{value: val, isSet: true}
}

func (v NullableGetResourceUtilizationDetailed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetResourceUtilizationDetailed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


