/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the TwoFactorAuthenticationSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TwoFactorAuthenticationSecret{}

// TwoFactorAuthenticationSecret struct for TwoFactorAuthenticationSecret
type TwoFactorAuthenticationSecret struct {
	// The QR code for the 2FA secret
	QrCode string `json:"qrCode"`
	// The 2FA secret
	Secret2FA string `json:"secret2FA"`
	AdditionalProperties map[string]interface{}
}

type _TwoFactorAuthenticationSecret TwoFactorAuthenticationSecret

// NewTwoFactorAuthenticationSecret instantiates a new TwoFactorAuthenticationSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTwoFactorAuthenticationSecret(qrCode string, secret2FA string) *TwoFactorAuthenticationSecret {
	this := TwoFactorAuthenticationSecret{}
	this.QrCode = qrCode
	this.Secret2FA = secret2FA
	return &this
}

// NewTwoFactorAuthenticationSecretWithDefaults instantiates a new TwoFactorAuthenticationSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTwoFactorAuthenticationSecretWithDefaults() *TwoFactorAuthenticationSecret {
	this := TwoFactorAuthenticationSecret{}
	return &this
}

// GetQrCode returns the QrCode field value
func (o *TwoFactorAuthenticationSecret) GetQrCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QrCode
}

// GetQrCodeOk returns a tuple with the QrCode field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthenticationSecret) GetQrCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QrCode, true
}

// SetQrCode sets field value
func (o *TwoFactorAuthenticationSecret) SetQrCode(v string) {
	o.QrCode = v
}

// GetSecret2FA returns the Secret2FA field value
func (o *TwoFactorAuthenticationSecret) GetSecret2FA() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret2FA
}

// GetSecret2FAOk returns a tuple with the Secret2FA field value
// and a boolean to check if the value has been set.
func (o *TwoFactorAuthenticationSecret) GetSecret2FAOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret2FA, true
}

// SetSecret2FA sets field value
func (o *TwoFactorAuthenticationSecret) SetSecret2FA(v string) {
	o.Secret2FA = v
}

func (o TwoFactorAuthenticationSecret) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TwoFactorAuthenticationSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["qrCode"] = o.QrCode
	toSerialize["secret2FA"] = o.Secret2FA

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TwoFactorAuthenticationSecret) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"qrCode",
		"secret2FA",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTwoFactorAuthenticationSecret := _TwoFactorAuthenticationSecret{}

	err = json.Unmarshal(data, &varTwoFactorAuthenticationSecret)

	if err != nil {
		return err
	}

	*o = TwoFactorAuthenticationSecret(varTwoFactorAuthenticationSecret)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "qrCode")
		delete(additionalProperties, "secret2FA")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTwoFactorAuthenticationSecret struct {
	value *TwoFactorAuthenticationSecret
	isSet bool
}

func (v NullableTwoFactorAuthenticationSecret) Get() *TwoFactorAuthenticationSecret {
	return v.value
}

func (v *NullableTwoFactorAuthenticationSecret) Set(val *TwoFactorAuthenticationSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableTwoFactorAuthenticationSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableTwoFactorAuthenticationSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTwoFactorAuthenticationSecret(val *TwoFactorAuthenticationSecret) *NullableTwoFactorAuthenticationSecret {
	return &NullableTwoFactorAuthenticationSecret{value: val, isSet: true}
}

func (v NullableTwoFactorAuthenticationSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTwoFactorAuthenticationSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


