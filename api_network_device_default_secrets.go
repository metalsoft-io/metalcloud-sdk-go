/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// NetworkDeviceDefaultSecretsAPIService NetworkDeviceDefaultSecretsAPI service
type NetworkDeviceDefaultSecretsAPIService service

type NetworkDeviceDefaultSecretsAPICreateNetworkDeviceDefaultSecretsRequest struct {
	ctx context.Context
	ApiService *NetworkDeviceDefaultSecretsAPIService
	createNetworkDeviceDefaultSecretsDto *CreateNetworkDeviceDefaultSecretsDto
}

// The NetworkDevice Default Secrets create object
func (r NetworkDeviceDefaultSecretsAPICreateNetworkDeviceDefaultSecretsRequest) CreateNetworkDeviceDefaultSecretsDto(createNetworkDeviceDefaultSecretsDto CreateNetworkDeviceDefaultSecretsDto) NetworkDeviceDefaultSecretsAPICreateNetworkDeviceDefaultSecretsRequest {
	r.createNetworkDeviceDefaultSecretsDto = &createNetworkDeviceDefaultSecretsDto
	return r
}

func (r NetworkDeviceDefaultSecretsAPICreateNetworkDeviceDefaultSecretsRequest) Execute() (*NetworkDeviceDefaultSecrets, *http.Response, error) {
	return r.ApiService.CreateNetworkDeviceDefaultSecretsExecute(r)
}

/*
CreateNetworkDeviceDefaultSecrets Creates a NetworkDevice Default Secrets

Creates a NetworkDevice Default Secrets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return NetworkDeviceDefaultSecretsAPICreateNetworkDeviceDefaultSecretsRequest
*/
func (a *NetworkDeviceDefaultSecretsAPIService) CreateNetworkDeviceDefaultSecrets(ctx context.Context) NetworkDeviceDefaultSecretsAPICreateNetworkDeviceDefaultSecretsRequest {
	return NetworkDeviceDefaultSecretsAPICreateNetworkDeviceDefaultSecretsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NetworkDeviceDefaultSecrets
func (a *NetworkDeviceDefaultSecretsAPIService) CreateNetworkDeviceDefaultSecretsExecute(r NetworkDeviceDefaultSecretsAPICreateNetworkDeviceDefaultSecretsRequest) (*NetworkDeviceDefaultSecrets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkDeviceDefaultSecrets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkDeviceDefaultSecretsAPIService.CreateNetworkDeviceDefaultSecrets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-devices/default-secrets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createNetworkDeviceDefaultSecretsDto == nil {
		return localVarReturnValue, nil, reportError("createNetworkDeviceDefaultSecretsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createNetworkDeviceDefaultSecretsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkDeviceDefaultSecretsAPIDeleteNetworkDeviceDefaultSecretsRequest struct {
	ctx context.Context
	ApiService *NetworkDeviceDefaultSecretsAPIService
	networkDeviceDefaultSecretsId float32
}

func (r NetworkDeviceDefaultSecretsAPIDeleteNetworkDeviceDefaultSecretsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNetworkDeviceDefaultSecretsExecute(r)
}

/*
DeleteNetworkDeviceDefaultSecrets Deletes a NetworkDevice Default Secrets

Deletes a NetworkDevice Default Secrets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkDeviceDefaultSecretsId
 @return NetworkDeviceDefaultSecretsAPIDeleteNetworkDeviceDefaultSecretsRequest
*/
func (a *NetworkDeviceDefaultSecretsAPIService) DeleteNetworkDeviceDefaultSecrets(ctx context.Context, networkDeviceDefaultSecretsId float32) NetworkDeviceDefaultSecretsAPIDeleteNetworkDeviceDefaultSecretsRequest {
	return NetworkDeviceDefaultSecretsAPIDeleteNetworkDeviceDefaultSecretsRequest{
		ApiService: a,
		ctx: ctx,
		networkDeviceDefaultSecretsId: networkDeviceDefaultSecretsId,
	}
}

// Execute executes the request
func (a *NetworkDeviceDefaultSecretsAPIService) DeleteNetworkDeviceDefaultSecretsExecute(r NetworkDeviceDefaultSecretsAPIDeleteNetworkDeviceDefaultSecretsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkDeviceDefaultSecretsAPIService.DeleteNetworkDeviceDefaultSecrets")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-devices/default-secrets/{networkDeviceDefaultSecretsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkDeviceDefaultSecretsId"+"}", url.PathEscape(parameterValueToString(r.networkDeviceDefaultSecretsId, "networkDeviceDefaultSecretsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsCredentialsRequest struct {
	ctx context.Context
	ApiService *NetworkDeviceDefaultSecretsAPIService
	networkDeviceDefaultSecretsId float32
}

func (r NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsCredentialsRequest) Execute() (*NetworkDeviceDefaultSecretsCredentials, *http.Response, error) {
	return r.ApiService.GetNetworkDeviceDefaultSecretsCredentialsExecute(r)
}

/*
GetNetworkDeviceDefaultSecretsCredentials Get NetworkDevice Default Secrets unencrypted

Returns NetworkDevice Default Secrets unencrypted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkDeviceDefaultSecretsId
 @return NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsCredentialsRequest
*/
func (a *NetworkDeviceDefaultSecretsAPIService) GetNetworkDeviceDefaultSecretsCredentials(ctx context.Context, networkDeviceDefaultSecretsId float32) NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsCredentialsRequest {
	return NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		networkDeviceDefaultSecretsId: networkDeviceDefaultSecretsId,
	}
}

// Execute executes the request
//  @return NetworkDeviceDefaultSecretsCredentials
func (a *NetworkDeviceDefaultSecretsAPIService) GetNetworkDeviceDefaultSecretsCredentialsExecute(r NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsCredentialsRequest) (*NetworkDeviceDefaultSecretsCredentials, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkDeviceDefaultSecretsCredentials
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkDeviceDefaultSecretsAPIService.GetNetworkDeviceDefaultSecretsCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-devices/default-secrets/{networkDeviceDefaultSecretsId}/credentials"
	localVarPath = strings.Replace(localVarPath, "{"+"networkDeviceDefaultSecretsId"+"}", url.PathEscape(parameterValueToString(r.networkDeviceDefaultSecretsId, "networkDeviceDefaultSecretsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsInfoRequest struct {
	ctx context.Context
	ApiService *NetworkDeviceDefaultSecretsAPIService
	networkDeviceDefaultSecretsId float32
}

func (r NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsInfoRequest) Execute() (*NetworkDeviceDefaultSecrets, *http.Response, error) {
	return r.ApiService.GetNetworkDeviceDefaultSecretsInfoExecute(r)
}

/*
GetNetworkDeviceDefaultSecretsInfo Get NetworkDevice Default Secrets information

Returns NetworkDevice Default Secrets information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkDeviceDefaultSecretsId
 @return NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsInfoRequest
*/
func (a *NetworkDeviceDefaultSecretsAPIService) GetNetworkDeviceDefaultSecretsInfo(ctx context.Context, networkDeviceDefaultSecretsId float32) NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsInfoRequest {
	return NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsInfoRequest{
		ApiService: a,
		ctx: ctx,
		networkDeviceDefaultSecretsId: networkDeviceDefaultSecretsId,
	}
}

// Execute executes the request
//  @return NetworkDeviceDefaultSecrets
func (a *NetworkDeviceDefaultSecretsAPIService) GetNetworkDeviceDefaultSecretsInfoExecute(r NetworkDeviceDefaultSecretsAPIGetNetworkDeviceDefaultSecretsInfoRequest) (*NetworkDeviceDefaultSecrets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkDeviceDefaultSecrets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkDeviceDefaultSecretsAPIService.GetNetworkDeviceDefaultSecretsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-devices/default-secrets/{networkDeviceDefaultSecretsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkDeviceDefaultSecretsId"+"}", url.PathEscape(parameterValueToString(r.networkDeviceDefaultSecretsId, "networkDeviceDefaultSecretsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest struct {
	ctx context.Context
	ApiService *NetworkDeviceDefaultSecretsAPIService
	page *float32
	limit *float32
	filterSiteId *[]string
	filterMacAddressOrSerialNumber *[]string
	filterSecretName *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) Page(page float32) NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) Limit(limit float32) NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest {
	r.limit = &limit
	return r
}

// Filter by siteId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.siteId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.siteId&#x3D;$not:$like:John Doe&amp;filter.siteId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt;&lt;/ul&gt;
func (r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) FilterSiteId(filterSiteId []string) NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest {
	r.filterSiteId = &filterSiteId
	return r
}

// Filter by macAddressOrSerialNumber query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.macAddressOrSerialNumber&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.macAddressOrSerialNumber&#x3D;$not:$like:John Doe&amp;filter.macAddressOrSerialNumber&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt;&lt;/ul&gt;
func (r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) FilterMacAddressOrSerialNumber(filterMacAddressOrSerialNumber []string) NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest {
	r.filterMacAddressOrSerialNumber = &filterMacAddressOrSerialNumber
	return r
}

// Filter by secretName query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.secretName&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.secretName&#x3D;$not:$like:John Doe&amp;filter.secretName&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt;&lt;/ul&gt;
func (r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) FilterSecretName(filterSecretName []string) NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest {
	r.filterSecretName = &filterSecretName
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; id:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;siteId&lt;/li&gt;&lt;/ul&gt;       
func (r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) SortBy(sortBy []string) NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) Search(search string) NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; id,siteId,macAddressOrSerialNumber,secretName           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;id&lt;/li&gt; &lt;li&gt;siteId&lt;/li&gt; &lt;li&gt;macAddressOrSerialNumber&lt;/li&gt; &lt;li&gt;secretName&lt;/li&gt;&lt;/ul&gt;         
func (r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) SearchBy(searchBy []string) NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest {
	r.searchBy = &searchBy
	return r
}

func (r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) Execute() (*NetworkDeviceDefaultSecretsPaginatedList, *http.Response, error) {
	return r.ApiService.GetNetworkDevicesDefaultSecretsExecute(r)
}

/*
GetNetworkDevicesDefaultSecrets Get a list of NetworkDevice Default Secrets

Returns a list of NetworkDevice Default Secrets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest
*/
func (a *NetworkDeviceDefaultSecretsAPIService) GetNetworkDevicesDefaultSecrets(ctx context.Context) NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest {
	return NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NetworkDeviceDefaultSecretsPaginatedList
func (a *NetworkDeviceDefaultSecretsAPIService) GetNetworkDevicesDefaultSecretsExecute(r NetworkDeviceDefaultSecretsAPIGetNetworkDevicesDefaultSecretsRequest) (*NetworkDeviceDefaultSecretsPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkDeviceDefaultSecretsPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkDeviceDefaultSecretsAPIService.GetNetworkDevicesDefaultSecrets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-devices/default-secrets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterSiteId != nil {
		t := *r.filterSiteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.siteId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.siteId", t, "form", "multi")
		}
	}
	if r.filterMacAddressOrSerialNumber != nil {
		t := *r.filterMacAddressOrSerialNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.macAddressOrSerialNumber", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.macAddressOrSerialNumber", t, "form", "multi")
		}
	}
	if r.filterSecretName != nil {
		t := *r.filterSecretName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.secretName", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.secretName", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type NetworkDeviceDefaultSecretsAPIUpdateNetworkDeviceDefaultSecretsRequest struct {
	ctx context.Context
	ApiService *NetworkDeviceDefaultSecretsAPIService
	networkDeviceDefaultSecretsId float32
	updateNetworkDeviceDefaultSecretsDto *UpdateNetworkDeviceDefaultSecretsDto
}

// The NetworkDevice Default Secrets update object
func (r NetworkDeviceDefaultSecretsAPIUpdateNetworkDeviceDefaultSecretsRequest) UpdateNetworkDeviceDefaultSecretsDto(updateNetworkDeviceDefaultSecretsDto UpdateNetworkDeviceDefaultSecretsDto) NetworkDeviceDefaultSecretsAPIUpdateNetworkDeviceDefaultSecretsRequest {
	r.updateNetworkDeviceDefaultSecretsDto = &updateNetworkDeviceDefaultSecretsDto
	return r
}

func (r NetworkDeviceDefaultSecretsAPIUpdateNetworkDeviceDefaultSecretsRequest) Execute() (*NetworkDeviceDefaultSecrets, *http.Response, error) {
	return r.ApiService.UpdateNetworkDeviceDefaultSecretsExecute(r)
}

/*
UpdateNetworkDeviceDefaultSecrets Updates a NetworkDevice Default Secrets

Updates a NetworkDevice Default Secrets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param networkDeviceDefaultSecretsId
 @return NetworkDeviceDefaultSecretsAPIUpdateNetworkDeviceDefaultSecretsRequest
*/
func (a *NetworkDeviceDefaultSecretsAPIService) UpdateNetworkDeviceDefaultSecrets(ctx context.Context, networkDeviceDefaultSecretsId float32) NetworkDeviceDefaultSecretsAPIUpdateNetworkDeviceDefaultSecretsRequest {
	return NetworkDeviceDefaultSecretsAPIUpdateNetworkDeviceDefaultSecretsRequest{
		ApiService: a,
		ctx: ctx,
		networkDeviceDefaultSecretsId: networkDeviceDefaultSecretsId,
	}
}

// Execute executes the request
//  @return NetworkDeviceDefaultSecrets
func (a *NetworkDeviceDefaultSecretsAPIService) UpdateNetworkDeviceDefaultSecretsExecute(r NetworkDeviceDefaultSecretsAPIUpdateNetworkDeviceDefaultSecretsRequest) (*NetworkDeviceDefaultSecrets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkDeviceDefaultSecrets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkDeviceDefaultSecretsAPIService.UpdateNetworkDeviceDefaultSecrets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network-devices/default-secrets/{networkDeviceDefaultSecretsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"networkDeviceDefaultSecretsId"+"}", url.PathEscape(parameterValueToString(r.networkDeviceDefaultSecretsId, "networkDeviceDefaultSecretsId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateNetworkDeviceDefaultSecretsDto == nil {
		return localVarReturnValue, nil, reportError("updateNetworkDeviceDefaultSecretsDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateNetworkDeviceDefaultSecretsDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
