/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateResourceScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateResourceScope{}

// CreateResourceScope struct for CreateResourceScope
type CreateResourceScope struct {
	Kind ResourceScopeKind `json:"kind"`
	ResourceId float32 `json:"resourceId"`
	AdditionalProperties map[string]interface{}
}

type _CreateResourceScope CreateResourceScope

// NewCreateResourceScope instantiates a new CreateResourceScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateResourceScope(kind ResourceScopeKind, resourceId float32) *CreateResourceScope {
	this := CreateResourceScope{}
	this.Kind = kind
	this.ResourceId = resourceId
	return &this
}

// NewCreateResourceScopeWithDefaults instantiates a new CreateResourceScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateResourceScopeWithDefaults() *CreateResourceScope {
	this := CreateResourceScope{}
	return &this
}

// GetKind returns the Kind field value
func (o *CreateResourceScope) GetKind() ResourceScopeKind {
	if o == nil {
		var ret ResourceScopeKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CreateResourceScope) GetKindOk() (*ResourceScopeKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CreateResourceScope) SetKind(v ResourceScopeKind) {
	o.Kind = v
}

// GetResourceId returns the ResourceId field value
func (o *CreateResourceScope) GetResourceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *CreateResourceScope) GetResourceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *CreateResourceScope) SetResourceId(v float32) {
	o.ResourceId = v
}

func (o CreateResourceScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateResourceScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["resourceId"] = o.ResourceId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateResourceScope) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"resourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateResourceScope := _CreateResourceScope{}

	err = json.Unmarshal(data, &varCreateResourceScope)

	if err != nil {
		return err
	}

	*o = CreateResourceScope(varCreateResourceScope)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kind")
		delete(additionalProperties, "resourceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateResourceScope struct {
	value *CreateResourceScope
	isSet bool
}

func (v NullableCreateResourceScope) Get() *CreateResourceScope {
	return v.value
}

func (v *NullableCreateResourceScope) Set(val *CreateResourceScope) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateResourceScope) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateResourceScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateResourceScope(val *CreateResourceScope) *NullableCreateResourceScope {
	return &NullableCreateResourceScope{value: val, isSet: true}
}

func (v NullableCreateResourceScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateResourceScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


