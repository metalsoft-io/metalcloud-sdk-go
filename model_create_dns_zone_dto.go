/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateDnsZoneDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDnsZoneDto{}

// CreateDnsZoneDto struct for CreateDnsZoneDto
type CreateDnsZoneDto struct {
	// The DNS zone description
	Description *string `json:"description,omitempty"`
	// The name of the DNS zone (without a terminating dot).                   The DNS zone name must be unique and follow the DNS domain naming conventions.
	ZoneName string `json:"zoneName"`
	// The type of zone, 'master' is controlled by the application,                   'slave' is controlled by an external DNS server.
	ZoneType *string `json:"zoneType,omitempty"`
	// The email address of the DNS zone administrator
	SoaEmail *string `json:"soaEmail,omitempty"`
	// TTL (Time to Live) for the DNS zone.
	Ttl *int32 `json:"ttl,omitempty"`
	// The default DNS zone to be used in deployments.
	IsDefault bool `json:"isDefault"`
	// The name servers for this DNS zone. This is a list of DNS servers that are authoritative for the zone.
	NameServers []string `json:"nameServers"`
	// The tags associated with the DNS zone
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateDnsZoneDto CreateDnsZoneDto

// NewCreateDnsZoneDto instantiates a new CreateDnsZoneDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDnsZoneDto(zoneName string, isDefault bool, nameServers []string) *CreateDnsZoneDto {
	this := CreateDnsZoneDto{}
	this.ZoneName = zoneName
	var zoneType string = "master"
	this.ZoneType = &zoneType
	var soaEmail string = "admin.<zone_name>"
	this.SoaEmail = &soaEmail
	this.IsDefault = isDefault
	this.NameServers = nameServers
	return &this
}

// NewCreateDnsZoneDtoWithDefaults instantiates a new CreateDnsZoneDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDnsZoneDtoWithDefaults() *CreateDnsZoneDto {
	this := CreateDnsZoneDto{}
	var zoneType string = "master"
	this.ZoneType = &zoneType
	var soaEmail string = "admin.<zone_name>"
	this.SoaEmail = &soaEmail
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateDnsZoneDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDnsZoneDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateDnsZoneDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateDnsZoneDto) SetDescription(v string) {
	o.Description = &v
}

// GetZoneName returns the ZoneName field value
func (o *CreateDnsZoneDto) GetZoneName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value
// and a boolean to check if the value has been set.
func (o *CreateDnsZoneDto) GetZoneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneName, true
}

// SetZoneName sets field value
func (o *CreateDnsZoneDto) SetZoneName(v string) {
	o.ZoneName = v
}

// GetZoneType returns the ZoneType field value if set, zero value otherwise.
func (o *CreateDnsZoneDto) GetZoneType() string {
	if o == nil || IsNil(o.ZoneType) {
		var ret string
		return ret
	}
	return *o.ZoneType
}

// GetZoneTypeOk returns a tuple with the ZoneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDnsZoneDto) GetZoneTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneType) {
		return nil, false
	}
	return o.ZoneType, true
}

// HasZoneType returns a boolean if a field has been set.
func (o *CreateDnsZoneDto) HasZoneType() bool {
	if o != nil && !IsNil(o.ZoneType) {
		return true
	}

	return false
}

// SetZoneType gets a reference to the given string and assigns it to the ZoneType field.
func (o *CreateDnsZoneDto) SetZoneType(v string) {
	o.ZoneType = &v
}

// GetSoaEmail returns the SoaEmail field value if set, zero value otherwise.
func (o *CreateDnsZoneDto) GetSoaEmail() string {
	if o == nil || IsNil(o.SoaEmail) {
		var ret string
		return ret
	}
	return *o.SoaEmail
}

// GetSoaEmailOk returns a tuple with the SoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDnsZoneDto) GetSoaEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SoaEmail) {
		return nil, false
	}
	return o.SoaEmail, true
}

// HasSoaEmail returns a boolean if a field has been set.
func (o *CreateDnsZoneDto) HasSoaEmail() bool {
	if o != nil && !IsNil(o.SoaEmail) {
		return true
	}

	return false
}

// SetSoaEmail gets a reference to the given string and assigns it to the SoaEmail field.
func (o *CreateDnsZoneDto) SetSoaEmail(v string) {
	o.SoaEmail = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *CreateDnsZoneDto) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDnsZoneDto) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *CreateDnsZoneDto) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *CreateDnsZoneDto) SetTtl(v int32) {
	o.Ttl = &v
}

// GetIsDefault returns the IsDefault field value
func (o *CreateDnsZoneDto) GetIsDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value
// and a boolean to check if the value has been set.
func (o *CreateDnsZoneDto) GetIsDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDefault, true
}

// SetIsDefault sets field value
func (o *CreateDnsZoneDto) SetIsDefault(v bool) {
	o.IsDefault = v
}

// GetNameServers returns the NameServers field value
func (o *CreateDnsZoneDto) GetNameServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NameServers
}

// GetNameServersOk returns a tuple with the NameServers field value
// and a boolean to check if the value has been set.
func (o *CreateDnsZoneDto) GetNameServersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NameServers, true
}

// SetNameServers sets field value
func (o *CreateDnsZoneDto) SetNameServers(v []string) {
	o.NameServers = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *CreateDnsZoneDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDnsZoneDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CreateDnsZoneDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CreateDnsZoneDto) SetTags(v []string) {
	o.Tags = v
}

func (o CreateDnsZoneDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDnsZoneDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["zoneName"] = o.ZoneName
	if !IsNil(o.ZoneType) {
		toSerialize["zoneType"] = o.ZoneType
	}
	if !IsNil(o.SoaEmail) {
		toSerialize["soaEmail"] = o.SoaEmail
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	toSerialize["isDefault"] = o.IsDefault
	toSerialize["nameServers"] = o.NameServers
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateDnsZoneDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zoneName",
		"isDefault",
		"nameServers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDnsZoneDto := _CreateDnsZoneDto{}

	err = json.Unmarshal(data, &varCreateDnsZoneDto)

	if err != nil {
		return err
	}

	*o = CreateDnsZoneDto(varCreateDnsZoneDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "zoneName")
		delete(additionalProperties, "zoneType")
		delete(additionalProperties, "soaEmail")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "isDefault")
		delete(additionalProperties, "nameServers")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateDnsZoneDto struct {
	value *CreateDnsZoneDto
	isSet bool
}

func (v NullableCreateDnsZoneDto) Get() *CreateDnsZoneDto {
	return v.value
}

func (v *NullableCreateDnsZoneDto) Set(val *CreateDnsZoneDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDnsZoneDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDnsZoneDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDnsZoneDto(val *CreateDnsZoneDto) *NullableCreateDnsZoneDto {
	return &NullableCreateDnsZoneDto{value: val, isSet: true}
}

func (v NullableCreateDnsZoneDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDnsZoneDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


