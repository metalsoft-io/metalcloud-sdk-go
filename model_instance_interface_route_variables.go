/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InstanceInterfaceRouteVariables type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceInterfaceRouteVariables{}

// InstanceInterfaceRouteVariables struct for InstanceInterfaceRouteVariables
type InstanceInterfaceRouteVariables struct {
	To string `json:"to"`
	Via string `json:"via"`
	AdditionalProperties map[string]interface{}
}

type _InstanceInterfaceRouteVariables InstanceInterfaceRouteVariables

// NewInstanceInterfaceRouteVariables instantiates a new InstanceInterfaceRouteVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceInterfaceRouteVariables(to string, via string) *InstanceInterfaceRouteVariables {
	this := InstanceInterfaceRouteVariables{}
	this.To = to
	this.Via = via
	return &this
}

// NewInstanceInterfaceRouteVariablesWithDefaults instantiates a new InstanceInterfaceRouteVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceInterfaceRouteVariablesWithDefaults() *InstanceInterfaceRouteVariables {
	this := InstanceInterfaceRouteVariables{}
	return &this
}

// GetTo returns the To field value
func (o *InstanceInterfaceRouteVariables) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceRouteVariables) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *InstanceInterfaceRouteVariables) SetTo(v string) {
	o.To = v
}

// GetVia returns the Via field value
func (o *InstanceInterfaceRouteVariables) GetVia() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Via
}

// GetViaOk returns a tuple with the Via field value
// and a boolean to check if the value has been set.
func (o *InstanceInterfaceRouteVariables) GetViaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Via, true
}

// SetVia sets field value
func (o *InstanceInterfaceRouteVariables) SetVia(v string) {
	o.Via = v
}

func (o InstanceInterfaceRouteVariables) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceInterfaceRouteVariables) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["to"] = o.To
	toSerialize["via"] = o.Via

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstanceInterfaceRouteVariables) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"to",
		"via",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceInterfaceRouteVariables := _InstanceInterfaceRouteVariables{}

	err = json.Unmarshal(data, &varInstanceInterfaceRouteVariables)

	if err != nil {
		return err
	}

	*o = InstanceInterfaceRouteVariables(varInstanceInterfaceRouteVariables)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "to")
		delete(additionalProperties, "via")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstanceInterfaceRouteVariables struct {
	value *InstanceInterfaceRouteVariables
	isSet bool
}

func (v NullableInstanceInterfaceRouteVariables) Get() *InstanceInterfaceRouteVariables {
	return v.value
}

func (v *NullableInstanceInterfaceRouteVariables) Set(val *InstanceInterfaceRouteVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceInterfaceRouteVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceInterfaceRouteVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceInterfaceRouteVariables(val *InstanceInterfaceRouteVariables) *NullableInstanceInterfaceRouteVariables {
	return &NullableInstanceInterfaceRouteVariables{value: val, isSet: true}
}

func (v NullableInstanceInterfaceRouteVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceInterfaceRouteVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


