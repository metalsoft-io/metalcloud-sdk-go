/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the InfrastructureDeployOngoingStatusCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfrastructureDeployOngoingStatusCount{}

// InfrastructureDeployOngoingStatusCount struct for InfrastructureDeployOngoingStatusCount
type InfrastructureDeployOngoingStatusCount struct {
	// Count of infrastructures with thrown error retrying status
	ThrownErrorRetrying float32 `json:"thrownErrorRetrying"`
	// Count of infrastructures with thrown error status
	ThrownError float32 `json:"thrownError"`
	AdditionalProperties map[string]interface{}
}

type _InfrastructureDeployOngoingStatusCount InfrastructureDeployOngoingStatusCount

// NewInfrastructureDeployOngoingStatusCount instantiates a new InfrastructureDeployOngoingStatusCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfrastructureDeployOngoingStatusCount(thrownErrorRetrying float32, thrownError float32) *InfrastructureDeployOngoingStatusCount {
	this := InfrastructureDeployOngoingStatusCount{}
	this.ThrownErrorRetrying = thrownErrorRetrying
	this.ThrownError = thrownError
	return &this
}

// NewInfrastructureDeployOngoingStatusCountWithDefaults instantiates a new InfrastructureDeployOngoingStatusCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfrastructureDeployOngoingStatusCountWithDefaults() *InfrastructureDeployOngoingStatusCount {
	this := InfrastructureDeployOngoingStatusCount{}
	return &this
}

// GetThrownErrorRetrying returns the ThrownErrorRetrying field value
func (o *InfrastructureDeployOngoingStatusCount) GetThrownErrorRetrying() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ThrownErrorRetrying
}

// GetThrownErrorRetryingOk returns a tuple with the ThrownErrorRetrying field value
// and a boolean to check if the value has been set.
func (o *InfrastructureDeployOngoingStatusCount) GetThrownErrorRetryingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThrownErrorRetrying, true
}

// SetThrownErrorRetrying sets field value
func (o *InfrastructureDeployOngoingStatusCount) SetThrownErrorRetrying(v float32) {
	o.ThrownErrorRetrying = v
}

// GetThrownError returns the ThrownError field value
func (o *InfrastructureDeployOngoingStatusCount) GetThrownError() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ThrownError
}

// GetThrownErrorOk returns a tuple with the ThrownError field value
// and a boolean to check if the value has been set.
func (o *InfrastructureDeployOngoingStatusCount) GetThrownErrorOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThrownError, true
}

// SetThrownError sets field value
func (o *InfrastructureDeployOngoingStatusCount) SetThrownError(v float32) {
	o.ThrownError = v
}

func (o InfrastructureDeployOngoingStatusCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfrastructureDeployOngoingStatusCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["thrownErrorRetrying"] = o.ThrownErrorRetrying
	toSerialize["thrownError"] = o.ThrownError

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InfrastructureDeployOngoingStatusCount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"thrownErrorRetrying",
		"thrownError",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfrastructureDeployOngoingStatusCount := _InfrastructureDeployOngoingStatusCount{}

	err = json.Unmarshal(data, &varInfrastructureDeployOngoingStatusCount)

	if err != nil {
		return err
	}

	*o = InfrastructureDeployOngoingStatusCount(varInfrastructureDeployOngoingStatusCount)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "thrownErrorRetrying")
		delete(additionalProperties, "thrownError")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfrastructureDeployOngoingStatusCount struct {
	value *InfrastructureDeployOngoingStatusCount
	isSet bool
}

func (v NullableInfrastructureDeployOngoingStatusCount) Get() *InfrastructureDeployOngoingStatusCount {
	return v.value
}

func (v *NullableInfrastructureDeployOngoingStatusCount) Set(val *InfrastructureDeployOngoingStatusCount) {
	v.value = val
	v.isSet = true
}

func (v NullableInfrastructureDeployOngoingStatusCount) IsSet() bool {
	return v.isSet
}

func (v *NullableInfrastructureDeployOngoingStatusCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfrastructureDeployOngoingStatusCount(val *InfrastructureDeployOngoingStatusCount) *NullableInfrastructureDeployOngoingStatusCount {
	return &NullableInfrastructureDeployOngoingStatusCount{value: val, isSet: true}
}

func (v NullableInfrastructureDeployOngoingStatusCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfrastructureDeployOngoingStatusCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


