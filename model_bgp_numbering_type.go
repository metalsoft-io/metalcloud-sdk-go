/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// BgpNumberingType the model 'BgpNumberingType'
type BgpNumberingType string

// List of BgpNumberingType
const (
	BGPNUMBERINGTYPE_NUMBERED BgpNumberingType = "numbered"
	BGPNUMBERINGTYPE_UNNUMBERED BgpNumberingType = "unnumbered"
)

// All allowed values of BgpNumberingType enum
var AllowedBgpNumberingTypeEnumValues = []BgpNumberingType{
	"numbered",
	"unnumbered",
}

func (v *BgpNumberingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BgpNumberingType(value)
	for _, existing := range AllowedBgpNumberingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BgpNumberingType", value)
}

// NewBgpNumberingTypeFromValue returns a pointer to a valid BgpNumberingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBgpNumberingTypeFromValue(v string) (*BgpNumberingType, error) {
	ev := BgpNumberingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BgpNumberingType: valid values are %v", v, AllowedBgpNumberingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BgpNumberingType) IsValid() bool {
	for _, existing := range AllowedBgpNumberingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BgpNumberingType value
func (v BgpNumberingType) Ptr() *BgpNumberingType {
	return &v
}

type NullableBgpNumberingType struct {
	value *BgpNumberingType
	isSet bool
}

func (v NullableBgpNumberingType) Get() *BgpNumberingType {
	return v.value
}

func (v *NullableBgpNumberingType) Set(val *BgpNumberingType) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpNumberingType) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpNumberingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpNumberingType(val *BgpNumberingType) *NullableBgpNumberingType {
	return &NullableBgpNumberingType{value: val, isSet: true}
}

func (v NullableBgpNumberingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpNumberingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

