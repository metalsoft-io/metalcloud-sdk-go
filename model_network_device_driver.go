/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// NetworkDeviceDriver Driver software used to communicate with the network device
type NetworkDeviceDriver string

// List of NetworkDeviceDriver
const (
	NETWORKDEVICEDRIVER_CISCO_ACI51 NetworkDeviceDriver = "cisco_aci51"
	NETWORKDEVICEDRIVER_NEXUS9000 NetworkDeviceDriver = "nexus9000"
	NETWORKDEVICEDRIVER_CUMULUS42 NetworkDeviceDriver = "cumulus42"
	NETWORKDEVICEDRIVER_DELL_S4048 NetworkDeviceDriver = "dell_s4048"
	NETWORKDEVICEDRIVER_HP5800 NetworkDeviceDriver = "hp5800"
	NETWORKDEVICEDRIVER_HP5900 NetworkDeviceDriver = "hp5900"
	NETWORKDEVICEDRIVER_HP5950 NetworkDeviceDriver = "hp5950"
	NETWORKDEVICEDRIVER_DUMMY NetworkDeviceDriver = "dummy"
	NETWORKDEVICEDRIVER_JUNOS NetworkDeviceDriver = "junos"
	NETWORKDEVICEDRIVER_OS_10 NetworkDeviceDriver = "os_10"
	NETWORKDEVICEDRIVER_SONIC_ENTERPRISE NetworkDeviceDriver = "sonic_enterprise"
)

// All allowed values of NetworkDeviceDriver enum
var AllowedNetworkDeviceDriverEnumValues = []NetworkDeviceDriver{
	"cisco_aci51",
	"nexus9000",
	"cumulus42",
	"dell_s4048",
	"hp5800",
	"hp5900",
	"hp5950",
	"dummy",
	"junos",
	"os_10",
	"sonic_enterprise",
}

func (v *NetworkDeviceDriver) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkDeviceDriver(value)
	for _, existing := range AllowedNetworkDeviceDriverEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkDeviceDriver", value)
}

// NewNetworkDeviceDriverFromValue returns a pointer to a valid NetworkDeviceDriver
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkDeviceDriverFromValue(v string) (*NetworkDeviceDriver, error) {
	ev := NetworkDeviceDriver(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkDeviceDriver: valid values are %v", v, AllowedNetworkDeviceDriverEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkDeviceDriver) IsValid() bool {
	for _, existing := range AllowedNetworkDeviceDriverEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkDeviceDriver value
func (v NetworkDeviceDriver) Ptr() *NetworkDeviceDriver {
	return &v
}

type NullableNetworkDeviceDriver struct {
	value *NetworkDeviceDriver
	isSet bool
}

func (v NullableNetworkDeviceDriver) Get() *NetworkDeviceDriver {
	return v.value
}

func (v *NullableNetworkDeviceDriver) Set(val *NetworkDeviceDriver) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDeviceDriver) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDeviceDriver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDeviceDriver(val *NetworkDeviceDriver) *NullableNetworkDeviceDriver {
	return &NullableNetworkDeviceDriver{value: val, isSet: true}
}

func (v NullableNetworkDeviceDriver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDeviceDriver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

