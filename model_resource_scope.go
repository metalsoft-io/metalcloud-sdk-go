/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourceScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceScope{}

// ResourceScope struct for ResourceScope
type ResourceScope struct {
	// The kind of resource scope
	Kind ResourceScopeKind `json:"kind"`
	// ID of the resource, if applicable
	ResourceId NullableFloat32 `json:"resourceId"`
	AdditionalProperties map[string]interface{}
}

type _ResourceScope ResourceScope

// NewResourceScope instantiates a new ResourceScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceScope(kind ResourceScopeKind, resourceId NullableFloat32) *ResourceScope {
	this := ResourceScope{}
	this.Kind = kind
	this.ResourceId = resourceId
	return &this
}

// NewResourceScopeWithDefaults instantiates a new ResourceScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceScopeWithDefaults() *ResourceScope {
	this := ResourceScope{}
	return &this
}

// GetKind returns the Kind field value
func (o *ResourceScope) GetKind() ResourceScopeKind {
	if o == nil {
		var ret ResourceScopeKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ResourceScope) GetKindOk() (*ResourceScopeKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ResourceScope) SetKind(v ResourceScopeKind) {
	o.Kind = v
}

// GetResourceId returns the ResourceId field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *ResourceScope) GetResourceId() float32 {
	if o == nil || o.ResourceId.Get() == nil {
		var ret float32
		return ret
	}

	return *o.ResourceId.Get()
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceScope) GetResourceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceId.Get(), o.ResourceId.IsSet()
}

// SetResourceId sets field value
func (o *ResourceScope) SetResourceId(v float32) {
	o.ResourceId.Set(&v)
}

func (o ResourceScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["resourceId"] = o.ResourceId.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceScope) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"resourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceScope := _ResourceScope{}

	err = json.Unmarshal(data, &varResourceScope)

	if err != nil {
		return err
	}

	*o = ResourceScope(varResourceScope)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kind")
		delete(additionalProperties, "resourceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceScope struct {
	value *ResourceScope
	isSet bool
}

func (v NullableResourceScope) Get() *ResourceScope {
	return v.value
}

func (v *NullableResourceScope) Set(val *ResourceScope) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceScope) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceScope(val *ResourceScope) *NullableResourceScope {
	return &NullableResourceScope{value: val, isSet: true}
}

func (v NullableResourceScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


