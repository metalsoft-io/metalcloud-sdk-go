/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the LogicalNetworkConfigIpv6Properties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalNetworkConfigIpv6Properties{}

// LogicalNetworkConfigIpv6Properties struct for LogicalNetworkConfigIpv6Properties
type LogicalNetworkConfigIpv6Properties struct {
	SubnetAllocationStrategies []Ipv6SubnetAllocationStrategy `json:"subnetAllocationStrategies"`
	AdditionalProperties map[string]interface{}
}

type _LogicalNetworkConfigIpv6Properties LogicalNetworkConfigIpv6Properties

// NewLogicalNetworkConfigIpv6Properties instantiates a new LogicalNetworkConfigIpv6Properties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalNetworkConfigIpv6Properties(subnetAllocationStrategies []Ipv6SubnetAllocationStrategy) *LogicalNetworkConfigIpv6Properties {
	this := LogicalNetworkConfigIpv6Properties{}
	this.SubnetAllocationStrategies = subnetAllocationStrategies
	return &this
}

// NewLogicalNetworkConfigIpv6PropertiesWithDefaults instantiates a new LogicalNetworkConfigIpv6Properties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalNetworkConfigIpv6PropertiesWithDefaults() *LogicalNetworkConfigIpv6Properties {
	this := LogicalNetworkConfigIpv6Properties{}
	return &this
}

// GetSubnetAllocationStrategies returns the SubnetAllocationStrategies field value
func (o *LogicalNetworkConfigIpv6Properties) GetSubnetAllocationStrategies() []Ipv6SubnetAllocationStrategy {
	if o == nil {
		var ret []Ipv6SubnetAllocationStrategy
		return ret
	}

	return o.SubnetAllocationStrategies
}

// GetSubnetAllocationStrategiesOk returns a tuple with the SubnetAllocationStrategies field value
// and a boolean to check if the value has been set.
func (o *LogicalNetworkConfigIpv6Properties) GetSubnetAllocationStrategiesOk() ([]Ipv6SubnetAllocationStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubnetAllocationStrategies, true
}

// SetSubnetAllocationStrategies sets field value
func (o *LogicalNetworkConfigIpv6Properties) SetSubnetAllocationStrategies(v []Ipv6SubnetAllocationStrategy) {
	o.SubnetAllocationStrategies = v
}

func (o LogicalNetworkConfigIpv6Properties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalNetworkConfigIpv6Properties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subnetAllocationStrategies"] = o.SubnetAllocationStrategies

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalNetworkConfigIpv6Properties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnetAllocationStrategies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogicalNetworkConfigIpv6Properties := _LogicalNetworkConfigIpv6Properties{}

	err = json.Unmarshal(data, &varLogicalNetworkConfigIpv6Properties)

	if err != nil {
		return err
	}

	*o = LogicalNetworkConfigIpv6Properties(varLogicalNetworkConfigIpv6Properties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subnetAllocationStrategies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalNetworkConfigIpv6Properties struct {
	value *LogicalNetworkConfigIpv6Properties
	isSet bool
}

func (v NullableLogicalNetworkConfigIpv6Properties) Get() *LogicalNetworkConfigIpv6Properties {
	return v.value
}

func (v *NullableLogicalNetworkConfigIpv6Properties) Set(val *LogicalNetworkConfigIpv6Properties) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalNetworkConfigIpv6Properties) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalNetworkConfigIpv6Properties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalNetworkConfigIpv6Properties(val *LogicalNetworkConfigIpv6Properties) *NullableLogicalNetworkConfigIpv6Properties {
	return &NullableLogicalNetworkConfigIpv6Properties{value: val, isSet: true}
}

func (v NullableLogicalNetworkConfigIpv6Properties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalNetworkConfigIpv6Properties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


