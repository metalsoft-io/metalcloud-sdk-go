/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ExtensionTaskOptionAnsible type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionTaskOptionAnsible{}

// ExtensionTaskOptionAnsible struct for ExtensionTaskOptionAnsible
type ExtensionTaskOptionAnsible struct {
	// Asset for the Ansible task.
	Asset *string `json:"asset,omitempty"`
	// Playbook for the Ansible task.
	Playbook *string `json:"playbook,omitempty"`
	// Execution Timeout.
	ExecutionTimeout *int32 `json:"executionTimeout,omitempty"`
	// Execution Timeout Tick.
	ExecutionTimeoutTick *int32 `json:"executionTimeoutTick,omitempty"`
	// Version.
	Version *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionTaskOptionAnsible ExtensionTaskOptionAnsible

// NewExtensionTaskOptionAnsible instantiates a new ExtensionTaskOptionAnsible object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionTaskOptionAnsible() *ExtensionTaskOptionAnsible {
	this := ExtensionTaskOptionAnsible{}
	return &this
}

// NewExtensionTaskOptionAnsibleWithDefaults instantiates a new ExtensionTaskOptionAnsible object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionTaskOptionAnsibleWithDefaults() *ExtensionTaskOptionAnsible {
	this := ExtensionTaskOptionAnsible{}
	return &this
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *ExtensionTaskOptionAnsible) GetAsset() string {
	if o == nil || IsNil(o.Asset) {
		var ret string
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionTaskOptionAnsible) GetAssetOk() (*string, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *ExtensionTaskOptionAnsible) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given string and assigns it to the Asset field.
func (o *ExtensionTaskOptionAnsible) SetAsset(v string) {
	o.Asset = &v
}

// GetPlaybook returns the Playbook field value if set, zero value otherwise.
func (o *ExtensionTaskOptionAnsible) GetPlaybook() string {
	if o == nil || IsNil(o.Playbook) {
		var ret string
		return ret
	}
	return *o.Playbook
}

// GetPlaybookOk returns a tuple with the Playbook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionTaskOptionAnsible) GetPlaybookOk() (*string, bool) {
	if o == nil || IsNil(o.Playbook) {
		return nil, false
	}
	return o.Playbook, true
}

// HasPlaybook returns a boolean if a field has been set.
func (o *ExtensionTaskOptionAnsible) HasPlaybook() bool {
	if o != nil && !IsNil(o.Playbook) {
		return true
	}

	return false
}

// SetPlaybook gets a reference to the given string and assigns it to the Playbook field.
func (o *ExtensionTaskOptionAnsible) SetPlaybook(v string) {
	o.Playbook = &v
}

// GetExecutionTimeout returns the ExecutionTimeout field value if set, zero value otherwise.
func (o *ExtensionTaskOptionAnsible) GetExecutionTimeout() int32 {
	if o == nil || IsNil(o.ExecutionTimeout) {
		var ret int32
		return ret
	}
	return *o.ExecutionTimeout
}

// GetExecutionTimeoutOk returns a tuple with the ExecutionTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionTaskOptionAnsible) GetExecutionTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecutionTimeout) {
		return nil, false
	}
	return o.ExecutionTimeout, true
}

// HasExecutionTimeout returns a boolean if a field has been set.
func (o *ExtensionTaskOptionAnsible) HasExecutionTimeout() bool {
	if o != nil && !IsNil(o.ExecutionTimeout) {
		return true
	}

	return false
}

// SetExecutionTimeout gets a reference to the given int32 and assigns it to the ExecutionTimeout field.
func (o *ExtensionTaskOptionAnsible) SetExecutionTimeout(v int32) {
	o.ExecutionTimeout = &v
}

// GetExecutionTimeoutTick returns the ExecutionTimeoutTick field value if set, zero value otherwise.
func (o *ExtensionTaskOptionAnsible) GetExecutionTimeoutTick() int32 {
	if o == nil || IsNil(o.ExecutionTimeoutTick) {
		var ret int32
		return ret
	}
	return *o.ExecutionTimeoutTick
}

// GetExecutionTimeoutTickOk returns a tuple with the ExecutionTimeoutTick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionTaskOptionAnsible) GetExecutionTimeoutTickOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecutionTimeoutTick) {
		return nil, false
	}
	return o.ExecutionTimeoutTick, true
}

// HasExecutionTimeoutTick returns a boolean if a field has been set.
func (o *ExtensionTaskOptionAnsible) HasExecutionTimeoutTick() bool {
	if o != nil && !IsNil(o.ExecutionTimeoutTick) {
		return true
	}

	return false
}

// SetExecutionTimeoutTick gets a reference to the given int32 and assigns it to the ExecutionTimeoutTick field.
func (o *ExtensionTaskOptionAnsible) SetExecutionTimeoutTick(v int32) {
	o.ExecutionTimeoutTick = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExtensionTaskOptionAnsible) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionTaskOptionAnsible) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExtensionTaskOptionAnsible) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExtensionTaskOptionAnsible) SetVersion(v string) {
	o.Version = &v
}

func (o ExtensionTaskOptionAnsible) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionTaskOptionAnsible) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.Playbook) {
		toSerialize["playbook"] = o.Playbook
	}
	if !IsNil(o.ExecutionTimeout) {
		toSerialize["executionTimeout"] = o.ExecutionTimeout
	}
	if !IsNil(o.ExecutionTimeoutTick) {
		toSerialize["executionTimeoutTick"] = o.ExecutionTimeoutTick
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionTaskOptionAnsible) UnmarshalJSON(data []byte) (err error) {
	varExtensionTaskOptionAnsible := _ExtensionTaskOptionAnsible{}

	err = json.Unmarshal(data, &varExtensionTaskOptionAnsible)

	if err != nil {
		return err
	}

	*o = ExtensionTaskOptionAnsible(varExtensionTaskOptionAnsible)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset")
		delete(additionalProperties, "playbook")
		delete(additionalProperties, "executionTimeout")
		delete(additionalProperties, "executionTimeoutTick")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionTaskOptionAnsible struct {
	value *ExtensionTaskOptionAnsible
	isSet bool
}

func (v NullableExtensionTaskOptionAnsible) Get() *ExtensionTaskOptionAnsible {
	return v.value
}

func (v *NullableExtensionTaskOptionAnsible) Set(val *ExtensionTaskOptionAnsible) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionTaskOptionAnsible) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionTaskOptionAnsible) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionTaskOptionAnsible(val *ExtensionTaskOptionAnsible) *NullableExtensionTaskOptionAnsible {
	return &NullableExtensionTaskOptionAnsible{value: val, isSet: true}
}

func (v NullableExtensionTaskOptionAnsible) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionTaskOptionAnsible) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


