/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// SubnetGatewayPlacement the model 'SubnetGatewayPlacement'
type SubnetGatewayPlacement string

// List of SubnetGatewayPlacement
const (
	SUBNETGATEWAYPLACEMENT_DEFAULT SubnetGatewayPlacement = "default"
	SUBNETGATEWAYPLACEMENT_EXTERNAL SubnetGatewayPlacement = "external"
)

// All allowed values of SubnetGatewayPlacement enum
var AllowedSubnetGatewayPlacementEnumValues = []SubnetGatewayPlacement{
	"default",
	"external",
}

func (v *SubnetGatewayPlacement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubnetGatewayPlacement(value)
	for _, existing := range AllowedSubnetGatewayPlacementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubnetGatewayPlacement", value)
}

// NewSubnetGatewayPlacementFromValue returns a pointer to a valid SubnetGatewayPlacement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubnetGatewayPlacementFromValue(v string) (*SubnetGatewayPlacement, error) {
	ev := SubnetGatewayPlacement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubnetGatewayPlacement: valid values are %v", v, AllowedSubnetGatewayPlacementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubnetGatewayPlacement) IsValid() bool {
	for _, existing := range AllowedSubnetGatewayPlacementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubnetGatewayPlacement value
func (v SubnetGatewayPlacement) Ptr() *SubnetGatewayPlacement {
	return &v
}

type NullableSubnetGatewayPlacement struct {
	value *SubnetGatewayPlacement
	isSet bool
}

func (v NullableSubnetGatewayPlacement) Get() *SubnetGatewayPlacement {
	return v.value
}

func (v *NullableSubnetGatewayPlacement) Set(val *SubnetGatewayPlacement) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetGatewayPlacement) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetGatewayPlacement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetGatewayPlacement(val *SubnetGatewayPlacement) *NullableSubnetGatewayPlacement {
	return &NullableSubnetGatewayPlacement{value: val, isSet: true}
}

func (v NullableSubnetGatewayPlacement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetGatewayPlacement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

