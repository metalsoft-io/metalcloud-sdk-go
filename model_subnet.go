/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the Subnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subnet{}

// Subnet struct for Subnet
type Subnet struct {
	// Id of the Subnet
	Id float32 `json:"id"`
	// Revision of the Subnet
	Revision float32 `json:"revision"`
	Label *string `json:"label,omitempty"`
	// Name of the Subnet
	Name string `json:"name"`
	// IP version
	IpVersion string `json:"ipVersion"`
	// ID of the parent subnet
	ParentSubnetId float32 `json:"parentSubnetId"`
	NetworkAddress string `json:"networkAddress"`
	PrefixLength float32 `json:"prefixLength"`
	Netmask string `json:"netmask"`
	Gateway string `json:"gateway"`
	IsPool bool `json:"isPool"`
	VrfId float32 `json:"vrfId"`
	AllocationDenylist []string `json:"allocationDenylist"`
	AllowedChildOverlapConditions []string `json:"allowedChildOverlapConditions"`
	Tags map[string]interface{} `json:"tags"`
	Metadata map[string]interface{} `json:"metadata"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Subnet Subnet

// NewSubnet instantiates a new Subnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnet(id float32, revision float32, name string, ipVersion string, parentSubnetId float32, networkAddress string, prefixLength float32, netmask string, gateway string, isPool bool, vrfId float32, allocationDenylist []string, allowedChildOverlapConditions []string, tags map[string]interface{}, metadata map[string]interface{}, createdAt string, updatedAt string) *Subnet {
	this := Subnet{}
	this.Id = id
	this.Revision = revision
	this.Name = name
	this.IpVersion = ipVersion
	this.ParentSubnetId = parentSubnetId
	this.NetworkAddress = networkAddress
	this.PrefixLength = prefixLength
	this.Netmask = netmask
	this.Gateway = gateway
	this.IsPool = isPool
	this.VrfId = vrfId
	this.AllocationDenylist = allocationDenylist
	this.AllowedChildOverlapConditions = allowedChildOverlapConditions
	this.Tags = tags
	this.Metadata = metadata
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewSubnetWithDefaults instantiates a new Subnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetWithDefaults() *Subnet {
	this := Subnet{}
	return &this
}

// GetId returns the Id field value
func (o *Subnet) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Subnet) SetId(v float32) {
	o.Id = v
}

// GetRevision returns the Revision field value
func (o *Subnet) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *Subnet) SetRevision(v float32) {
	o.Revision = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Subnet) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Subnet) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Subnet) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value
func (o *Subnet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Subnet) SetName(v string) {
	o.Name = v
}

// GetIpVersion returns the IpVersion field value
func (o *Subnet) GetIpVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpVersion
}

// GetIpVersionOk returns a tuple with the IpVersion field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetIpVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpVersion, true
}

// SetIpVersion sets field value
func (o *Subnet) SetIpVersion(v string) {
	o.IpVersion = v
}

// GetParentSubnetId returns the ParentSubnetId field value
func (o *Subnet) GetParentSubnetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ParentSubnetId
}

// GetParentSubnetIdOk returns a tuple with the ParentSubnetId field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetParentSubnetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentSubnetId, true
}

// SetParentSubnetId sets field value
func (o *Subnet) SetParentSubnetId(v float32) {
	o.ParentSubnetId = v
}

// GetNetworkAddress returns the NetworkAddress field value
func (o *Subnet) GetNetworkAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkAddress
}

// GetNetworkAddressOk returns a tuple with the NetworkAddress field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetworkAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkAddress, true
}

// SetNetworkAddress sets field value
func (o *Subnet) SetNetworkAddress(v string) {
	o.NetworkAddress = v
}

// GetPrefixLength returns the PrefixLength field value
func (o *Subnet) GetPrefixLength() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PrefixLength
}

// GetPrefixLengthOk returns a tuple with the PrefixLength field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetPrefixLengthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrefixLength, true
}

// SetPrefixLength sets field value
func (o *Subnet) SetPrefixLength(v float32) {
	o.PrefixLength = v
}

// GetNetmask returns the Netmask field value
func (o *Subnet) GetNetmask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetmaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Netmask, true
}

// SetNetmask sets field value
func (o *Subnet) SetNetmask(v string) {
	o.Netmask = v
}

// GetGateway returns the Gateway field value
func (o *Subnet) GetGateway() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gateway, true
}

// SetGateway sets field value
func (o *Subnet) SetGateway(v string) {
	o.Gateway = v
}

// GetIsPool returns the IsPool field value
func (o *Subnet) GetIsPool() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPool
}

// GetIsPoolOk returns a tuple with the IsPool field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetIsPoolOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPool, true
}

// SetIsPool sets field value
func (o *Subnet) SetIsPool(v bool) {
	o.IsPool = v
}

// GetVrfId returns the VrfId field value
func (o *Subnet) GetVrfId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.VrfId
}

// GetVrfIdOk returns a tuple with the VrfId field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetVrfIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VrfId, true
}

// SetVrfId sets field value
func (o *Subnet) SetVrfId(v float32) {
	o.VrfId = v
}

// GetAllocationDenylist returns the AllocationDenylist field value
func (o *Subnet) GetAllocationDenylist() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllocationDenylist
}

// GetAllocationDenylistOk returns a tuple with the AllocationDenylist field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetAllocationDenylistOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllocationDenylist, true
}

// SetAllocationDenylist sets field value
func (o *Subnet) SetAllocationDenylist(v []string) {
	o.AllocationDenylist = v
}

// GetAllowedChildOverlapConditions returns the AllowedChildOverlapConditions field value
func (o *Subnet) GetAllowedChildOverlapConditions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllowedChildOverlapConditions
}

// GetAllowedChildOverlapConditionsOk returns a tuple with the AllowedChildOverlapConditions field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetAllowedChildOverlapConditionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedChildOverlapConditions, true
}

// SetAllowedChildOverlapConditions sets field value
func (o *Subnet) SetAllowedChildOverlapConditions(v []string) {
	o.AllowedChildOverlapConditions = v
}

// GetTags returns the Tags field value
func (o *Subnet) GetTags() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *Subnet) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetMetadata returns the Metadata field value
func (o *Subnet) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *Subnet) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Subnet) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Subnet) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Subnet) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Subnet) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Subnet) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Subnet) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Subnet) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *Subnet) SetLinks(v []Link) {
	o.Links = v
}

func (o Subnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["revision"] = o.Revision
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["name"] = o.Name
	toSerialize["ipVersion"] = o.IpVersion
	toSerialize["parentSubnetId"] = o.ParentSubnetId
	toSerialize["networkAddress"] = o.NetworkAddress
	toSerialize["prefixLength"] = o.PrefixLength
	toSerialize["netmask"] = o.Netmask
	toSerialize["gateway"] = o.Gateway
	toSerialize["isPool"] = o.IsPool
	toSerialize["vrfId"] = o.VrfId
	toSerialize["allocationDenylist"] = o.AllocationDenylist
	toSerialize["allowedChildOverlapConditions"] = o.AllowedChildOverlapConditions
	toSerialize["tags"] = o.Tags
	toSerialize["metadata"] = o.Metadata
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Subnet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"revision",
		"name",
		"ipVersion",
		"parentSubnetId",
		"networkAddress",
		"prefixLength",
		"netmask",
		"gateway",
		"isPool",
		"vrfId",
		"allocationDenylist",
		"allowedChildOverlapConditions",
		"tags",
		"metadata",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubnet := _Subnet{}

	err = json.Unmarshal(data, &varSubnet)

	if err != nil {
		return err
	}

	*o = Subnet(varSubnet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "label")
		delete(additionalProperties, "name")
		delete(additionalProperties, "ipVersion")
		delete(additionalProperties, "parentSubnetId")
		delete(additionalProperties, "networkAddress")
		delete(additionalProperties, "prefixLength")
		delete(additionalProperties, "netmask")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "isPool")
		delete(additionalProperties, "vrfId")
		delete(additionalProperties, "allocationDenylist")
		delete(additionalProperties, "allowedChildOverlapConditions")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubnet struct {
	value *Subnet
	isSet bool
}

func (v NullableSubnet) Get() *Subnet {
	return v.value
}

func (v *NullableSubnet) Set(val *Subnet) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnet(val *Subnet) *NullableSubnet {
	return &NullableSubnet{value: val, isSet: true}
}

func (v NullableSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


