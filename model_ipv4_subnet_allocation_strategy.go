/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// Ipv4SubnetAllocationStrategy - struct for Ipv4SubnetAllocationStrategy
type Ipv4SubnetAllocationStrategy struct {
	AutoIpv4SubnetAllocationStrategy *AutoIpv4SubnetAllocationStrategy
	ManualIpv4SubnetAllocationStrategy *ManualIpv4SubnetAllocationStrategy
}

// AutoIpv4SubnetAllocationStrategyAsIpv4SubnetAllocationStrategy is a convenience function that returns AutoIpv4SubnetAllocationStrategy wrapped in Ipv4SubnetAllocationStrategy
func AutoIpv4SubnetAllocationStrategyAsIpv4SubnetAllocationStrategy(v *AutoIpv4SubnetAllocationStrategy) Ipv4SubnetAllocationStrategy {
	return Ipv4SubnetAllocationStrategy{
		AutoIpv4SubnetAllocationStrategy: v,
	}
}

// ManualIpv4SubnetAllocationStrategyAsIpv4SubnetAllocationStrategy is a convenience function that returns ManualIpv4SubnetAllocationStrategy wrapped in Ipv4SubnetAllocationStrategy
func ManualIpv4SubnetAllocationStrategyAsIpv4SubnetAllocationStrategy(v *ManualIpv4SubnetAllocationStrategy) Ipv4SubnetAllocationStrategy {
	return Ipv4SubnetAllocationStrategy{
		ManualIpv4SubnetAllocationStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Ipv4SubnetAllocationStrategy) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'auto'
	if jsonDict["kind"] == "auto" {
		// try to unmarshal JSON data into AutoIpv4SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.AutoIpv4SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.AutoIpv4SubnetAllocationStrategy, return on the first match
		} else {
			dst.AutoIpv4SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal Ipv4SubnetAllocationStrategy as AutoIpv4SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'manual'
	if jsonDict["kind"] == "manual" {
		// try to unmarshal JSON data into ManualIpv4SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.ManualIpv4SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.ManualIpv4SubnetAllocationStrategy, return on the first match
		} else {
			dst.ManualIpv4SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal Ipv4SubnetAllocationStrategy as ManualIpv4SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AutoIpv4SubnetAllocationStrategy'
	if jsonDict["kind"] == "AutoIpv4SubnetAllocationStrategy" {
		// try to unmarshal JSON data into AutoIpv4SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.AutoIpv4SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.AutoIpv4SubnetAllocationStrategy, return on the first match
		} else {
			dst.AutoIpv4SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal Ipv4SubnetAllocationStrategy as AutoIpv4SubnetAllocationStrategy: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ManualIpv4SubnetAllocationStrategy'
	if jsonDict["kind"] == "ManualIpv4SubnetAllocationStrategy" {
		// try to unmarshal JSON data into ManualIpv4SubnetAllocationStrategy
		err = json.Unmarshal(data, &dst.ManualIpv4SubnetAllocationStrategy)
		if err == nil {
			return nil // data stored in dst.ManualIpv4SubnetAllocationStrategy, return on the first match
		} else {
			dst.ManualIpv4SubnetAllocationStrategy = nil
			return fmt.Errorf("failed to unmarshal Ipv4SubnetAllocationStrategy as ManualIpv4SubnetAllocationStrategy: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Ipv4SubnetAllocationStrategy) MarshalJSON() ([]byte, error) {
	if src.AutoIpv4SubnetAllocationStrategy != nil {
		return json.Marshal(&src.AutoIpv4SubnetAllocationStrategy)
	}

	if src.ManualIpv4SubnetAllocationStrategy != nil {
		return json.Marshal(&src.ManualIpv4SubnetAllocationStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Ipv4SubnetAllocationStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AutoIpv4SubnetAllocationStrategy != nil {
		return obj.AutoIpv4SubnetAllocationStrategy
	}

	if obj.ManualIpv4SubnetAllocationStrategy != nil {
		return obj.ManualIpv4SubnetAllocationStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Ipv4SubnetAllocationStrategy) GetActualInstanceValue() (interface{}) {
	if obj.AutoIpv4SubnetAllocationStrategy != nil {
		return *obj.AutoIpv4SubnetAllocationStrategy
	}

	if obj.ManualIpv4SubnetAllocationStrategy != nil {
		return *obj.ManualIpv4SubnetAllocationStrategy
	}

	// all schemas are nil
	return nil
}

type NullableIpv4SubnetAllocationStrategy struct {
	value *Ipv4SubnetAllocationStrategy
	isSet bool
}

func (v NullableIpv4SubnetAllocationStrategy) Get() *Ipv4SubnetAllocationStrategy {
	return v.value
}

func (v *NullableIpv4SubnetAllocationStrategy) Set(val *Ipv4SubnetAllocationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableIpv4SubnetAllocationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableIpv4SubnetAllocationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpv4SubnetAllocationStrategy(val *Ipv4SubnetAllocationStrategy) *NullableIpv4SubnetAllocationStrategy {
	return &NullableIpv4SubnetAllocationStrategy{value: val, isSet: true}
}

func (v NullableIpv4SubnetAllocationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpv4SubnetAllocationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


