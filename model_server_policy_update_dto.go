/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ServerPolicyUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerPolicyUpdateDto{}

// ServerPolicyUpdateDto struct for ServerPolicyUpdateDto
type ServerPolicyUpdateDto struct {
	// Server registration type
	RegisterCredentials *string `json:"registerCredentials,omitempty"`
	// Minimum number of switch-connected interfaces required
	MinimumNumberOfConnectedInterfaces *float32 `json:"minimumNumberOfConnectedInterfaces,omitempty"`
	// Option82 to IP mapping
	DhcpOption82ToIPMapping map[string]interface{} `json:"dhcpOption82ToIPMapping,omitempty"`
	// Whether to enable DHCP BMC MAC address whitelist
	DhcpBmcMacAddressWhitelistEnabled *bool `json:"dhcpBmcMacAddressWhitelistEnabled,omitempty"`
	// List of DHCP BMC MAC address whitelist
	DhcpBmcMacAddressWhitelist []string `json:"dhcpBmcMacAddressWhitelist,omitempty"`
	// Whether RAID configuration is enabled
	RaidConfigurationEnabled *bool `json:"raidConfigurationEnabled,omitempty"`
	// Whether to disable TPM after registration
	DisableTpmAfterRegistration *bool `json:"disableTpmAfterRegistration,omitempty"`
	// Whether syslog monitoring is enabled
	SyslogMonitoringEnabled *bool `json:"syslogMonitoringEnabled,omitempty"`
	// Default server cleanup policy ID
	DefaultServerCleanupPolicyID *float32 `json:"defaultServerCleanupPolicyID,omitempty"`
	// Automatically allocate server types
	AutomaticallyAllocateServerTypes *bool `json:"automaticallyAllocateServerTypes,omitempty"`
	// Automatically set servers as available
	AutomaticallySetServersAsAvailable *bool `json:"automaticallySetServersAsAvailable,omitempty"`
	// Server registration BIOS profile
	ServerRegistrationBiosProfile []string `json:"serverRegistrationBiosProfile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerPolicyUpdateDto ServerPolicyUpdateDto

// NewServerPolicyUpdateDto instantiates a new ServerPolicyUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerPolicyUpdateDto() *ServerPolicyUpdateDto {
	this := ServerPolicyUpdateDto{}
	return &this
}

// NewServerPolicyUpdateDtoWithDefaults instantiates a new ServerPolicyUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerPolicyUpdateDtoWithDefaults() *ServerPolicyUpdateDto {
	this := ServerPolicyUpdateDto{}
	return &this
}

// GetRegisterCredentials returns the RegisterCredentials field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetRegisterCredentials() string {
	if o == nil || IsNil(o.RegisterCredentials) {
		var ret string
		return ret
	}
	return *o.RegisterCredentials
}

// GetRegisterCredentialsOk returns a tuple with the RegisterCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetRegisterCredentialsOk() (*string, bool) {
	if o == nil || IsNil(o.RegisterCredentials) {
		return nil, false
	}
	return o.RegisterCredentials, true
}

// HasRegisterCredentials returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasRegisterCredentials() bool {
	if o != nil && !IsNil(o.RegisterCredentials) {
		return true
	}

	return false
}

// SetRegisterCredentials gets a reference to the given string and assigns it to the RegisterCredentials field.
func (o *ServerPolicyUpdateDto) SetRegisterCredentials(v string) {
	o.RegisterCredentials = &v
}

// GetMinimumNumberOfConnectedInterfaces returns the MinimumNumberOfConnectedInterfaces field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetMinimumNumberOfConnectedInterfaces() float32 {
	if o == nil || IsNil(o.MinimumNumberOfConnectedInterfaces) {
		var ret float32
		return ret
	}
	return *o.MinimumNumberOfConnectedInterfaces
}

// GetMinimumNumberOfConnectedInterfacesOk returns a tuple with the MinimumNumberOfConnectedInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetMinimumNumberOfConnectedInterfacesOk() (*float32, bool) {
	if o == nil || IsNil(o.MinimumNumberOfConnectedInterfaces) {
		return nil, false
	}
	return o.MinimumNumberOfConnectedInterfaces, true
}

// HasMinimumNumberOfConnectedInterfaces returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasMinimumNumberOfConnectedInterfaces() bool {
	if o != nil && !IsNil(o.MinimumNumberOfConnectedInterfaces) {
		return true
	}

	return false
}

// SetMinimumNumberOfConnectedInterfaces gets a reference to the given float32 and assigns it to the MinimumNumberOfConnectedInterfaces field.
func (o *ServerPolicyUpdateDto) SetMinimumNumberOfConnectedInterfaces(v float32) {
	o.MinimumNumberOfConnectedInterfaces = &v
}

// GetDhcpOption82ToIPMapping returns the DhcpOption82ToIPMapping field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetDhcpOption82ToIPMapping() map[string]interface{} {
	if o == nil || IsNil(o.DhcpOption82ToIPMapping) {
		var ret map[string]interface{}
		return ret
	}
	return o.DhcpOption82ToIPMapping
}

// GetDhcpOption82ToIPMappingOk returns a tuple with the DhcpOption82ToIPMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetDhcpOption82ToIPMappingOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DhcpOption82ToIPMapping) {
		return map[string]interface{}{}, false
	}
	return o.DhcpOption82ToIPMapping, true
}

// HasDhcpOption82ToIPMapping returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasDhcpOption82ToIPMapping() bool {
	if o != nil && !IsNil(o.DhcpOption82ToIPMapping) {
		return true
	}

	return false
}

// SetDhcpOption82ToIPMapping gets a reference to the given map[string]interface{} and assigns it to the DhcpOption82ToIPMapping field.
func (o *ServerPolicyUpdateDto) SetDhcpOption82ToIPMapping(v map[string]interface{}) {
	o.DhcpOption82ToIPMapping = v
}

// GetDhcpBmcMacAddressWhitelistEnabled returns the DhcpBmcMacAddressWhitelistEnabled field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetDhcpBmcMacAddressWhitelistEnabled() bool {
	if o == nil || IsNil(o.DhcpBmcMacAddressWhitelistEnabled) {
		var ret bool
		return ret
	}
	return *o.DhcpBmcMacAddressWhitelistEnabled
}

// GetDhcpBmcMacAddressWhitelistEnabledOk returns a tuple with the DhcpBmcMacAddressWhitelistEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetDhcpBmcMacAddressWhitelistEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DhcpBmcMacAddressWhitelistEnabled) {
		return nil, false
	}
	return o.DhcpBmcMacAddressWhitelistEnabled, true
}

// HasDhcpBmcMacAddressWhitelistEnabled returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasDhcpBmcMacAddressWhitelistEnabled() bool {
	if o != nil && !IsNil(o.DhcpBmcMacAddressWhitelistEnabled) {
		return true
	}

	return false
}

// SetDhcpBmcMacAddressWhitelistEnabled gets a reference to the given bool and assigns it to the DhcpBmcMacAddressWhitelistEnabled field.
func (o *ServerPolicyUpdateDto) SetDhcpBmcMacAddressWhitelistEnabled(v bool) {
	o.DhcpBmcMacAddressWhitelistEnabled = &v
}

// GetDhcpBmcMacAddressWhitelist returns the DhcpBmcMacAddressWhitelist field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetDhcpBmcMacAddressWhitelist() []string {
	if o == nil || IsNil(o.DhcpBmcMacAddressWhitelist) {
		var ret []string
		return ret
	}
	return o.DhcpBmcMacAddressWhitelist
}

// GetDhcpBmcMacAddressWhitelistOk returns a tuple with the DhcpBmcMacAddressWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetDhcpBmcMacAddressWhitelistOk() ([]string, bool) {
	if o == nil || IsNil(o.DhcpBmcMacAddressWhitelist) {
		return nil, false
	}
	return o.DhcpBmcMacAddressWhitelist, true
}

// HasDhcpBmcMacAddressWhitelist returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasDhcpBmcMacAddressWhitelist() bool {
	if o != nil && !IsNil(o.DhcpBmcMacAddressWhitelist) {
		return true
	}

	return false
}

// SetDhcpBmcMacAddressWhitelist gets a reference to the given []string and assigns it to the DhcpBmcMacAddressWhitelist field.
func (o *ServerPolicyUpdateDto) SetDhcpBmcMacAddressWhitelist(v []string) {
	o.DhcpBmcMacAddressWhitelist = v
}

// GetRaidConfigurationEnabled returns the RaidConfigurationEnabled field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetRaidConfigurationEnabled() bool {
	if o == nil || IsNil(o.RaidConfigurationEnabled) {
		var ret bool
		return ret
	}
	return *o.RaidConfigurationEnabled
}

// GetRaidConfigurationEnabledOk returns a tuple with the RaidConfigurationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetRaidConfigurationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RaidConfigurationEnabled) {
		return nil, false
	}
	return o.RaidConfigurationEnabled, true
}

// HasRaidConfigurationEnabled returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasRaidConfigurationEnabled() bool {
	if o != nil && !IsNil(o.RaidConfigurationEnabled) {
		return true
	}

	return false
}

// SetRaidConfigurationEnabled gets a reference to the given bool and assigns it to the RaidConfigurationEnabled field.
func (o *ServerPolicyUpdateDto) SetRaidConfigurationEnabled(v bool) {
	o.RaidConfigurationEnabled = &v
}

// GetDisableTpmAfterRegistration returns the DisableTpmAfterRegistration field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetDisableTpmAfterRegistration() bool {
	if o == nil || IsNil(o.DisableTpmAfterRegistration) {
		var ret bool
		return ret
	}
	return *o.DisableTpmAfterRegistration
}

// GetDisableTpmAfterRegistrationOk returns a tuple with the DisableTpmAfterRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetDisableTpmAfterRegistrationOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableTpmAfterRegistration) {
		return nil, false
	}
	return o.DisableTpmAfterRegistration, true
}

// HasDisableTpmAfterRegistration returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasDisableTpmAfterRegistration() bool {
	if o != nil && !IsNil(o.DisableTpmAfterRegistration) {
		return true
	}

	return false
}

// SetDisableTpmAfterRegistration gets a reference to the given bool and assigns it to the DisableTpmAfterRegistration field.
func (o *ServerPolicyUpdateDto) SetDisableTpmAfterRegistration(v bool) {
	o.DisableTpmAfterRegistration = &v
}

// GetSyslogMonitoringEnabled returns the SyslogMonitoringEnabled field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetSyslogMonitoringEnabled() bool {
	if o == nil || IsNil(o.SyslogMonitoringEnabled) {
		var ret bool
		return ret
	}
	return *o.SyslogMonitoringEnabled
}

// GetSyslogMonitoringEnabledOk returns a tuple with the SyslogMonitoringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetSyslogMonitoringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SyslogMonitoringEnabled) {
		return nil, false
	}
	return o.SyslogMonitoringEnabled, true
}

// HasSyslogMonitoringEnabled returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasSyslogMonitoringEnabled() bool {
	if o != nil && !IsNil(o.SyslogMonitoringEnabled) {
		return true
	}

	return false
}

// SetSyslogMonitoringEnabled gets a reference to the given bool and assigns it to the SyslogMonitoringEnabled field.
func (o *ServerPolicyUpdateDto) SetSyslogMonitoringEnabled(v bool) {
	o.SyslogMonitoringEnabled = &v
}

// GetDefaultServerCleanupPolicyID returns the DefaultServerCleanupPolicyID field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetDefaultServerCleanupPolicyID() float32 {
	if o == nil || IsNil(o.DefaultServerCleanupPolicyID) {
		var ret float32
		return ret
	}
	return *o.DefaultServerCleanupPolicyID
}

// GetDefaultServerCleanupPolicyIDOk returns a tuple with the DefaultServerCleanupPolicyID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetDefaultServerCleanupPolicyIDOk() (*float32, bool) {
	if o == nil || IsNil(o.DefaultServerCleanupPolicyID) {
		return nil, false
	}
	return o.DefaultServerCleanupPolicyID, true
}

// HasDefaultServerCleanupPolicyID returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasDefaultServerCleanupPolicyID() bool {
	if o != nil && !IsNil(o.DefaultServerCleanupPolicyID) {
		return true
	}

	return false
}

// SetDefaultServerCleanupPolicyID gets a reference to the given float32 and assigns it to the DefaultServerCleanupPolicyID field.
func (o *ServerPolicyUpdateDto) SetDefaultServerCleanupPolicyID(v float32) {
	o.DefaultServerCleanupPolicyID = &v
}

// GetAutomaticallyAllocateServerTypes returns the AutomaticallyAllocateServerTypes field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetAutomaticallyAllocateServerTypes() bool {
	if o == nil || IsNil(o.AutomaticallyAllocateServerTypes) {
		var ret bool
		return ret
	}
	return *o.AutomaticallyAllocateServerTypes
}

// GetAutomaticallyAllocateServerTypesOk returns a tuple with the AutomaticallyAllocateServerTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetAutomaticallyAllocateServerTypesOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticallyAllocateServerTypes) {
		return nil, false
	}
	return o.AutomaticallyAllocateServerTypes, true
}

// HasAutomaticallyAllocateServerTypes returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasAutomaticallyAllocateServerTypes() bool {
	if o != nil && !IsNil(o.AutomaticallyAllocateServerTypes) {
		return true
	}

	return false
}

// SetAutomaticallyAllocateServerTypes gets a reference to the given bool and assigns it to the AutomaticallyAllocateServerTypes field.
func (o *ServerPolicyUpdateDto) SetAutomaticallyAllocateServerTypes(v bool) {
	o.AutomaticallyAllocateServerTypes = &v
}

// GetAutomaticallySetServersAsAvailable returns the AutomaticallySetServersAsAvailable field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetAutomaticallySetServersAsAvailable() bool {
	if o == nil || IsNil(o.AutomaticallySetServersAsAvailable) {
		var ret bool
		return ret
	}
	return *o.AutomaticallySetServersAsAvailable
}

// GetAutomaticallySetServersAsAvailableOk returns a tuple with the AutomaticallySetServersAsAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetAutomaticallySetServersAsAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticallySetServersAsAvailable) {
		return nil, false
	}
	return o.AutomaticallySetServersAsAvailable, true
}

// HasAutomaticallySetServersAsAvailable returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasAutomaticallySetServersAsAvailable() bool {
	if o != nil && !IsNil(o.AutomaticallySetServersAsAvailable) {
		return true
	}

	return false
}

// SetAutomaticallySetServersAsAvailable gets a reference to the given bool and assigns it to the AutomaticallySetServersAsAvailable field.
func (o *ServerPolicyUpdateDto) SetAutomaticallySetServersAsAvailable(v bool) {
	o.AutomaticallySetServersAsAvailable = &v
}

// GetServerRegistrationBiosProfile returns the ServerRegistrationBiosProfile field value if set, zero value otherwise.
func (o *ServerPolicyUpdateDto) GetServerRegistrationBiosProfile() []string {
	if o == nil || IsNil(o.ServerRegistrationBiosProfile) {
		var ret []string
		return ret
	}
	return o.ServerRegistrationBiosProfile
}

// GetServerRegistrationBiosProfileOk returns a tuple with the ServerRegistrationBiosProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerPolicyUpdateDto) GetServerRegistrationBiosProfileOk() ([]string, bool) {
	if o == nil || IsNil(o.ServerRegistrationBiosProfile) {
		return nil, false
	}
	return o.ServerRegistrationBiosProfile, true
}

// HasServerRegistrationBiosProfile returns a boolean if a field has been set.
func (o *ServerPolicyUpdateDto) HasServerRegistrationBiosProfile() bool {
	if o != nil && !IsNil(o.ServerRegistrationBiosProfile) {
		return true
	}

	return false
}

// SetServerRegistrationBiosProfile gets a reference to the given []string and assigns it to the ServerRegistrationBiosProfile field.
func (o *ServerPolicyUpdateDto) SetServerRegistrationBiosProfile(v []string) {
	o.ServerRegistrationBiosProfile = v
}

func (o ServerPolicyUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerPolicyUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RegisterCredentials) {
		toSerialize["registerCredentials"] = o.RegisterCredentials
	}
	if !IsNil(o.MinimumNumberOfConnectedInterfaces) {
		toSerialize["minimumNumberOfConnectedInterfaces"] = o.MinimumNumberOfConnectedInterfaces
	}
	if !IsNil(o.DhcpOption82ToIPMapping) {
		toSerialize["dhcpOption82ToIPMapping"] = o.DhcpOption82ToIPMapping
	}
	if !IsNil(o.DhcpBmcMacAddressWhitelistEnabled) {
		toSerialize["dhcpBmcMacAddressWhitelistEnabled"] = o.DhcpBmcMacAddressWhitelistEnabled
	}
	if !IsNil(o.DhcpBmcMacAddressWhitelist) {
		toSerialize["dhcpBmcMacAddressWhitelist"] = o.DhcpBmcMacAddressWhitelist
	}
	if !IsNil(o.RaidConfigurationEnabled) {
		toSerialize["raidConfigurationEnabled"] = o.RaidConfigurationEnabled
	}
	if !IsNil(o.DisableTpmAfterRegistration) {
		toSerialize["disableTpmAfterRegistration"] = o.DisableTpmAfterRegistration
	}
	if !IsNil(o.SyslogMonitoringEnabled) {
		toSerialize["syslogMonitoringEnabled"] = o.SyslogMonitoringEnabled
	}
	if !IsNil(o.DefaultServerCleanupPolicyID) {
		toSerialize["defaultServerCleanupPolicyID"] = o.DefaultServerCleanupPolicyID
	}
	if !IsNil(o.AutomaticallyAllocateServerTypes) {
		toSerialize["automaticallyAllocateServerTypes"] = o.AutomaticallyAllocateServerTypes
	}
	if !IsNil(o.AutomaticallySetServersAsAvailable) {
		toSerialize["automaticallySetServersAsAvailable"] = o.AutomaticallySetServersAsAvailable
	}
	if !IsNil(o.ServerRegistrationBiosProfile) {
		toSerialize["serverRegistrationBiosProfile"] = o.ServerRegistrationBiosProfile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerPolicyUpdateDto) UnmarshalJSON(data []byte) (err error) {
	varServerPolicyUpdateDto := _ServerPolicyUpdateDto{}

	err = json.Unmarshal(data, &varServerPolicyUpdateDto)

	if err != nil {
		return err
	}

	*o = ServerPolicyUpdateDto(varServerPolicyUpdateDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "registerCredentials")
		delete(additionalProperties, "minimumNumberOfConnectedInterfaces")
		delete(additionalProperties, "dhcpOption82ToIPMapping")
		delete(additionalProperties, "dhcpBmcMacAddressWhitelistEnabled")
		delete(additionalProperties, "dhcpBmcMacAddressWhitelist")
		delete(additionalProperties, "raidConfigurationEnabled")
		delete(additionalProperties, "disableTpmAfterRegistration")
		delete(additionalProperties, "syslogMonitoringEnabled")
		delete(additionalProperties, "defaultServerCleanupPolicyID")
		delete(additionalProperties, "automaticallyAllocateServerTypes")
		delete(additionalProperties, "automaticallySetServersAsAvailable")
		delete(additionalProperties, "serverRegistrationBiosProfile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerPolicyUpdateDto struct {
	value *ServerPolicyUpdateDto
	isSet bool
}

func (v NullableServerPolicyUpdateDto) Get() *ServerPolicyUpdateDto {
	return v.value
}

func (v *NullableServerPolicyUpdateDto) Set(val *ServerPolicyUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableServerPolicyUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableServerPolicyUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerPolicyUpdateDto(val *ServerPolicyUpdateDto) *NullableServerPolicyUpdateDto {
	return &NullableServerPolicyUpdateDto{value: val, isSet: true}
}

func (v NullableServerPolicyUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerPolicyUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


