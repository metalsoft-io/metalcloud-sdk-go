/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the Server type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Server{}

// Server struct for Server
type Server struct {
	// The id of the server.
	ServerId float32 `json:"serverId"`
	// Revision number
	Revision float32 `json:"revision"`
	// The id of the server type.
	ServerTypeId *float32 `json:"serverTypeId,omitempty"`
	// The site id where the server is located.
	SiteId float32 `json:"siteId"`
	// The name of the datacenter where the server is located.
	DatacenterName string `json:"datacenterName"`
	// The UUID of the server.
	ServerUUID *string `json:"serverUUID,omitempty"`
	// The Serial Number of the server.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// The Management Address of the server.
	ManagementAddress *string `json:"managementAddress,omitempty"`
	// The username to use.
	Username *string `json:"username,omitempty"`
	// The encrypted password.
	PasswordEncrypted string `json:"passwordEncrypted"`
	// The ipmi version of the server.
	IpmiVersion *string `json:"ipmiVersion,omitempty"`
	// The RAM GB of the server.
	RamGbytes *float32 `json:"ramGbytes,omitempty"`
	// The processor count of the server.
	ProcessorCount *float32 `json:"processorCount,omitempty"`
	// The processor core Mhz of the server.
	ProcessorCoreMhz *float32 `json:"processorCoreMhz,omitempty"`
	// The processor core count of the server.
	ProcessorCoreCount *float32 `json:"processorCoreCount,omitempty"`
	// The processor name of the server.
	ProcessorName *string `json:"processorName,omitempty"`
	// The processor cpu mark of the server.
	ProcessorCpuMark *float32 `json:"processorCpuMark,omitempty"`
	// The processor threads of the server.
	ProcessorThreads *float32 `json:"processorThreads,omitempty"`
	// The disk count of the server.
	DiskCount *float32 `json:"diskCount,omitempty"`
	// The management snmp port of the server.
	MgmtSnmpPort *float32 `json:"mgmtSnmpPort,omitempty"`
	// The management snmp password encrypted of the server.
	MgmtSnmpPasswordEncrypted *string `json:"mgmtSnmpPasswordEncrypted,omitempty"`
	// The MAC address of the server.
	BmcMacAddress *string `json:"bmcMacAddress,omitempty"`
	// The BDK debug flag.
	BdkDebug float32 `json:"bdkDebug"`
	// The metrics metadata of the server.
	ServerMetricsMetadata *map[string][]ServerMetricsInfo `json:"serverMetricsMetadata,omitempty"`
	// The instance custom info of the server.
	InstanceCustomInfo map[string]interface{} `json:"instanceCustomInfo,omitempty"`
	// The custom info of the server.
	CustomInfo map[string]interface{} `json:"customInfo,omitempty"`
	// The vendor of the server.
	Vendor *string `json:"vendor,omitempty"`
	// The vendor sku id of the server.
	VendorSkuId *string `json:"vendorSkuId,omitempty"`
	// The model of the server.
	Model *string `json:"model,omitempty"`
	// The VNC port of the server.
	VncPort *float32 `json:"vncPort,omitempty"`
	// The VNC password encrypted of the server.
	VncPasswordEncrypted *string `json:"vncPasswordEncrypted,omitempty"`
	// Flag to indicate if the server is basic campus endpoint.
	IsBasicCampusEndpoint *float32 `json:"isBasicCampusEndpoint,omitempty"`
	// The cleanup policy id of the server.
	ServerCleanupPolicyId *float32 `json:"serverCleanupPolicyId,omitempty"`
	// Flag to indicate if the server required re-registration.
	RequiresReRegister float32 `json:"requiresReRegister"`
	// Flag to indicate if the supports SOL.
	ServerSupportsSol *float32 `json:"serverSupportsSol,omitempty"`
	// Flag to indicate if the supports Virtual Media.
	ServerSupportsVirtualMedia *float32 `json:"serverSupportsVirtualMedia,omitempty"`
	// Flag to indicate if the supports OOB provisioning.
	ServerSupportsOobProvisioning *float32 `json:"serverSupportsOobProvisioning,omitempty"`
	// Flag to indicate if the server was added as a production (brownfield) server.
	ServerIsProduction *float32 `json:"serverIsProduction,omitempty"`
	// Flag to indicate if the server is booting a custom iso.
	BootingCustomIsoInProgress *float32 `json:"bootingCustomIsoInProgress,omitempty"`
	// The bios info of the server.
	BiosInfo *ServerBiosInfo `json:"biosInfo,omitempty"`
	// The vendor info of the server.
	VendorInfo *ServerVendorInfo `json:"vendorInfo,omitempty"`
	// The class of the server.
	ServerClass string `json:"serverClass"`
	// The status of the server.
	ServerStatus string `json:"serverStatus"`
	// The comments of the server.
	ServerComments *string `json:"serverComments,omitempty"`
	// The capacity mbps of the server.
	ServerCapacityMbps *float32 `json:"serverCapacityMbps,omitempty"`
	// Flag to indicate if the disks need to be wiped.
	ServerDiskWipe *float32 `json:"serverDiskWipe,omitempty"`
	// Flag to indicate if the server requires manual cleaning.
	RequiresManualCleaning *float32 `json:"requiresManualCleaning,omitempty"`
	// The number of disks of the server.
	ServerDiskCount *float32 `json:"serverDiskCount,omitempty"`
	// The administration state of the server.
	AdministrationState string `json:"administrationState"`
	// The DHCP status of the server.
	ServerDhcpStatus string `json:"serverDhcpStatus"`
	// The GPU count of the server.
	GpuCount *float32 `json:"gpuCount,omitempty"`
	// The GPU info of the server.
	GpuInfo []ServerGpuInfo `json:"gpuInfo,omitempty"`
	// The submodel of the server.
	Submodel *string `json:"submodel,omitempty"`
	// Flag to indicate if the server supports FC provisioning.
	SupportsFcProvisioning float32 `json:"supportsFcProvisioning"`
	// The last boot update timestamp of the server.
	BootLastUpdateTimestamp *string `json:"bootLastUpdateTimestamp,omitempty"`
	// The registration timestamp of the server.
	RegisteredTimestamp *string `json:"registeredTimestamp,omitempty"`
	// The creation timestamp of the server.
	ServerCreatedTimestamp string `json:"serverCreatedTimestamp"`
	// The power status of the server.
	PowerStatus string `json:"powerStatus"`
	// The last power update timestamp of the server.
	PowerStatusLastUpdateTimestamp string `json:"powerStatusLastUpdateTimestamp"`
	// The timestamp when the server was allocated.
	ServerAllocationTimestamp *string `json:"serverAllocationTimestamp,omitempty"`
	JobInfo *JobInfo `json:"jobInfo,omitempty"`
	// The chassis rack id of the server.
	ChassisRackId *float32 `json:"chassisRackId,omitempty"`
	// The chassis rack name of the server.
	RackName *string `json:"rackName,omitempty"`
	// The chassis rack upper unit position of the server.
	RackPositionUpperUnit *string `json:"rackPositionUpperUnit,omitempty"`
	// The chassis rack lower unit position of the server.
	RackPositionLowerUnit *string `json:"rackPositionLowerUnit,omitempty"`
	// The inventory id of the server.
	InventoryId *string `json:"inventoryId,omitempty"`
	// Flag to indicate if the server needs an update of the IPMI credentials.
	IpmiCredentialsNeedUpdate *float32 `json:"ipmiCredentialsNeedUpdate,omitempty"`
	// The interfaces of the server.
	Interfaces []ServerInterface `json:"interfaces,omitempty"`
	// The disks of the server.
	Disks []ServerDisk `json:"disks,omitempty"`
	// The storage controllers of the server.
	StorageControllers []ServerStorageController `json:"storageControllers,omitempty"`
	// Tags for the Server.
	Tags []string `json:"tags,omitempty"`
	// Resource Pool ID
	ResourcePoolId *float32 `json:"resourcePoolId,omitempty"`
	// The server instance.
	AllocationInfo *ServerAllocationInfo `json:"allocationInfo,omitempty"`
	// The extension execution info of the server.
	ExtensionInfo *ExtensionExecutionInfo `json:"extensionInfo,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Server Server

// NewServer instantiates a new Server object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServer(serverId float32, revision float32, siteId float32, datacenterName string, passwordEncrypted string, bdkDebug float32, requiresReRegister float32, serverClass string, serverStatus string, administrationState string, serverDhcpStatus string, supportsFcProvisioning float32, serverCreatedTimestamp string, powerStatus string, powerStatusLastUpdateTimestamp string) *Server {
	this := Server{}
	this.ServerId = serverId
	this.Revision = revision
	this.SiteId = siteId
	this.DatacenterName = datacenterName
	this.PasswordEncrypted = passwordEncrypted
	this.BdkDebug = bdkDebug
	this.RequiresReRegister = requiresReRegister
	this.ServerClass = serverClass
	this.ServerStatus = serverStatus
	this.AdministrationState = administrationState
	this.ServerDhcpStatus = serverDhcpStatus
	this.SupportsFcProvisioning = supportsFcProvisioning
	this.ServerCreatedTimestamp = serverCreatedTimestamp
	this.PowerStatus = powerStatus
	this.PowerStatusLastUpdateTimestamp = powerStatusLastUpdateTimestamp
	return &this
}

// NewServerWithDefaults instantiates a new Server object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerWithDefaults() *Server {
	this := Server{}
	return &this
}

// GetServerId returns the ServerId field value
func (o *Server) GetServerId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value
// and a boolean to check if the value has been set.
func (o *Server) GetServerIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerId, true
}

// SetServerId sets field value
func (o *Server) SetServerId(v float32) {
	o.ServerId = v
}

// GetRevision returns the Revision field value
func (o *Server) GetRevision() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *Server) GetRevisionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *Server) SetRevision(v float32) {
	o.Revision = v
}

// GetServerTypeId returns the ServerTypeId field value if set, zero value otherwise.
func (o *Server) GetServerTypeId() float32 {
	if o == nil || IsNil(o.ServerTypeId) {
		var ret float32
		return ret
	}
	return *o.ServerTypeId
}

// GetServerTypeIdOk returns a tuple with the ServerTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerTypeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerTypeId) {
		return nil, false
	}
	return o.ServerTypeId, true
}

// HasServerTypeId returns a boolean if a field has been set.
func (o *Server) HasServerTypeId() bool {
	if o != nil && !IsNil(o.ServerTypeId) {
		return true
	}

	return false
}

// SetServerTypeId gets a reference to the given float32 and assigns it to the ServerTypeId field.
func (o *Server) SetServerTypeId(v float32) {
	o.ServerTypeId = &v
}

// GetSiteId returns the SiteId field value
func (o *Server) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *Server) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *Server) SetSiteId(v float32) {
	o.SiteId = v
}

// GetDatacenterName returns the DatacenterName field value
func (o *Server) GetDatacenterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatacenterName
}

// GetDatacenterNameOk returns a tuple with the DatacenterName field value
// and a boolean to check if the value has been set.
func (o *Server) GetDatacenterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatacenterName, true
}

// SetDatacenterName sets field value
func (o *Server) SetDatacenterName(v string) {
	o.DatacenterName = v
}

// GetServerUUID returns the ServerUUID field value if set, zero value otherwise.
func (o *Server) GetServerUUID() string {
	if o == nil || IsNil(o.ServerUUID) {
		var ret string
		return ret
	}
	return *o.ServerUUID
}

// GetServerUUIDOk returns a tuple with the ServerUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.ServerUUID) {
		return nil, false
	}
	return o.ServerUUID, true
}

// HasServerUUID returns a boolean if a field has been set.
func (o *Server) HasServerUUID() bool {
	if o != nil && !IsNil(o.ServerUUID) {
		return true
	}

	return false
}

// SetServerUUID gets a reference to the given string and assigns it to the ServerUUID field.
func (o *Server) SetServerUUID(v string) {
	o.ServerUUID = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *Server) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Server) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *Server) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetManagementAddress returns the ManagementAddress field value if set, zero value otherwise.
func (o *Server) GetManagementAddress() string {
	if o == nil || IsNil(o.ManagementAddress) {
		var ret string
		return ret
	}
	return *o.ManagementAddress
}

// GetManagementAddressOk returns a tuple with the ManagementAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetManagementAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementAddress) {
		return nil, false
	}
	return o.ManagementAddress, true
}

// HasManagementAddress returns a boolean if a field has been set.
func (o *Server) HasManagementAddress() bool {
	if o != nil && !IsNil(o.ManagementAddress) {
		return true
	}

	return false
}

// SetManagementAddress gets a reference to the given string and assigns it to the ManagementAddress field.
func (o *Server) SetManagementAddress(v string) {
	o.ManagementAddress = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Server) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Server) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Server) SetUsername(v string) {
	o.Username = &v
}

// GetPasswordEncrypted returns the PasswordEncrypted field value
func (o *Server) GetPasswordEncrypted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PasswordEncrypted
}

// GetPasswordEncryptedOk returns a tuple with the PasswordEncrypted field value
// and a boolean to check if the value has been set.
func (o *Server) GetPasswordEncryptedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PasswordEncrypted, true
}

// SetPasswordEncrypted sets field value
func (o *Server) SetPasswordEncrypted(v string) {
	o.PasswordEncrypted = v
}

// GetIpmiVersion returns the IpmiVersion field value if set, zero value otherwise.
func (o *Server) GetIpmiVersion() string {
	if o == nil || IsNil(o.IpmiVersion) {
		var ret string
		return ret
	}
	return *o.IpmiVersion
}

// GetIpmiVersionOk returns a tuple with the IpmiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetIpmiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.IpmiVersion) {
		return nil, false
	}
	return o.IpmiVersion, true
}

// HasIpmiVersion returns a boolean if a field has been set.
func (o *Server) HasIpmiVersion() bool {
	if o != nil && !IsNil(o.IpmiVersion) {
		return true
	}

	return false
}

// SetIpmiVersion gets a reference to the given string and assigns it to the IpmiVersion field.
func (o *Server) SetIpmiVersion(v string) {
	o.IpmiVersion = &v
}

// GetRamGbytes returns the RamGbytes field value if set, zero value otherwise.
func (o *Server) GetRamGbytes() float32 {
	if o == nil || IsNil(o.RamGbytes) {
		var ret float32
		return ret
	}
	return *o.RamGbytes
}

// GetRamGbytesOk returns a tuple with the RamGbytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetRamGbytesOk() (*float32, bool) {
	if o == nil || IsNil(o.RamGbytes) {
		return nil, false
	}
	return o.RamGbytes, true
}

// HasRamGbytes returns a boolean if a field has been set.
func (o *Server) HasRamGbytes() bool {
	if o != nil && !IsNil(o.RamGbytes) {
		return true
	}

	return false
}

// SetRamGbytes gets a reference to the given float32 and assigns it to the RamGbytes field.
func (o *Server) SetRamGbytes(v float32) {
	o.RamGbytes = &v
}

// GetProcessorCount returns the ProcessorCount field value if set, zero value otherwise.
func (o *Server) GetProcessorCount() float32 {
	if o == nil || IsNil(o.ProcessorCount) {
		var ret float32
		return ret
	}
	return *o.ProcessorCount
}

// GetProcessorCountOk returns a tuple with the ProcessorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetProcessorCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ProcessorCount) {
		return nil, false
	}
	return o.ProcessorCount, true
}

// HasProcessorCount returns a boolean if a field has been set.
func (o *Server) HasProcessorCount() bool {
	if o != nil && !IsNil(o.ProcessorCount) {
		return true
	}

	return false
}

// SetProcessorCount gets a reference to the given float32 and assigns it to the ProcessorCount field.
func (o *Server) SetProcessorCount(v float32) {
	o.ProcessorCount = &v
}

// GetProcessorCoreMhz returns the ProcessorCoreMhz field value if set, zero value otherwise.
func (o *Server) GetProcessorCoreMhz() float32 {
	if o == nil || IsNil(o.ProcessorCoreMhz) {
		var ret float32
		return ret
	}
	return *o.ProcessorCoreMhz
}

// GetProcessorCoreMhzOk returns a tuple with the ProcessorCoreMhz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetProcessorCoreMhzOk() (*float32, bool) {
	if o == nil || IsNil(o.ProcessorCoreMhz) {
		return nil, false
	}
	return o.ProcessorCoreMhz, true
}

// HasProcessorCoreMhz returns a boolean if a field has been set.
func (o *Server) HasProcessorCoreMhz() bool {
	if o != nil && !IsNil(o.ProcessorCoreMhz) {
		return true
	}

	return false
}

// SetProcessorCoreMhz gets a reference to the given float32 and assigns it to the ProcessorCoreMhz field.
func (o *Server) SetProcessorCoreMhz(v float32) {
	o.ProcessorCoreMhz = &v
}

// GetProcessorCoreCount returns the ProcessorCoreCount field value if set, zero value otherwise.
func (o *Server) GetProcessorCoreCount() float32 {
	if o == nil || IsNil(o.ProcessorCoreCount) {
		var ret float32
		return ret
	}
	return *o.ProcessorCoreCount
}

// GetProcessorCoreCountOk returns a tuple with the ProcessorCoreCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetProcessorCoreCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ProcessorCoreCount) {
		return nil, false
	}
	return o.ProcessorCoreCount, true
}

// HasProcessorCoreCount returns a boolean if a field has been set.
func (o *Server) HasProcessorCoreCount() bool {
	if o != nil && !IsNil(o.ProcessorCoreCount) {
		return true
	}

	return false
}

// SetProcessorCoreCount gets a reference to the given float32 and assigns it to the ProcessorCoreCount field.
func (o *Server) SetProcessorCoreCount(v float32) {
	o.ProcessorCoreCount = &v
}

// GetProcessorName returns the ProcessorName field value if set, zero value otherwise.
func (o *Server) GetProcessorName() string {
	if o == nil || IsNil(o.ProcessorName) {
		var ret string
		return ret
	}
	return *o.ProcessorName
}

// GetProcessorNameOk returns a tuple with the ProcessorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetProcessorNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessorName) {
		return nil, false
	}
	return o.ProcessorName, true
}

// HasProcessorName returns a boolean if a field has been set.
func (o *Server) HasProcessorName() bool {
	if o != nil && !IsNil(o.ProcessorName) {
		return true
	}

	return false
}

// SetProcessorName gets a reference to the given string and assigns it to the ProcessorName field.
func (o *Server) SetProcessorName(v string) {
	o.ProcessorName = &v
}

// GetProcessorCpuMark returns the ProcessorCpuMark field value if set, zero value otherwise.
func (o *Server) GetProcessorCpuMark() float32 {
	if o == nil || IsNil(o.ProcessorCpuMark) {
		var ret float32
		return ret
	}
	return *o.ProcessorCpuMark
}

// GetProcessorCpuMarkOk returns a tuple with the ProcessorCpuMark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetProcessorCpuMarkOk() (*float32, bool) {
	if o == nil || IsNil(o.ProcessorCpuMark) {
		return nil, false
	}
	return o.ProcessorCpuMark, true
}

// HasProcessorCpuMark returns a boolean if a field has been set.
func (o *Server) HasProcessorCpuMark() bool {
	if o != nil && !IsNil(o.ProcessorCpuMark) {
		return true
	}

	return false
}

// SetProcessorCpuMark gets a reference to the given float32 and assigns it to the ProcessorCpuMark field.
func (o *Server) SetProcessorCpuMark(v float32) {
	o.ProcessorCpuMark = &v
}

// GetProcessorThreads returns the ProcessorThreads field value if set, zero value otherwise.
func (o *Server) GetProcessorThreads() float32 {
	if o == nil || IsNil(o.ProcessorThreads) {
		var ret float32
		return ret
	}
	return *o.ProcessorThreads
}

// GetProcessorThreadsOk returns a tuple with the ProcessorThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetProcessorThreadsOk() (*float32, bool) {
	if o == nil || IsNil(o.ProcessorThreads) {
		return nil, false
	}
	return o.ProcessorThreads, true
}

// HasProcessorThreads returns a boolean if a field has been set.
func (o *Server) HasProcessorThreads() bool {
	if o != nil && !IsNil(o.ProcessorThreads) {
		return true
	}

	return false
}

// SetProcessorThreads gets a reference to the given float32 and assigns it to the ProcessorThreads field.
func (o *Server) SetProcessorThreads(v float32) {
	o.ProcessorThreads = &v
}

// GetDiskCount returns the DiskCount field value if set, zero value otherwise.
func (o *Server) GetDiskCount() float32 {
	if o == nil || IsNil(o.DiskCount) {
		var ret float32
		return ret
	}
	return *o.DiskCount
}

// GetDiskCountOk returns a tuple with the DiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetDiskCountOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskCount) {
		return nil, false
	}
	return o.DiskCount, true
}

// HasDiskCount returns a boolean if a field has been set.
func (o *Server) HasDiskCount() bool {
	if o != nil && !IsNil(o.DiskCount) {
		return true
	}

	return false
}

// SetDiskCount gets a reference to the given float32 and assigns it to the DiskCount field.
func (o *Server) SetDiskCount(v float32) {
	o.DiskCount = &v
}

// GetMgmtSnmpPort returns the MgmtSnmpPort field value if set, zero value otherwise.
func (o *Server) GetMgmtSnmpPort() float32 {
	if o == nil || IsNil(o.MgmtSnmpPort) {
		var ret float32
		return ret
	}
	return *o.MgmtSnmpPort
}

// GetMgmtSnmpPortOk returns a tuple with the MgmtSnmpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetMgmtSnmpPortOk() (*float32, bool) {
	if o == nil || IsNil(o.MgmtSnmpPort) {
		return nil, false
	}
	return o.MgmtSnmpPort, true
}

// HasMgmtSnmpPort returns a boolean if a field has been set.
func (o *Server) HasMgmtSnmpPort() bool {
	if o != nil && !IsNil(o.MgmtSnmpPort) {
		return true
	}

	return false
}

// SetMgmtSnmpPort gets a reference to the given float32 and assigns it to the MgmtSnmpPort field.
func (o *Server) SetMgmtSnmpPort(v float32) {
	o.MgmtSnmpPort = &v
}

// GetMgmtSnmpPasswordEncrypted returns the MgmtSnmpPasswordEncrypted field value if set, zero value otherwise.
func (o *Server) GetMgmtSnmpPasswordEncrypted() string {
	if o == nil || IsNil(o.MgmtSnmpPasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.MgmtSnmpPasswordEncrypted
}

// GetMgmtSnmpPasswordEncryptedOk returns a tuple with the MgmtSnmpPasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetMgmtSnmpPasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.MgmtSnmpPasswordEncrypted) {
		return nil, false
	}
	return o.MgmtSnmpPasswordEncrypted, true
}

// HasMgmtSnmpPasswordEncrypted returns a boolean if a field has been set.
func (o *Server) HasMgmtSnmpPasswordEncrypted() bool {
	if o != nil && !IsNil(o.MgmtSnmpPasswordEncrypted) {
		return true
	}

	return false
}

// SetMgmtSnmpPasswordEncrypted gets a reference to the given string and assigns it to the MgmtSnmpPasswordEncrypted field.
func (o *Server) SetMgmtSnmpPasswordEncrypted(v string) {
	o.MgmtSnmpPasswordEncrypted = &v
}

// GetBmcMacAddress returns the BmcMacAddress field value if set, zero value otherwise.
func (o *Server) GetBmcMacAddress() string {
	if o == nil || IsNil(o.BmcMacAddress) {
		var ret string
		return ret
	}
	return *o.BmcMacAddress
}

// GetBmcMacAddressOk returns a tuple with the BmcMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetBmcMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.BmcMacAddress) {
		return nil, false
	}
	return o.BmcMacAddress, true
}

// HasBmcMacAddress returns a boolean if a field has been set.
func (o *Server) HasBmcMacAddress() bool {
	if o != nil && !IsNil(o.BmcMacAddress) {
		return true
	}

	return false
}

// SetBmcMacAddress gets a reference to the given string and assigns it to the BmcMacAddress field.
func (o *Server) SetBmcMacAddress(v string) {
	o.BmcMacAddress = &v
}

// GetBdkDebug returns the BdkDebug field value
func (o *Server) GetBdkDebug() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BdkDebug
}

// GetBdkDebugOk returns a tuple with the BdkDebug field value
// and a boolean to check if the value has been set.
func (o *Server) GetBdkDebugOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BdkDebug, true
}

// SetBdkDebug sets field value
func (o *Server) SetBdkDebug(v float32) {
	o.BdkDebug = v
}

// GetServerMetricsMetadata returns the ServerMetricsMetadata field value if set, zero value otherwise.
func (o *Server) GetServerMetricsMetadata() map[string][]ServerMetricsInfo {
	if o == nil || IsNil(o.ServerMetricsMetadata) {
		var ret map[string][]ServerMetricsInfo
		return ret
	}
	return *o.ServerMetricsMetadata
}

// GetServerMetricsMetadataOk returns a tuple with the ServerMetricsMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerMetricsMetadataOk() (*map[string][]ServerMetricsInfo, bool) {
	if o == nil || IsNil(o.ServerMetricsMetadata) {
		return nil, false
	}
	return o.ServerMetricsMetadata, true
}

// HasServerMetricsMetadata returns a boolean if a field has been set.
func (o *Server) HasServerMetricsMetadata() bool {
	if o != nil && !IsNil(o.ServerMetricsMetadata) {
		return true
	}

	return false
}

// SetServerMetricsMetadata gets a reference to the given map[string][]ServerMetricsInfo and assigns it to the ServerMetricsMetadata field.
func (o *Server) SetServerMetricsMetadata(v map[string][]ServerMetricsInfo) {
	o.ServerMetricsMetadata = &v
}

// GetInstanceCustomInfo returns the InstanceCustomInfo field value if set, zero value otherwise.
func (o *Server) GetInstanceCustomInfo() map[string]interface{} {
	if o == nil || IsNil(o.InstanceCustomInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.InstanceCustomInfo
}

// GetInstanceCustomInfoOk returns a tuple with the InstanceCustomInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetInstanceCustomInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.InstanceCustomInfo) {
		return map[string]interface{}{}, false
	}
	return o.InstanceCustomInfo, true
}

// HasInstanceCustomInfo returns a boolean if a field has been set.
func (o *Server) HasInstanceCustomInfo() bool {
	if o != nil && !IsNil(o.InstanceCustomInfo) {
		return true
	}

	return false
}

// SetInstanceCustomInfo gets a reference to the given map[string]interface{} and assigns it to the InstanceCustomInfo field.
func (o *Server) SetInstanceCustomInfo(v map[string]interface{}) {
	o.InstanceCustomInfo = v
}

// GetCustomInfo returns the CustomInfo field value if set, zero value otherwise.
func (o *Server) GetCustomInfo() map[string]interface{} {
	if o == nil || IsNil(o.CustomInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomInfo
}

// GetCustomInfoOk returns a tuple with the CustomInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetCustomInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomInfo) {
		return map[string]interface{}{}, false
	}
	return o.CustomInfo, true
}

// HasCustomInfo returns a boolean if a field has been set.
func (o *Server) HasCustomInfo() bool {
	if o != nil && !IsNil(o.CustomInfo) {
		return true
	}

	return false
}

// SetCustomInfo gets a reference to the given map[string]interface{} and assigns it to the CustomInfo field.
func (o *Server) SetCustomInfo(v map[string]interface{}) {
	o.CustomInfo = v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *Server) GetVendor() string {
	if o == nil || IsNil(o.Vendor) {
		var ret string
		return ret
	}
	return *o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetVendorOk() (*string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *Server) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given string and assigns it to the Vendor field.
func (o *Server) SetVendor(v string) {
	o.Vendor = &v
}

// GetVendorSkuId returns the VendorSkuId field value if set, zero value otherwise.
func (o *Server) GetVendorSkuId() string {
	if o == nil || IsNil(o.VendorSkuId) {
		var ret string
		return ret
	}
	return *o.VendorSkuId
}

// GetVendorSkuIdOk returns a tuple with the VendorSkuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetVendorSkuIdOk() (*string, bool) {
	if o == nil || IsNil(o.VendorSkuId) {
		return nil, false
	}
	return o.VendorSkuId, true
}

// HasVendorSkuId returns a boolean if a field has been set.
func (o *Server) HasVendorSkuId() bool {
	if o != nil && !IsNil(o.VendorSkuId) {
		return true
	}

	return false
}

// SetVendorSkuId gets a reference to the given string and assigns it to the VendorSkuId field.
func (o *Server) SetVendorSkuId(v string) {
	o.VendorSkuId = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *Server) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *Server) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *Server) SetModel(v string) {
	o.Model = &v
}

// GetVncPort returns the VncPort field value if set, zero value otherwise.
func (o *Server) GetVncPort() float32 {
	if o == nil || IsNil(o.VncPort) {
		var ret float32
		return ret
	}
	return *o.VncPort
}

// GetVncPortOk returns a tuple with the VncPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetVncPortOk() (*float32, bool) {
	if o == nil || IsNil(o.VncPort) {
		return nil, false
	}
	return o.VncPort, true
}

// HasVncPort returns a boolean if a field has been set.
func (o *Server) HasVncPort() bool {
	if o != nil && !IsNil(o.VncPort) {
		return true
	}

	return false
}

// SetVncPort gets a reference to the given float32 and assigns it to the VncPort field.
func (o *Server) SetVncPort(v float32) {
	o.VncPort = &v
}

// GetVncPasswordEncrypted returns the VncPasswordEncrypted field value if set, zero value otherwise.
func (o *Server) GetVncPasswordEncrypted() string {
	if o == nil || IsNil(o.VncPasswordEncrypted) {
		var ret string
		return ret
	}
	return *o.VncPasswordEncrypted
}

// GetVncPasswordEncryptedOk returns a tuple with the VncPasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetVncPasswordEncryptedOk() (*string, bool) {
	if o == nil || IsNil(o.VncPasswordEncrypted) {
		return nil, false
	}
	return o.VncPasswordEncrypted, true
}

// HasVncPasswordEncrypted returns a boolean if a field has been set.
func (o *Server) HasVncPasswordEncrypted() bool {
	if o != nil && !IsNil(o.VncPasswordEncrypted) {
		return true
	}

	return false
}

// SetVncPasswordEncrypted gets a reference to the given string and assigns it to the VncPasswordEncrypted field.
func (o *Server) SetVncPasswordEncrypted(v string) {
	o.VncPasswordEncrypted = &v
}

// GetIsBasicCampusEndpoint returns the IsBasicCampusEndpoint field value if set, zero value otherwise.
func (o *Server) GetIsBasicCampusEndpoint() float32 {
	if o == nil || IsNil(o.IsBasicCampusEndpoint) {
		var ret float32
		return ret
	}
	return *o.IsBasicCampusEndpoint
}

// GetIsBasicCampusEndpointOk returns a tuple with the IsBasicCampusEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetIsBasicCampusEndpointOk() (*float32, bool) {
	if o == nil || IsNil(o.IsBasicCampusEndpoint) {
		return nil, false
	}
	return o.IsBasicCampusEndpoint, true
}

// HasIsBasicCampusEndpoint returns a boolean if a field has been set.
func (o *Server) HasIsBasicCampusEndpoint() bool {
	if o != nil && !IsNil(o.IsBasicCampusEndpoint) {
		return true
	}

	return false
}

// SetIsBasicCampusEndpoint gets a reference to the given float32 and assigns it to the IsBasicCampusEndpoint field.
func (o *Server) SetIsBasicCampusEndpoint(v float32) {
	o.IsBasicCampusEndpoint = &v
}

// GetServerCleanupPolicyId returns the ServerCleanupPolicyId field value if set, zero value otherwise.
func (o *Server) GetServerCleanupPolicyId() float32 {
	if o == nil || IsNil(o.ServerCleanupPolicyId) {
		var ret float32
		return ret
	}
	return *o.ServerCleanupPolicyId
}

// GetServerCleanupPolicyIdOk returns a tuple with the ServerCleanupPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerCleanupPolicyIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerCleanupPolicyId) {
		return nil, false
	}
	return o.ServerCleanupPolicyId, true
}

// HasServerCleanupPolicyId returns a boolean if a field has been set.
func (o *Server) HasServerCleanupPolicyId() bool {
	if o != nil && !IsNil(o.ServerCleanupPolicyId) {
		return true
	}

	return false
}

// SetServerCleanupPolicyId gets a reference to the given float32 and assigns it to the ServerCleanupPolicyId field.
func (o *Server) SetServerCleanupPolicyId(v float32) {
	o.ServerCleanupPolicyId = &v
}

// GetRequiresReRegister returns the RequiresReRegister field value
func (o *Server) GetRequiresReRegister() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RequiresReRegister
}

// GetRequiresReRegisterOk returns a tuple with the RequiresReRegister field value
// and a boolean to check if the value has been set.
func (o *Server) GetRequiresReRegisterOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequiresReRegister, true
}

// SetRequiresReRegister sets field value
func (o *Server) SetRequiresReRegister(v float32) {
	o.RequiresReRegister = v
}

// GetServerSupportsSol returns the ServerSupportsSol field value if set, zero value otherwise.
func (o *Server) GetServerSupportsSol() float32 {
	if o == nil || IsNil(o.ServerSupportsSol) {
		var ret float32
		return ret
	}
	return *o.ServerSupportsSol
}

// GetServerSupportsSolOk returns a tuple with the ServerSupportsSol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerSupportsSolOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerSupportsSol) {
		return nil, false
	}
	return o.ServerSupportsSol, true
}

// HasServerSupportsSol returns a boolean if a field has been set.
func (o *Server) HasServerSupportsSol() bool {
	if o != nil && !IsNil(o.ServerSupportsSol) {
		return true
	}

	return false
}

// SetServerSupportsSol gets a reference to the given float32 and assigns it to the ServerSupportsSol field.
func (o *Server) SetServerSupportsSol(v float32) {
	o.ServerSupportsSol = &v
}

// GetServerSupportsVirtualMedia returns the ServerSupportsVirtualMedia field value if set, zero value otherwise.
func (o *Server) GetServerSupportsVirtualMedia() float32 {
	if o == nil || IsNil(o.ServerSupportsVirtualMedia) {
		var ret float32
		return ret
	}
	return *o.ServerSupportsVirtualMedia
}

// GetServerSupportsVirtualMediaOk returns a tuple with the ServerSupportsVirtualMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerSupportsVirtualMediaOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerSupportsVirtualMedia) {
		return nil, false
	}
	return o.ServerSupportsVirtualMedia, true
}

// HasServerSupportsVirtualMedia returns a boolean if a field has been set.
func (o *Server) HasServerSupportsVirtualMedia() bool {
	if o != nil && !IsNil(o.ServerSupportsVirtualMedia) {
		return true
	}

	return false
}

// SetServerSupportsVirtualMedia gets a reference to the given float32 and assigns it to the ServerSupportsVirtualMedia field.
func (o *Server) SetServerSupportsVirtualMedia(v float32) {
	o.ServerSupportsVirtualMedia = &v
}

// GetServerSupportsOobProvisioning returns the ServerSupportsOobProvisioning field value if set, zero value otherwise.
func (o *Server) GetServerSupportsOobProvisioning() float32 {
	if o == nil || IsNil(o.ServerSupportsOobProvisioning) {
		var ret float32
		return ret
	}
	return *o.ServerSupportsOobProvisioning
}

// GetServerSupportsOobProvisioningOk returns a tuple with the ServerSupportsOobProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerSupportsOobProvisioningOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerSupportsOobProvisioning) {
		return nil, false
	}
	return o.ServerSupportsOobProvisioning, true
}

// HasServerSupportsOobProvisioning returns a boolean if a field has been set.
func (o *Server) HasServerSupportsOobProvisioning() bool {
	if o != nil && !IsNil(o.ServerSupportsOobProvisioning) {
		return true
	}

	return false
}

// SetServerSupportsOobProvisioning gets a reference to the given float32 and assigns it to the ServerSupportsOobProvisioning field.
func (o *Server) SetServerSupportsOobProvisioning(v float32) {
	o.ServerSupportsOobProvisioning = &v
}

// GetServerIsProduction returns the ServerIsProduction field value if set, zero value otherwise.
func (o *Server) GetServerIsProduction() float32 {
	if o == nil || IsNil(o.ServerIsProduction) {
		var ret float32
		return ret
	}
	return *o.ServerIsProduction
}

// GetServerIsProductionOk returns a tuple with the ServerIsProduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerIsProductionOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerIsProduction) {
		return nil, false
	}
	return o.ServerIsProduction, true
}

// HasServerIsProduction returns a boolean if a field has been set.
func (o *Server) HasServerIsProduction() bool {
	if o != nil && !IsNil(o.ServerIsProduction) {
		return true
	}

	return false
}

// SetServerIsProduction gets a reference to the given float32 and assigns it to the ServerIsProduction field.
func (o *Server) SetServerIsProduction(v float32) {
	o.ServerIsProduction = &v
}

// GetBootingCustomIsoInProgress returns the BootingCustomIsoInProgress field value if set, zero value otherwise.
func (o *Server) GetBootingCustomIsoInProgress() float32 {
	if o == nil || IsNil(o.BootingCustomIsoInProgress) {
		var ret float32
		return ret
	}
	return *o.BootingCustomIsoInProgress
}

// GetBootingCustomIsoInProgressOk returns a tuple with the BootingCustomIsoInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetBootingCustomIsoInProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.BootingCustomIsoInProgress) {
		return nil, false
	}
	return o.BootingCustomIsoInProgress, true
}

// HasBootingCustomIsoInProgress returns a boolean if a field has been set.
func (o *Server) HasBootingCustomIsoInProgress() bool {
	if o != nil && !IsNil(o.BootingCustomIsoInProgress) {
		return true
	}

	return false
}

// SetBootingCustomIsoInProgress gets a reference to the given float32 and assigns it to the BootingCustomIsoInProgress field.
func (o *Server) SetBootingCustomIsoInProgress(v float32) {
	o.BootingCustomIsoInProgress = &v
}

// GetBiosInfo returns the BiosInfo field value if set, zero value otherwise.
func (o *Server) GetBiosInfo() ServerBiosInfo {
	if o == nil || IsNil(o.BiosInfo) {
		var ret ServerBiosInfo
		return ret
	}
	return *o.BiosInfo
}

// GetBiosInfoOk returns a tuple with the BiosInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetBiosInfoOk() (*ServerBiosInfo, bool) {
	if o == nil || IsNil(o.BiosInfo) {
		return nil, false
	}
	return o.BiosInfo, true
}

// HasBiosInfo returns a boolean if a field has been set.
func (o *Server) HasBiosInfo() bool {
	if o != nil && !IsNil(o.BiosInfo) {
		return true
	}

	return false
}

// SetBiosInfo gets a reference to the given ServerBiosInfo and assigns it to the BiosInfo field.
func (o *Server) SetBiosInfo(v ServerBiosInfo) {
	o.BiosInfo = &v
}

// GetVendorInfo returns the VendorInfo field value if set, zero value otherwise.
func (o *Server) GetVendorInfo() ServerVendorInfo {
	if o == nil || IsNil(o.VendorInfo) {
		var ret ServerVendorInfo
		return ret
	}
	return *o.VendorInfo
}

// GetVendorInfoOk returns a tuple with the VendorInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetVendorInfoOk() (*ServerVendorInfo, bool) {
	if o == nil || IsNil(o.VendorInfo) {
		return nil, false
	}
	return o.VendorInfo, true
}

// HasVendorInfo returns a boolean if a field has been set.
func (o *Server) HasVendorInfo() bool {
	if o != nil && !IsNil(o.VendorInfo) {
		return true
	}

	return false
}

// SetVendorInfo gets a reference to the given ServerVendorInfo and assigns it to the VendorInfo field.
func (o *Server) SetVendorInfo(v ServerVendorInfo) {
	o.VendorInfo = &v
}

// GetServerClass returns the ServerClass field value
func (o *Server) GetServerClass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerClass
}

// GetServerClassOk returns a tuple with the ServerClass field value
// and a boolean to check if the value has been set.
func (o *Server) GetServerClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerClass, true
}

// SetServerClass sets field value
func (o *Server) SetServerClass(v string) {
	o.ServerClass = v
}

// GetServerStatus returns the ServerStatus field value
func (o *Server) GetServerStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerStatus
}

// GetServerStatusOk returns a tuple with the ServerStatus field value
// and a boolean to check if the value has been set.
func (o *Server) GetServerStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerStatus, true
}

// SetServerStatus sets field value
func (o *Server) SetServerStatus(v string) {
	o.ServerStatus = v
}

// GetServerComments returns the ServerComments field value if set, zero value otherwise.
func (o *Server) GetServerComments() string {
	if o == nil || IsNil(o.ServerComments) {
		var ret string
		return ret
	}
	return *o.ServerComments
}

// GetServerCommentsOk returns a tuple with the ServerComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.ServerComments) {
		return nil, false
	}
	return o.ServerComments, true
}

// HasServerComments returns a boolean if a field has been set.
func (o *Server) HasServerComments() bool {
	if o != nil && !IsNil(o.ServerComments) {
		return true
	}

	return false
}

// SetServerComments gets a reference to the given string and assigns it to the ServerComments field.
func (o *Server) SetServerComments(v string) {
	o.ServerComments = &v
}

// GetServerCapacityMbps returns the ServerCapacityMbps field value if set, zero value otherwise.
func (o *Server) GetServerCapacityMbps() float32 {
	if o == nil || IsNil(o.ServerCapacityMbps) {
		var ret float32
		return ret
	}
	return *o.ServerCapacityMbps
}

// GetServerCapacityMbpsOk returns a tuple with the ServerCapacityMbps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerCapacityMbpsOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerCapacityMbps) {
		return nil, false
	}
	return o.ServerCapacityMbps, true
}

// HasServerCapacityMbps returns a boolean if a field has been set.
func (o *Server) HasServerCapacityMbps() bool {
	if o != nil && !IsNil(o.ServerCapacityMbps) {
		return true
	}

	return false
}

// SetServerCapacityMbps gets a reference to the given float32 and assigns it to the ServerCapacityMbps field.
func (o *Server) SetServerCapacityMbps(v float32) {
	o.ServerCapacityMbps = &v
}

// GetServerDiskWipe returns the ServerDiskWipe field value if set, zero value otherwise.
func (o *Server) GetServerDiskWipe() float32 {
	if o == nil || IsNil(o.ServerDiskWipe) {
		var ret float32
		return ret
	}
	return *o.ServerDiskWipe
}

// GetServerDiskWipeOk returns a tuple with the ServerDiskWipe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerDiskWipeOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerDiskWipe) {
		return nil, false
	}
	return o.ServerDiskWipe, true
}

// HasServerDiskWipe returns a boolean if a field has been set.
func (o *Server) HasServerDiskWipe() bool {
	if o != nil && !IsNil(o.ServerDiskWipe) {
		return true
	}

	return false
}

// SetServerDiskWipe gets a reference to the given float32 and assigns it to the ServerDiskWipe field.
func (o *Server) SetServerDiskWipe(v float32) {
	o.ServerDiskWipe = &v
}

// GetRequiresManualCleaning returns the RequiresManualCleaning field value if set, zero value otherwise.
func (o *Server) GetRequiresManualCleaning() float32 {
	if o == nil || IsNil(o.RequiresManualCleaning) {
		var ret float32
		return ret
	}
	return *o.RequiresManualCleaning
}

// GetRequiresManualCleaningOk returns a tuple with the RequiresManualCleaning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetRequiresManualCleaningOk() (*float32, bool) {
	if o == nil || IsNil(o.RequiresManualCleaning) {
		return nil, false
	}
	return o.RequiresManualCleaning, true
}

// HasRequiresManualCleaning returns a boolean if a field has been set.
func (o *Server) HasRequiresManualCleaning() bool {
	if o != nil && !IsNil(o.RequiresManualCleaning) {
		return true
	}

	return false
}

// SetRequiresManualCleaning gets a reference to the given float32 and assigns it to the RequiresManualCleaning field.
func (o *Server) SetRequiresManualCleaning(v float32) {
	o.RequiresManualCleaning = &v
}

// GetServerDiskCount returns the ServerDiskCount field value if set, zero value otherwise.
func (o *Server) GetServerDiskCount() float32 {
	if o == nil || IsNil(o.ServerDiskCount) {
		var ret float32
		return ret
	}
	return *o.ServerDiskCount
}

// GetServerDiskCountOk returns a tuple with the ServerDiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerDiskCountOk() (*float32, bool) {
	if o == nil || IsNil(o.ServerDiskCount) {
		return nil, false
	}
	return o.ServerDiskCount, true
}

// HasServerDiskCount returns a boolean if a field has been set.
func (o *Server) HasServerDiskCount() bool {
	if o != nil && !IsNil(o.ServerDiskCount) {
		return true
	}

	return false
}

// SetServerDiskCount gets a reference to the given float32 and assigns it to the ServerDiskCount field.
func (o *Server) SetServerDiskCount(v float32) {
	o.ServerDiskCount = &v
}

// GetAdministrationState returns the AdministrationState field value
func (o *Server) GetAdministrationState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdministrationState
}

// GetAdministrationStateOk returns a tuple with the AdministrationState field value
// and a boolean to check if the value has been set.
func (o *Server) GetAdministrationStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdministrationState, true
}

// SetAdministrationState sets field value
func (o *Server) SetAdministrationState(v string) {
	o.AdministrationState = v
}

// GetServerDhcpStatus returns the ServerDhcpStatus field value
func (o *Server) GetServerDhcpStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerDhcpStatus
}

// GetServerDhcpStatusOk returns a tuple with the ServerDhcpStatus field value
// and a boolean to check if the value has been set.
func (o *Server) GetServerDhcpStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerDhcpStatus, true
}

// SetServerDhcpStatus sets field value
func (o *Server) SetServerDhcpStatus(v string) {
	o.ServerDhcpStatus = v
}

// GetGpuCount returns the GpuCount field value if set, zero value otherwise.
func (o *Server) GetGpuCount() float32 {
	if o == nil || IsNil(o.GpuCount) {
		var ret float32
		return ret
	}
	return *o.GpuCount
}

// GetGpuCountOk returns a tuple with the GpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetGpuCountOk() (*float32, bool) {
	if o == nil || IsNil(o.GpuCount) {
		return nil, false
	}
	return o.GpuCount, true
}

// HasGpuCount returns a boolean if a field has been set.
func (o *Server) HasGpuCount() bool {
	if o != nil && !IsNil(o.GpuCount) {
		return true
	}

	return false
}

// SetGpuCount gets a reference to the given float32 and assigns it to the GpuCount field.
func (o *Server) SetGpuCount(v float32) {
	o.GpuCount = &v
}

// GetGpuInfo returns the GpuInfo field value if set, zero value otherwise.
func (o *Server) GetGpuInfo() []ServerGpuInfo {
	if o == nil || IsNil(o.GpuInfo) {
		var ret []ServerGpuInfo
		return ret
	}
	return o.GpuInfo
}

// GetGpuInfoOk returns a tuple with the GpuInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetGpuInfoOk() ([]ServerGpuInfo, bool) {
	if o == nil || IsNil(o.GpuInfo) {
		return nil, false
	}
	return o.GpuInfo, true
}

// HasGpuInfo returns a boolean if a field has been set.
func (o *Server) HasGpuInfo() bool {
	if o != nil && !IsNil(o.GpuInfo) {
		return true
	}

	return false
}

// SetGpuInfo gets a reference to the given []ServerGpuInfo and assigns it to the GpuInfo field.
func (o *Server) SetGpuInfo(v []ServerGpuInfo) {
	o.GpuInfo = v
}

// GetSubmodel returns the Submodel field value if set, zero value otherwise.
func (o *Server) GetSubmodel() string {
	if o == nil || IsNil(o.Submodel) {
		var ret string
		return ret
	}
	return *o.Submodel
}

// GetSubmodelOk returns a tuple with the Submodel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetSubmodelOk() (*string, bool) {
	if o == nil || IsNil(o.Submodel) {
		return nil, false
	}
	return o.Submodel, true
}

// HasSubmodel returns a boolean if a field has been set.
func (o *Server) HasSubmodel() bool {
	if o != nil && !IsNil(o.Submodel) {
		return true
	}

	return false
}

// SetSubmodel gets a reference to the given string and assigns it to the Submodel field.
func (o *Server) SetSubmodel(v string) {
	o.Submodel = &v
}

// GetSupportsFcProvisioning returns the SupportsFcProvisioning field value
func (o *Server) GetSupportsFcProvisioning() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SupportsFcProvisioning
}

// GetSupportsFcProvisioningOk returns a tuple with the SupportsFcProvisioning field value
// and a boolean to check if the value has been set.
func (o *Server) GetSupportsFcProvisioningOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportsFcProvisioning, true
}

// SetSupportsFcProvisioning sets field value
func (o *Server) SetSupportsFcProvisioning(v float32) {
	o.SupportsFcProvisioning = v
}

// GetBootLastUpdateTimestamp returns the BootLastUpdateTimestamp field value if set, zero value otherwise.
func (o *Server) GetBootLastUpdateTimestamp() string {
	if o == nil || IsNil(o.BootLastUpdateTimestamp) {
		var ret string
		return ret
	}
	return *o.BootLastUpdateTimestamp
}

// GetBootLastUpdateTimestampOk returns a tuple with the BootLastUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetBootLastUpdateTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.BootLastUpdateTimestamp) {
		return nil, false
	}
	return o.BootLastUpdateTimestamp, true
}

// HasBootLastUpdateTimestamp returns a boolean if a field has been set.
func (o *Server) HasBootLastUpdateTimestamp() bool {
	if o != nil && !IsNil(o.BootLastUpdateTimestamp) {
		return true
	}

	return false
}

// SetBootLastUpdateTimestamp gets a reference to the given string and assigns it to the BootLastUpdateTimestamp field.
func (o *Server) SetBootLastUpdateTimestamp(v string) {
	o.BootLastUpdateTimestamp = &v
}

// GetRegisteredTimestamp returns the RegisteredTimestamp field value if set, zero value otherwise.
func (o *Server) GetRegisteredTimestamp() string {
	if o == nil || IsNil(o.RegisteredTimestamp) {
		var ret string
		return ret
	}
	return *o.RegisteredTimestamp
}

// GetRegisteredTimestampOk returns a tuple with the RegisteredTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetRegisteredTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.RegisteredTimestamp) {
		return nil, false
	}
	return o.RegisteredTimestamp, true
}

// HasRegisteredTimestamp returns a boolean if a field has been set.
func (o *Server) HasRegisteredTimestamp() bool {
	if o != nil && !IsNil(o.RegisteredTimestamp) {
		return true
	}

	return false
}

// SetRegisteredTimestamp gets a reference to the given string and assigns it to the RegisteredTimestamp field.
func (o *Server) SetRegisteredTimestamp(v string) {
	o.RegisteredTimestamp = &v
}

// GetServerCreatedTimestamp returns the ServerCreatedTimestamp field value
func (o *Server) GetServerCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerCreatedTimestamp
}

// GetServerCreatedTimestampOk returns a tuple with the ServerCreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *Server) GetServerCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerCreatedTimestamp, true
}

// SetServerCreatedTimestamp sets field value
func (o *Server) SetServerCreatedTimestamp(v string) {
	o.ServerCreatedTimestamp = v
}

// GetPowerStatus returns the PowerStatus field value
func (o *Server) GetPowerStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PowerStatus
}

// GetPowerStatusOk returns a tuple with the PowerStatus field value
// and a boolean to check if the value has been set.
func (o *Server) GetPowerStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PowerStatus, true
}

// SetPowerStatus sets field value
func (o *Server) SetPowerStatus(v string) {
	o.PowerStatus = v
}

// GetPowerStatusLastUpdateTimestamp returns the PowerStatusLastUpdateTimestamp field value
func (o *Server) GetPowerStatusLastUpdateTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PowerStatusLastUpdateTimestamp
}

// GetPowerStatusLastUpdateTimestampOk returns a tuple with the PowerStatusLastUpdateTimestamp field value
// and a boolean to check if the value has been set.
func (o *Server) GetPowerStatusLastUpdateTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PowerStatusLastUpdateTimestamp, true
}

// SetPowerStatusLastUpdateTimestamp sets field value
func (o *Server) SetPowerStatusLastUpdateTimestamp(v string) {
	o.PowerStatusLastUpdateTimestamp = v
}

// GetServerAllocationTimestamp returns the ServerAllocationTimestamp field value if set, zero value otherwise.
func (o *Server) GetServerAllocationTimestamp() string {
	if o == nil || IsNil(o.ServerAllocationTimestamp) {
		var ret string
		return ret
	}
	return *o.ServerAllocationTimestamp
}

// GetServerAllocationTimestampOk returns a tuple with the ServerAllocationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetServerAllocationTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAllocationTimestamp) {
		return nil, false
	}
	return o.ServerAllocationTimestamp, true
}

// HasServerAllocationTimestamp returns a boolean if a field has been set.
func (o *Server) HasServerAllocationTimestamp() bool {
	if o != nil && !IsNil(o.ServerAllocationTimestamp) {
		return true
	}

	return false
}

// SetServerAllocationTimestamp gets a reference to the given string and assigns it to the ServerAllocationTimestamp field.
func (o *Server) SetServerAllocationTimestamp(v string) {
	o.ServerAllocationTimestamp = &v
}

// GetJobInfo returns the JobInfo field value if set, zero value otherwise.
func (o *Server) GetJobInfo() JobInfo {
	if o == nil || IsNil(o.JobInfo) {
		var ret JobInfo
		return ret
	}
	return *o.JobInfo
}

// GetJobInfoOk returns a tuple with the JobInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetJobInfoOk() (*JobInfo, bool) {
	if o == nil || IsNil(o.JobInfo) {
		return nil, false
	}
	return o.JobInfo, true
}

// HasJobInfo returns a boolean if a field has been set.
func (o *Server) HasJobInfo() bool {
	if o != nil && !IsNil(o.JobInfo) {
		return true
	}

	return false
}

// SetJobInfo gets a reference to the given JobInfo and assigns it to the JobInfo field.
func (o *Server) SetJobInfo(v JobInfo) {
	o.JobInfo = &v
}

// GetChassisRackId returns the ChassisRackId field value if set, zero value otherwise.
func (o *Server) GetChassisRackId() float32 {
	if o == nil || IsNil(o.ChassisRackId) {
		var ret float32
		return ret
	}
	return *o.ChassisRackId
}

// GetChassisRackIdOk returns a tuple with the ChassisRackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetChassisRackIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ChassisRackId) {
		return nil, false
	}
	return o.ChassisRackId, true
}

// HasChassisRackId returns a boolean if a field has been set.
func (o *Server) HasChassisRackId() bool {
	if o != nil && !IsNil(o.ChassisRackId) {
		return true
	}

	return false
}

// SetChassisRackId gets a reference to the given float32 and assigns it to the ChassisRackId field.
func (o *Server) SetChassisRackId(v float32) {
	o.ChassisRackId = &v
}

// GetRackName returns the RackName field value if set, zero value otherwise.
func (o *Server) GetRackName() string {
	if o == nil || IsNil(o.RackName) {
		var ret string
		return ret
	}
	return *o.RackName
}

// GetRackNameOk returns a tuple with the RackName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetRackNameOk() (*string, bool) {
	if o == nil || IsNil(o.RackName) {
		return nil, false
	}
	return o.RackName, true
}

// HasRackName returns a boolean if a field has been set.
func (o *Server) HasRackName() bool {
	if o != nil && !IsNil(o.RackName) {
		return true
	}

	return false
}

// SetRackName gets a reference to the given string and assigns it to the RackName field.
func (o *Server) SetRackName(v string) {
	o.RackName = &v
}

// GetRackPositionUpperUnit returns the RackPositionUpperUnit field value if set, zero value otherwise.
func (o *Server) GetRackPositionUpperUnit() string {
	if o == nil || IsNil(o.RackPositionUpperUnit) {
		var ret string
		return ret
	}
	return *o.RackPositionUpperUnit
}

// GetRackPositionUpperUnitOk returns a tuple with the RackPositionUpperUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetRackPositionUpperUnitOk() (*string, bool) {
	if o == nil || IsNil(o.RackPositionUpperUnit) {
		return nil, false
	}
	return o.RackPositionUpperUnit, true
}

// HasRackPositionUpperUnit returns a boolean if a field has been set.
func (o *Server) HasRackPositionUpperUnit() bool {
	if o != nil && !IsNil(o.RackPositionUpperUnit) {
		return true
	}

	return false
}

// SetRackPositionUpperUnit gets a reference to the given string and assigns it to the RackPositionUpperUnit field.
func (o *Server) SetRackPositionUpperUnit(v string) {
	o.RackPositionUpperUnit = &v
}

// GetRackPositionLowerUnit returns the RackPositionLowerUnit field value if set, zero value otherwise.
func (o *Server) GetRackPositionLowerUnit() string {
	if o == nil || IsNil(o.RackPositionLowerUnit) {
		var ret string
		return ret
	}
	return *o.RackPositionLowerUnit
}

// GetRackPositionLowerUnitOk returns a tuple with the RackPositionLowerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetRackPositionLowerUnitOk() (*string, bool) {
	if o == nil || IsNil(o.RackPositionLowerUnit) {
		return nil, false
	}
	return o.RackPositionLowerUnit, true
}

// HasRackPositionLowerUnit returns a boolean if a field has been set.
func (o *Server) HasRackPositionLowerUnit() bool {
	if o != nil && !IsNil(o.RackPositionLowerUnit) {
		return true
	}

	return false
}

// SetRackPositionLowerUnit gets a reference to the given string and assigns it to the RackPositionLowerUnit field.
func (o *Server) SetRackPositionLowerUnit(v string) {
	o.RackPositionLowerUnit = &v
}

// GetInventoryId returns the InventoryId field value if set, zero value otherwise.
func (o *Server) GetInventoryId() string {
	if o == nil || IsNil(o.InventoryId) {
		var ret string
		return ret
	}
	return *o.InventoryId
}

// GetInventoryIdOk returns a tuple with the InventoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetInventoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryId) {
		return nil, false
	}
	return o.InventoryId, true
}

// HasInventoryId returns a boolean if a field has been set.
func (o *Server) HasInventoryId() bool {
	if o != nil && !IsNil(o.InventoryId) {
		return true
	}

	return false
}

// SetInventoryId gets a reference to the given string and assigns it to the InventoryId field.
func (o *Server) SetInventoryId(v string) {
	o.InventoryId = &v
}

// GetIpmiCredentialsNeedUpdate returns the IpmiCredentialsNeedUpdate field value if set, zero value otherwise.
func (o *Server) GetIpmiCredentialsNeedUpdate() float32 {
	if o == nil || IsNil(o.IpmiCredentialsNeedUpdate) {
		var ret float32
		return ret
	}
	return *o.IpmiCredentialsNeedUpdate
}

// GetIpmiCredentialsNeedUpdateOk returns a tuple with the IpmiCredentialsNeedUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetIpmiCredentialsNeedUpdateOk() (*float32, bool) {
	if o == nil || IsNil(o.IpmiCredentialsNeedUpdate) {
		return nil, false
	}
	return o.IpmiCredentialsNeedUpdate, true
}

// HasIpmiCredentialsNeedUpdate returns a boolean if a field has been set.
func (o *Server) HasIpmiCredentialsNeedUpdate() bool {
	if o != nil && !IsNil(o.IpmiCredentialsNeedUpdate) {
		return true
	}

	return false
}

// SetIpmiCredentialsNeedUpdate gets a reference to the given float32 and assigns it to the IpmiCredentialsNeedUpdate field.
func (o *Server) SetIpmiCredentialsNeedUpdate(v float32) {
	o.IpmiCredentialsNeedUpdate = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *Server) GetInterfaces() []ServerInterface {
	if o == nil || IsNil(o.Interfaces) {
		var ret []ServerInterface
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetInterfacesOk() ([]ServerInterface, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *Server) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []ServerInterface and assigns it to the Interfaces field.
func (o *Server) SetInterfaces(v []ServerInterface) {
	o.Interfaces = v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *Server) GetDisks() []ServerDisk {
	if o == nil || IsNil(o.Disks) {
		var ret []ServerDisk
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetDisksOk() ([]ServerDisk, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *Server) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []ServerDisk and assigns it to the Disks field.
func (o *Server) SetDisks(v []ServerDisk) {
	o.Disks = v
}

// GetStorageControllers returns the StorageControllers field value if set, zero value otherwise.
func (o *Server) GetStorageControllers() []ServerStorageController {
	if o == nil || IsNil(o.StorageControllers) {
		var ret []ServerStorageController
		return ret
	}
	return o.StorageControllers
}

// GetStorageControllersOk returns a tuple with the StorageControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetStorageControllersOk() ([]ServerStorageController, bool) {
	if o == nil || IsNil(o.StorageControllers) {
		return nil, false
	}
	return o.StorageControllers, true
}

// HasStorageControllers returns a boolean if a field has been set.
func (o *Server) HasStorageControllers() bool {
	if o != nil && !IsNil(o.StorageControllers) {
		return true
	}

	return false
}

// SetStorageControllers gets a reference to the given []ServerStorageController and assigns it to the StorageControllers field.
func (o *Server) SetStorageControllers(v []ServerStorageController) {
	o.StorageControllers = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Server) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Server) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Server) SetTags(v []string) {
	o.Tags = v
}

// GetResourcePoolId returns the ResourcePoolId field value if set, zero value otherwise.
func (o *Server) GetResourcePoolId() float32 {
	if o == nil || IsNil(o.ResourcePoolId) {
		var ret float32
		return ret
	}
	return *o.ResourcePoolId
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetResourcePoolIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ResourcePoolId) {
		return nil, false
	}
	return o.ResourcePoolId, true
}

// HasResourcePoolId returns a boolean if a field has been set.
func (o *Server) HasResourcePoolId() bool {
	if o != nil && !IsNil(o.ResourcePoolId) {
		return true
	}

	return false
}

// SetResourcePoolId gets a reference to the given float32 and assigns it to the ResourcePoolId field.
func (o *Server) SetResourcePoolId(v float32) {
	o.ResourcePoolId = &v
}

// GetAllocationInfo returns the AllocationInfo field value if set, zero value otherwise.
func (o *Server) GetAllocationInfo() ServerAllocationInfo {
	if o == nil || IsNil(o.AllocationInfo) {
		var ret ServerAllocationInfo
		return ret
	}
	return *o.AllocationInfo
}

// GetAllocationInfoOk returns a tuple with the AllocationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetAllocationInfoOk() (*ServerAllocationInfo, bool) {
	if o == nil || IsNil(o.AllocationInfo) {
		return nil, false
	}
	return o.AllocationInfo, true
}

// HasAllocationInfo returns a boolean if a field has been set.
func (o *Server) HasAllocationInfo() bool {
	if o != nil && !IsNil(o.AllocationInfo) {
		return true
	}

	return false
}

// SetAllocationInfo gets a reference to the given ServerAllocationInfo and assigns it to the AllocationInfo field.
func (o *Server) SetAllocationInfo(v ServerAllocationInfo) {
	o.AllocationInfo = &v
}

// GetExtensionInfo returns the ExtensionInfo field value if set, zero value otherwise.
func (o *Server) GetExtensionInfo() ExtensionExecutionInfo {
	if o == nil || IsNil(o.ExtensionInfo) {
		var ret ExtensionExecutionInfo
		return ret
	}
	return *o.ExtensionInfo
}

// GetExtensionInfoOk returns a tuple with the ExtensionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetExtensionInfoOk() (*ExtensionExecutionInfo, bool) {
	if o == nil || IsNil(o.ExtensionInfo) {
		return nil, false
	}
	return o.ExtensionInfo, true
}

// HasExtensionInfo returns a boolean if a field has been set.
func (o *Server) HasExtensionInfo() bool {
	if o != nil && !IsNil(o.ExtensionInfo) {
		return true
	}

	return false
}

// SetExtensionInfo gets a reference to the given ExtensionExecutionInfo and assigns it to the ExtensionInfo field.
func (o *Server) SetExtensionInfo(v ExtensionExecutionInfo) {
	o.ExtensionInfo = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Server) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Server) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Server) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *Server) SetLinks(v []Link) {
	o.Links = v
}

func (o Server) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Server) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverId"] = o.ServerId
	toSerialize["revision"] = o.Revision
	if !IsNil(o.ServerTypeId) {
		toSerialize["serverTypeId"] = o.ServerTypeId
	}
	toSerialize["siteId"] = o.SiteId
	toSerialize["datacenterName"] = o.DatacenterName
	if !IsNil(o.ServerUUID) {
		toSerialize["serverUUID"] = o.ServerUUID
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.ManagementAddress) {
		toSerialize["managementAddress"] = o.ManagementAddress
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	toSerialize["passwordEncrypted"] = o.PasswordEncrypted
	if !IsNil(o.IpmiVersion) {
		toSerialize["ipmiVersion"] = o.IpmiVersion
	}
	if !IsNil(o.RamGbytes) {
		toSerialize["ramGbytes"] = o.RamGbytes
	}
	if !IsNil(o.ProcessorCount) {
		toSerialize["processorCount"] = o.ProcessorCount
	}
	if !IsNil(o.ProcessorCoreMhz) {
		toSerialize["processorCoreMhz"] = o.ProcessorCoreMhz
	}
	if !IsNil(o.ProcessorCoreCount) {
		toSerialize["processorCoreCount"] = o.ProcessorCoreCount
	}
	if !IsNil(o.ProcessorName) {
		toSerialize["processorName"] = o.ProcessorName
	}
	if !IsNil(o.ProcessorCpuMark) {
		toSerialize["processorCpuMark"] = o.ProcessorCpuMark
	}
	if !IsNil(o.ProcessorThreads) {
		toSerialize["processorThreads"] = o.ProcessorThreads
	}
	if !IsNil(o.DiskCount) {
		toSerialize["diskCount"] = o.DiskCount
	}
	if !IsNil(o.MgmtSnmpPort) {
		toSerialize["mgmtSnmpPort"] = o.MgmtSnmpPort
	}
	if !IsNil(o.MgmtSnmpPasswordEncrypted) {
		toSerialize["mgmtSnmpPasswordEncrypted"] = o.MgmtSnmpPasswordEncrypted
	}
	if !IsNil(o.BmcMacAddress) {
		toSerialize["bmcMacAddress"] = o.BmcMacAddress
	}
	toSerialize["bdkDebug"] = o.BdkDebug
	if !IsNil(o.ServerMetricsMetadata) {
		toSerialize["serverMetricsMetadata"] = o.ServerMetricsMetadata
	}
	if !IsNil(o.InstanceCustomInfo) {
		toSerialize["instanceCustomInfo"] = o.InstanceCustomInfo
	}
	if !IsNil(o.CustomInfo) {
		toSerialize["customInfo"] = o.CustomInfo
	}
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}
	if !IsNil(o.VendorSkuId) {
		toSerialize["vendorSkuId"] = o.VendorSkuId
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.VncPort) {
		toSerialize["vncPort"] = o.VncPort
	}
	if !IsNil(o.VncPasswordEncrypted) {
		toSerialize["vncPasswordEncrypted"] = o.VncPasswordEncrypted
	}
	if !IsNil(o.IsBasicCampusEndpoint) {
		toSerialize["isBasicCampusEndpoint"] = o.IsBasicCampusEndpoint
	}
	if !IsNil(o.ServerCleanupPolicyId) {
		toSerialize["serverCleanupPolicyId"] = o.ServerCleanupPolicyId
	}
	toSerialize["requiresReRegister"] = o.RequiresReRegister
	if !IsNil(o.ServerSupportsSol) {
		toSerialize["serverSupportsSol"] = o.ServerSupportsSol
	}
	if !IsNil(o.ServerSupportsVirtualMedia) {
		toSerialize["serverSupportsVirtualMedia"] = o.ServerSupportsVirtualMedia
	}
	if !IsNil(o.ServerSupportsOobProvisioning) {
		toSerialize["serverSupportsOobProvisioning"] = o.ServerSupportsOobProvisioning
	}
	if !IsNil(o.ServerIsProduction) {
		toSerialize["serverIsProduction"] = o.ServerIsProduction
	}
	if !IsNil(o.BootingCustomIsoInProgress) {
		toSerialize["bootingCustomIsoInProgress"] = o.BootingCustomIsoInProgress
	}
	if !IsNil(o.BiosInfo) {
		toSerialize["biosInfo"] = o.BiosInfo
	}
	if !IsNil(o.VendorInfo) {
		toSerialize["vendorInfo"] = o.VendorInfo
	}
	toSerialize["serverClass"] = o.ServerClass
	toSerialize["serverStatus"] = o.ServerStatus
	if !IsNil(o.ServerComments) {
		toSerialize["serverComments"] = o.ServerComments
	}
	if !IsNil(o.ServerCapacityMbps) {
		toSerialize["serverCapacityMbps"] = o.ServerCapacityMbps
	}
	if !IsNil(o.ServerDiskWipe) {
		toSerialize["serverDiskWipe"] = o.ServerDiskWipe
	}
	if !IsNil(o.RequiresManualCleaning) {
		toSerialize["requiresManualCleaning"] = o.RequiresManualCleaning
	}
	if !IsNil(o.ServerDiskCount) {
		toSerialize["serverDiskCount"] = o.ServerDiskCount
	}
	toSerialize["administrationState"] = o.AdministrationState
	toSerialize["serverDhcpStatus"] = o.ServerDhcpStatus
	if !IsNil(o.GpuCount) {
		toSerialize["gpuCount"] = o.GpuCount
	}
	if !IsNil(o.GpuInfo) {
		toSerialize["gpuInfo"] = o.GpuInfo
	}
	if !IsNil(o.Submodel) {
		toSerialize["submodel"] = o.Submodel
	}
	toSerialize["supportsFcProvisioning"] = o.SupportsFcProvisioning
	if !IsNil(o.BootLastUpdateTimestamp) {
		toSerialize["bootLastUpdateTimestamp"] = o.BootLastUpdateTimestamp
	}
	if !IsNil(o.RegisteredTimestamp) {
		toSerialize["registeredTimestamp"] = o.RegisteredTimestamp
	}
	toSerialize["serverCreatedTimestamp"] = o.ServerCreatedTimestamp
	toSerialize["powerStatus"] = o.PowerStatus
	toSerialize["powerStatusLastUpdateTimestamp"] = o.PowerStatusLastUpdateTimestamp
	if !IsNil(o.ServerAllocationTimestamp) {
		toSerialize["serverAllocationTimestamp"] = o.ServerAllocationTimestamp
	}
	if !IsNil(o.JobInfo) {
		toSerialize["jobInfo"] = o.JobInfo
	}
	if !IsNil(o.ChassisRackId) {
		toSerialize["chassisRackId"] = o.ChassisRackId
	}
	if !IsNil(o.RackName) {
		toSerialize["rackName"] = o.RackName
	}
	if !IsNil(o.RackPositionUpperUnit) {
		toSerialize["rackPositionUpperUnit"] = o.RackPositionUpperUnit
	}
	if !IsNil(o.RackPositionLowerUnit) {
		toSerialize["rackPositionLowerUnit"] = o.RackPositionLowerUnit
	}
	if !IsNil(o.InventoryId) {
		toSerialize["inventoryId"] = o.InventoryId
	}
	if !IsNil(o.IpmiCredentialsNeedUpdate) {
		toSerialize["ipmiCredentialsNeedUpdate"] = o.IpmiCredentialsNeedUpdate
	}
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	if !IsNil(o.StorageControllers) {
		toSerialize["storageControllers"] = o.StorageControllers
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ResourcePoolId) {
		toSerialize["resourcePoolId"] = o.ResourcePoolId
	}
	if !IsNil(o.AllocationInfo) {
		toSerialize["allocationInfo"] = o.AllocationInfo
	}
	if !IsNil(o.ExtensionInfo) {
		toSerialize["extensionInfo"] = o.ExtensionInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Server) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverId",
		"revision",
		"siteId",
		"datacenterName",
		"passwordEncrypted",
		"bdkDebug",
		"requiresReRegister",
		"serverClass",
		"serverStatus",
		"administrationState",
		"serverDhcpStatus",
		"supportsFcProvisioning",
		"serverCreatedTimestamp",
		"powerStatus",
		"powerStatusLastUpdateTimestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServer := _Server{}

	err = json.Unmarshal(data, &varServer)

	if err != nil {
		return err
	}

	*o = Server(varServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "serverTypeId")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "datacenterName")
		delete(additionalProperties, "serverUUID")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "managementAddress")
		delete(additionalProperties, "username")
		delete(additionalProperties, "passwordEncrypted")
		delete(additionalProperties, "ipmiVersion")
		delete(additionalProperties, "ramGbytes")
		delete(additionalProperties, "processorCount")
		delete(additionalProperties, "processorCoreMhz")
		delete(additionalProperties, "processorCoreCount")
		delete(additionalProperties, "processorName")
		delete(additionalProperties, "processorCpuMark")
		delete(additionalProperties, "processorThreads")
		delete(additionalProperties, "diskCount")
		delete(additionalProperties, "mgmtSnmpPort")
		delete(additionalProperties, "mgmtSnmpPasswordEncrypted")
		delete(additionalProperties, "bmcMacAddress")
		delete(additionalProperties, "bdkDebug")
		delete(additionalProperties, "serverMetricsMetadata")
		delete(additionalProperties, "instanceCustomInfo")
		delete(additionalProperties, "customInfo")
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "vendorSkuId")
		delete(additionalProperties, "model")
		delete(additionalProperties, "vncPort")
		delete(additionalProperties, "vncPasswordEncrypted")
		delete(additionalProperties, "isBasicCampusEndpoint")
		delete(additionalProperties, "serverCleanupPolicyId")
		delete(additionalProperties, "requiresReRegister")
		delete(additionalProperties, "serverSupportsSol")
		delete(additionalProperties, "serverSupportsVirtualMedia")
		delete(additionalProperties, "serverSupportsOobProvisioning")
		delete(additionalProperties, "serverIsProduction")
		delete(additionalProperties, "bootingCustomIsoInProgress")
		delete(additionalProperties, "biosInfo")
		delete(additionalProperties, "vendorInfo")
		delete(additionalProperties, "serverClass")
		delete(additionalProperties, "serverStatus")
		delete(additionalProperties, "serverComments")
		delete(additionalProperties, "serverCapacityMbps")
		delete(additionalProperties, "serverDiskWipe")
		delete(additionalProperties, "requiresManualCleaning")
		delete(additionalProperties, "serverDiskCount")
		delete(additionalProperties, "administrationState")
		delete(additionalProperties, "serverDhcpStatus")
		delete(additionalProperties, "gpuCount")
		delete(additionalProperties, "gpuInfo")
		delete(additionalProperties, "submodel")
		delete(additionalProperties, "supportsFcProvisioning")
		delete(additionalProperties, "bootLastUpdateTimestamp")
		delete(additionalProperties, "registeredTimestamp")
		delete(additionalProperties, "serverCreatedTimestamp")
		delete(additionalProperties, "powerStatus")
		delete(additionalProperties, "powerStatusLastUpdateTimestamp")
		delete(additionalProperties, "serverAllocationTimestamp")
		delete(additionalProperties, "jobInfo")
		delete(additionalProperties, "chassisRackId")
		delete(additionalProperties, "rackName")
		delete(additionalProperties, "rackPositionUpperUnit")
		delete(additionalProperties, "rackPositionLowerUnit")
		delete(additionalProperties, "inventoryId")
		delete(additionalProperties, "ipmiCredentialsNeedUpdate")
		delete(additionalProperties, "interfaces")
		delete(additionalProperties, "disks")
		delete(additionalProperties, "storageControllers")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "resourcePoolId")
		delete(additionalProperties, "allocationInfo")
		delete(additionalProperties, "extensionInfo")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServer struct {
	value *Server
	isSet bool
}

func (v NullableServer) Get() *Server {
	return v.value
}

func (v *NullableServer) Set(val *Server) {
	v.value = val
	v.isSet = true
}

func (v NullableServer) IsSet() bool {
	return v.isSet
}

func (v *NullableServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServer(val *Server) *NullableServer {
	return &NullableServer{value: val, isSet: true}
}

func (v NullableServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


