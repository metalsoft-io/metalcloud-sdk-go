/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateUserSSHKeyDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserSSHKeyDto{}

// CreateUserSSHKeyDto struct for CreateUserSSHKeyDto
type CreateUserSSHKeyDto struct {
	// The SSH key of the user
	SshKey string `json:"sshKey"`
	// Whether the SSH key needs to be validated or not
	ValidateKey *bool `json:"validateKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateUserSSHKeyDto CreateUserSSHKeyDto

// NewCreateUserSSHKeyDto instantiates a new CreateUserSSHKeyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserSSHKeyDto(sshKey string) *CreateUserSSHKeyDto {
	this := CreateUserSSHKeyDto{}
	this.SshKey = sshKey
	var validateKey bool = false
	this.ValidateKey = &validateKey
	return &this
}

// NewCreateUserSSHKeyDtoWithDefaults instantiates a new CreateUserSSHKeyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserSSHKeyDtoWithDefaults() *CreateUserSSHKeyDto {
	this := CreateUserSSHKeyDto{}
	var validateKey bool = false
	this.ValidateKey = &validateKey
	return &this
}

// GetSshKey returns the SshKey field value
func (o *CreateUserSSHKeyDto) GetSshKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SshKey
}

// GetSshKeyOk returns a tuple with the SshKey field value
// and a boolean to check if the value has been set.
func (o *CreateUserSSHKeyDto) GetSshKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SshKey, true
}

// SetSshKey sets field value
func (o *CreateUserSSHKeyDto) SetSshKey(v string) {
	o.SshKey = v
}

// GetValidateKey returns the ValidateKey field value if set, zero value otherwise.
func (o *CreateUserSSHKeyDto) GetValidateKey() bool {
	if o == nil || IsNil(o.ValidateKey) {
		var ret bool
		return ret
	}
	return *o.ValidateKey
}

// GetValidateKeyOk returns a tuple with the ValidateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserSSHKeyDto) GetValidateKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateKey) {
		return nil, false
	}
	return o.ValidateKey, true
}

// HasValidateKey returns a boolean if a field has been set.
func (o *CreateUserSSHKeyDto) HasValidateKey() bool {
	if o != nil && !IsNil(o.ValidateKey) {
		return true
	}

	return false
}

// SetValidateKey gets a reference to the given bool and assigns it to the ValidateKey field.
func (o *CreateUserSSHKeyDto) SetValidateKey(v bool) {
	o.ValidateKey = &v
}

func (o CreateUserSSHKeyDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserSSHKeyDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sshKey"] = o.SshKey
	if !IsNil(o.ValidateKey) {
		toSerialize["validateKey"] = o.ValidateKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateUserSSHKeyDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sshKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUserSSHKeyDto := _CreateUserSSHKeyDto{}

	err = json.Unmarshal(data, &varCreateUserSSHKeyDto)

	if err != nil {
		return err
	}

	*o = CreateUserSSHKeyDto(varCreateUserSSHKeyDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sshKey")
		delete(additionalProperties, "validateKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateUserSSHKeyDto struct {
	value *CreateUserSSHKeyDto
	isSet bool
}

func (v NullableCreateUserSSHKeyDto) Get() *CreateUserSSHKeyDto {
	return v.value
}

func (v *NullableCreateUserSSHKeyDto) Set(val *CreateUserSSHKeyDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserSSHKeyDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserSSHKeyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserSSHKeyDto(val *CreateUserSSHKeyDto) *NullableCreateUserSSHKeyDto {
	return &NullableCreateUserSSHKeyDto{value: val, isSet: true}
}

func (v NullableCreateUserSSHKeyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserSSHKeyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


