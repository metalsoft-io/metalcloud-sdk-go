/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the EthernetFabric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthernetFabric{}

// EthernetFabric struct for EthernetFabric
type EthernetFabric struct {
	// The type of network fabric
	FabricType FabricType `json:"fabricType"`
	// Unique identifier for the default network profile. Must be a positive integer (minimum: 1) corresponding to an existing profile.
	DefaultNetworkProfileId *int32 `json:"defaultNetworkProfileId,omitempty"`
	// Enables gNMI monitoring for telemetry data collection using the gNMI protocol.
	GnmiMonitoringEnabled *bool `json:"gnmiMonitoringEnabled,omitempty"`
	// Enables syslog monitoring for capturing system logs for diagnostics and troubleshooting.
	SyslogMonitoringEnabled *bool `json:"syslogMonitoringEnabled,omitempty"`
	// Enables zero-touch provisioning for automatic device configuration.
	ZeroTouchEnabled *bool `json:"zeroTouchEnabled,omitempty"`
	// ASN ranges in the format \"start-end\", where each range is an ordered pair with values between 1 and 4294967295.
	AsnRanges []string `json:"asnRanges,omitempty"`
	AsnAllocationStrategy *AsnAllocationStrategy `json:"asnAllocationStrategy,omitempty"`
	BgpNumbering *BgpNumberingType `json:"bgpNumbering,omitempty"`
	// Library label for the Ethernet fabric configuration, used to identify the BGP templates that can be used for deploy.
	LibraryLabel *string `json:"libraryLabel,omitempty"`
	// Default VLAN ID. Must be a number between 1 and 4096.
	DefaultVlan *int32 `json:"defaultVlan,omitempty"`
	// Extra internal IPs allocated per subnet; valid range is between 1 and 1000.
	ExtraInternalIPsPerSubnet *int32 `json:"extraInternalIPsPerSubnet,omitempty"`
	// Link Aggregation (LAG) ranges in the format \"start-end\"; each range must be within the bounds of 1 to 4096.
	LagRanges []string `json:"lagRanges,omitempty"`
	// Indicates if leaf switches have MLAG pairs.
	LeafSwitchesHaveMlagPairs *bool `json:"leafSwitchesHaveMlagPairs,omitempty"`
	// MLAG ID ranges. Each range must be provided in \"start-end\" format with values between 1 and 4096.
	MlagRanges []string `json:"mlagRanges,omitempty"`
	// Number of spines adjacent to leaf switches. Must be a positive number.
	NumberOfSpinesNextToLeafSwitches *int32 `json:"numberOfSpinesNextToLeafSwitches,omitempty"`
	// VLAN ranges that should be prevented from automatic cleanup. Format must be \"start-end\".
	PreventVlanCleanup []string `json:"preventVlanCleanup,omitempty"`
	// Flag indicating whether cleanup from uplink interfaces should be prevented.
	PreventCleanupFromUplinks *bool `json:"preventCleanupFromUplinks,omitempty"`
	// Reserved VLAN ranges that are excluded from general allocation. Must follow the \"start-end\" format.
	ReservedVlans []string `json:"reservedVlans,omitempty"`
	// Array of VLAN range strings in \"start-end\" format to be used in configuration.
	VlanRanges []string `json:"vlanRanges,omitempty"`
	// The VNI prefix for the EVPN VXLAN fabric.
	VniPrefix *int32 `json:"vniPrefix,omitempty"`
	// VLAN ranges to be associated with VRF instances. Each value must be an ordered pair specified in the \"start-end\" format.
	VrfVlanRanges []string `json:"vrfVlanRanges,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EthernetFabric EthernetFabric

// NewEthernetFabric instantiates a new EthernetFabric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthernetFabric(fabricType FabricType) *EthernetFabric {
	this := EthernetFabric{}
	this.FabricType = fabricType
	return &this
}

// NewEthernetFabricWithDefaults instantiates a new EthernetFabric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthernetFabricWithDefaults() *EthernetFabric {
	this := EthernetFabric{}
	return &this
}

// GetFabricType returns the FabricType field value
func (o *EthernetFabric) GetFabricType() FabricType {
	if o == nil {
		var ret FabricType
		return ret
	}

	return o.FabricType
}

// GetFabricTypeOk returns a tuple with the FabricType field value
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetFabricTypeOk() (*FabricType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FabricType, true
}

// SetFabricType sets field value
func (o *EthernetFabric) SetFabricType(v FabricType) {
	o.FabricType = v
}

// GetDefaultNetworkProfileId returns the DefaultNetworkProfileId field value if set, zero value otherwise.
func (o *EthernetFabric) GetDefaultNetworkProfileId() int32 {
	if o == nil || IsNil(o.DefaultNetworkProfileId) {
		var ret int32
		return ret
	}
	return *o.DefaultNetworkProfileId
}

// GetDefaultNetworkProfileIdOk returns a tuple with the DefaultNetworkProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetDefaultNetworkProfileIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultNetworkProfileId) {
		return nil, false
	}
	return o.DefaultNetworkProfileId, true
}

// HasDefaultNetworkProfileId returns a boolean if a field has been set.
func (o *EthernetFabric) HasDefaultNetworkProfileId() bool {
	if o != nil && !IsNil(o.DefaultNetworkProfileId) {
		return true
	}

	return false
}

// SetDefaultNetworkProfileId gets a reference to the given int32 and assigns it to the DefaultNetworkProfileId field.
func (o *EthernetFabric) SetDefaultNetworkProfileId(v int32) {
	o.DefaultNetworkProfileId = &v
}

// GetGnmiMonitoringEnabled returns the GnmiMonitoringEnabled field value if set, zero value otherwise.
func (o *EthernetFabric) GetGnmiMonitoringEnabled() bool {
	if o == nil || IsNil(o.GnmiMonitoringEnabled) {
		var ret bool
		return ret
	}
	return *o.GnmiMonitoringEnabled
}

// GetGnmiMonitoringEnabledOk returns a tuple with the GnmiMonitoringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetGnmiMonitoringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GnmiMonitoringEnabled) {
		return nil, false
	}
	return o.GnmiMonitoringEnabled, true
}

// HasGnmiMonitoringEnabled returns a boolean if a field has been set.
func (o *EthernetFabric) HasGnmiMonitoringEnabled() bool {
	if o != nil && !IsNil(o.GnmiMonitoringEnabled) {
		return true
	}

	return false
}

// SetGnmiMonitoringEnabled gets a reference to the given bool and assigns it to the GnmiMonitoringEnabled field.
func (o *EthernetFabric) SetGnmiMonitoringEnabled(v bool) {
	o.GnmiMonitoringEnabled = &v
}

// GetSyslogMonitoringEnabled returns the SyslogMonitoringEnabled field value if set, zero value otherwise.
func (o *EthernetFabric) GetSyslogMonitoringEnabled() bool {
	if o == nil || IsNil(o.SyslogMonitoringEnabled) {
		var ret bool
		return ret
	}
	return *o.SyslogMonitoringEnabled
}

// GetSyslogMonitoringEnabledOk returns a tuple with the SyslogMonitoringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetSyslogMonitoringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SyslogMonitoringEnabled) {
		return nil, false
	}
	return o.SyslogMonitoringEnabled, true
}

// HasSyslogMonitoringEnabled returns a boolean if a field has been set.
func (o *EthernetFabric) HasSyslogMonitoringEnabled() bool {
	if o != nil && !IsNil(o.SyslogMonitoringEnabled) {
		return true
	}

	return false
}

// SetSyslogMonitoringEnabled gets a reference to the given bool and assigns it to the SyslogMonitoringEnabled field.
func (o *EthernetFabric) SetSyslogMonitoringEnabled(v bool) {
	o.SyslogMonitoringEnabled = &v
}

// GetZeroTouchEnabled returns the ZeroTouchEnabled field value if set, zero value otherwise.
func (o *EthernetFabric) GetZeroTouchEnabled() bool {
	if o == nil || IsNil(o.ZeroTouchEnabled) {
		var ret bool
		return ret
	}
	return *o.ZeroTouchEnabled
}

// GetZeroTouchEnabledOk returns a tuple with the ZeroTouchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetZeroTouchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ZeroTouchEnabled) {
		return nil, false
	}
	return o.ZeroTouchEnabled, true
}

// HasZeroTouchEnabled returns a boolean if a field has been set.
func (o *EthernetFabric) HasZeroTouchEnabled() bool {
	if o != nil && !IsNil(o.ZeroTouchEnabled) {
		return true
	}

	return false
}

// SetZeroTouchEnabled gets a reference to the given bool and assigns it to the ZeroTouchEnabled field.
func (o *EthernetFabric) SetZeroTouchEnabled(v bool) {
	o.ZeroTouchEnabled = &v
}

// GetAsnRanges returns the AsnRanges field value if set, zero value otherwise.
func (o *EthernetFabric) GetAsnRanges() []string {
	if o == nil || IsNil(o.AsnRanges) {
		var ret []string
		return ret
	}
	return o.AsnRanges
}

// GetAsnRangesOk returns a tuple with the AsnRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetAsnRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.AsnRanges) {
		return nil, false
	}
	return o.AsnRanges, true
}

// HasAsnRanges returns a boolean if a field has been set.
func (o *EthernetFabric) HasAsnRanges() bool {
	if o != nil && !IsNil(o.AsnRanges) {
		return true
	}

	return false
}

// SetAsnRanges gets a reference to the given []string and assigns it to the AsnRanges field.
func (o *EthernetFabric) SetAsnRanges(v []string) {
	o.AsnRanges = v
}

// GetAsnAllocationStrategy returns the AsnAllocationStrategy field value if set, zero value otherwise.
func (o *EthernetFabric) GetAsnAllocationStrategy() AsnAllocationStrategy {
	if o == nil || IsNil(o.AsnAllocationStrategy) {
		var ret AsnAllocationStrategy
		return ret
	}
	return *o.AsnAllocationStrategy
}

// GetAsnAllocationStrategyOk returns a tuple with the AsnAllocationStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetAsnAllocationStrategyOk() (*AsnAllocationStrategy, bool) {
	if o == nil || IsNil(o.AsnAllocationStrategy) {
		return nil, false
	}
	return o.AsnAllocationStrategy, true
}

// HasAsnAllocationStrategy returns a boolean if a field has been set.
func (o *EthernetFabric) HasAsnAllocationStrategy() bool {
	if o != nil && !IsNil(o.AsnAllocationStrategy) {
		return true
	}

	return false
}

// SetAsnAllocationStrategy gets a reference to the given AsnAllocationStrategy and assigns it to the AsnAllocationStrategy field.
func (o *EthernetFabric) SetAsnAllocationStrategy(v AsnAllocationStrategy) {
	o.AsnAllocationStrategy = &v
}

// GetBgpNumbering returns the BgpNumbering field value if set, zero value otherwise.
func (o *EthernetFabric) GetBgpNumbering() BgpNumberingType {
	if o == nil || IsNil(o.BgpNumbering) {
		var ret BgpNumberingType
		return ret
	}
	return *o.BgpNumbering
}

// GetBgpNumberingOk returns a tuple with the BgpNumbering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetBgpNumberingOk() (*BgpNumberingType, bool) {
	if o == nil || IsNil(o.BgpNumbering) {
		return nil, false
	}
	return o.BgpNumbering, true
}

// HasBgpNumbering returns a boolean if a field has been set.
func (o *EthernetFabric) HasBgpNumbering() bool {
	if o != nil && !IsNil(o.BgpNumbering) {
		return true
	}

	return false
}

// SetBgpNumbering gets a reference to the given BgpNumberingType and assigns it to the BgpNumbering field.
func (o *EthernetFabric) SetBgpNumbering(v BgpNumberingType) {
	o.BgpNumbering = &v
}

// GetLibraryLabel returns the LibraryLabel field value if set, zero value otherwise.
func (o *EthernetFabric) GetLibraryLabel() string {
	if o == nil || IsNil(o.LibraryLabel) {
		var ret string
		return ret
	}
	return *o.LibraryLabel
}

// GetLibraryLabelOk returns a tuple with the LibraryLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetLibraryLabelOk() (*string, bool) {
	if o == nil || IsNil(o.LibraryLabel) {
		return nil, false
	}
	return o.LibraryLabel, true
}

// HasLibraryLabel returns a boolean if a field has been set.
func (o *EthernetFabric) HasLibraryLabel() bool {
	if o != nil && !IsNil(o.LibraryLabel) {
		return true
	}

	return false
}

// SetLibraryLabel gets a reference to the given string and assigns it to the LibraryLabel field.
func (o *EthernetFabric) SetLibraryLabel(v string) {
	o.LibraryLabel = &v
}

// GetDefaultVlan returns the DefaultVlan field value if set, zero value otherwise.
func (o *EthernetFabric) GetDefaultVlan() int32 {
	if o == nil || IsNil(o.DefaultVlan) {
		var ret int32
		return ret
	}
	return *o.DefaultVlan
}

// GetDefaultVlanOk returns a tuple with the DefaultVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetDefaultVlanOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultVlan) {
		return nil, false
	}
	return o.DefaultVlan, true
}

// HasDefaultVlan returns a boolean if a field has been set.
func (o *EthernetFabric) HasDefaultVlan() bool {
	if o != nil && !IsNil(o.DefaultVlan) {
		return true
	}

	return false
}

// SetDefaultVlan gets a reference to the given int32 and assigns it to the DefaultVlan field.
func (o *EthernetFabric) SetDefaultVlan(v int32) {
	o.DefaultVlan = &v
}

// GetExtraInternalIPsPerSubnet returns the ExtraInternalIPsPerSubnet field value if set, zero value otherwise.
func (o *EthernetFabric) GetExtraInternalIPsPerSubnet() int32 {
	if o == nil || IsNil(o.ExtraInternalIPsPerSubnet) {
		var ret int32
		return ret
	}
	return *o.ExtraInternalIPsPerSubnet
}

// GetExtraInternalIPsPerSubnetOk returns a tuple with the ExtraInternalIPsPerSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetExtraInternalIPsPerSubnetOk() (*int32, bool) {
	if o == nil || IsNil(o.ExtraInternalIPsPerSubnet) {
		return nil, false
	}
	return o.ExtraInternalIPsPerSubnet, true
}

// HasExtraInternalIPsPerSubnet returns a boolean if a field has been set.
func (o *EthernetFabric) HasExtraInternalIPsPerSubnet() bool {
	if o != nil && !IsNil(o.ExtraInternalIPsPerSubnet) {
		return true
	}

	return false
}

// SetExtraInternalIPsPerSubnet gets a reference to the given int32 and assigns it to the ExtraInternalIPsPerSubnet field.
func (o *EthernetFabric) SetExtraInternalIPsPerSubnet(v int32) {
	o.ExtraInternalIPsPerSubnet = &v
}

// GetLagRanges returns the LagRanges field value if set, zero value otherwise.
func (o *EthernetFabric) GetLagRanges() []string {
	if o == nil || IsNil(o.LagRanges) {
		var ret []string
		return ret
	}
	return o.LagRanges
}

// GetLagRangesOk returns a tuple with the LagRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetLagRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.LagRanges) {
		return nil, false
	}
	return o.LagRanges, true
}

// HasLagRanges returns a boolean if a field has been set.
func (o *EthernetFabric) HasLagRanges() bool {
	if o != nil && !IsNil(o.LagRanges) {
		return true
	}

	return false
}

// SetLagRanges gets a reference to the given []string and assigns it to the LagRanges field.
func (o *EthernetFabric) SetLagRanges(v []string) {
	o.LagRanges = v
}

// GetLeafSwitchesHaveMlagPairs returns the LeafSwitchesHaveMlagPairs field value if set, zero value otherwise.
func (o *EthernetFabric) GetLeafSwitchesHaveMlagPairs() bool {
	if o == nil || IsNil(o.LeafSwitchesHaveMlagPairs) {
		var ret bool
		return ret
	}
	return *o.LeafSwitchesHaveMlagPairs
}

// GetLeafSwitchesHaveMlagPairsOk returns a tuple with the LeafSwitchesHaveMlagPairs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetLeafSwitchesHaveMlagPairsOk() (*bool, bool) {
	if o == nil || IsNil(o.LeafSwitchesHaveMlagPairs) {
		return nil, false
	}
	return o.LeafSwitchesHaveMlagPairs, true
}

// HasLeafSwitchesHaveMlagPairs returns a boolean if a field has been set.
func (o *EthernetFabric) HasLeafSwitchesHaveMlagPairs() bool {
	if o != nil && !IsNil(o.LeafSwitchesHaveMlagPairs) {
		return true
	}

	return false
}

// SetLeafSwitchesHaveMlagPairs gets a reference to the given bool and assigns it to the LeafSwitchesHaveMlagPairs field.
func (o *EthernetFabric) SetLeafSwitchesHaveMlagPairs(v bool) {
	o.LeafSwitchesHaveMlagPairs = &v
}

// GetMlagRanges returns the MlagRanges field value if set, zero value otherwise.
func (o *EthernetFabric) GetMlagRanges() []string {
	if o == nil || IsNil(o.MlagRanges) {
		var ret []string
		return ret
	}
	return o.MlagRanges
}

// GetMlagRangesOk returns a tuple with the MlagRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetMlagRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.MlagRanges) {
		return nil, false
	}
	return o.MlagRanges, true
}

// HasMlagRanges returns a boolean if a field has been set.
func (o *EthernetFabric) HasMlagRanges() bool {
	if o != nil && !IsNil(o.MlagRanges) {
		return true
	}

	return false
}

// SetMlagRanges gets a reference to the given []string and assigns it to the MlagRanges field.
func (o *EthernetFabric) SetMlagRanges(v []string) {
	o.MlagRanges = v
}

// GetNumberOfSpinesNextToLeafSwitches returns the NumberOfSpinesNextToLeafSwitches field value if set, zero value otherwise.
func (o *EthernetFabric) GetNumberOfSpinesNextToLeafSwitches() int32 {
	if o == nil || IsNil(o.NumberOfSpinesNextToLeafSwitches) {
		var ret int32
		return ret
	}
	return *o.NumberOfSpinesNextToLeafSwitches
}

// GetNumberOfSpinesNextToLeafSwitchesOk returns a tuple with the NumberOfSpinesNextToLeafSwitches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetNumberOfSpinesNextToLeafSwitchesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfSpinesNextToLeafSwitches) {
		return nil, false
	}
	return o.NumberOfSpinesNextToLeafSwitches, true
}

// HasNumberOfSpinesNextToLeafSwitches returns a boolean if a field has been set.
func (o *EthernetFabric) HasNumberOfSpinesNextToLeafSwitches() bool {
	if o != nil && !IsNil(o.NumberOfSpinesNextToLeafSwitches) {
		return true
	}

	return false
}

// SetNumberOfSpinesNextToLeafSwitches gets a reference to the given int32 and assigns it to the NumberOfSpinesNextToLeafSwitches field.
func (o *EthernetFabric) SetNumberOfSpinesNextToLeafSwitches(v int32) {
	o.NumberOfSpinesNextToLeafSwitches = &v
}

// GetPreventVlanCleanup returns the PreventVlanCleanup field value if set, zero value otherwise.
func (o *EthernetFabric) GetPreventVlanCleanup() []string {
	if o == nil || IsNil(o.PreventVlanCleanup) {
		var ret []string
		return ret
	}
	return o.PreventVlanCleanup
}

// GetPreventVlanCleanupOk returns a tuple with the PreventVlanCleanup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetPreventVlanCleanupOk() ([]string, bool) {
	if o == nil || IsNil(o.PreventVlanCleanup) {
		return nil, false
	}
	return o.PreventVlanCleanup, true
}

// HasPreventVlanCleanup returns a boolean if a field has been set.
func (o *EthernetFabric) HasPreventVlanCleanup() bool {
	if o != nil && !IsNil(o.PreventVlanCleanup) {
		return true
	}

	return false
}

// SetPreventVlanCleanup gets a reference to the given []string and assigns it to the PreventVlanCleanup field.
func (o *EthernetFabric) SetPreventVlanCleanup(v []string) {
	o.PreventVlanCleanup = v
}

// GetPreventCleanupFromUplinks returns the PreventCleanupFromUplinks field value if set, zero value otherwise.
func (o *EthernetFabric) GetPreventCleanupFromUplinks() bool {
	if o == nil || IsNil(o.PreventCleanupFromUplinks) {
		var ret bool
		return ret
	}
	return *o.PreventCleanupFromUplinks
}

// GetPreventCleanupFromUplinksOk returns a tuple with the PreventCleanupFromUplinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetPreventCleanupFromUplinksOk() (*bool, bool) {
	if o == nil || IsNil(o.PreventCleanupFromUplinks) {
		return nil, false
	}
	return o.PreventCleanupFromUplinks, true
}

// HasPreventCleanupFromUplinks returns a boolean if a field has been set.
func (o *EthernetFabric) HasPreventCleanupFromUplinks() bool {
	if o != nil && !IsNil(o.PreventCleanupFromUplinks) {
		return true
	}

	return false
}

// SetPreventCleanupFromUplinks gets a reference to the given bool and assigns it to the PreventCleanupFromUplinks field.
func (o *EthernetFabric) SetPreventCleanupFromUplinks(v bool) {
	o.PreventCleanupFromUplinks = &v
}

// GetReservedVlans returns the ReservedVlans field value if set, zero value otherwise.
func (o *EthernetFabric) GetReservedVlans() []string {
	if o == nil || IsNil(o.ReservedVlans) {
		var ret []string
		return ret
	}
	return o.ReservedVlans
}

// GetReservedVlansOk returns a tuple with the ReservedVlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetReservedVlansOk() ([]string, bool) {
	if o == nil || IsNil(o.ReservedVlans) {
		return nil, false
	}
	return o.ReservedVlans, true
}

// HasReservedVlans returns a boolean if a field has been set.
func (o *EthernetFabric) HasReservedVlans() bool {
	if o != nil && !IsNil(o.ReservedVlans) {
		return true
	}

	return false
}

// SetReservedVlans gets a reference to the given []string and assigns it to the ReservedVlans field.
func (o *EthernetFabric) SetReservedVlans(v []string) {
	o.ReservedVlans = v
}

// GetVlanRanges returns the VlanRanges field value if set, zero value otherwise.
func (o *EthernetFabric) GetVlanRanges() []string {
	if o == nil || IsNil(o.VlanRanges) {
		var ret []string
		return ret
	}
	return o.VlanRanges
}

// GetVlanRangesOk returns a tuple with the VlanRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetVlanRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.VlanRanges) {
		return nil, false
	}
	return o.VlanRanges, true
}

// HasVlanRanges returns a boolean if a field has been set.
func (o *EthernetFabric) HasVlanRanges() bool {
	if o != nil && !IsNil(o.VlanRanges) {
		return true
	}

	return false
}

// SetVlanRanges gets a reference to the given []string and assigns it to the VlanRanges field.
func (o *EthernetFabric) SetVlanRanges(v []string) {
	o.VlanRanges = v
}

// GetVniPrefix returns the VniPrefix field value if set, zero value otherwise.
func (o *EthernetFabric) GetVniPrefix() int32 {
	if o == nil || IsNil(o.VniPrefix) {
		var ret int32
		return ret
	}
	return *o.VniPrefix
}

// GetVniPrefixOk returns a tuple with the VniPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetVniPrefixOk() (*int32, bool) {
	if o == nil || IsNil(o.VniPrefix) {
		return nil, false
	}
	return o.VniPrefix, true
}

// HasVniPrefix returns a boolean if a field has been set.
func (o *EthernetFabric) HasVniPrefix() bool {
	if o != nil && !IsNil(o.VniPrefix) {
		return true
	}

	return false
}

// SetVniPrefix gets a reference to the given int32 and assigns it to the VniPrefix field.
func (o *EthernetFabric) SetVniPrefix(v int32) {
	o.VniPrefix = &v
}

// GetVrfVlanRanges returns the VrfVlanRanges field value if set, zero value otherwise.
func (o *EthernetFabric) GetVrfVlanRanges() []string {
	if o == nil || IsNil(o.VrfVlanRanges) {
		var ret []string
		return ret
	}
	return o.VrfVlanRanges
}

// GetVrfVlanRangesOk returns a tuple with the VrfVlanRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetFabric) GetVrfVlanRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.VrfVlanRanges) {
		return nil, false
	}
	return o.VrfVlanRanges, true
}

// HasVrfVlanRanges returns a boolean if a field has been set.
func (o *EthernetFabric) HasVrfVlanRanges() bool {
	if o != nil && !IsNil(o.VrfVlanRanges) {
		return true
	}

	return false
}

// SetVrfVlanRanges gets a reference to the given []string and assigns it to the VrfVlanRanges field.
func (o *EthernetFabric) SetVrfVlanRanges(v []string) {
	o.VrfVlanRanges = v
}

func (o EthernetFabric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthernetFabric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fabricType"] = o.FabricType
	if !IsNil(o.DefaultNetworkProfileId) {
		toSerialize["defaultNetworkProfileId"] = o.DefaultNetworkProfileId
	}
	if !IsNil(o.GnmiMonitoringEnabled) {
		toSerialize["gnmiMonitoringEnabled"] = o.GnmiMonitoringEnabled
	}
	if !IsNil(o.SyslogMonitoringEnabled) {
		toSerialize["syslogMonitoringEnabled"] = o.SyslogMonitoringEnabled
	}
	if !IsNil(o.ZeroTouchEnabled) {
		toSerialize["zeroTouchEnabled"] = o.ZeroTouchEnabled
	}
	if !IsNil(o.AsnRanges) {
		toSerialize["asnRanges"] = o.AsnRanges
	}
	if !IsNil(o.AsnAllocationStrategy) {
		toSerialize["asnAllocationStrategy"] = o.AsnAllocationStrategy
	}
	if !IsNil(o.BgpNumbering) {
		toSerialize["bgpNumbering"] = o.BgpNumbering
	}
	if !IsNil(o.LibraryLabel) {
		toSerialize["libraryLabel"] = o.LibraryLabel
	}
	if !IsNil(o.DefaultVlan) {
		toSerialize["defaultVlan"] = o.DefaultVlan
	}
	if !IsNil(o.ExtraInternalIPsPerSubnet) {
		toSerialize["extraInternalIPsPerSubnet"] = o.ExtraInternalIPsPerSubnet
	}
	if !IsNil(o.LagRanges) {
		toSerialize["lagRanges"] = o.LagRanges
	}
	if !IsNil(o.LeafSwitchesHaveMlagPairs) {
		toSerialize["leafSwitchesHaveMlagPairs"] = o.LeafSwitchesHaveMlagPairs
	}
	if !IsNil(o.MlagRanges) {
		toSerialize["mlagRanges"] = o.MlagRanges
	}
	if !IsNil(o.NumberOfSpinesNextToLeafSwitches) {
		toSerialize["numberOfSpinesNextToLeafSwitches"] = o.NumberOfSpinesNextToLeafSwitches
	}
	if !IsNil(o.PreventVlanCleanup) {
		toSerialize["preventVlanCleanup"] = o.PreventVlanCleanup
	}
	if !IsNil(o.PreventCleanupFromUplinks) {
		toSerialize["preventCleanupFromUplinks"] = o.PreventCleanupFromUplinks
	}
	if !IsNil(o.ReservedVlans) {
		toSerialize["reservedVlans"] = o.ReservedVlans
	}
	if !IsNil(o.VlanRanges) {
		toSerialize["vlanRanges"] = o.VlanRanges
	}
	if !IsNil(o.VniPrefix) {
		toSerialize["vniPrefix"] = o.VniPrefix
	}
	if !IsNil(o.VrfVlanRanges) {
		toSerialize["vrfVlanRanges"] = o.VrfVlanRanges
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EthernetFabric) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fabricType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEthernetFabric := _EthernetFabric{}

	err = json.Unmarshal(data, &varEthernetFabric)

	if err != nil {
		return err
	}

	*o = EthernetFabric(varEthernetFabric)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fabricType")
		delete(additionalProperties, "defaultNetworkProfileId")
		delete(additionalProperties, "gnmiMonitoringEnabled")
		delete(additionalProperties, "syslogMonitoringEnabled")
		delete(additionalProperties, "zeroTouchEnabled")
		delete(additionalProperties, "asnRanges")
		delete(additionalProperties, "asnAllocationStrategy")
		delete(additionalProperties, "bgpNumbering")
		delete(additionalProperties, "libraryLabel")
		delete(additionalProperties, "defaultVlan")
		delete(additionalProperties, "extraInternalIPsPerSubnet")
		delete(additionalProperties, "lagRanges")
		delete(additionalProperties, "leafSwitchesHaveMlagPairs")
		delete(additionalProperties, "mlagRanges")
		delete(additionalProperties, "numberOfSpinesNextToLeafSwitches")
		delete(additionalProperties, "preventVlanCleanup")
		delete(additionalProperties, "preventCleanupFromUplinks")
		delete(additionalProperties, "reservedVlans")
		delete(additionalProperties, "vlanRanges")
		delete(additionalProperties, "vniPrefix")
		delete(additionalProperties, "vrfVlanRanges")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEthernetFabric struct {
	value *EthernetFabric
	isSet bool
}

func (v NullableEthernetFabric) Get() *EthernetFabric {
	return v.value
}

func (v *NullableEthernetFabric) Set(val *EthernetFabric) {
	v.value = val
	v.isSet = true
}

func (v NullableEthernetFabric) IsSet() bool {
	return v.isSet
}

func (v *NullableEthernetFabric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthernetFabric(val *EthernetFabric) *NullableEthernetFabric {
	return &NullableEthernetFabric{value: val, isSet: true}
}

func (v NullableEthernetFabric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthernetFabric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


