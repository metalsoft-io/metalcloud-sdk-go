/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ResourcePoolAPIService ResourcePoolAPI service
type ResourcePoolAPIService service

type ResourcePoolAPIAddResourcePoolUserRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
	userId float32
}

func (r ResourcePoolAPIAddResourcePoolUserRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddResourcePoolUserExecute(r)
}

/*
AddResourcePoolUser Add a user to a Resource Pool

Add a user to a Resource Pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @param userId
 @return ResourcePoolAPIAddResourcePoolUserRequest
*/
func (a *ResourcePoolAPIService) AddResourcePoolUser(ctx context.Context, resourcePoolId float32, userId float32) ResourcePoolAPIAddResourcePoolUserRequest {
	return ResourcePoolAPIAddResourcePoolUserRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
		userId: userId,
	}
}

// Execute executes the request
func (a *ResourcePoolAPIService) AddResourcePoolUserExecute(r ResourcePoolAPIAddResourcePoolUserRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.AddResourcePoolUser")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/user/{userId}/pool/{resourcePoolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourcePoolAPIAddServerToResourcePoolRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
	serverId float32
}

func (r ResourcePoolAPIAddServerToResourcePoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddServerToResourcePoolExecute(r)
}

/*
AddServerToResourcePool Add a server to a Resource Pool

Add a server to a Resource Pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @param serverId
 @return ResourcePoolAPIAddServerToResourcePoolRequest
*/
func (a *ResourcePoolAPIService) AddServerToResourcePool(ctx context.Context, resourcePoolId float32, serverId float32) ResourcePoolAPIAddServerToResourcePoolRequest {
	return ResourcePoolAPIAddServerToResourcePoolRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
		serverId: serverId,
	}
}

// Execute executes the request
func (a *ResourcePoolAPIService) AddServerToResourcePoolExecute(r ResourcePoolAPIAddServerToResourcePoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.AddServerToResourcePool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}/server/{serverId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourcePoolAPIAddSubnetPoolToResourcePoolRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
	subnetPoolId float32
}

func (r ResourcePoolAPIAddSubnetPoolToResourcePoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddSubnetPoolToResourcePoolExecute(r)
}

/*
AddSubnetPoolToResourcePool Add a subnet pool to a resource pool

Add a subnet pool to a resource pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @param subnetPoolId
 @return ResourcePoolAPIAddSubnetPoolToResourcePoolRequest
*/
func (a *ResourcePoolAPIService) AddSubnetPoolToResourcePool(ctx context.Context, resourcePoolId float32, subnetPoolId float32) ResourcePoolAPIAddSubnetPoolToResourcePoolRequest {
	return ResourcePoolAPIAddSubnetPoolToResourcePoolRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
		subnetPoolId: subnetPoolId,
	}
}

// Execute executes the request
func (a *ResourcePoolAPIService) AddSubnetPoolToResourcePoolExecute(r ResourcePoolAPIAddSubnetPoolToResourcePoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.AddSubnetPoolToResourcePool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}/subnet-pool/{subnetPoolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subnetPoolId"+"}", url.PathEscape(parameterValueToString(r.subnetPoolId, "subnetPoolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourcePoolAPICreateResourcePoolRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	createResourcePool *CreateResourcePool
}

// The Resource Pool create object
func (r ResourcePoolAPICreateResourcePoolRequest) CreateResourcePool(createResourcePool CreateResourcePool) ResourcePoolAPICreateResourcePoolRequest {
	r.createResourcePool = &createResourcePool
	return r
}

func (r ResourcePoolAPICreateResourcePoolRequest) Execute() (*ResourcePool, *http.Response, error) {
	return r.ApiService.CreateResourcePoolExecute(r)
}

/*
CreateResourcePool Creates a Resource Pool

Creates a Resource Pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ResourcePoolAPICreateResourcePoolRequest
*/
func (a *ResourcePoolAPIService) CreateResourcePool(ctx context.Context) ResourcePoolAPICreateResourcePoolRequest {
	return ResourcePoolAPICreateResourcePoolRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResourcePool
func (a *ResourcePoolAPIService) CreateResourcePoolExecute(r ResourcePoolAPICreateResourcePoolRequest) (*ResourcePool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourcePool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.CreateResourcePool")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createResourcePool == nil {
		return localVarReturnValue, nil, reportError("createResourcePool is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createResourcePool
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcePoolAPIDeleteResourcePoolRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
}

func (r ResourcePoolAPIDeleteResourcePoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteResourcePoolExecute(r)
}

/*
DeleteResourcePool Deletes a Resource Pool

Deletes a Resource Pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @return ResourcePoolAPIDeleteResourcePoolRequest
*/
func (a *ResourcePoolAPIService) DeleteResourcePool(ctx context.Context, resourcePoolId float32) ResourcePoolAPIDeleteResourcePoolRequest {
	return ResourcePoolAPIDeleteResourcePoolRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
	}
}

// Execute executes the request
func (a *ResourcePoolAPIService) DeleteResourcePoolExecute(r ResourcePoolAPIDeleteResourcePoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.DeleteResourcePool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourcePoolAPIGetResourcePoolRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
}

func (r ResourcePoolAPIGetResourcePoolRequest) Execute() (*ResourcePool, *http.Response, error) {
	return r.ApiService.GetResourcePoolExecute(r)
}

/*
GetResourcePool Get Resource Pool information

Returns Resource Pool information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @return ResourcePoolAPIGetResourcePoolRequest
*/
func (a *ResourcePoolAPIService) GetResourcePool(ctx context.Context, resourcePoolId float32) ResourcePoolAPIGetResourcePoolRequest {
	return ResourcePoolAPIGetResourcePoolRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
	}
}

// Execute executes the request
//  @return ResourcePool
func (a *ResourcePoolAPIService) GetResourcePoolExecute(r ResourcePoolAPIGetResourcePoolRequest) (*ResourcePool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourcePool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.GetResourcePool")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcePoolAPIGetResourcePoolServersRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
}

func (r ResourcePoolAPIGetResourcePoolServersRequest) Execute() ([]float32, *http.Response, error) {
	return r.ApiService.GetResourcePoolServersExecute(r)
}

/*
GetResourcePoolServers Get all servers that are part of a Resource Pool

Returns list of all servers that are part of a Resource Pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @return ResourcePoolAPIGetResourcePoolServersRequest
*/
func (a *ResourcePoolAPIService) GetResourcePoolServers(ctx context.Context, resourcePoolId float32) ResourcePoolAPIGetResourcePoolServersRequest {
	return ResourcePoolAPIGetResourcePoolServersRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
	}
}

// Execute executes the request
//  @return []float32
func (a *ResourcePoolAPIService) GetResourcePoolServersExecute(r ResourcePoolAPIGetResourcePoolServersRequest) ([]float32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []float32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.GetResourcePoolServers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}/servers"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcePoolAPIGetResourcePoolSubnetPoolsRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
}

func (r ResourcePoolAPIGetResourcePoolSubnetPoolsRequest) Execute() ([]float32, *http.Response, error) {
	return r.ApiService.GetResourcePoolSubnetPoolsExecute(r)
}

/*
GetResourcePoolSubnetPools Get all subnet pools that are part of a resource pool

Returns list of all subnet pools that are part of a resource pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @return ResourcePoolAPIGetResourcePoolSubnetPoolsRequest
*/
func (a *ResourcePoolAPIService) GetResourcePoolSubnetPools(ctx context.Context, resourcePoolId float32) ResourcePoolAPIGetResourcePoolSubnetPoolsRequest {
	return ResourcePoolAPIGetResourcePoolSubnetPoolsRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
	}
}

// Execute executes the request
//  @return []float32
func (a *ResourcePoolAPIService) GetResourcePoolSubnetPoolsExecute(r ResourcePoolAPIGetResourcePoolSubnetPoolsRequest) ([]float32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []float32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.GetResourcePoolSubnetPools")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}/subnet-pools"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcePoolAPIGetResourcePoolUsersRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
}

func (r ResourcePoolAPIGetResourcePoolUsersRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetResourcePoolUsersExecute(r)
}

/*
GetResourcePoolUsers Get all users that have access to a Resource Pool

Returns list of all users that have access to a Resource Pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @return ResourcePoolAPIGetResourcePoolUsersRequest
*/
func (a *ResourcePoolAPIService) GetResourcePoolUsers(ctx context.Context, resourcePoolId float32) ResourcePoolAPIGetResourcePoolUsersRequest {
	return ResourcePoolAPIGetResourcePoolUsersRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *ResourcePoolAPIService) GetResourcePoolUsersExecute(r ResourcePoolAPIGetResourcePoolUsersRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.GetResourcePoolUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcePoolAPIGetResourcePoolsRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	page *float32
	limit *float32
	filterResourcePoolId *[]string
	filterResourcePoolLabel *[]string
	filterResourcePoolDescription *[]string
	filterResourcePoolCreatedTimestamp *[]string
	filterResourcePoolUpdatedTimestamp *[]string
	sortBy *[]string
	search *string
	searchBy *[]string
}

// Page number to retrieve.If you provide invalid value the default page number will applied         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 1           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 1           &lt;/p&gt;         
func (r ResourcePoolAPIGetResourcePoolsRequest) Page(page float32) ResourcePoolAPIGetResourcePoolsRequest {
	r.page = &page
	return r
}

// Number of records per page.       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; 20           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Max Value: &lt;/b&gt; 100           &lt;/p&gt;        If provided value is greater than max value, max value will be applied.       
func (r ResourcePoolAPIGetResourcePoolsRequest) Limit(limit float32) ResourcePoolAPIGetResourcePoolsRequest {
	r.limit = &limit
	return r
}

// Filter by resourcePoolId query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.resourcePoolId&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.resourcePoolId&#x3D;$not:$like:John Doe&amp;filter.resourcePoolId&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ResourcePoolAPIGetResourcePoolsRequest) FilterResourcePoolId(filterResourcePoolId []string) ResourcePoolAPIGetResourcePoolsRequest {
	r.filterResourcePoolId = &filterResourcePoolId
	return r
}

// Filter by resourcePoolLabel query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.resourcePoolLabel&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.resourcePoolLabel&#x3D;$not:$like:John Doe&amp;filter.resourcePoolLabel&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ResourcePoolAPIGetResourcePoolsRequest) FilterResourcePoolLabel(filterResourcePoolLabel []string) ResourcePoolAPIGetResourcePoolsRequest {
	r.filterResourcePoolLabel = &filterResourcePoolLabel
	return r
}

// Filter by resourcePoolDescription query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.resourcePoolDescription&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.resourcePoolDescription&#x3D;$not:$like:John Doe&amp;filter.resourcePoolDescription&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ResourcePoolAPIGetResourcePoolsRequest) FilterResourcePoolDescription(filterResourcePoolDescription []string) ResourcePoolAPIGetResourcePoolsRequest {
	r.filterResourcePoolDescription = &filterResourcePoolDescription
	return r
}

// Filter by resourcePoolCreatedTimestamp query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.resourcePoolCreatedTimestamp&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.resourcePoolCreatedTimestamp&#x3D;$not:$like:John Doe&amp;filter.resourcePoolCreatedTimestamp&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ResourcePoolAPIGetResourcePoolsRequest) FilterResourcePoolCreatedTimestamp(filterResourcePoolCreatedTimestamp []string) ResourcePoolAPIGetResourcePoolsRequest {
	r.filterResourcePoolCreatedTimestamp = &filterResourcePoolCreatedTimestamp
	return r
}

// Filter by resourcePoolUpdatedTimestamp query param.           &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; filter.resourcePoolUpdatedTimestamp&#x3D;{$not}:OPERATION:VALUE           &lt;/p&gt;           &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; filter.resourcePoolUpdatedTimestamp&#x3D;$not:$like:John Doe&amp;filter.resourcePoolUpdatedTimestamp&#x3D;like:John           &lt;/p&gt;           &lt;h4&gt;Available Operations&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;$and&lt;/li&gt; &lt;li&gt;$or&lt;/li&gt; &lt;li&gt;$not&lt;/li&gt; &lt;li&gt;$eq&lt;/li&gt; &lt;li&gt;$gt&lt;/li&gt; &lt;li&gt;$gte&lt;/li&gt; &lt;li&gt;$in&lt;/li&gt; &lt;li&gt;$null&lt;/li&gt; &lt;li&gt;$lt&lt;/li&gt; &lt;li&gt;$lte&lt;/li&gt; &lt;li&gt;$btw&lt;/li&gt; &lt;li&gt;$ilike&lt;/li&gt; &lt;li&gt;$sw&lt;/li&gt; &lt;li&gt;$contains&lt;/li&gt;&lt;/ul&gt;
func (r ResourcePoolAPIGetResourcePoolsRequest) FilterResourcePoolUpdatedTimestamp(filterResourcePoolUpdatedTimestamp []string) ResourcePoolAPIGetResourcePoolsRequest {
	r.filterResourcePoolUpdatedTimestamp = &filterResourcePoolUpdatedTimestamp
	return r
}

// Parameter to sort by.       &lt;p&gt;To sort by multiple fields, just provide query param multiple types. The order in url defines an order of sorting&lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Format: &lt;/b&gt; fieldName:DIRECTION           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; sortBy&#x3D;id:DESC&amp;sortBy&#x3D;createdAt:ASC           &lt;/p&gt;       &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; resourcePoolId:DESC           &lt;/p&gt;       &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;resourcePoolId&lt;/li&gt; &lt;li&gt;resourcePoolLabel&lt;/li&gt;&lt;/ul&gt;       
func (r ResourcePoolAPIGetResourcePoolsRequest) SortBy(sortBy []string) ResourcePoolAPIGetResourcePoolsRequest {
	r.sortBy = &sortBy
	return r
}

// Search term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; John           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; No default value           &lt;/p&gt;         
func (r ResourcePoolAPIGetResourcePoolsRequest) Search(search string) ResourcePoolAPIGetResourcePoolsRequest {
	r.search = &search
	return r
}

// List of fields to search by term to filter result values         &lt;p&gt;              &lt;b&gt;Example: &lt;/b&gt; resourcePoolLabel,resourcePoolDescription           &lt;/p&gt;         &lt;p&gt;              &lt;b&gt;Default Value: &lt;/b&gt; By default all fields mentioned below will be used to search by term           &lt;/p&gt;         &lt;h4&gt;Available Fields&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;resourcePoolLabel&lt;/li&gt; &lt;li&gt;resourcePoolDescription&lt;/li&gt;&lt;/ul&gt;         
func (r ResourcePoolAPIGetResourcePoolsRequest) SearchBy(searchBy []string) ResourcePoolAPIGetResourcePoolsRequest {
	r.searchBy = &searchBy
	return r
}

func (r ResourcePoolAPIGetResourcePoolsRequest) Execute() (*ResourcePoolPaginatedList, *http.Response, error) {
	return r.ApiService.GetResourcePoolsExecute(r)
}

/*
GetResourcePools Get all Resource Pools

Returns list of all Resource Pools

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ResourcePoolAPIGetResourcePoolsRequest
*/
func (a *ResourcePoolAPIService) GetResourcePools(ctx context.Context) ResourcePoolAPIGetResourcePoolsRequest {
	return ResourcePoolAPIGetResourcePoolsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResourcePoolPaginatedList
func (a *ResourcePoolAPIService) GetResourcePoolsExecute(r ResourcePoolAPIGetResourcePoolsRequest) (*ResourcePoolPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourcePoolPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.GetResourcePools")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.filterResourcePoolId != nil {
		t := *r.filterResourcePoolId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolId", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolId", t, "form", "multi")
		}
	}
	if r.filterResourcePoolLabel != nil {
		t := *r.filterResourcePoolLabel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolLabel", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolLabel", t, "form", "multi")
		}
	}
	if r.filterResourcePoolDescription != nil {
		t := *r.filterResourcePoolDescription
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolDescription", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolDescription", t, "form", "multi")
		}
	}
	if r.filterResourcePoolCreatedTimestamp != nil {
		t := *r.filterResourcePoolCreatedTimestamp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolCreatedTimestamp", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolCreatedTimestamp", t, "form", "multi")
		}
	}
	if r.filterResourcePoolUpdatedTimestamp != nil {
		t := *r.filterResourcePoolUpdatedTimestamp
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolUpdatedTimestamp", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "filter.resourcePoolUpdatedTimestamp", t, "form", "multi")
		}
	}
	if r.sortBy != nil {
		t := *r.sortBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.searchBy != nil {
		t := *r.searchBy
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "searchBy", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcePoolAPIGetUserResourcePoolsRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	userId float32
}

func (r ResourcePoolAPIGetUserResourcePoolsRequest) Execute() ([]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetUserResourcePoolsExecute(r)
}

/*
GetUserResourcePools Get all Resource Pools that a user has access to

Returns list of all Resource Pools that a user has access to

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId
 @return ResourcePoolAPIGetUserResourcePoolsRequest
*/
func (a *ResourcePoolAPIService) GetUserResourcePools(ctx context.Context, userId float32) ResourcePoolAPIGetUserResourcePoolsRequest {
	return ResourcePoolAPIGetUserResourcePoolsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []map[string]interface{}
func (a *ResourcePoolAPIService) GetUserResourcePoolsExecute(r ResourcePoolAPIGetUserResourcePoolsRequest) ([]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.GetUserResourcePools")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/user/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcePoolAPIRemoveResourcePoolUserRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
	userId float32
}

func (r ResourcePoolAPIRemoveResourcePoolUserRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveResourcePoolUserExecute(r)
}

/*
RemoveResourcePoolUser Remove a user from a Resource Pool

Remove a user from a Resource Pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @param userId
 @return ResourcePoolAPIRemoveResourcePoolUserRequest
*/
func (a *ResourcePoolAPIService) RemoveResourcePoolUser(ctx context.Context, resourcePoolId float32, userId float32) ResourcePoolAPIRemoveResourcePoolUserRequest {
	return ResourcePoolAPIRemoveResourcePoolUserRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
		userId: userId,
	}
}

// Execute executes the request
func (a *ResourcePoolAPIService) RemoveResourcePoolUserExecute(r ResourcePoolAPIRemoveResourcePoolUserRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.RemoveResourcePoolUser")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/user/{userId}/pool/{resourcePoolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourcePoolAPIRemoveServerFromResourcePoolRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
	serverId float32
}

func (r ResourcePoolAPIRemoveServerFromResourcePoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveServerFromResourcePoolExecute(r)
}

/*
RemoveServerFromResourcePool Remove a server from a Resource Pool

Remove a server from a Resource Pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @param serverId
 @return ResourcePoolAPIRemoveServerFromResourcePoolRequest
*/
func (a *ResourcePoolAPIService) RemoveServerFromResourcePool(ctx context.Context, resourcePoolId float32, serverId float32) ResourcePoolAPIRemoveServerFromResourcePoolRequest {
	return ResourcePoolAPIRemoveServerFromResourcePoolRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
		serverId: serverId,
	}
}

// Execute executes the request
func (a *ResourcePoolAPIService) RemoveServerFromResourcePoolExecute(r ResourcePoolAPIRemoveServerFromResourcePoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.RemoveServerFromResourcePool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}/server/{serverId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"serverId"+"}", url.PathEscape(parameterValueToString(r.serverId, "serverId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourcePoolAPIRemoveSubnetPoolFromResourcePoolRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
	subnetPoolId float32
}

func (r ResourcePoolAPIRemoveSubnetPoolFromResourcePoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveSubnetPoolFromResourcePoolExecute(r)
}

/*
RemoveSubnetPoolFromResourcePool Remove a subnet from a resource pool

Remove a subnet from a resource pool

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @param subnetPoolId
 @return ResourcePoolAPIRemoveSubnetPoolFromResourcePoolRequest
*/
func (a *ResourcePoolAPIService) RemoveSubnetPoolFromResourcePool(ctx context.Context, resourcePoolId float32, subnetPoolId float32) ResourcePoolAPIRemoveSubnetPoolFromResourcePoolRequest {
	return ResourcePoolAPIRemoveSubnetPoolFromResourcePoolRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
		subnetPoolId: subnetPoolId,
	}
}

// Execute executes the request
func (a *ResourcePoolAPIService) RemoveSubnetPoolFromResourcePoolExecute(r ResourcePoolAPIRemoveSubnetPoolFromResourcePoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.RemoveSubnetPoolFromResourcePool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}/subnet-pool/{subnetPoolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subnetPoolId"+"}", url.PathEscape(parameterValueToString(r.subnetPoolId, "subnetPoolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourcePoolAPIUpdateResourcePoolRequest struct {
	ctx context.Context
	ApiService *ResourcePoolAPIService
	resourcePoolId float32
	updateResourcePool *UpdateResourcePool
}

// The Resource Pool update object
func (r ResourcePoolAPIUpdateResourcePoolRequest) UpdateResourcePool(updateResourcePool UpdateResourcePool) ResourcePoolAPIUpdateResourcePoolRequest {
	r.updateResourcePool = &updateResourcePool
	return r
}

func (r ResourcePoolAPIUpdateResourcePoolRequest) Execute() (*ResourcePool, *http.Response, error) {
	return r.ApiService.UpdateResourcePoolExecute(r)
}

/*
UpdateResourcePool Updates Resource Pool information

Updates Resource Pool information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param resourcePoolId
 @return ResourcePoolAPIUpdateResourcePoolRequest
*/
func (a *ResourcePoolAPIService) UpdateResourcePool(ctx context.Context, resourcePoolId float32) ResourcePoolAPIUpdateResourcePoolRequest {
	return ResourcePoolAPIUpdateResourcePoolRequest{
		ApiService: a,
		ctx: ctx,
		resourcePoolId: resourcePoolId,
	}
}

// Execute executes the request
//  @return ResourcePool
func (a *ResourcePoolAPIService) UpdateResourcePoolExecute(r ResourcePoolAPIUpdateResourcePoolRequest) (*ResourcePool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourcePool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourcePoolAPIService.UpdateResourcePool")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/resource-pools/{resourcePoolId}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourcePoolId"+"}", url.PathEscape(parameterValueToString(r.resourcePoolId, "resourcePoolId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateResourcePool == nil {
		return localVarReturnValue, nil, reportError("updateResourcePool is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateResourcePool
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
