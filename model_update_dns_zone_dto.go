/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateDnsZoneDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDnsZoneDto{}

// UpdateDnsZoneDto struct for UpdateDnsZoneDto
type UpdateDnsZoneDto struct {
	// The DNS zone description
	Description *string `json:"description,omitempty"`
	// The type of zone, 'master' is controlled by the application,                   'slave' is controlled by an external DNS server.
	ZoneType *string `json:"zoneType,omitempty"`
	// The email address of the DNS zone administrator
	SoaEmail *string `json:"soaEmail,omitempty"`
	// TTL (Time to Live) for the DNS zone.
	Ttl *int32 `json:"ttl,omitempty"`
	// The name servers for this DNS zone. This is a list of DNS servers that are authoritative for the zone.
	NameServers []string `json:"nameServers,omitempty"`
	// The status, let the user to decide with DNS zone to delete and when,       and how much to keep them in the history (archived status). Also, it allows the user to       resurrect the archived DNS zone if needed.       Status: READY           - is the initial status of the DNS zone           - the DNS zone is ready for deployment           - the DNS zone can be deleted, use in deployments and updated       Status: ACTIVE           - the DNS zone is part of at least one ongoing deployment           - can't be deleted (the dns service will have validation for this)           - the status can't be changed to ARCHIVED (the dns service will have validation for this)       Status: USED           - the DNS zone is part of at least one finished deployment, that is not deleted, and             there are no ongoing deployments that use this DNS zone           - can't be deleted (the dns service will have validation for this)           - can be updated, deploy or ARCHIVED       Status: ARCHIVED           - the DNS zone is kept in the system for historical reasons           - can't be deleted (the dns service will have validation for this)           - can't be updated or deployed           - the status can be changed to READY or USED, if it needs to be used again or deleted
	Status *string `json:"status,omitempty"`
	// The tags associated with the DNS zone
	Tags []string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateDnsZoneDto UpdateDnsZoneDto

// NewUpdateDnsZoneDto instantiates a new UpdateDnsZoneDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDnsZoneDto() *UpdateDnsZoneDto {
	this := UpdateDnsZoneDto{}
	var zoneType string = "master"
	this.ZoneType = &zoneType
	var soaEmail string = "admin.<zone_name>"
	this.SoaEmail = &soaEmail
	var status string = "ready"
	this.Status = &status
	return &this
}

// NewUpdateDnsZoneDtoWithDefaults instantiates a new UpdateDnsZoneDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDnsZoneDtoWithDefaults() *UpdateDnsZoneDto {
	this := UpdateDnsZoneDto{}
	var zoneType string = "master"
	this.ZoneType = &zoneType
	var soaEmail string = "admin.<zone_name>"
	this.SoaEmail = &soaEmail
	var status string = "ready"
	this.Status = &status
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateDnsZoneDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDnsZoneDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateDnsZoneDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateDnsZoneDto) SetDescription(v string) {
	o.Description = &v
}

// GetZoneType returns the ZoneType field value if set, zero value otherwise.
func (o *UpdateDnsZoneDto) GetZoneType() string {
	if o == nil || IsNil(o.ZoneType) {
		var ret string
		return ret
	}
	return *o.ZoneType
}

// GetZoneTypeOk returns a tuple with the ZoneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDnsZoneDto) GetZoneTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneType) {
		return nil, false
	}
	return o.ZoneType, true
}

// HasZoneType returns a boolean if a field has been set.
func (o *UpdateDnsZoneDto) HasZoneType() bool {
	if o != nil && !IsNil(o.ZoneType) {
		return true
	}

	return false
}

// SetZoneType gets a reference to the given string and assigns it to the ZoneType field.
func (o *UpdateDnsZoneDto) SetZoneType(v string) {
	o.ZoneType = &v
}

// GetSoaEmail returns the SoaEmail field value if set, zero value otherwise.
func (o *UpdateDnsZoneDto) GetSoaEmail() string {
	if o == nil || IsNil(o.SoaEmail) {
		var ret string
		return ret
	}
	return *o.SoaEmail
}

// GetSoaEmailOk returns a tuple with the SoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDnsZoneDto) GetSoaEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SoaEmail) {
		return nil, false
	}
	return o.SoaEmail, true
}

// HasSoaEmail returns a boolean if a field has been set.
func (o *UpdateDnsZoneDto) HasSoaEmail() bool {
	if o != nil && !IsNil(o.SoaEmail) {
		return true
	}

	return false
}

// SetSoaEmail gets a reference to the given string and assigns it to the SoaEmail field.
func (o *UpdateDnsZoneDto) SetSoaEmail(v string) {
	o.SoaEmail = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *UpdateDnsZoneDto) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDnsZoneDto) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *UpdateDnsZoneDto) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *UpdateDnsZoneDto) SetTtl(v int32) {
	o.Ttl = &v
}

// GetNameServers returns the NameServers field value if set, zero value otherwise.
func (o *UpdateDnsZoneDto) GetNameServers() []string {
	if o == nil || IsNil(o.NameServers) {
		var ret []string
		return ret
	}
	return o.NameServers
}

// GetNameServersOk returns a tuple with the NameServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDnsZoneDto) GetNameServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NameServers) {
		return nil, false
	}
	return o.NameServers, true
}

// HasNameServers returns a boolean if a field has been set.
func (o *UpdateDnsZoneDto) HasNameServers() bool {
	if o != nil && !IsNil(o.NameServers) {
		return true
	}

	return false
}

// SetNameServers gets a reference to the given []string and assigns it to the NameServers field.
func (o *UpdateDnsZoneDto) SetNameServers(v []string) {
	o.NameServers = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UpdateDnsZoneDto) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDnsZoneDto) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateDnsZoneDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UpdateDnsZoneDto) SetStatus(v string) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdateDnsZoneDto) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDnsZoneDto) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdateDnsZoneDto) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *UpdateDnsZoneDto) SetTags(v []string) {
	o.Tags = v
}

func (o UpdateDnsZoneDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDnsZoneDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ZoneType) {
		toSerialize["zoneType"] = o.ZoneType
	}
	if !IsNil(o.SoaEmail) {
		toSerialize["soaEmail"] = o.SoaEmail
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.NameServers) {
		toSerialize["nameServers"] = o.NameServers
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateDnsZoneDto) UnmarshalJSON(data []byte) (err error) {
	varUpdateDnsZoneDto := _UpdateDnsZoneDto{}

	err = json.Unmarshal(data, &varUpdateDnsZoneDto)

	if err != nil {
		return err
	}

	*o = UpdateDnsZoneDto(varUpdateDnsZoneDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "zoneType")
		delete(additionalProperties, "soaEmail")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "nameServers")
		delete(additionalProperties, "status")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateDnsZoneDto struct {
	value *UpdateDnsZoneDto
	isSet bool
}

func (v NullableUpdateDnsZoneDto) Get() *UpdateDnsZoneDto {
	return v.value
}

func (v *NullableUpdateDnsZoneDto) Set(val *UpdateDnsZoneDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDnsZoneDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDnsZoneDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDnsZoneDto(val *UpdateDnsZoneDto) *NullableUpdateDnsZoneDto {
	return &NullableUpdateDnsZoneDto{value: val, isSet: true}
}

func (v NullableUpdateDnsZoneDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDnsZoneDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


