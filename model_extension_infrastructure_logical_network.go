/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtensionInfrastructureLogicalNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionInfrastructureLogicalNetwork{}

// ExtensionInfrastructureLogicalNetwork struct for ExtensionInfrastructureLogicalNetwork
type ExtensionInfrastructureLogicalNetwork struct {
	// Label of the logical network.
	Label string `json:"label"`
	// Logical network profile label.
	ProfileLabel string `json:"profileLabel"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionInfrastructureLogicalNetwork ExtensionInfrastructureLogicalNetwork

// NewExtensionInfrastructureLogicalNetwork instantiates a new ExtensionInfrastructureLogicalNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionInfrastructureLogicalNetwork(label string, profileLabel string) *ExtensionInfrastructureLogicalNetwork {
	this := ExtensionInfrastructureLogicalNetwork{}
	this.Label = label
	this.ProfileLabel = profileLabel
	return &this
}

// NewExtensionInfrastructureLogicalNetworkWithDefaults instantiates a new ExtensionInfrastructureLogicalNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionInfrastructureLogicalNetworkWithDefaults() *ExtensionInfrastructureLogicalNetwork {
	this := ExtensionInfrastructureLogicalNetwork{}
	return &this
}

// GetLabel returns the Label field value
func (o *ExtensionInfrastructureLogicalNetwork) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ExtensionInfrastructureLogicalNetwork) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ExtensionInfrastructureLogicalNetwork) SetLabel(v string) {
	o.Label = v
}

// GetProfileLabel returns the ProfileLabel field value
func (o *ExtensionInfrastructureLogicalNetwork) GetProfileLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileLabel
}

// GetProfileLabelOk returns a tuple with the ProfileLabel field value
// and a boolean to check if the value has been set.
func (o *ExtensionInfrastructureLogicalNetwork) GetProfileLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileLabel, true
}

// SetProfileLabel sets field value
func (o *ExtensionInfrastructureLogicalNetwork) SetProfileLabel(v string) {
	o.ProfileLabel = v
}

func (o ExtensionInfrastructureLogicalNetwork) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionInfrastructureLogicalNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["profileLabel"] = o.ProfileLabel

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionInfrastructureLogicalNetwork) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"profileLabel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionInfrastructureLogicalNetwork := _ExtensionInfrastructureLogicalNetwork{}

	err = json.Unmarshal(data, &varExtensionInfrastructureLogicalNetwork)

	if err != nil {
		return err
	}

	*o = ExtensionInfrastructureLogicalNetwork(varExtensionInfrastructureLogicalNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "profileLabel")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionInfrastructureLogicalNetwork struct {
	value *ExtensionInfrastructureLogicalNetwork
	isSet bool
}

func (v NullableExtensionInfrastructureLogicalNetwork) Get() *ExtensionInfrastructureLogicalNetwork {
	return v.value
}

func (v *NullableExtensionInfrastructureLogicalNetwork) Set(val *ExtensionInfrastructureLogicalNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionInfrastructureLogicalNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionInfrastructureLogicalNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionInfrastructureLogicalNetwork(val *ExtensionInfrastructureLogicalNetwork) *NullableExtensionInfrastructureLogicalNetwork {
	return &NullableExtensionInfrastructureLogicalNetwork{value: val, isSet: true}
}

func (v NullableExtensionInfrastructureLogicalNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionInfrastructureLogicalNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


