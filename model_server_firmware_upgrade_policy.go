/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerFirmwareUpgradePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerFirmwareUpgradePolicy{}

// ServerFirmwareUpgradePolicy struct for ServerFirmwareUpgradePolicy
type ServerFirmwareUpgradePolicy struct {
	// The unique identifier of the firmware upgrade policy.
	Id float32 `json:"id"`
	// The label of the firmware upgrade policy.
	Label string `json:"label"`
	// The unique identifier of the user who owns the firmware upgrade policy.
	UserIdOwner *float32 `json:"userIdOwner,omitempty"`
	// Timestamp of the Server Firmware Upgrade Policy creation.
	CreatedTimestamp string `json:"createdTimestamp"`
	// Timestamp of the Server Firmware Upgrade Policy last update.
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// The status of the firmware upgrade policy.
	Status string `json:"status"`
	// The action of the firmware upgrade policy.
	Action string `json:"action"`
	// The rules of the firmware upgrade policy.
	Rules []ServerFirmwareUpgradePolicyRule `json:"rules,omitempty"`
	// The unique identifiers of the instance arrays associated with the firmware upgrade policy.
	InstanceArrayIds []float32 `json:"instanceArrayIds,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerFirmwareUpgradePolicy ServerFirmwareUpgradePolicy

// NewServerFirmwareUpgradePolicy instantiates a new ServerFirmwareUpgradePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerFirmwareUpgradePolicy(id float32, label string, createdTimestamp string, updatedTimestamp string, status string, action string) *ServerFirmwareUpgradePolicy {
	this := ServerFirmwareUpgradePolicy{}
	this.Id = id
	this.Label = label
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.Status = status
	this.Action = action
	return &this
}

// NewServerFirmwareUpgradePolicyWithDefaults instantiates a new ServerFirmwareUpgradePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerFirmwareUpgradePolicyWithDefaults() *ServerFirmwareUpgradePolicy {
	this := ServerFirmwareUpgradePolicy{}
	return &this
}

// GetId returns the Id field value
func (o *ServerFirmwareUpgradePolicy) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerFirmwareUpgradePolicy) SetId(v float32) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *ServerFirmwareUpgradePolicy) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ServerFirmwareUpgradePolicy) SetLabel(v string) {
	o.Label = v
}

// GetUserIdOwner returns the UserIdOwner field value if set, zero value otherwise.
func (o *ServerFirmwareUpgradePolicy) GetUserIdOwner() float32 {
	if o == nil || IsNil(o.UserIdOwner) {
		var ret float32
		return ret
	}
	return *o.UserIdOwner
}

// GetUserIdOwnerOk returns a tuple with the UserIdOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetUserIdOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.UserIdOwner) {
		return nil, false
	}
	return o.UserIdOwner, true
}

// HasUserIdOwner returns a boolean if a field has been set.
func (o *ServerFirmwareUpgradePolicy) HasUserIdOwner() bool {
	if o != nil && !IsNil(o.UserIdOwner) {
		return true
	}

	return false
}

// SetUserIdOwner gets a reference to the given float32 and assigns it to the UserIdOwner field.
func (o *ServerFirmwareUpgradePolicy) SetUserIdOwner(v float32) {
	o.UserIdOwner = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *ServerFirmwareUpgradePolicy) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *ServerFirmwareUpgradePolicy) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *ServerFirmwareUpgradePolicy) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *ServerFirmwareUpgradePolicy) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetStatus returns the Status field value
func (o *ServerFirmwareUpgradePolicy) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ServerFirmwareUpgradePolicy) SetStatus(v string) {
	o.Status = v
}

// GetAction returns the Action field value
func (o *ServerFirmwareUpgradePolicy) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ServerFirmwareUpgradePolicy) SetAction(v string) {
	o.Action = v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *ServerFirmwareUpgradePolicy) GetRules() []ServerFirmwareUpgradePolicyRule {
	if o == nil || IsNil(o.Rules) {
		var ret []ServerFirmwareUpgradePolicyRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetRulesOk() ([]ServerFirmwareUpgradePolicyRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *ServerFirmwareUpgradePolicy) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []ServerFirmwareUpgradePolicyRule and assigns it to the Rules field.
func (o *ServerFirmwareUpgradePolicy) SetRules(v []ServerFirmwareUpgradePolicyRule) {
	o.Rules = v
}

// GetInstanceArrayIds returns the InstanceArrayIds field value if set, zero value otherwise.
func (o *ServerFirmwareUpgradePolicy) GetInstanceArrayIds() []float32 {
	if o == nil || IsNil(o.InstanceArrayIds) {
		var ret []float32
		return ret
	}
	return o.InstanceArrayIds
}

// GetInstanceArrayIdsOk returns a tuple with the InstanceArrayIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetInstanceArrayIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.InstanceArrayIds) {
		return nil, false
	}
	return o.InstanceArrayIds, true
}

// HasInstanceArrayIds returns a boolean if a field has been set.
func (o *ServerFirmwareUpgradePolicy) HasInstanceArrayIds() bool {
	if o != nil && !IsNil(o.InstanceArrayIds) {
		return true
	}

	return false
}

// SetInstanceArrayIds gets a reference to the given []float32 and assigns it to the InstanceArrayIds field.
func (o *ServerFirmwareUpgradePolicy) SetInstanceArrayIds(v []float32) {
	o.InstanceArrayIds = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ServerFirmwareUpgradePolicy) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerFirmwareUpgradePolicy) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ServerFirmwareUpgradePolicy) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ServerFirmwareUpgradePolicy) SetLinks(v []Link) {
	o.Links = v
}

func (o ServerFirmwareUpgradePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerFirmwareUpgradePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	if !IsNil(o.UserIdOwner) {
		toSerialize["userIdOwner"] = o.UserIdOwner
	}
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	toSerialize["status"] = o.Status
	toSerialize["action"] = o.Action
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.InstanceArrayIds) {
		toSerialize["instanceArrayIds"] = o.InstanceArrayIds
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerFirmwareUpgradePolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"createdTimestamp",
		"updatedTimestamp",
		"status",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerFirmwareUpgradePolicy := _ServerFirmwareUpgradePolicy{}

	err = json.Unmarshal(data, &varServerFirmwareUpgradePolicy)

	if err != nil {
		return err
	}

	*o = ServerFirmwareUpgradePolicy(varServerFirmwareUpgradePolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "label")
		delete(additionalProperties, "userIdOwner")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "status")
		delete(additionalProperties, "action")
		delete(additionalProperties, "rules")
		delete(additionalProperties, "instanceArrayIds")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerFirmwareUpgradePolicy struct {
	value *ServerFirmwareUpgradePolicy
	isSet bool
}

func (v NullableServerFirmwareUpgradePolicy) Get() *ServerFirmwareUpgradePolicy {
	return v.value
}

func (v *NullableServerFirmwareUpgradePolicy) Set(val *ServerFirmwareUpgradePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableServerFirmwareUpgradePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableServerFirmwareUpgradePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerFirmwareUpgradePolicy(val *ServerFirmwareUpgradePolicy) *NullableServerFirmwareUpgradePolicy {
	return &NullableServerFirmwareUpgradePolicy{value: val, isSet: true}
}

func (v NullableServerFirmwareUpgradePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerFirmwareUpgradePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


