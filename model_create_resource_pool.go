/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateResourcePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateResourcePool{}

// CreateResourcePool struct for CreateResourcePool
type CreateResourcePool struct {
	// Label of the Resource Pool
	ResourcePoolLabel string `json:"resourcePoolLabel"`
	// Description of the Resource Pool
	ResourcePoolDescription string `json:"resourcePoolDescription"`
	AdditionalProperties map[string]interface{}
}

type _CreateResourcePool CreateResourcePool

// NewCreateResourcePool instantiates a new CreateResourcePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateResourcePool(resourcePoolLabel string, resourcePoolDescription string) *CreateResourcePool {
	this := CreateResourcePool{}
	this.ResourcePoolLabel = resourcePoolLabel
	this.ResourcePoolDescription = resourcePoolDescription
	return &this
}

// NewCreateResourcePoolWithDefaults instantiates a new CreateResourcePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateResourcePoolWithDefaults() *CreateResourcePool {
	this := CreateResourcePool{}
	return &this
}

// GetResourcePoolLabel returns the ResourcePoolLabel field value
func (o *CreateResourcePool) GetResourcePoolLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourcePoolLabel
}

// GetResourcePoolLabelOk returns a tuple with the ResourcePoolLabel field value
// and a boolean to check if the value has been set.
func (o *CreateResourcePool) GetResourcePoolLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourcePoolLabel, true
}

// SetResourcePoolLabel sets field value
func (o *CreateResourcePool) SetResourcePoolLabel(v string) {
	o.ResourcePoolLabel = v
}

// GetResourcePoolDescription returns the ResourcePoolDescription field value
func (o *CreateResourcePool) GetResourcePoolDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourcePoolDescription
}

// GetResourcePoolDescriptionOk returns a tuple with the ResourcePoolDescription field value
// and a boolean to check if the value has been set.
func (o *CreateResourcePool) GetResourcePoolDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourcePoolDescription, true
}

// SetResourcePoolDescription sets field value
func (o *CreateResourcePool) SetResourcePoolDescription(v string) {
	o.ResourcePoolDescription = v
}

func (o CreateResourcePool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateResourcePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourcePoolLabel"] = o.ResourcePoolLabel
	toSerialize["resourcePoolDescription"] = o.ResourcePoolDescription

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateResourcePool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourcePoolLabel",
		"resourcePoolDescription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateResourcePool := _CreateResourcePool{}

	err = json.Unmarshal(data, &varCreateResourcePool)

	if err != nil {
		return err
	}

	*o = CreateResourcePool(varCreateResourcePool)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "resourcePoolLabel")
		delete(additionalProperties, "resourcePoolDescription")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateResourcePool struct {
	value *CreateResourcePool
	isSet bool
}

func (v NullableCreateResourcePool) Get() *CreateResourcePool {
	return v.value
}

func (v *NullableCreateResourcePool) Set(val *CreateResourcePool) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateResourcePool) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateResourcePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateResourcePool(val *CreateResourcePool) *NullableCreateResourcePool {
	return &NullableCreateResourcePool{value: val, isSet: true}
}

func (v NullableCreateResourcePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateResourcePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


