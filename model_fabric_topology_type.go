/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// FabricTopologyType the model 'FabricTopologyType'
type FabricTopologyType string

// List of FabricTopologyType
const (
	FABRICTOPOLOGYTYPE_DIRECTOR FabricTopologyType = "director"
	FABRICTOPOLOGYTYPE_CORE_EDGE FabricTopologyType = "core-edge"
	FABRICTOPOLOGYTYPE_MESH FabricTopologyType = "mesh"
)

// All allowed values of FabricTopologyType enum
var AllowedFabricTopologyTypeEnumValues = []FabricTopologyType{
	"director",
	"core-edge",
	"mesh",
}

func (v *FabricTopologyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FabricTopologyType(value)
	for _, existing := range AllowedFabricTopologyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FabricTopologyType", value)
}

// NewFabricTopologyTypeFromValue returns a pointer to a valid FabricTopologyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFabricTopologyTypeFromValue(v string) (*FabricTopologyType, error) {
	ev := FabricTopologyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FabricTopologyType: valid values are %v", v, AllowedFabricTopologyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FabricTopologyType) IsValid() bool {
	for _, existing := range AllowedFabricTopologyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FabricTopologyType value
func (v FabricTopologyType) Ptr() *FabricTopologyType {
	return &v
}

type NullableFabricTopologyType struct {
	value *FabricTopologyType
	isSet bool
}

func (v NullableFabricTopologyType) Get() *FabricTopologyType {
	return v.value
}

func (v *NullableFabricTopologyType) Set(val *FabricTopologyType) {
	v.value = val
	v.isSet = true
}

func (v NullableFabricTopologyType) IsSet() bool {
	return v.isSet
}

func (v *NullableFabricTopologyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFabricTopologyType(val *FabricTopologyType) *NullableFabricTopologyType {
	return &NullableFabricTopologyType{value: val, isSet: true}
}

func (v NullableFabricTopologyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFabricTopologyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

