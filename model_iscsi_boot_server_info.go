/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the IscsiBootServerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IscsiBootServerInfo{}

// IscsiBootServerInfo struct for IscsiBootServerInfo
type IscsiBootServerInfo struct {
	// Id of the Server
	ServerId float32 `json:"serverId"`
	// Id of the Instance
	InstanceId float32 `json:"instanceId"`
	// Instance subdomain
	InstanceSubdomain string `json:"instanceSubdomain"`
	// Instance permanent subdomain
	InstanceSubdomainPermanent string `json:"instanceSubdomainPermanent"`
	// Infrastructure label
	InfrastructureLabel string `json:"infrastructureLabel"`
	// Id of the Infrastructure
	InfrastructureId float32 `json:"infrastructureId"`
	// Id of the User
	UserId float32 `json:"userId"`
	// User email
	UserEmail string `json:"userEmail"`
	// User display name
	UserDisplayName string `json:"userDisplayName"`
	// Server disk count
	ServerDiskCount float32 `json:"serverDiskCount"`
	// Server power status
	ServerPowerStatus string `json:"serverPowerStatus"`
	AdditionalProperties map[string]interface{}
}

type _IscsiBootServerInfo IscsiBootServerInfo

// NewIscsiBootServerInfo instantiates a new IscsiBootServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIscsiBootServerInfo(serverId float32, instanceId float32, instanceSubdomain string, instanceSubdomainPermanent string, infrastructureLabel string, infrastructureId float32, userId float32, userEmail string, userDisplayName string, serverDiskCount float32, serverPowerStatus string) *IscsiBootServerInfo {
	this := IscsiBootServerInfo{}
	this.ServerId = serverId
	this.InstanceId = instanceId
	this.InstanceSubdomain = instanceSubdomain
	this.InstanceSubdomainPermanent = instanceSubdomainPermanent
	this.InfrastructureLabel = infrastructureLabel
	this.InfrastructureId = infrastructureId
	this.UserId = userId
	this.UserEmail = userEmail
	this.UserDisplayName = userDisplayName
	this.ServerDiskCount = serverDiskCount
	this.ServerPowerStatus = serverPowerStatus
	return &this
}

// NewIscsiBootServerInfoWithDefaults instantiates a new IscsiBootServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIscsiBootServerInfoWithDefaults() *IscsiBootServerInfo {
	this := IscsiBootServerInfo{}
	return &this
}

// GetServerId returns the ServerId field value
func (o *IscsiBootServerInfo) GetServerId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetServerIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerId, true
}

// SetServerId sets field value
func (o *IscsiBootServerInfo) SetServerId(v float32) {
	o.ServerId = v
}

// GetInstanceId returns the InstanceId field value
func (o *IscsiBootServerInfo) GetInstanceId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetInstanceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *IscsiBootServerInfo) SetInstanceId(v float32) {
	o.InstanceId = v
}

// GetInstanceSubdomain returns the InstanceSubdomain field value
func (o *IscsiBootServerInfo) GetInstanceSubdomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceSubdomain
}

// GetInstanceSubdomainOk returns a tuple with the InstanceSubdomain field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetInstanceSubdomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceSubdomain, true
}

// SetInstanceSubdomain sets field value
func (o *IscsiBootServerInfo) SetInstanceSubdomain(v string) {
	o.InstanceSubdomain = v
}

// GetInstanceSubdomainPermanent returns the InstanceSubdomainPermanent field value
func (o *IscsiBootServerInfo) GetInstanceSubdomainPermanent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceSubdomainPermanent
}

// GetInstanceSubdomainPermanentOk returns a tuple with the InstanceSubdomainPermanent field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetInstanceSubdomainPermanentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceSubdomainPermanent, true
}

// SetInstanceSubdomainPermanent sets field value
func (o *IscsiBootServerInfo) SetInstanceSubdomainPermanent(v string) {
	o.InstanceSubdomainPermanent = v
}

// GetInfrastructureLabel returns the InfrastructureLabel field value
func (o *IscsiBootServerInfo) GetInfrastructureLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InfrastructureLabel
}

// GetInfrastructureLabelOk returns a tuple with the InfrastructureLabel field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetInfrastructureLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureLabel, true
}

// SetInfrastructureLabel sets field value
func (o *IscsiBootServerInfo) SetInfrastructureLabel(v string) {
	o.InfrastructureLabel = v
}

// GetInfrastructureId returns the InfrastructureId field value
func (o *IscsiBootServerInfo) GetInfrastructureId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetInfrastructureIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfrastructureId, true
}

// SetInfrastructureId sets field value
func (o *IscsiBootServerInfo) SetInfrastructureId(v float32) {
	o.InfrastructureId = v
}

// GetUserId returns the UserId field value
func (o *IscsiBootServerInfo) GetUserId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetUserIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *IscsiBootServerInfo) SetUserId(v float32) {
	o.UserId = v
}

// GetUserEmail returns the UserEmail field value
func (o *IscsiBootServerInfo) GetUserEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserEmail, true
}

// SetUserEmail sets field value
func (o *IscsiBootServerInfo) SetUserEmail(v string) {
	o.UserEmail = v
}

// GetUserDisplayName returns the UserDisplayName field value
func (o *IscsiBootServerInfo) GetUserDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserDisplayName
}

// GetUserDisplayNameOk returns a tuple with the UserDisplayName field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetUserDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserDisplayName, true
}

// SetUserDisplayName sets field value
func (o *IscsiBootServerInfo) SetUserDisplayName(v string) {
	o.UserDisplayName = v
}

// GetServerDiskCount returns the ServerDiskCount field value
func (o *IscsiBootServerInfo) GetServerDiskCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ServerDiskCount
}

// GetServerDiskCountOk returns a tuple with the ServerDiskCount field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetServerDiskCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerDiskCount, true
}

// SetServerDiskCount sets field value
func (o *IscsiBootServerInfo) SetServerDiskCount(v float32) {
	o.ServerDiskCount = v
}

// GetServerPowerStatus returns the ServerPowerStatus field value
func (o *IscsiBootServerInfo) GetServerPowerStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerPowerStatus
}

// GetServerPowerStatusOk returns a tuple with the ServerPowerStatus field value
// and a boolean to check if the value has been set.
func (o *IscsiBootServerInfo) GetServerPowerStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerPowerStatus, true
}

// SetServerPowerStatus sets field value
func (o *IscsiBootServerInfo) SetServerPowerStatus(v string) {
	o.ServerPowerStatus = v
}

func (o IscsiBootServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IscsiBootServerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverId"] = o.ServerId
	toSerialize["instanceId"] = o.InstanceId
	toSerialize["instanceSubdomain"] = o.InstanceSubdomain
	toSerialize["instanceSubdomainPermanent"] = o.InstanceSubdomainPermanent
	toSerialize["infrastructureLabel"] = o.InfrastructureLabel
	toSerialize["infrastructureId"] = o.InfrastructureId
	toSerialize["userId"] = o.UserId
	toSerialize["userEmail"] = o.UserEmail
	toSerialize["userDisplayName"] = o.UserDisplayName
	toSerialize["serverDiskCount"] = o.ServerDiskCount
	toSerialize["serverPowerStatus"] = o.ServerPowerStatus

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IscsiBootServerInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverId",
		"instanceId",
		"instanceSubdomain",
		"instanceSubdomainPermanent",
		"infrastructureLabel",
		"infrastructureId",
		"userId",
		"userEmail",
		"userDisplayName",
		"serverDiskCount",
		"serverPowerStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIscsiBootServerInfo := _IscsiBootServerInfo{}

	err = json.Unmarshal(data, &varIscsiBootServerInfo)

	if err != nil {
		return err
	}

	*o = IscsiBootServerInfo(varIscsiBootServerInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "instanceSubdomain")
		delete(additionalProperties, "instanceSubdomainPermanent")
		delete(additionalProperties, "infrastructureLabel")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "userId")
		delete(additionalProperties, "userEmail")
		delete(additionalProperties, "userDisplayName")
		delete(additionalProperties, "serverDiskCount")
		delete(additionalProperties, "serverPowerStatus")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIscsiBootServerInfo struct {
	value *IscsiBootServerInfo
	isSet bool
}

func (v NullableIscsiBootServerInfo) Get() *IscsiBootServerInfo {
	return v.value
}

func (v *NullableIscsiBootServerInfo) Set(val *IscsiBootServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIscsiBootServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIscsiBootServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIscsiBootServerInfo(val *IscsiBootServerInfo) *NullableIscsiBootServerInfo {
	return &NullableIscsiBootServerInfo{value: val, isSet: true}
}

func (v NullableIscsiBootServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIscsiBootServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


