/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerInstanceContextOSInstallationData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInstanceContextOSInstallationData{}

// ServerInstanceContextOSInstallationData struct for ServerInstanceContextOSInstallationData
type ServerInstanceContextOSInstallationData struct {
	// The site OS installation data.
	Site SiteOSInstallationData `json:"site"`
	// The site config OS installation data.
	SiteConfig SiteConfigOSInstallationData `json:"siteConfig"`
	// The server OS installation data.
	Server ServerOSInstallationData `json:"server"`
	// The server instance OS installation data.
	ServerInstance ServerInstanceOSInstallationData `json:"serverInstance"`
	// The server instance group OS installation data.
	ServerInstanceGroup ServerInstanceGroupOSInstallationData `json:"serverInstanceGroup"`
	// The infrastructure OS installation data.
	Infrastructure InfrastructureOSInstallationData `json:"infrastructure"`
	// The server instance drive groups OS installation data.
	DriveGroups []DriveGroupVariables `json:"driveGroups"`
	// The server instance drives OS installation data.
	Drives []DriveVariables `json:"drives"`
	// The server instance file shares OS installation data.
	FileShares []FileShareVariables `json:"fileShares"`
	// The server instance buckets OS installation data.
	Buckets []BucketVariables `json:"buckets"`
	// The server instance shared drives OS installation data.
	SharedDrives []SharedDriveVariables `json:"sharedDrives"`
	// Additional variables
	Variables map[string]interface{} `json:"variables,omitempty"`
	// Secrets
	Secrets map[string]interface{} `json:"secrets,omitempty"`
	// Infrastructure owner SSH keys
	UserSSHKeys []string `json:"userSSHKeys,omitempty"`
	// Management SSH key
	ManagementSSHKey *string `json:"managementSSHKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerInstanceContextOSInstallationData ServerInstanceContextOSInstallationData

// NewServerInstanceContextOSInstallationData instantiates a new ServerInstanceContextOSInstallationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInstanceContextOSInstallationData(site SiteOSInstallationData, siteConfig SiteConfigOSInstallationData, server ServerOSInstallationData, serverInstance ServerInstanceOSInstallationData, serverInstanceGroup ServerInstanceGroupOSInstallationData, infrastructure InfrastructureOSInstallationData, driveGroups []DriveGroupVariables, drives []DriveVariables, fileShares []FileShareVariables, buckets []BucketVariables, sharedDrives []SharedDriveVariables) *ServerInstanceContextOSInstallationData {
	this := ServerInstanceContextOSInstallationData{}
	this.Site = site
	this.SiteConfig = siteConfig
	this.Server = server
	this.ServerInstance = serverInstance
	this.ServerInstanceGroup = serverInstanceGroup
	this.Infrastructure = infrastructure
	this.DriveGroups = driveGroups
	this.Drives = drives
	this.FileShares = fileShares
	this.Buckets = buckets
	this.SharedDrives = sharedDrives
	return &this
}

// NewServerInstanceContextOSInstallationDataWithDefaults instantiates a new ServerInstanceContextOSInstallationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInstanceContextOSInstallationDataWithDefaults() *ServerInstanceContextOSInstallationData {
	this := ServerInstanceContextOSInstallationData{}
	return &this
}

// GetSite returns the Site field value
func (o *ServerInstanceContextOSInstallationData) GetSite() SiteOSInstallationData {
	if o == nil {
		var ret SiteOSInstallationData
		return ret
	}

	return o.Site
}

// GetSiteOk returns a tuple with the Site field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetSiteOk() (*SiteOSInstallationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Site, true
}

// SetSite sets field value
func (o *ServerInstanceContextOSInstallationData) SetSite(v SiteOSInstallationData) {
	o.Site = v
}

// GetSiteConfig returns the SiteConfig field value
func (o *ServerInstanceContextOSInstallationData) GetSiteConfig() SiteConfigOSInstallationData {
	if o == nil {
		var ret SiteConfigOSInstallationData
		return ret
	}

	return o.SiteConfig
}

// GetSiteConfigOk returns a tuple with the SiteConfig field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetSiteConfigOk() (*SiteConfigOSInstallationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteConfig, true
}

// SetSiteConfig sets field value
func (o *ServerInstanceContextOSInstallationData) SetSiteConfig(v SiteConfigOSInstallationData) {
	o.SiteConfig = v
}

// GetServer returns the Server field value
func (o *ServerInstanceContextOSInstallationData) GetServer() ServerOSInstallationData {
	if o == nil {
		var ret ServerOSInstallationData
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetServerOk() (*ServerOSInstallationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *ServerInstanceContextOSInstallationData) SetServer(v ServerOSInstallationData) {
	o.Server = v
}

// GetServerInstance returns the ServerInstance field value
func (o *ServerInstanceContextOSInstallationData) GetServerInstance() ServerInstanceOSInstallationData {
	if o == nil {
		var ret ServerInstanceOSInstallationData
		return ret
	}

	return o.ServerInstance
}

// GetServerInstanceOk returns a tuple with the ServerInstance field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetServerInstanceOk() (*ServerInstanceOSInstallationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerInstance, true
}

// SetServerInstance sets field value
func (o *ServerInstanceContextOSInstallationData) SetServerInstance(v ServerInstanceOSInstallationData) {
	o.ServerInstance = v
}

// GetServerInstanceGroup returns the ServerInstanceGroup field value
func (o *ServerInstanceContextOSInstallationData) GetServerInstanceGroup() ServerInstanceGroupOSInstallationData {
	if o == nil {
		var ret ServerInstanceGroupOSInstallationData
		return ret
	}

	return o.ServerInstanceGroup
}

// GetServerInstanceGroupOk returns a tuple with the ServerInstanceGroup field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetServerInstanceGroupOk() (*ServerInstanceGroupOSInstallationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerInstanceGroup, true
}

// SetServerInstanceGroup sets field value
func (o *ServerInstanceContextOSInstallationData) SetServerInstanceGroup(v ServerInstanceGroupOSInstallationData) {
	o.ServerInstanceGroup = v
}

// GetInfrastructure returns the Infrastructure field value
func (o *ServerInstanceContextOSInstallationData) GetInfrastructure() InfrastructureOSInstallationData {
	if o == nil {
		var ret InfrastructureOSInstallationData
		return ret
	}

	return o.Infrastructure
}

// GetInfrastructureOk returns a tuple with the Infrastructure field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetInfrastructureOk() (*InfrastructureOSInstallationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Infrastructure, true
}

// SetInfrastructure sets field value
func (o *ServerInstanceContextOSInstallationData) SetInfrastructure(v InfrastructureOSInstallationData) {
	o.Infrastructure = v
}

// GetDriveGroups returns the DriveGroups field value
func (o *ServerInstanceContextOSInstallationData) GetDriveGroups() []DriveGroupVariables {
	if o == nil {
		var ret []DriveGroupVariables
		return ret
	}

	return o.DriveGroups
}

// GetDriveGroupsOk returns a tuple with the DriveGroups field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetDriveGroupsOk() ([]DriveGroupVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.DriveGroups, true
}

// SetDriveGroups sets field value
func (o *ServerInstanceContextOSInstallationData) SetDriveGroups(v []DriveGroupVariables) {
	o.DriveGroups = v
}

// GetDrives returns the Drives field value
func (o *ServerInstanceContextOSInstallationData) GetDrives() []DriveVariables {
	if o == nil {
		var ret []DriveVariables
		return ret
	}

	return o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetDrivesOk() ([]DriveVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.Drives, true
}

// SetDrives sets field value
func (o *ServerInstanceContextOSInstallationData) SetDrives(v []DriveVariables) {
	o.Drives = v
}

// GetFileShares returns the FileShares field value
func (o *ServerInstanceContextOSInstallationData) GetFileShares() []FileShareVariables {
	if o == nil {
		var ret []FileShareVariables
		return ret
	}

	return o.FileShares
}

// GetFileSharesOk returns a tuple with the FileShares field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetFileSharesOk() ([]FileShareVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileShares, true
}

// SetFileShares sets field value
func (o *ServerInstanceContextOSInstallationData) SetFileShares(v []FileShareVariables) {
	o.FileShares = v
}

// GetBuckets returns the Buckets field value
func (o *ServerInstanceContextOSInstallationData) GetBuckets() []BucketVariables {
	if o == nil {
		var ret []BucketVariables
		return ret
	}

	return o.Buckets
}

// GetBucketsOk returns a tuple with the Buckets field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetBucketsOk() ([]BucketVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.Buckets, true
}

// SetBuckets sets field value
func (o *ServerInstanceContextOSInstallationData) SetBuckets(v []BucketVariables) {
	o.Buckets = v
}

// GetSharedDrives returns the SharedDrives field value
func (o *ServerInstanceContextOSInstallationData) GetSharedDrives() []SharedDriveVariables {
	if o == nil {
		var ret []SharedDriveVariables
		return ret
	}

	return o.SharedDrives
}

// GetSharedDrivesOk returns a tuple with the SharedDrives field value
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetSharedDrivesOk() ([]SharedDriveVariables, bool) {
	if o == nil {
		return nil, false
	}
	return o.SharedDrives, true
}

// SetSharedDrives sets field value
func (o *ServerInstanceContextOSInstallationData) SetSharedDrives(v []SharedDriveVariables) {
	o.SharedDrives = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *ServerInstanceContextOSInstallationData) GetVariables() map[string]interface{} {
	if o == nil || IsNil(o.Variables) {
		var ret map[string]interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetVariablesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Variables) {
		return map[string]interface{}{}, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ServerInstanceContextOSInstallationData) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given map[string]interface{} and assigns it to the Variables field.
func (o *ServerInstanceContextOSInstallationData) SetVariables(v map[string]interface{}) {
	o.Variables = v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *ServerInstanceContextOSInstallationData) GetSecrets() map[string]interface{} {
	if o == nil || IsNil(o.Secrets) {
		var ret map[string]interface{}
		return ret
	}
	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetSecretsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Secrets) {
		return map[string]interface{}{}, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *ServerInstanceContextOSInstallationData) HasSecrets() bool {
	if o != nil && !IsNil(o.Secrets) {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given map[string]interface{} and assigns it to the Secrets field.
func (o *ServerInstanceContextOSInstallationData) SetSecrets(v map[string]interface{}) {
	o.Secrets = v
}

// GetUserSSHKeys returns the UserSSHKeys field value if set, zero value otherwise.
func (o *ServerInstanceContextOSInstallationData) GetUserSSHKeys() []string {
	if o == nil || IsNil(o.UserSSHKeys) {
		var ret []string
		return ret
	}
	return o.UserSSHKeys
}

// GetUserSSHKeysOk returns a tuple with the UserSSHKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetUserSSHKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.UserSSHKeys) {
		return nil, false
	}
	return o.UserSSHKeys, true
}

// HasUserSSHKeys returns a boolean if a field has been set.
func (o *ServerInstanceContextOSInstallationData) HasUserSSHKeys() bool {
	if o != nil && !IsNil(o.UserSSHKeys) {
		return true
	}

	return false
}

// SetUserSSHKeys gets a reference to the given []string and assigns it to the UserSSHKeys field.
func (o *ServerInstanceContextOSInstallationData) SetUserSSHKeys(v []string) {
	o.UserSSHKeys = v
}

// GetManagementSSHKey returns the ManagementSSHKey field value if set, zero value otherwise.
func (o *ServerInstanceContextOSInstallationData) GetManagementSSHKey() string {
	if o == nil || IsNil(o.ManagementSSHKey) {
		var ret string
		return ret
	}
	return *o.ManagementSSHKey
}

// GetManagementSSHKeyOk returns a tuple with the ManagementSSHKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInstanceContextOSInstallationData) GetManagementSSHKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ManagementSSHKey) {
		return nil, false
	}
	return o.ManagementSSHKey, true
}

// HasManagementSSHKey returns a boolean if a field has been set.
func (o *ServerInstanceContextOSInstallationData) HasManagementSSHKey() bool {
	if o != nil && !IsNil(o.ManagementSSHKey) {
		return true
	}

	return false
}

// SetManagementSSHKey gets a reference to the given string and assigns it to the ManagementSSHKey field.
func (o *ServerInstanceContextOSInstallationData) SetManagementSSHKey(v string) {
	o.ManagementSSHKey = &v
}

func (o ServerInstanceContextOSInstallationData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInstanceContextOSInstallationData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["site"] = o.Site
	toSerialize["siteConfig"] = o.SiteConfig
	toSerialize["server"] = o.Server
	toSerialize["serverInstance"] = o.ServerInstance
	toSerialize["serverInstanceGroup"] = o.ServerInstanceGroup
	toSerialize["infrastructure"] = o.Infrastructure
	toSerialize["driveGroups"] = o.DriveGroups
	toSerialize["drives"] = o.Drives
	toSerialize["fileShares"] = o.FileShares
	toSerialize["buckets"] = o.Buckets
	toSerialize["sharedDrives"] = o.SharedDrives
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.Secrets) {
		toSerialize["secrets"] = o.Secrets
	}
	if !IsNil(o.UserSSHKeys) {
		toSerialize["userSSHKeys"] = o.UserSSHKeys
	}
	if !IsNil(o.ManagementSSHKey) {
		toSerialize["managementSSHKey"] = o.ManagementSSHKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerInstanceContextOSInstallationData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"site",
		"siteConfig",
		"server",
		"serverInstance",
		"serverInstanceGroup",
		"infrastructure",
		"driveGroups",
		"drives",
		"fileShares",
		"buckets",
		"sharedDrives",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInstanceContextOSInstallationData := _ServerInstanceContextOSInstallationData{}

	err = json.Unmarshal(data, &varServerInstanceContextOSInstallationData)

	if err != nil {
		return err
	}

	*o = ServerInstanceContextOSInstallationData(varServerInstanceContextOSInstallationData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "site")
		delete(additionalProperties, "siteConfig")
		delete(additionalProperties, "server")
		delete(additionalProperties, "serverInstance")
		delete(additionalProperties, "serverInstanceGroup")
		delete(additionalProperties, "infrastructure")
		delete(additionalProperties, "driveGroups")
		delete(additionalProperties, "drives")
		delete(additionalProperties, "fileShares")
		delete(additionalProperties, "buckets")
		delete(additionalProperties, "sharedDrives")
		delete(additionalProperties, "variables")
		delete(additionalProperties, "secrets")
		delete(additionalProperties, "userSSHKeys")
		delete(additionalProperties, "managementSSHKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerInstanceContextOSInstallationData struct {
	value *ServerInstanceContextOSInstallationData
	isSet bool
}

func (v NullableServerInstanceContextOSInstallationData) Get() *ServerInstanceContextOSInstallationData {
	return v.value
}

func (v *NullableServerInstanceContextOSInstallationData) Set(val *ServerInstanceContextOSInstallationData) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInstanceContextOSInstallationData) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInstanceContextOSInstallationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInstanceContextOSInstallationData(val *ServerInstanceContextOSInstallationData) *NullableServerInstanceContextOSInstallationData {
	return &NullableServerInstanceContextOSInstallationData{value: val, isSet: true}
}

func (v NullableServerInstanceContextOSInstallationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInstanceContextOSInstallationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


