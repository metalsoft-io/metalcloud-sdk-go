/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the LicenseInstallments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseInstallments{}

// LicenseInstallments struct for LicenseInstallments
type LicenseInstallments struct {
	// Windows Server Standard licenses
	WindowsServerStandard []map[string]interface{} `json:"windowsServerStandard"`
	// MapR licenses
	Mapr []map[string]interface{} `json:"mapr"`
	// Cloudera licenses
	Cloudera []map[string]interface{} `json:"cloudera"`
	// Couchbase licenses
	Couchbase []map[string]interface{} `json:"couchbase"`
	AdditionalProperties map[string]interface{}
}

type _LicenseInstallments LicenseInstallments

// NewLicenseInstallments instantiates a new LicenseInstallments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseInstallments(windowsServerStandard []map[string]interface{}, mapr []map[string]interface{}, cloudera []map[string]interface{}, couchbase []map[string]interface{}) *LicenseInstallments {
	this := LicenseInstallments{}
	this.WindowsServerStandard = windowsServerStandard
	this.Mapr = mapr
	this.Cloudera = cloudera
	this.Couchbase = couchbase
	return &this
}

// NewLicenseInstallmentsWithDefaults instantiates a new LicenseInstallments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseInstallmentsWithDefaults() *LicenseInstallments {
	this := LicenseInstallments{}
	return &this
}

// GetWindowsServerStandard returns the WindowsServerStandard field value
func (o *LicenseInstallments) GetWindowsServerStandard() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.WindowsServerStandard
}

// GetWindowsServerStandardOk returns a tuple with the WindowsServerStandard field value
// and a boolean to check if the value has been set.
func (o *LicenseInstallments) GetWindowsServerStandardOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.WindowsServerStandard, true
}

// SetWindowsServerStandard sets field value
func (o *LicenseInstallments) SetWindowsServerStandard(v []map[string]interface{}) {
	o.WindowsServerStandard = v
}

// GetMapr returns the Mapr field value
func (o *LicenseInstallments) GetMapr() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Mapr
}

// GetMaprOk returns a tuple with the Mapr field value
// and a boolean to check if the value has been set.
func (o *LicenseInstallments) GetMaprOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mapr, true
}

// SetMapr sets field value
func (o *LicenseInstallments) SetMapr(v []map[string]interface{}) {
	o.Mapr = v
}

// GetCloudera returns the Cloudera field value
func (o *LicenseInstallments) GetCloudera() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Cloudera
}

// GetClouderaOk returns a tuple with the Cloudera field value
// and a boolean to check if the value has been set.
func (o *LicenseInstallments) GetClouderaOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cloudera, true
}

// SetCloudera sets field value
func (o *LicenseInstallments) SetCloudera(v []map[string]interface{}) {
	o.Cloudera = v
}

// GetCouchbase returns the Couchbase field value
func (o *LicenseInstallments) GetCouchbase() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Couchbase
}

// GetCouchbaseOk returns a tuple with the Couchbase field value
// and a boolean to check if the value has been set.
func (o *LicenseInstallments) GetCouchbaseOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Couchbase, true
}

// SetCouchbase sets field value
func (o *LicenseInstallments) SetCouchbase(v []map[string]interface{}) {
	o.Couchbase = v
}

func (o LicenseInstallments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseInstallments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["windowsServerStandard"] = o.WindowsServerStandard
	toSerialize["mapr"] = o.Mapr
	toSerialize["cloudera"] = o.Cloudera
	toSerialize["couchbase"] = o.Couchbase

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicenseInstallments) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"windowsServerStandard",
		"mapr",
		"cloudera",
		"couchbase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicenseInstallments := _LicenseInstallments{}

	err = json.Unmarshal(data, &varLicenseInstallments)

	if err != nil {
		return err
	}

	*o = LicenseInstallments(varLicenseInstallments)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "windowsServerStandard")
		delete(additionalProperties, "mapr")
		delete(additionalProperties, "cloudera")
		delete(additionalProperties, "couchbase")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicenseInstallments struct {
	value *LicenseInstallments
	isSet bool
}

func (v NullableLicenseInstallments) Get() *LicenseInstallments {
	return v.value
}

func (v *NullableLicenseInstallments) Set(val *LicenseInstallments) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseInstallments) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseInstallments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseInstallments(val *LicenseInstallments) *NullableLicenseInstallments {
	return &NullableLicenseInstallments{value: val, isSet: true}
}

func (v NullableLicenseInstallments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseInstallments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


