/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the JobArchive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobArchive{}

// JobArchive struct for JobArchive
type JobArchive struct {
	// Job Id
	JobId int32 `json:"jobId"`
	// Site Id
	SiteId *int32 `json:"siteId,omitempty"`
	// Instance Id
	InstanceId *int32 `json:"instanceId,omitempty"`
	// Server Id
	ServerId *int32 `json:"serverId,omitempty"`
	// VM Pool Id
	VmPoolId *int32 `json:"vmPoolId,omitempty"`
	// Storage Pool Id
	StorageId *int32 `json:"storageId,omitempty"`
	// Network Equipment Id
	NetworkDeviceId *int32 `json:"networkDeviceId,omitempty"`
	// Infrastructure Id
	InfrastructureId *int32 `json:"infrastructureId,omitempty"`
	// The id of the next job that should be executed after this job
	JobIdBlocked *int32 `json:"jobIdBlocked,omitempty"`
	// The id of the job that is blocking this job from executing
	JobIdBlockedBy *int32 `json:"jobIdBlockedBy,omitempty"`
	// The id of the group that this job belongs to
	JobGroupId *int32 `json:"jobGroupId,omitempty"`
	// The type of the job
	Type string `json:"type"`
	// The status of the job
	Status string `json:"status"`
	// The name of the function that should be executed
	FunctionName string `json:"functionName"`
	// The parameters that should be passed to the function
	Params map[string]interface{} `json:"params,omitempty"`
	// The response of the function
	Response map[string]interface{} `json:"response,omitempty"`
	// The number of times the job has been called
	CallCount int32 `json:"callCount"`
	// The maximum number of times the job should be retried
	RetryMax int32 `json:"retryMax"`
	// The number of times the job has been retried
	RetryCount int32 `json:"retryCount"`
	// The minimum number of seconds that should pass before the job is retried
	RetryMinSeconds int32 `json:"retryMinSeconds"`
	// The exception that was thrown by the function
	Exception map[string]interface{} `json:"exception,omitempty"`
	// Extra information about the job
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// The time in milliseconds that the job took to execute
	DurationMilliseconds *int32 `json:"durationMilliseconds,omitempty"`
	// Whether the job requires confirmation before execution
	RequiresConfirmation bool `json:"requiresConfirmation"`
	// The timestamp when the job was created
	CreatedTimestamp string `json:"createdTimestamp"`
	// The timestamp when the job was last updated
	UpdatedTimestamp string `json:"updatedTimestamp"`
	// The timestamp when the job was started
	StartTimestamp *string `json:"startTimestamp,omitempty"`
	// Mark the job for death
	MarkForDeath *string `json:"markForDeath,omitempty"`
	// Links to other resources
	Links map[string]interface{} `json:"links"`
	AdditionalProperties map[string]interface{}
}

type _JobArchive JobArchive

// NewJobArchive instantiates a new JobArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobArchive(jobId int32, type_ string, status string, functionName string, callCount int32, retryMax int32, retryCount int32, retryMinSeconds int32, requiresConfirmation bool, createdTimestamp string, updatedTimestamp string, links map[string]interface{}) *JobArchive {
	this := JobArchive{}
	this.JobId = jobId
	this.Type = type_
	this.Status = status
	this.FunctionName = functionName
	this.CallCount = callCount
	this.RetryMax = retryMax
	this.RetryCount = retryCount
	this.RetryMinSeconds = retryMinSeconds
	this.RequiresConfirmation = requiresConfirmation
	this.CreatedTimestamp = createdTimestamp
	this.UpdatedTimestamp = updatedTimestamp
	this.Links = links
	return &this
}

// NewJobArchiveWithDefaults instantiates a new JobArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobArchiveWithDefaults() *JobArchive {
	this := JobArchive{}
	var requiresConfirmation bool = false
	this.RequiresConfirmation = requiresConfirmation
	return &this
}

// GetJobId returns the JobId field value
func (o *JobArchive) GetJobId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetJobIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobId, true
}

// SetJobId sets field value
func (o *JobArchive) SetJobId(v int32) {
	o.JobId = v
}

// GetSiteId returns the SiteId field value if set, zero value otherwise.
func (o *JobArchive) GetSiteId() int32 {
	if o == nil || IsNil(o.SiteId) {
		var ret int32
		return ret
	}
	return *o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetSiteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteId) {
		return nil, false
	}
	return o.SiteId, true
}

// HasSiteId returns a boolean if a field has been set.
func (o *JobArchive) HasSiteId() bool {
	if o != nil && !IsNil(o.SiteId) {
		return true
	}

	return false
}

// SetSiteId gets a reference to the given int32 and assigns it to the SiteId field.
func (o *JobArchive) SetSiteId(v int32) {
	o.SiteId = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *JobArchive) GetInstanceId() int32 {
	if o == nil || IsNil(o.InstanceId) {
		var ret int32
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetInstanceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *JobArchive) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given int32 and assigns it to the InstanceId field.
func (o *JobArchive) SetInstanceId(v int32) {
	o.InstanceId = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *JobArchive) GetServerId() int32 {
	if o == nil || IsNil(o.ServerId) {
		var ret int32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetServerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *JobArchive) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int32 and assigns it to the ServerId field.
func (o *JobArchive) SetServerId(v int32) {
	o.ServerId = &v
}

// GetVmPoolId returns the VmPoolId field value if set, zero value otherwise.
func (o *JobArchive) GetVmPoolId() int32 {
	if o == nil || IsNil(o.VmPoolId) {
		var ret int32
		return ret
	}
	return *o.VmPoolId
}

// GetVmPoolIdOk returns a tuple with the VmPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetVmPoolIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VmPoolId) {
		return nil, false
	}
	return o.VmPoolId, true
}

// HasVmPoolId returns a boolean if a field has been set.
func (o *JobArchive) HasVmPoolId() bool {
	if o != nil && !IsNil(o.VmPoolId) {
		return true
	}

	return false
}

// SetVmPoolId gets a reference to the given int32 and assigns it to the VmPoolId field.
func (o *JobArchive) SetVmPoolId(v int32) {
	o.VmPoolId = &v
}

// GetStorageId returns the StorageId field value if set, zero value otherwise.
func (o *JobArchive) GetStorageId() int32 {
	if o == nil || IsNil(o.StorageId) {
		var ret int32
		return ret
	}
	return *o.StorageId
}

// GetStorageIdOk returns a tuple with the StorageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetStorageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StorageId) {
		return nil, false
	}
	return o.StorageId, true
}

// HasStorageId returns a boolean if a field has been set.
func (o *JobArchive) HasStorageId() bool {
	if o != nil && !IsNil(o.StorageId) {
		return true
	}

	return false
}

// SetStorageId gets a reference to the given int32 and assigns it to the StorageId field.
func (o *JobArchive) SetStorageId(v int32) {
	o.StorageId = &v
}

// GetNetworkDeviceId returns the NetworkDeviceId field value if set, zero value otherwise.
func (o *JobArchive) GetNetworkDeviceId() int32 {
	if o == nil || IsNil(o.NetworkDeviceId) {
		var ret int32
		return ret
	}
	return *o.NetworkDeviceId
}

// GetNetworkDeviceIdOk returns a tuple with the NetworkDeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetNetworkDeviceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkDeviceId) {
		return nil, false
	}
	return o.NetworkDeviceId, true
}

// HasNetworkDeviceId returns a boolean if a field has been set.
func (o *JobArchive) HasNetworkDeviceId() bool {
	if o != nil && !IsNil(o.NetworkDeviceId) {
		return true
	}

	return false
}

// SetNetworkDeviceId gets a reference to the given int32 and assigns it to the NetworkDeviceId field.
func (o *JobArchive) SetNetworkDeviceId(v int32) {
	o.NetworkDeviceId = &v
}

// GetInfrastructureId returns the InfrastructureId field value if set, zero value otherwise.
func (o *JobArchive) GetInfrastructureId() int32 {
	if o == nil || IsNil(o.InfrastructureId) {
		var ret int32
		return ret
	}
	return *o.InfrastructureId
}

// GetInfrastructureIdOk returns a tuple with the InfrastructureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetInfrastructureIdOk() (*int32, bool) {
	if o == nil || IsNil(o.InfrastructureId) {
		return nil, false
	}
	return o.InfrastructureId, true
}

// HasInfrastructureId returns a boolean if a field has been set.
func (o *JobArchive) HasInfrastructureId() bool {
	if o != nil && !IsNil(o.InfrastructureId) {
		return true
	}

	return false
}

// SetInfrastructureId gets a reference to the given int32 and assigns it to the InfrastructureId field.
func (o *JobArchive) SetInfrastructureId(v int32) {
	o.InfrastructureId = &v
}

// GetJobIdBlocked returns the JobIdBlocked field value if set, zero value otherwise.
func (o *JobArchive) GetJobIdBlocked() int32 {
	if o == nil || IsNil(o.JobIdBlocked) {
		var ret int32
		return ret
	}
	return *o.JobIdBlocked
}

// GetJobIdBlockedOk returns a tuple with the JobIdBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetJobIdBlockedOk() (*int32, bool) {
	if o == nil || IsNil(o.JobIdBlocked) {
		return nil, false
	}
	return o.JobIdBlocked, true
}

// HasJobIdBlocked returns a boolean if a field has been set.
func (o *JobArchive) HasJobIdBlocked() bool {
	if o != nil && !IsNil(o.JobIdBlocked) {
		return true
	}

	return false
}

// SetJobIdBlocked gets a reference to the given int32 and assigns it to the JobIdBlocked field.
func (o *JobArchive) SetJobIdBlocked(v int32) {
	o.JobIdBlocked = &v
}

// GetJobIdBlockedBy returns the JobIdBlockedBy field value if set, zero value otherwise.
func (o *JobArchive) GetJobIdBlockedBy() int32 {
	if o == nil || IsNil(o.JobIdBlockedBy) {
		var ret int32
		return ret
	}
	return *o.JobIdBlockedBy
}

// GetJobIdBlockedByOk returns a tuple with the JobIdBlockedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetJobIdBlockedByOk() (*int32, bool) {
	if o == nil || IsNil(o.JobIdBlockedBy) {
		return nil, false
	}
	return o.JobIdBlockedBy, true
}

// HasJobIdBlockedBy returns a boolean if a field has been set.
func (o *JobArchive) HasJobIdBlockedBy() bool {
	if o != nil && !IsNil(o.JobIdBlockedBy) {
		return true
	}

	return false
}

// SetJobIdBlockedBy gets a reference to the given int32 and assigns it to the JobIdBlockedBy field.
func (o *JobArchive) SetJobIdBlockedBy(v int32) {
	o.JobIdBlockedBy = &v
}

// GetJobGroupId returns the JobGroupId field value if set, zero value otherwise.
func (o *JobArchive) GetJobGroupId() int32 {
	if o == nil || IsNil(o.JobGroupId) {
		var ret int32
		return ret
	}
	return *o.JobGroupId
}

// GetJobGroupIdOk returns a tuple with the JobGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetJobGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.JobGroupId) {
		return nil, false
	}
	return o.JobGroupId, true
}

// HasJobGroupId returns a boolean if a field has been set.
func (o *JobArchive) HasJobGroupId() bool {
	if o != nil && !IsNil(o.JobGroupId) {
		return true
	}

	return false
}

// SetJobGroupId gets a reference to the given int32 and assigns it to the JobGroupId field.
func (o *JobArchive) SetJobGroupId(v int32) {
	o.JobGroupId = &v
}

// GetType returns the Type field value
func (o *JobArchive) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *JobArchive) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *JobArchive) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *JobArchive) SetStatus(v string) {
	o.Status = v
}

// GetFunctionName returns the FunctionName field value
func (o *JobArchive) GetFunctionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetFunctionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionName, true
}

// SetFunctionName sets field value
func (o *JobArchive) SetFunctionName(v string) {
	o.FunctionName = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *JobArchive) GetParams() map[string]interface{} {
	if o == nil || IsNil(o.Params) {
		var ret map[string]interface{}
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *JobArchive) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]interface{} and assigns it to the Params field.
func (o *JobArchive) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *JobArchive) GetResponse() map[string]interface{} {
	if o == nil || IsNil(o.Response) {
		var ret map[string]interface{}
		return ret
	}
	return o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetResponseOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Response) {
		return map[string]interface{}{}, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *JobArchive) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given map[string]interface{} and assigns it to the Response field.
func (o *JobArchive) SetResponse(v map[string]interface{}) {
	o.Response = v
}

// GetCallCount returns the CallCount field value
func (o *JobArchive) GetCallCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CallCount
}

// GetCallCountOk returns a tuple with the CallCount field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetCallCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallCount, true
}

// SetCallCount sets field value
func (o *JobArchive) SetCallCount(v int32) {
	o.CallCount = v
}

// GetRetryMax returns the RetryMax field value
func (o *JobArchive) GetRetryMax() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RetryMax
}

// GetRetryMaxOk returns a tuple with the RetryMax field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetRetryMaxOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetryMax, true
}

// SetRetryMax sets field value
func (o *JobArchive) SetRetryMax(v int32) {
	o.RetryMax = v
}

// GetRetryCount returns the RetryCount field value
func (o *JobArchive) GetRetryCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetRetryCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetryCount, true
}

// SetRetryCount sets field value
func (o *JobArchive) SetRetryCount(v int32) {
	o.RetryCount = v
}

// GetRetryMinSeconds returns the RetryMinSeconds field value
func (o *JobArchive) GetRetryMinSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RetryMinSeconds
}

// GetRetryMinSecondsOk returns a tuple with the RetryMinSeconds field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetRetryMinSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetryMinSeconds, true
}

// SetRetryMinSeconds sets field value
func (o *JobArchive) SetRetryMinSeconds(v int32) {
	o.RetryMinSeconds = v
}

// GetException returns the Exception field value if set, zero value otherwise.
func (o *JobArchive) GetException() map[string]interface{} {
	if o == nil || IsNil(o.Exception) {
		var ret map[string]interface{}
		return ret
	}
	return o.Exception
}

// GetExceptionOk returns a tuple with the Exception field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetExceptionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Exception) {
		return map[string]interface{}{}, false
	}
	return o.Exception, true
}

// HasException returns a boolean if a field has been set.
func (o *JobArchive) HasException() bool {
	if o != nil && !IsNil(o.Exception) {
		return true
	}

	return false
}

// SetException gets a reference to the given map[string]interface{} and assigns it to the Exception field.
func (o *JobArchive) SetException(v map[string]interface{}) {
	o.Exception = v
}

// GetExtraInfo returns the ExtraInfo field value if set, zero value otherwise.
func (o *JobArchive) GetExtraInfo() map[string]interface{} {
	if o == nil || IsNil(o.ExtraInfo) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtraInfo
}

// GetExtraInfoOk returns a tuple with the ExtraInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetExtraInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtraInfo) {
		return map[string]interface{}{}, false
	}
	return o.ExtraInfo, true
}

// HasExtraInfo returns a boolean if a field has been set.
func (o *JobArchive) HasExtraInfo() bool {
	if o != nil && !IsNil(o.ExtraInfo) {
		return true
	}

	return false
}

// SetExtraInfo gets a reference to the given map[string]interface{} and assigns it to the ExtraInfo field.
func (o *JobArchive) SetExtraInfo(v map[string]interface{}) {
	o.ExtraInfo = v
}

// GetDurationMilliseconds returns the DurationMilliseconds field value if set, zero value otherwise.
func (o *JobArchive) GetDurationMilliseconds() int32 {
	if o == nil || IsNil(o.DurationMilliseconds) {
		var ret int32
		return ret
	}
	return *o.DurationMilliseconds
}

// GetDurationMillisecondsOk returns a tuple with the DurationMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetDurationMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.DurationMilliseconds) {
		return nil, false
	}
	return o.DurationMilliseconds, true
}

// HasDurationMilliseconds returns a boolean if a field has been set.
func (o *JobArchive) HasDurationMilliseconds() bool {
	if o != nil && !IsNil(o.DurationMilliseconds) {
		return true
	}

	return false
}

// SetDurationMilliseconds gets a reference to the given int32 and assigns it to the DurationMilliseconds field.
func (o *JobArchive) SetDurationMilliseconds(v int32) {
	o.DurationMilliseconds = &v
}

// GetRequiresConfirmation returns the RequiresConfirmation field value
func (o *JobArchive) GetRequiresConfirmation() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequiresConfirmation
}

// GetRequiresConfirmationOk returns a tuple with the RequiresConfirmation field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetRequiresConfirmationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequiresConfirmation, true
}

// SetRequiresConfirmation sets field value
func (o *JobArchive) SetRequiresConfirmation(v bool) {
	o.RequiresConfirmation = v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value
func (o *JobArchive) GetCreatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTimestamp, true
}

// SetCreatedTimestamp sets field value
func (o *JobArchive) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp = v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value
func (o *JobArchive) GetUpdatedTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetUpdatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedTimestamp, true
}

// SetUpdatedTimestamp sets field value
func (o *JobArchive) SetUpdatedTimestamp(v string) {
	o.UpdatedTimestamp = v
}

// GetStartTimestamp returns the StartTimestamp field value if set, zero value otherwise.
func (o *JobArchive) GetStartTimestamp() string {
	if o == nil || IsNil(o.StartTimestamp) {
		var ret string
		return ret
	}
	return *o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetStartTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.StartTimestamp) {
		return nil, false
	}
	return o.StartTimestamp, true
}

// HasStartTimestamp returns a boolean if a field has been set.
func (o *JobArchive) HasStartTimestamp() bool {
	if o != nil && !IsNil(o.StartTimestamp) {
		return true
	}

	return false
}

// SetStartTimestamp gets a reference to the given string and assigns it to the StartTimestamp field.
func (o *JobArchive) SetStartTimestamp(v string) {
	o.StartTimestamp = &v
}

// GetMarkForDeath returns the MarkForDeath field value if set, zero value otherwise.
func (o *JobArchive) GetMarkForDeath() string {
	if o == nil || IsNil(o.MarkForDeath) {
		var ret string
		return ret
	}
	return *o.MarkForDeath
}

// GetMarkForDeathOk returns a tuple with the MarkForDeath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobArchive) GetMarkForDeathOk() (*string, bool) {
	if o == nil || IsNil(o.MarkForDeath) {
		return nil, false
	}
	return o.MarkForDeath, true
}

// HasMarkForDeath returns a boolean if a field has been set.
func (o *JobArchive) HasMarkForDeath() bool {
	if o != nil && !IsNil(o.MarkForDeath) {
		return true
	}

	return false
}

// SetMarkForDeath gets a reference to the given string and assigns it to the MarkForDeath field.
func (o *JobArchive) SetMarkForDeath(v string) {
	o.MarkForDeath = &v
}

// GetLinks returns the Links field value
func (o *JobArchive) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *JobArchive) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *JobArchive) SetLinks(v map[string]interface{}) {
	o.Links = v
}

func (o JobArchive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobArchive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jobId"] = o.JobId
	if !IsNil(o.SiteId) {
		toSerialize["siteId"] = o.SiteId
	}
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	if !IsNil(o.ServerId) {
		toSerialize["serverId"] = o.ServerId
	}
	if !IsNil(o.VmPoolId) {
		toSerialize["vmPoolId"] = o.VmPoolId
	}
	if !IsNil(o.StorageId) {
		toSerialize["storageId"] = o.StorageId
	}
	if !IsNil(o.NetworkDeviceId) {
		toSerialize["networkDeviceId"] = o.NetworkDeviceId
	}
	if !IsNil(o.InfrastructureId) {
		toSerialize["infrastructureId"] = o.InfrastructureId
	}
	if !IsNil(o.JobIdBlocked) {
		toSerialize["jobIdBlocked"] = o.JobIdBlocked
	}
	if !IsNil(o.JobIdBlockedBy) {
		toSerialize["jobIdBlockedBy"] = o.JobIdBlockedBy
	}
	if !IsNil(o.JobGroupId) {
		toSerialize["jobGroupId"] = o.JobGroupId
	}
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	toSerialize["functionName"] = o.FunctionName
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	toSerialize["callCount"] = o.CallCount
	toSerialize["retryMax"] = o.RetryMax
	toSerialize["retryCount"] = o.RetryCount
	toSerialize["retryMinSeconds"] = o.RetryMinSeconds
	if !IsNil(o.Exception) {
		toSerialize["exception"] = o.Exception
	}
	if !IsNil(o.ExtraInfo) {
		toSerialize["extraInfo"] = o.ExtraInfo
	}
	if !IsNil(o.DurationMilliseconds) {
		toSerialize["durationMilliseconds"] = o.DurationMilliseconds
	}
	toSerialize["requiresConfirmation"] = o.RequiresConfirmation
	toSerialize["createdTimestamp"] = o.CreatedTimestamp
	toSerialize["updatedTimestamp"] = o.UpdatedTimestamp
	if !IsNil(o.StartTimestamp) {
		toSerialize["startTimestamp"] = o.StartTimestamp
	}
	if !IsNil(o.MarkForDeath) {
		toSerialize["markForDeath"] = o.MarkForDeath
	}
	toSerialize["links"] = o.Links

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JobArchive) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jobId",
		"type",
		"status",
		"functionName",
		"callCount",
		"retryMax",
		"retryCount",
		"retryMinSeconds",
		"requiresConfirmation",
		"createdTimestamp",
		"updatedTimestamp",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobArchive := _JobArchive{}

	err = json.Unmarshal(data, &varJobArchive)

	if err != nil {
		return err
	}

	*o = JobArchive(varJobArchive)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "jobId")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "serverId")
		delete(additionalProperties, "vmPoolId")
		delete(additionalProperties, "storageId")
		delete(additionalProperties, "networkDeviceId")
		delete(additionalProperties, "infrastructureId")
		delete(additionalProperties, "jobIdBlocked")
		delete(additionalProperties, "jobIdBlockedBy")
		delete(additionalProperties, "jobGroupId")
		delete(additionalProperties, "type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "functionName")
		delete(additionalProperties, "params")
		delete(additionalProperties, "response")
		delete(additionalProperties, "callCount")
		delete(additionalProperties, "retryMax")
		delete(additionalProperties, "retryCount")
		delete(additionalProperties, "retryMinSeconds")
		delete(additionalProperties, "exception")
		delete(additionalProperties, "extraInfo")
		delete(additionalProperties, "durationMilliseconds")
		delete(additionalProperties, "requiresConfirmation")
		delete(additionalProperties, "createdTimestamp")
		delete(additionalProperties, "updatedTimestamp")
		delete(additionalProperties, "startTimestamp")
		delete(additionalProperties, "markForDeath")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJobArchive struct {
	value *JobArchive
	isSet bool
}

func (v NullableJobArchive) Get() *JobArchive {
	return v.value
}

func (v *NullableJobArchive) Set(val *JobArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableJobArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableJobArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobArchive(val *JobArchive) *NullableJobArchive {
	return &NullableJobArchive{value: val, isSet: true}
}

func (v NullableJobArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


