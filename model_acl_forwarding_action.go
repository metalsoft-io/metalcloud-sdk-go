/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// ACLForwardingAction The forwarding action of the rule
type ACLForwardingAction string

// List of ACLForwardingAction
const (
	ACLFORWARDINGACTION_ALLOW ACLForwardingAction = "allow"
	ACLFORWARDINGACTION_DENY ACLForwardingAction = "deny"
	ACLFORWARDINGACTION_TRANSIT ACLForwardingAction = "transit"
	ACLFORWARDINGACTION_DISCARD ACLForwardingAction = "discard"
)

// All allowed values of ACLForwardingAction enum
var AllowedACLForwardingActionEnumValues = []ACLForwardingAction{
	"allow",
	"deny",
	"transit",
	"discard",
}

func (v *ACLForwardingAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ACLForwardingAction(value)
	for _, existing := range AllowedACLForwardingActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ACLForwardingAction", value)
}

// NewACLForwardingActionFromValue returns a pointer to a valid ACLForwardingAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewACLForwardingActionFromValue(v string) (*ACLForwardingAction, error) {
	ev := ACLForwardingAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ACLForwardingAction: valid values are %v", v, AllowedACLForwardingActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ACLForwardingAction) IsValid() bool {
	for _, existing := range AllowedACLForwardingActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ACLForwardingAction value
func (v ACLForwardingAction) Ptr() *ACLForwardingAction {
	return &v
}

type NullableACLForwardingAction struct {
	value *ACLForwardingAction
	isSet bool
}

func (v NullableACLForwardingAction) Get() *ACLForwardingAction {
	return v.value
}

func (v *NullableACLForwardingAction) Set(val *ACLForwardingAction) {
	v.value = val
	v.isSet = true
}

func (v NullableACLForwardingAction) IsSet() bool {
	return v.isSet
}

func (v *NullableACLForwardingAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLForwardingAction(val *ACLForwardingAction) *NullableACLForwardingAction {
	return &NullableACLForwardingAction{value: val, isSet: true}
}

func (v NullableACLForwardingAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLForwardingAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

