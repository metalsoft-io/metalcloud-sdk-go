/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the LenovoComponentFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LenovoComponentFilter{}

// LenovoComponentFilter struct for LenovoComponentFilter
type LenovoComponentFilter struct {
	// Discriminator field set to lenovo
	Vendor string `json:"vendor"`
	// ID of the Lenovo component filter
	Id float32 `json:"id"`
	// Submodel for Lenovo
	Submodel string `json:"submodel"`
	// Serial number for Lenovo
	SerialNumber string `json:"serialNumber"`
	// Component name for Lenovo
	ComponentName string `json:"componentName"`
	AdditionalProperties map[string]interface{}
}

type _LenovoComponentFilter LenovoComponentFilter

// NewLenovoComponentFilter instantiates a new LenovoComponentFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLenovoComponentFilter(vendor string, id float32, submodel string, serialNumber string, componentName string) *LenovoComponentFilter {
	this := LenovoComponentFilter{}
	this.Vendor = vendor
	this.Id = id
	this.Submodel = submodel
	this.SerialNumber = serialNumber
	this.ComponentName = componentName
	return &this
}

// NewLenovoComponentFilterWithDefaults instantiates a new LenovoComponentFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLenovoComponentFilterWithDefaults() *LenovoComponentFilter {
	this := LenovoComponentFilter{}
	return &this
}

// GetVendor returns the Vendor field value
func (o *LenovoComponentFilter) GetVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value
// and a boolean to check if the value has been set.
func (o *LenovoComponentFilter) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vendor, true
}

// SetVendor sets field value
func (o *LenovoComponentFilter) SetVendor(v string) {
	o.Vendor = v
}

// GetId returns the Id field value
func (o *LenovoComponentFilter) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LenovoComponentFilter) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LenovoComponentFilter) SetId(v float32) {
	o.Id = v
}

// GetSubmodel returns the Submodel field value
func (o *LenovoComponentFilter) GetSubmodel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Submodel
}

// GetSubmodelOk returns a tuple with the Submodel field value
// and a boolean to check if the value has been set.
func (o *LenovoComponentFilter) GetSubmodelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Submodel, true
}

// SetSubmodel sets field value
func (o *LenovoComponentFilter) SetSubmodel(v string) {
	o.Submodel = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *LenovoComponentFilter) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *LenovoComponentFilter) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *LenovoComponentFilter) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetComponentName returns the ComponentName field value
func (o *LenovoComponentFilter) GetComponentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentName
}

// GetComponentNameOk returns a tuple with the ComponentName field value
// and a boolean to check if the value has been set.
func (o *LenovoComponentFilter) GetComponentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentName, true
}

// SetComponentName sets field value
func (o *LenovoComponentFilter) SetComponentName(v string) {
	o.ComponentName = v
}

func (o LenovoComponentFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LenovoComponentFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vendor"] = o.Vendor
	toSerialize["id"] = o.Id
	toSerialize["submodel"] = o.Submodel
	toSerialize["serialNumber"] = o.SerialNumber
	toSerialize["componentName"] = o.ComponentName

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LenovoComponentFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vendor",
		"id",
		"submodel",
		"serialNumber",
		"componentName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLenovoComponentFilter := _LenovoComponentFilter{}

	err = json.Unmarshal(data, &varLenovoComponentFilter)

	if err != nil {
		return err
	}

	*o = LenovoComponentFilter(varLenovoComponentFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vendor")
		delete(additionalProperties, "id")
		delete(additionalProperties, "submodel")
		delete(additionalProperties, "serialNumber")
		delete(additionalProperties, "componentName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLenovoComponentFilter struct {
	value *LenovoComponentFilter
	isSet bool
}

func (v NullableLenovoComponentFilter) Get() *LenovoComponentFilter {
	return v.value
}

func (v *NullableLenovoComponentFilter) Set(val *LenovoComponentFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableLenovoComponentFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableLenovoComponentFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLenovoComponentFilter(val *LenovoComponentFilter) *NullableLenovoComponentFilter {
	return &NullableLenovoComponentFilter{value: val, isSet: true}
}

func (v NullableLenovoComponentFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLenovoComponentFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


