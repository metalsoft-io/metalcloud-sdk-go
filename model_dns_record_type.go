/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// DNSRecordType The type of DNS record (e.g., A, AAAA, CNAME, NS, PTR, TXT, SOA) to create
type DNSRecordType string

// List of DNSRecordType
const (
	DNSRECORDTYPE_A DNSRecordType = "A"
	DNSRECORDTYPE_AAAA DNSRecordType = "AAAA"
	DNSRECORDTYPE_CNAME DNSRecordType = "CNAME"
	DNSRECORDTYPE_NS DNSRecordType = "NS"
	DNSRECORDTYPE_PTR DNSRecordType = "PTR"
	DNSRECORDTYPE_SOA DNSRecordType = "SOA"
	DNSRECORDTYPE_TXT DNSRecordType = "TXT"
)

// All allowed values of DNSRecordType enum
var AllowedDNSRecordTypeEnumValues = []DNSRecordType{
	"A",
	"AAAA",
	"CNAME",
	"NS",
	"PTR",
	"SOA",
	"TXT",
}

func (v *DNSRecordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DNSRecordType(value)
	for _, existing := range AllowedDNSRecordTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DNSRecordType", value)
}

// NewDNSRecordTypeFromValue returns a pointer to a valid DNSRecordType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDNSRecordTypeFromValue(v string) (*DNSRecordType, error) {
	ev := DNSRecordType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DNSRecordType: valid values are %v", v, AllowedDNSRecordTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DNSRecordType) IsValid() bool {
	for _, existing := range AllowedDNSRecordTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DNSRecordType value
func (v DNSRecordType) Ptr() *DNSRecordType {
	return &v
}

type NullableDNSRecordType struct {
	value *DNSRecordType
	isSet bool
}

func (v NullableDNSRecordType) Get() *DNSRecordType {
	return v.value
}

func (v *NullableDNSRecordType) Set(val *DNSRecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSRecordType(val *DNSRecordType) *NullableDNSRecordType {
	return &NullableDNSRecordType{value: val, isSet: true}
}

func (v NullableDNSRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

