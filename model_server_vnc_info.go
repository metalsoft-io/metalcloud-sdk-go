/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerVNCInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerVNCInfo{}

// ServerVNCInfo struct for ServerVNCInfo
type ServerVNCInfo struct {
	// Active VNC sessions
	ActiveSessions float32 `json:"activeSessions"`
	// Max active VNC sessions
	MaxSessions float32 `json:"maxSessions"`
	// VNC timeout
	Timeout float32 `json:"timeout"`
	// VNC enabled
	Enable string `json:"enable"`
	AdditionalProperties map[string]interface{}
}

type _ServerVNCInfo ServerVNCInfo

// NewServerVNCInfo instantiates a new ServerVNCInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerVNCInfo(activeSessions float32, maxSessions float32, timeout float32, enable string) *ServerVNCInfo {
	this := ServerVNCInfo{}
	this.ActiveSessions = activeSessions
	this.MaxSessions = maxSessions
	this.Timeout = timeout
	this.Enable = enable
	return &this
}

// NewServerVNCInfoWithDefaults instantiates a new ServerVNCInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerVNCInfoWithDefaults() *ServerVNCInfo {
	this := ServerVNCInfo{}
	return &this
}

// GetActiveSessions returns the ActiveSessions field value
func (o *ServerVNCInfo) GetActiveSessions() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ActiveSessions
}

// GetActiveSessionsOk returns a tuple with the ActiveSessions field value
// and a boolean to check if the value has been set.
func (o *ServerVNCInfo) GetActiveSessionsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveSessions, true
}

// SetActiveSessions sets field value
func (o *ServerVNCInfo) SetActiveSessions(v float32) {
	o.ActiveSessions = v
}

// GetMaxSessions returns the MaxSessions field value
func (o *ServerVNCInfo) GetMaxSessions() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MaxSessions
}

// GetMaxSessionsOk returns a tuple with the MaxSessions field value
// and a boolean to check if the value has been set.
func (o *ServerVNCInfo) GetMaxSessionsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSessions, true
}

// SetMaxSessions sets field value
func (o *ServerVNCInfo) SetMaxSessions(v float32) {
	o.MaxSessions = v
}

// GetTimeout returns the Timeout field value
func (o *ServerVNCInfo) GetTimeout() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *ServerVNCInfo) GetTimeoutOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *ServerVNCInfo) SetTimeout(v float32) {
	o.Timeout = v
}

// GetEnable returns the Enable field value
func (o *ServerVNCInfo) GetEnable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *ServerVNCInfo) GetEnableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *ServerVNCInfo) SetEnable(v string) {
	o.Enable = v
}

func (o ServerVNCInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerVNCInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activeSessions"] = o.ActiveSessions
	toSerialize["maxSessions"] = o.MaxSessions
	toSerialize["timeout"] = o.Timeout
	toSerialize["enable"] = o.Enable

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerVNCInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activeSessions",
		"maxSessions",
		"timeout",
		"enable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerVNCInfo := _ServerVNCInfo{}

	err = json.Unmarshal(data, &varServerVNCInfo)

	if err != nil {
		return err
	}

	*o = ServerVNCInfo(varServerVNCInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "activeSessions")
		delete(additionalProperties, "maxSessions")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "enable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerVNCInfo struct {
	value *ServerVNCInfo
	isSet bool
}

func (v NullableServerVNCInfo) Get() *ServerVNCInfo {
	return v.value
}

func (v *NullableServerVNCInfo) Set(val *ServerVNCInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerVNCInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerVNCInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerVNCInfo(val *ServerVNCInfo) *NullableServerVNCInfo {
	return &NullableServerVNCInfo{value: val, isSet: true}
}

func (v NullableServerVNCInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerVNCInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


