/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerTypeStatisticsBatchOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTypeStatisticsBatchOptions{}

// ServerTypeStatisticsBatchOptions struct for ServerTypeStatisticsBatchOptions
type ServerTypeStatisticsBatchOptions struct {
	// The id of user owning the resources. Used for filtering
	UserIdOwner *float32 `json:"userIdOwner,omitempty"`
	// The id of the site where the resources are located. Used for filtering
	SiteId float32 `json:"siteId"`
	// The maximum returned results per server type.
	MaximumResultsPerServerType *float32 `json:"maximumResultsPerServerType,omitempty"`
	// The id of the server types to get statistics for.
	ServerTypeIds []float32 `json:"serverTypeIds,omitempty"`
	// If specified, treats only the active Instances of the Instance Array as available, instead of all active instances of userIdOwner.
	InstanceArrayId *float32 `json:"instanceArrayId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServerTypeStatisticsBatchOptions ServerTypeStatisticsBatchOptions

// NewServerTypeStatisticsBatchOptions instantiates a new ServerTypeStatisticsBatchOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTypeStatisticsBatchOptions(siteId float32) *ServerTypeStatisticsBatchOptions {
	this := ServerTypeStatisticsBatchOptions{}
	this.SiteId = siteId
	return &this
}

// NewServerTypeStatisticsBatchOptionsWithDefaults instantiates a new ServerTypeStatisticsBatchOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeStatisticsBatchOptionsWithDefaults() *ServerTypeStatisticsBatchOptions {
	this := ServerTypeStatisticsBatchOptions{}
	return &this
}

// GetUserIdOwner returns the UserIdOwner field value if set, zero value otherwise.
func (o *ServerTypeStatisticsBatchOptions) GetUserIdOwner() float32 {
	if o == nil || IsNil(o.UserIdOwner) {
		var ret float32
		return ret
	}
	return *o.UserIdOwner
}

// GetUserIdOwnerOk returns a tuple with the UserIdOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerTypeStatisticsBatchOptions) GetUserIdOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.UserIdOwner) {
		return nil, false
	}
	return o.UserIdOwner, true
}

// HasUserIdOwner returns a boolean if a field has been set.
func (o *ServerTypeStatisticsBatchOptions) HasUserIdOwner() bool {
	if o != nil && !IsNil(o.UserIdOwner) {
		return true
	}

	return false
}

// SetUserIdOwner gets a reference to the given float32 and assigns it to the UserIdOwner field.
func (o *ServerTypeStatisticsBatchOptions) SetUserIdOwner(v float32) {
	o.UserIdOwner = &v
}

// GetSiteId returns the SiteId field value
func (o *ServerTypeStatisticsBatchOptions) GetSiteId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SiteId
}

// GetSiteIdOk returns a tuple with the SiteId field value
// and a boolean to check if the value has been set.
func (o *ServerTypeStatisticsBatchOptions) GetSiteIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SiteId, true
}

// SetSiteId sets field value
func (o *ServerTypeStatisticsBatchOptions) SetSiteId(v float32) {
	o.SiteId = v
}

// GetMaximumResultsPerServerType returns the MaximumResultsPerServerType field value if set, zero value otherwise.
func (o *ServerTypeStatisticsBatchOptions) GetMaximumResultsPerServerType() float32 {
	if o == nil || IsNil(o.MaximumResultsPerServerType) {
		var ret float32
		return ret
	}
	return *o.MaximumResultsPerServerType
}

// GetMaximumResultsPerServerTypeOk returns a tuple with the MaximumResultsPerServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerTypeStatisticsBatchOptions) GetMaximumResultsPerServerTypeOk() (*float32, bool) {
	if o == nil || IsNil(o.MaximumResultsPerServerType) {
		return nil, false
	}
	return o.MaximumResultsPerServerType, true
}

// HasMaximumResultsPerServerType returns a boolean if a field has been set.
func (o *ServerTypeStatisticsBatchOptions) HasMaximumResultsPerServerType() bool {
	if o != nil && !IsNil(o.MaximumResultsPerServerType) {
		return true
	}

	return false
}

// SetMaximumResultsPerServerType gets a reference to the given float32 and assigns it to the MaximumResultsPerServerType field.
func (o *ServerTypeStatisticsBatchOptions) SetMaximumResultsPerServerType(v float32) {
	o.MaximumResultsPerServerType = &v
}

// GetServerTypeIds returns the ServerTypeIds field value if set, zero value otherwise.
func (o *ServerTypeStatisticsBatchOptions) GetServerTypeIds() []float32 {
	if o == nil || IsNil(o.ServerTypeIds) {
		var ret []float32
		return ret
	}
	return o.ServerTypeIds
}

// GetServerTypeIdsOk returns a tuple with the ServerTypeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerTypeStatisticsBatchOptions) GetServerTypeIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.ServerTypeIds) {
		return nil, false
	}
	return o.ServerTypeIds, true
}

// HasServerTypeIds returns a boolean if a field has been set.
func (o *ServerTypeStatisticsBatchOptions) HasServerTypeIds() bool {
	if o != nil && !IsNil(o.ServerTypeIds) {
		return true
	}

	return false
}

// SetServerTypeIds gets a reference to the given []float32 and assigns it to the ServerTypeIds field.
func (o *ServerTypeStatisticsBatchOptions) SetServerTypeIds(v []float32) {
	o.ServerTypeIds = v
}

// GetInstanceArrayId returns the InstanceArrayId field value if set, zero value otherwise.
func (o *ServerTypeStatisticsBatchOptions) GetInstanceArrayId() float32 {
	if o == nil || IsNil(o.InstanceArrayId) {
		var ret float32
		return ret
	}
	return *o.InstanceArrayId
}

// GetInstanceArrayIdOk returns a tuple with the InstanceArrayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerTypeStatisticsBatchOptions) GetInstanceArrayIdOk() (*float32, bool) {
	if o == nil || IsNil(o.InstanceArrayId) {
		return nil, false
	}
	return o.InstanceArrayId, true
}

// HasInstanceArrayId returns a boolean if a field has been set.
func (o *ServerTypeStatisticsBatchOptions) HasInstanceArrayId() bool {
	if o != nil && !IsNil(o.InstanceArrayId) {
		return true
	}

	return false
}

// SetInstanceArrayId gets a reference to the given float32 and assigns it to the InstanceArrayId field.
func (o *ServerTypeStatisticsBatchOptions) SetInstanceArrayId(v float32) {
	o.InstanceArrayId = &v
}

func (o ServerTypeStatisticsBatchOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTypeStatisticsBatchOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserIdOwner) {
		toSerialize["userIdOwner"] = o.UserIdOwner
	}
	toSerialize["siteId"] = o.SiteId
	if !IsNil(o.MaximumResultsPerServerType) {
		toSerialize["maximumResultsPerServerType"] = o.MaximumResultsPerServerType
	}
	if !IsNil(o.ServerTypeIds) {
		toSerialize["serverTypeIds"] = o.ServerTypeIds
	}
	if !IsNil(o.InstanceArrayId) {
		toSerialize["instanceArrayId"] = o.InstanceArrayId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerTypeStatisticsBatchOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"siteId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerTypeStatisticsBatchOptions := _ServerTypeStatisticsBatchOptions{}

	err = json.Unmarshal(data, &varServerTypeStatisticsBatchOptions)

	if err != nil {
		return err
	}

	*o = ServerTypeStatisticsBatchOptions(varServerTypeStatisticsBatchOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "userIdOwner")
		delete(additionalProperties, "siteId")
		delete(additionalProperties, "maximumResultsPerServerType")
		delete(additionalProperties, "serverTypeIds")
		delete(additionalProperties, "instanceArrayId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerTypeStatisticsBatchOptions struct {
	value *ServerTypeStatisticsBatchOptions
	isSet bool
}

func (v NullableServerTypeStatisticsBatchOptions) Get() *ServerTypeStatisticsBatchOptions {
	return v.value
}

func (v *NullableServerTypeStatisticsBatchOptions) Set(val *ServerTypeStatisticsBatchOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTypeStatisticsBatchOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTypeStatisticsBatchOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTypeStatisticsBatchOptions(val *ServerTypeStatisticsBatchOptions) *NullableServerTypeStatisticsBatchOptions {
	return &NullableServerTypeStatisticsBatchOptions{value: val, isSet: true}
}

func (v NullableServerTypeStatisticsBatchOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTypeStatisticsBatchOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


