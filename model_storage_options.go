/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the StorageOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageOptions{}

// StorageOptions struct for StorageOptions
type StorageOptions struct {
	// Enable data reduction
	EnableDataReduction *float32 `json:"enableDataReduction,omitempty"`
	// Enable advanced deduplication
	EnableAdvancedDeduplication *float32 `json:"enableAdvancedDeduplication,omitempty"`
	// Volume name
	VolumeName *string `json:"volumeName,omitempty"`
	// Array id to use (for certain storage drivers)
	ArrayId *string `json:"arrayId,omitempty"`
	// Director id to use (for certain storage drivers)
	DirectorId *string `json:"directorId,omitempty"`
	// S3 Hostname to use (for certain storage drivers)
	S3Hostname *string `json:"s3Hostname,omitempty"`
	// Enable advanced deduplication
	S3Port *float32 `json:"s3Port,omitempty"`
	// Default service level to use (for certain storage drivers)
	DefaultServiceLevel *string `json:"defaultServiceLevel,omitempty"`
	// Fibre channel enabled
	FibreChannelEnabled *float32 `json:"fibreChannelEnabled,omitempty"`
	// Array of directors
	Directors []string `json:"directors,omitempty"`
	// Resource pool
	ResourcePool *string `json:"resourcePool,omitempty"`
	// Version of the storage
	Version *string `json:"version,omitempty"`
	// Major version of the storage
	MajorVersion *string `json:"majorVersion,omitempty"`
	// Arrays
	Arrays []string `json:"arrays,omitempty"`
	// Storage info
	Info map[string]interface{} `json:"info,omitempty"`
	// Service level names
	ServiceLevelNames []string `json:"serviceLevelNames,omitempty"`
	// Fibre channel capable
	FibreChannelCapable *float32 `json:"fibreChannelCapable,omitempty"`
	// ISCSI ports
	PortsIscsi []map[string]interface{} `json:"portsIscsi,omitempty"`
	// SCSI FC ports
	PortsScsiFc []map[string]interface{} `json:"portsScsiFc,omitempty"`
	// Error message when gathering storage info
	InfoGatherError *string `json:"infoGatherError,omitempty"`
	// Error message when configuring storage
	ConfigureError *string `json:"configureError,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StorageOptions StorageOptions

// NewStorageOptions instantiates a new StorageOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageOptions() *StorageOptions {
	this := StorageOptions{}
	return &this
}

// NewStorageOptionsWithDefaults instantiates a new StorageOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageOptionsWithDefaults() *StorageOptions {
	this := StorageOptions{}
	return &this
}

// GetEnableDataReduction returns the EnableDataReduction field value if set, zero value otherwise.
func (o *StorageOptions) GetEnableDataReduction() float32 {
	if o == nil || IsNil(o.EnableDataReduction) {
		var ret float32
		return ret
	}
	return *o.EnableDataReduction
}

// GetEnableDataReductionOk returns a tuple with the EnableDataReduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetEnableDataReductionOk() (*float32, bool) {
	if o == nil || IsNil(o.EnableDataReduction) {
		return nil, false
	}
	return o.EnableDataReduction, true
}

// HasEnableDataReduction returns a boolean if a field has been set.
func (o *StorageOptions) HasEnableDataReduction() bool {
	if o != nil && !IsNil(o.EnableDataReduction) {
		return true
	}

	return false
}

// SetEnableDataReduction gets a reference to the given float32 and assigns it to the EnableDataReduction field.
func (o *StorageOptions) SetEnableDataReduction(v float32) {
	o.EnableDataReduction = &v
}

// GetEnableAdvancedDeduplication returns the EnableAdvancedDeduplication field value if set, zero value otherwise.
func (o *StorageOptions) GetEnableAdvancedDeduplication() float32 {
	if o == nil || IsNil(o.EnableAdvancedDeduplication) {
		var ret float32
		return ret
	}
	return *o.EnableAdvancedDeduplication
}

// GetEnableAdvancedDeduplicationOk returns a tuple with the EnableAdvancedDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetEnableAdvancedDeduplicationOk() (*float32, bool) {
	if o == nil || IsNil(o.EnableAdvancedDeduplication) {
		return nil, false
	}
	return o.EnableAdvancedDeduplication, true
}

// HasEnableAdvancedDeduplication returns a boolean if a field has been set.
func (o *StorageOptions) HasEnableAdvancedDeduplication() bool {
	if o != nil && !IsNil(o.EnableAdvancedDeduplication) {
		return true
	}

	return false
}

// SetEnableAdvancedDeduplication gets a reference to the given float32 and assigns it to the EnableAdvancedDeduplication field.
func (o *StorageOptions) SetEnableAdvancedDeduplication(v float32) {
	o.EnableAdvancedDeduplication = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *StorageOptions) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *StorageOptions) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *StorageOptions) SetVolumeName(v string) {
	o.VolumeName = &v
}

// GetArrayId returns the ArrayId field value if set, zero value otherwise.
func (o *StorageOptions) GetArrayId() string {
	if o == nil || IsNil(o.ArrayId) {
		var ret string
		return ret
	}
	return *o.ArrayId
}

// GetArrayIdOk returns a tuple with the ArrayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetArrayIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArrayId) {
		return nil, false
	}
	return o.ArrayId, true
}

// HasArrayId returns a boolean if a field has been set.
func (o *StorageOptions) HasArrayId() bool {
	if o != nil && !IsNil(o.ArrayId) {
		return true
	}

	return false
}

// SetArrayId gets a reference to the given string and assigns it to the ArrayId field.
func (o *StorageOptions) SetArrayId(v string) {
	o.ArrayId = &v
}

// GetDirectorId returns the DirectorId field value if set, zero value otherwise.
func (o *StorageOptions) GetDirectorId() string {
	if o == nil || IsNil(o.DirectorId) {
		var ret string
		return ret
	}
	return *o.DirectorId
}

// GetDirectorIdOk returns a tuple with the DirectorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetDirectorIdOk() (*string, bool) {
	if o == nil || IsNil(o.DirectorId) {
		return nil, false
	}
	return o.DirectorId, true
}

// HasDirectorId returns a boolean if a field has been set.
func (o *StorageOptions) HasDirectorId() bool {
	if o != nil && !IsNil(o.DirectorId) {
		return true
	}

	return false
}

// SetDirectorId gets a reference to the given string and assigns it to the DirectorId field.
func (o *StorageOptions) SetDirectorId(v string) {
	o.DirectorId = &v
}

// GetS3Hostname returns the S3Hostname field value if set, zero value otherwise.
func (o *StorageOptions) GetS3Hostname() string {
	if o == nil || IsNil(o.S3Hostname) {
		var ret string
		return ret
	}
	return *o.S3Hostname
}

// GetS3HostnameOk returns a tuple with the S3Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetS3HostnameOk() (*string, bool) {
	if o == nil || IsNil(o.S3Hostname) {
		return nil, false
	}
	return o.S3Hostname, true
}

// HasS3Hostname returns a boolean if a field has been set.
func (o *StorageOptions) HasS3Hostname() bool {
	if o != nil && !IsNil(o.S3Hostname) {
		return true
	}

	return false
}

// SetS3Hostname gets a reference to the given string and assigns it to the S3Hostname field.
func (o *StorageOptions) SetS3Hostname(v string) {
	o.S3Hostname = &v
}

// GetS3Port returns the S3Port field value if set, zero value otherwise.
func (o *StorageOptions) GetS3Port() float32 {
	if o == nil || IsNil(o.S3Port) {
		var ret float32
		return ret
	}
	return *o.S3Port
}

// GetS3PortOk returns a tuple with the S3Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetS3PortOk() (*float32, bool) {
	if o == nil || IsNil(o.S3Port) {
		return nil, false
	}
	return o.S3Port, true
}

// HasS3Port returns a boolean if a field has been set.
func (o *StorageOptions) HasS3Port() bool {
	if o != nil && !IsNil(o.S3Port) {
		return true
	}

	return false
}

// SetS3Port gets a reference to the given float32 and assigns it to the S3Port field.
func (o *StorageOptions) SetS3Port(v float32) {
	o.S3Port = &v
}

// GetDefaultServiceLevel returns the DefaultServiceLevel field value if set, zero value otherwise.
func (o *StorageOptions) GetDefaultServiceLevel() string {
	if o == nil || IsNil(o.DefaultServiceLevel) {
		var ret string
		return ret
	}
	return *o.DefaultServiceLevel
}

// GetDefaultServiceLevelOk returns a tuple with the DefaultServiceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetDefaultServiceLevelOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultServiceLevel) {
		return nil, false
	}
	return o.DefaultServiceLevel, true
}

// HasDefaultServiceLevel returns a boolean if a field has been set.
func (o *StorageOptions) HasDefaultServiceLevel() bool {
	if o != nil && !IsNil(o.DefaultServiceLevel) {
		return true
	}

	return false
}

// SetDefaultServiceLevel gets a reference to the given string and assigns it to the DefaultServiceLevel field.
func (o *StorageOptions) SetDefaultServiceLevel(v string) {
	o.DefaultServiceLevel = &v
}

// GetFibreChannelEnabled returns the FibreChannelEnabled field value if set, zero value otherwise.
func (o *StorageOptions) GetFibreChannelEnabled() float32 {
	if o == nil || IsNil(o.FibreChannelEnabled) {
		var ret float32
		return ret
	}
	return *o.FibreChannelEnabled
}

// GetFibreChannelEnabledOk returns a tuple with the FibreChannelEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetFibreChannelEnabledOk() (*float32, bool) {
	if o == nil || IsNil(o.FibreChannelEnabled) {
		return nil, false
	}
	return o.FibreChannelEnabled, true
}

// HasFibreChannelEnabled returns a boolean if a field has been set.
func (o *StorageOptions) HasFibreChannelEnabled() bool {
	if o != nil && !IsNil(o.FibreChannelEnabled) {
		return true
	}

	return false
}

// SetFibreChannelEnabled gets a reference to the given float32 and assigns it to the FibreChannelEnabled field.
func (o *StorageOptions) SetFibreChannelEnabled(v float32) {
	o.FibreChannelEnabled = &v
}

// GetDirectors returns the Directors field value if set, zero value otherwise.
func (o *StorageOptions) GetDirectors() []string {
	if o == nil || IsNil(o.Directors) {
		var ret []string
		return ret
	}
	return o.Directors
}

// GetDirectorsOk returns a tuple with the Directors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetDirectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Directors) {
		return nil, false
	}
	return o.Directors, true
}

// HasDirectors returns a boolean if a field has been set.
func (o *StorageOptions) HasDirectors() bool {
	if o != nil && !IsNil(o.Directors) {
		return true
	}

	return false
}

// SetDirectors gets a reference to the given []string and assigns it to the Directors field.
func (o *StorageOptions) SetDirectors(v []string) {
	o.Directors = v
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise.
func (o *StorageOptions) GetResourcePool() string {
	if o == nil || IsNil(o.ResourcePool) {
		var ret string
		return ret
	}
	return *o.ResourcePool
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetResourcePoolOk() (*string, bool) {
	if o == nil || IsNil(o.ResourcePool) {
		return nil, false
	}
	return o.ResourcePool, true
}

// HasResourcePool returns a boolean if a field has been set.
func (o *StorageOptions) HasResourcePool() bool {
	if o != nil && !IsNil(o.ResourcePool) {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given string and assigns it to the ResourcePool field.
func (o *StorageOptions) SetResourcePool(v string) {
	o.ResourcePool = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *StorageOptions) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *StorageOptions) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *StorageOptions) SetVersion(v string) {
	o.Version = &v
}

// GetMajorVersion returns the MajorVersion field value if set, zero value otherwise.
func (o *StorageOptions) GetMajorVersion() string {
	if o == nil || IsNil(o.MajorVersion) {
		var ret string
		return ret
	}
	return *o.MajorVersion
}

// GetMajorVersionOk returns a tuple with the MajorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetMajorVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MajorVersion) {
		return nil, false
	}
	return o.MajorVersion, true
}

// HasMajorVersion returns a boolean if a field has been set.
func (o *StorageOptions) HasMajorVersion() bool {
	if o != nil && !IsNil(o.MajorVersion) {
		return true
	}

	return false
}

// SetMajorVersion gets a reference to the given string and assigns it to the MajorVersion field.
func (o *StorageOptions) SetMajorVersion(v string) {
	o.MajorVersion = &v
}

// GetArrays returns the Arrays field value if set, zero value otherwise.
func (o *StorageOptions) GetArrays() []string {
	if o == nil || IsNil(o.Arrays) {
		var ret []string
		return ret
	}
	return o.Arrays
}

// GetArraysOk returns a tuple with the Arrays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetArraysOk() ([]string, bool) {
	if o == nil || IsNil(o.Arrays) {
		return nil, false
	}
	return o.Arrays, true
}

// HasArrays returns a boolean if a field has been set.
func (o *StorageOptions) HasArrays() bool {
	if o != nil && !IsNil(o.Arrays) {
		return true
	}

	return false
}

// SetArrays gets a reference to the given []string and assigns it to the Arrays field.
func (o *StorageOptions) SetArrays(v []string) {
	o.Arrays = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *StorageOptions) GetInfo() map[string]interface{} {
	if o == nil || IsNil(o.Info) {
		var ret map[string]interface{}
		return ret
	}
	return o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Info) {
		return map[string]interface{}{}, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *StorageOptions) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given map[string]interface{} and assigns it to the Info field.
func (o *StorageOptions) SetInfo(v map[string]interface{}) {
	o.Info = v
}

// GetServiceLevelNames returns the ServiceLevelNames field value if set, zero value otherwise.
func (o *StorageOptions) GetServiceLevelNames() []string {
	if o == nil || IsNil(o.ServiceLevelNames) {
		var ret []string
		return ret
	}
	return o.ServiceLevelNames
}

// GetServiceLevelNamesOk returns a tuple with the ServiceLevelNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetServiceLevelNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ServiceLevelNames) {
		return nil, false
	}
	return o.ServiceLevelNames, true
}

// HasServiceLevelNames returns a boolean if a field has been set.
func (o *StorageOptions) HasServiceLevelNames() bool {
	if o != nil && !IsNil(o.ServiceLevelNames) {
		return true
	}

	return false
}

// SetServiceLevelNames gets a reference to the given []string and assigns it to the ServiceLevelNames field.
func (o *StorageOptions) SetServiceLevelNames(v []string) {
	o.ServiceLevelNames = v
}

// GetFibreChannelCapable returns the FibreChannelCapable field value if set, zero value otherwise.
func (o *StorageOptions) GetFibreChannelCapable() float32 {
	if o == nil || IsNil(o.FibreChannelCapable) {
		var ret float32
		return ret
	}
	return *o.FibreChannelCapable
}

// GetFibreChannelCapableOk returns a tuple with the FibreChannelCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetFibreChannelCapableOk() (*float32, bool) {
	if o == nil || IsNil(o.FibreChannelCapable) {
		return nil, false
	}
	return o.FibreChannelCapable, true
}

// HasFibreChannelCapable returns a boolean if a field has been set.
func (o *StorageOptions) HasFibreChannelCapable() bool {
	if o != nil && !IsNil(o.FibreChannelCapable) {
		return true
	}

	return false
}

// SetFibreChannelCapable gets a reference to the given float32 and assigns it to the FibreChannelCapable field.
func (o *StorageOptions) SetFibreChannelCapable(v float32) {
	o.FibreChannelCapable = &v
}

// GetPortsIscsi returns the PortsIscsi field value if set, zero value otherwise.
func (o *StorageOptions) GetPortsIscsi() []map[string]interface{} {
	if o == nil || IsNil(o.PortsIscsi) {
		var ret []map[string]interface{}
		return ret
	}
	return o.PortsIscsi
}

// GetPortsIscsiOk returns a tuple with the PortsIscsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetPortsIscsiOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.PortsIscsi) {
		return nil, false
	}
	return o.PortsIscsi, true
}

// HasPortsIscsi returns a boolean if a field has been set.
func (o *StorageOptions) HasPortsIscsi() bool {
	if o != nil && !IsNil(o.PortsIscsi) {
		return true
	}

	return false
}

// SetPortsIscsi gets a reference to the given []map[string]interface{} and assigns it to the PortsIscsi field.
func (o *StorageOptions) SetPortsIscsi(v []map[string]interface{}) {
	o.PortsIscsi = v
}

// GetPortsScsiFc returns the PortsScsiFc field value if set, zero value otherwise.
func (o *StorageOptions) GetPortsScsiFc() []map[string]interface{} {
	if o == nil || IsNil(o.PortsScsiFc) {
		var ret []map[string]interface{}
		return ret
	}
	return o.PortsScsiFc
}

// GetPortsScsiFcOk returns a tuple with the PortsScsiFc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetPortsScsiFcOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.PortsScsiFc) {
		return nil, false
	}
	return o.PortsScsiFc, true
}

// HasPortsScsiFc returns a boolean if a field has been set.
func (o *StorageOptions) HasPortsScsiFc() bool {
	if o != nil && !IsNil(o.PortsScsiFc) {
		return true
	}

	return false
}

// SetPortsScsiFc gets a reference to the given []map[string]interface{} and assigns it to the PortsScsiFc field.
func (o *StorageOptions) SetPortsScsiFc(v []map[string]interface{}) {
	o.PortsScsiFc = v
}

// GetInfoGatherError returns the InfoGatherError field value if set, zero value otherwise.
func (o *StorageOptions) GetInfoGatherError() string {
	if o == nil || IsNil(o.InfoGatherError) {
		var ret string
		return ret
	}
	return *o.InfoGatherError
}

// GetInfoGatherErrorOk returns a tuple with the InfoGatherError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetInfoGatherErrorOk() (*string, bool) {
	if o == nil || IsNil(o.InfoGatherError) {
		return nil, false
	}
	return o.InfoGatherError, true
}

// HasInfoGatherError returns a boolean if a field has been set.
func (o *StorageOptions) HasInfoGatherError() bool {
	if o != nil && !IsNil(o.InfoGatherError) {
		return true
	}

	return false
}

// SetInfoGatherError gets a reference to the given string and assigns it to the InfoGatherError field.
func (o *StorageOptions) SetInfoGatherError(v string) {
	o.InfoGatherError = &v
}

// GetConfigureError returns the ConfigureError field value if set, zero value otherwise.
func (o *StorageOptions) GetConfigureError() string {
	if o == nil || IsNil(o.ConfigureError) {
		var ret string
		return ret
	}
	return *o.ConfigureError
}

// GetConfigureErrorOk returns a tuple with the ConfigureError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageOptions) GetConfigureErrorOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigureError) {
		return nil, false
	}
	return o.ConfigureError, true
}

// HasConfigureError returns a boolean if a field has been set.
func (o *StorageOptions) HasConfigureError() bool {
	if o != nil && !IsNil(o.ConfigureError) {
		return true
	}

	return false
}

// SetConfigureError gets a reference to the given string and assigns it to the ConfigureError field.
func (o *StorageOptions) SetConfigureError(v string) {
	o.ConfigureError = &v
}

func (o StorageOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableDataReduction) {
		toSerialize["enableDataReduction"] = o.EnableDataReduction
	}
	if !IsNil(o.EnableAdvancedDeduplication) {
		toSerialize["enableAdvancedDeduplication"] = o.EnableAdvancedDeduplication
	}
	if !IsNil(o.VolumeName) {
		toSerialize["volumeName"] = o.VolumeName
	}
	if !IsNil(o.ArrayId) {
		toSerialize["arrayId"] = o.ArrayId
	}
	if !IsNil(o.DirectorId) {
		toSerialize["directorId"] = o.DirectorId
	}
	if !IsNil(o.S3Hostname) {
		toSerialize["s3Hostname"] = o.S3Hostname
	}
	if !IsNil(o.S3Port) {
		toSerialize["s3Port"] = o.S3Port
	}
	if !IsNil(o.DefaultServiceLevel) {
		toSerialize["defaultServiceLevel"] = o.DefaultServiceLevel
	}
	if !IsNil(o.FibreChannelEnabled) {
		toSerialize["fibreChannelEnabled"] = o.FibreChannelEnabled
	}
	if !IsNil(o.Directors) {
		toSerialize["directors"] = o.Directors
	}
	if !IsNil(o.ResourcePool) {
		toSerialize["resourcePool"] = o.ResourcePool
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.MajorVersion) {
		toSerialize["majorVersion"] = o.MajorVersion
	}
	if !IsNil(o.Arrays) {
		toSerialize["arrays"] = o.Arrays
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.ServiceLevelNames) {
		toSerialize["serviceLevelNames"] = o.ServiceLevelNames
	}
	if !IsNil(o.FibreChannelCapable) {
		toSerialize["fibreChannelCapable"] = o.FibreChannelCapable
	}
	if !IsNil(o.PortsIscsi) {
		toSerialize["portsIscsi"] = o.PortsIscsi
	}
	if !IsNil(o.PortsScsiFc) {
		toSerialize["portsScsiFc"] = o.PortsScsiFc
	}
	if !IsNil(o.InfoGatherError) {
		toSerialize["infoGatherError"] = o.InfoGatherError
	}
	if !IsNil(o.ConfigureError) {
		toSerialize["configureError"] = o.ConfigureError
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StorageOptions) UnmarshalJSON(data []byte) (err error) {
	varStorageOptions := _StorageOptions{}

	err = json.Unmarshal(data, &varStorageOptions)

	if err != nil {
		return err
	}

	*o = StorageOptions(varStorageOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enableDataReduction")
		delete(additionalProperties, "enableAdvancedDeduplication")
		delete(additionalProperties, "volumeName")
		delete(additionalProperties, "arrayId")
		delete(additionalProperties, "directorId")
		delete(additionalProperties, "s3Hostname")
		delete(additionalProperties, "s3Port")
		delete(additionalProperties, "defaultServiceLevel")
		delete(additionalProperties, "fibreChannelEnabled")
		delete(additionalProperties, "directors")
		delete(additionalProperties, "resourcePool")
		delete(additionalProperties, "version")
		delete(additionalProperties, "majorVersion")
		delete(additionalProperties, "arrays")
		delete(additionalProperties, "info")
		delete(additionalProperties, "serviceLevelNames")
		delete(additionalProperties, "fibreChannelCapable")
		delete(additionalProperties, "portsIscsi")
		delete(additionalProperties, "portsScsiFc")
		delete(additionalProperties, "infoGatherError")
		delete(additionalProperties, "configureError")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStorageOptions struct {
	value *StorageOptions
	isSet bool
}

func (v NullableStorageOptions) Get() *StorageOptions {
	return v.value
}

func (v *NullableStorageOptions) Set(val *StorageOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageOptions(val *StorageOptions) *NullableStorageOptions {
	return &NullableStorageOptions{value: val, isSet: true}
}

func (v NullableStorageOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


