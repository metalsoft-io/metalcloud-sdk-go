/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the VlanAllocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VlanAllocation{}

// VlanAllocation struct for VlanAllocation
type VlanAllocation struct {
	Id int32 `json:"id"`
	Scope ResourceScope `json:"scope"`
	Status ResourceAllocationStatus `json:"status"`
	VlanId int32 `json:"vlanId"`
	AdditionalProperties map[string]interface{}
}

type _VlanAllocation VlanAllocation

// NewVlanAllocation instantiates a new VlanAllocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVlanAllocation(id int32, scope ResourceScope, status ResourceAllocationStatus, vlanId int32) *VlanAllocation {
	this := VlanAllocation{}
	this.Id = id
	this.Scope = scope
	this.Status = status
	this.VlanId = vlanId
	return &this
}

// NewVlanAllocationWithDefaults instantiates a new VlanAllocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVlanAllocationWithDefaults() *VlanAllocation {
	this := VlanAllocation{}
	return &this
}

// GetId returns the Id field value
func (o *VlanAllocation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VlanAllocation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VlanAllocation) SetId(v int32) {
	o.Id = v
}

// GetScope returns the Scope field value
func (o *VlanAllocation) GetScope() ResourceScope {
	if o == nil {
		var ret ResourceScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *VlanAllocation) GetScopeOk() (*ResourceScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *VlanAllocation) SetScope(v ResourceScope) {
	o.Scope = v
}

// GetStatus returns the Status field value
func (o *VlanAllocation) GetStatus() ResourceAllocationStatus {
	if o == nil {
		var ret ResourceAllocationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VlanAllocation) GetStatusOk() (*ResourceAllocationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VlanAllocation) SetStatus(v ResourceAllocationStatus) {
	o.Status = v
}

// GetVlanId returns the VlanId field value
func (o *VlanAllocation) GetVlanId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value
// and a boolean to check if the value has been set.
func (o *VlanAllocation) GetVlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanId, true
}

// SetVlanId sets field value
func (o *VlanAllocation) SetVlanId(v int32) {
	o.VlanId = v
}

func (o VlanAllocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VlanAllocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["scope"] = o.Scope
	toSerialize["status"] = o.Status
	toSerialize["vlanId"] = o.VlanId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VlanAllocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"scope",
		"status",
		"vlanId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVlanAllocation := _VlanAllocation{}

	err = json.Unmarshal(data, &varVlanAllocation)

	if err != nil {
		return err
	}

	*o = VlanAllocation(varVlanAllocation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "scope")
		delete(additionalProperties, "status")
		delete(additionalProperties, "vlanId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVlanAllocation struct {
	value *VlanAllocation
	isSet bool
}

func (v NullableVlanAllocation) Get() *VlanAllocation {
	return v.value
}

func (v *NullableVlanAllocation) Set(val *VlanAllocation) {
	v.value = val
	v.isSet = true
}

func (v NullableVlanAllocation) IsSet() bool {
	return v.isSet
}

func (v *NullableVlanAllocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVlanAllocation(val *VlanAllocation) *NullableVlanAllocation {
	return &NullableVlanAllocation{value: val, isSet: true}
}

func (v NullableVlanAllocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVlanAllocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


