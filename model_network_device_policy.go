/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the NetworkDevicePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkDevicePolicy{}

// NetworkDevicePolicy struct for NetworkDevicePolicy
type NetworkDevicePolicy struct {
	// Whether zero-touch registration is enabled
	ZeroTouchRegistrationEnabled bool `json:"zeroTouchRegistrationEnabled"`
	// Whether gNMI subscription is enabled
	GNMISubscriptionEnabled bool `json:"gNMISubscriptionEnabled"`
	// Whether syslog monitoring is enabled
	SyslogMonitoringEnabled bool `json:"syslogMonitoringEnabled"`
	// Whether leaf switches have MLAG pairs
	LeafSwitchesHaveMlagPairs bool `json:"leafSwitchesHaveMlagPairs"`
	// Minimum number of spines needed to bootstrap leafs
	MinimumNumberOfSpinesNeededToBootstrapLeafs float32 `json:"minimumNumberOfSpinesNeededToBootstrapLeafs"`
	AdditionalProperties map[string]interface{}
}

type _NetworkDevicePolicy NetworkDevicePolicy

// NewNetworkDevicePolicy instantiates a new NetworkDevicePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkDevicePolicy(zeroTouchRegistrationEnabled bool, gNMISubscriptionEnabled bool, syslogMonitoringEnabled bool, leafSwitchesHaveMlagPairs bool, minimumNumberOfSpinesNeededToBootstrapLeafs float32) *NetworkDevicePolicy {
	this := NetworkDevicePolicy{}
	this.ZeroTouchRegistrationEnabled = zeroTouchRegistrationEnabled
	this.GNMISubscriptionEnabled = gNMISubscriptionEnabled
	this.SyslogMonitoringEnabled = syslogMonitoringEnabled
	this.LeafSwitchesHaveMlagPairs = leafSwitchesHaveMlagPairs
	this.MinimumNumberOfSpinesNeededToBootstrapLeafs = minimumNumberOfSpinesNeededToBootstrapLeafs
	return &this
}

// NewNetworkDevicePolicyWithDefaults instantiates a new NetworkDevicePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkDevicePolicyWithDefaults() *NetworkDevicePolicy {
	this := NetworkDevicePolicy{}
	return &this
}

// GetZeroTouchRegistrationEnabled returns the ZeroTouchRegistrationEnabled field value
func (o *NetworkDevicePolicy) GetZeroTouchRegistrationEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ZeroTouchRegistrationEnabled
}

// GetZeroTouchRegistrationEnabledOk returns a tuple with the ZeroTouchRegistrationEnabled field value
// and a boolean to check if the value has been set.
func (o *NetworkDevicePolicy) GetZeroTouchRegistrationEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZeroTouchRegistrationEnabled, true
}

// SetZeroTouchRegistrationEnabled sets field value
func (o *NetworkDevicePolicy) SetZeroTouchRegistrationEnabled(v bool) {
	o.ZeroTouchRegistrationEnabled = v
}

// GetGNMISubscriptionEnabled returns the GNMISubscriptionEnabled field value
func (o *NetworkDevicePolicy) GetGNMISubscriptionEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.GNMISubscriptionEnabled
}

// GetGNMISubscriptionEnabledOk returns a tuple with the GNMISubscriptionEnabled field value
// and a boolean to check if the value has been set.
func (o *NetworkDevicePolicy) GetGNMISubscriptionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GNMISubscriptionEnabled, true
}

// SetGNMISubscriptionEnabled sets field value
func (o *NetworkDevicePolicy) SetGNMISubscriptionEnabled(v bool) {
	o.GNMISubscriptionEnabled = v
}

// GetSyslogMonitoringEnabled returns the SyslogMonitoringEnabled field value
func (o *NetworkDevicePolicy) GetSyslogMonitoringEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SyslogMonitoringEnabled
}

// GetSyslogMonitoringEnabledOk returns a tuple with the SyslogMonitoringEnabled field value
// and a boolean to check if the value has been set.
func (o *NetworkDevicePolicy) GetSyslogMonitoringEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyslogMonitoringEnabled, true
}

// SetSyslogMonitoringEnabled sets field value
func (o *NetworkDevicePolicy) SetSyslogMonitoringEnabled(v bool) {
	o.SyslogMonitoringEnabled = v
}

// GetLeafSwitchesHaveMlagPairs returns the LeafSwitchesHaveMlagPairs field value
func (o *NetworkDevicePolicy) GetLeafSwitchesHaveMlagPairs() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LeafSwitchesHaveMlagPairs
}

// GetLeafSwitchesHaveMlagPairsOk returns a tuple with the LeafSwitchesHaveMlagPairs field value
// and a boolean to check if the value has been set.
func (o *NetworkDevicePolicy) GetLeafSwitchesHaveMlagPairsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeafSwitchesHaveMlagPairs, true
}

// SetLeafSwitchesHaveMlagPairs sets field value
func (o *NetworkDevicePolicy) SetLeafSwitchesHaveMlagPairs(v bool) {
	o.LeafSwitchesHaveMlagPairs = v
}

// GetMinimumNumberOfSpinesNeededToBootstrapLeafs returns the MinimumNumberOfSpinesNeededToBootstrapLeafs field value
func (o *NetworkDevicePolicy) GetMinimumNumberOfSpinesNeededToBootstrapLeafs() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MinimumNumberOfSpinesNeededToBootstrapLeafs
}

// GetMinimumNumberOfSpinesNeededToBootstrapLeafsOk returns a tuple with the MinimumNumberOfSpinesNeededToBootstrapLeafs field value
// and a boolean to check if the value has been set.
func (o *NetworkDevicePolicy) GetMinimumNumberOfSpinesNeededToBootstrapLeafsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumNumberOfSpinesNeededToBootstrapLeafs, true
}

// SetMinimumNumberOfSpinesNeededToBootstrapLeafs sets field value
func (o *NetworkDevicePolicy) SetMinimumNumberOfSpinesNeededToBootstrapLeafs(v float32) {
	o.MinimumNumberOfSpinesNeededToBootstrapLeafs = v
}

func (o NetworkDevicePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkDevicePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["zeroTouchRegistrationEnabled"] = o.ZeroTouchRegistrationEnabled
	toSerialize["gNMISubscriptionEnabled"] = o.GNMISubscriptionEnabled
	toSerialize["syslogMonitoringEnabled"] = o.SyslogMonitoringEnabled
	toSerialize["leafSwitchesHaveMlagPairs"] = o.LeafSwitchesHaveMlagPairs
	toSerialize["minimumNumberOfSpinesNeededToBootstrapLeafs"] = o.MinimumNumberOfSpinesNeededToBootstrapLeafs

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkDevicePolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zeroTouchRegistrationEnabled",
		"gNMISubscriptionEnabled",
		"syslogMonitoringEnabled",
		"leafSwitchesHaveMlagPairs",
		"minimumNumberOfSpinesNeededToBootstrapLeafs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkDevicePolicy := _NetworkDevicePolicy{}

	err = json.Unmarshal(data, &varNetworkDevicePolicy)

	if err != nil {
		return err
	}

	*o = NetworkDevicePolicy(varNetworkDevicePolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "zeroTouchRegistrationEnabled")
		delete(additionalProperties, "gNMISubscriptionEnabled")
		delete(additionalProperties, "syslogMonitoringEnabled")
		delete(additionalProperties, "leafSwitchesHaveMlagPairs")
		delete(additionalProperties, "minimumNumberOfSpinesNeededToBootstrapLeafs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkDevicePolicy struct {
	value *NetworkDevicePolicy
	isSet bool
}

func (v NullableNetworkDevicePolicy) Get() *NetworkDevicePolicy {
	return v.value
}

func (v *NullableNetworkDevicePolicy) Set(val *NetworkDevicePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkDevicePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkDevicePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkDevicePolicy(val *NetworkDevicePolicy) *NullableNetworkDevicePolicy {
	return &NullableNetworkDevicePolicy{value: val, isSet: true}
}

func (v NullableNetworkDevicePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkDevicePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


