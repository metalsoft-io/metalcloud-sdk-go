/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ServerDefaultCredentialsCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerDefaultCredentialsCredentials{}

// ServerDefaultCredentialsCredentials struct for ServerDefaultCredentialsCredentials
type ServerDefaultCredentialsCredentials struct {
	// The default username of the server
	DefaultUsername string `json:"defaultUsername"`
	// The default password of the server
	DefaultPassword string `json:"defaultPassword"`
	AdditionalProperties map[string]interface{}
}

type _ServerDefaultCredentialsCredentials ServerDefaultCredentialsCredentials

// NewServerDefaultCredentialsCredentials instantiates a new ServerDefaultCredentialsCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerDefaultCredentialsCredentials(defaultUsername string, defaultPassword string) *ServerDefaultCredentialsCredentials {
	this := ServerDefaultCredentialsCredentials{}
	this.DefaultUsername = defaultUsername
	this.DefaultPassword = defaultPassword
	return &this
}

// NewServerDefaultCredentialsCredentialsWithDefaults instantiates a new ServerDefaultCredentialsCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerDefaultCredentialsCredentialsWithDefaults() *ServerDefaultCredentialsCredentials {
	this := ServerDefaultCredentialsCredentials{}
	return &this
}

// GetDefaultUsername returns the DefaultUsername field value
func (o *ServerDefaultCredentialsCredentials) GetDefaultUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultUsername
}

// GetDefaultUsernameOk returns a tuple with the DefaultUsername field value
// and a boolean to check if the value has been set.
func (o *ServerDefaultCredentialsCredentials) GetDefaultUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultUsername, true
}

// SetDefaultUsername sets field value
func (o *ServerDefaultCredentialsCredentials) SetDefaultUsername(v string) {
	o.DefaultUsername = v
}

// GetDefaultPassword returns the DefaultPassword field value
func (o *ServerDefaultCredentialsCredentials) GetDefaultPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultPassword
}

// GetDefaultPasswordOk returns a tuple with the DefaultPassword field value
// and a boolean to check if the value has been set.
func (o *ServerDefaultCredentialsCredentials) GetDefaultPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultPassword, true
}

// SetDefaultPassword sets field value
func (o *ServerDefaultCredentialsCredentials) SetDefaultPassword(v string) {
	o.DefaultPassword = v
}

func (o ServerDefaultCredentialsCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerDefaultCredentialsCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["defaultUsername"] = o.DefaultUsername
	toSerialize["defaultPassword"] = o.DefaultPassword

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServerDefaultCredentialsCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"defaultUsername",
		"defaultPassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerDefaultCredentialsCredentials := _ServerDefaultCredentialsCredentials{}

	err = json.Unmarshal(data, &varServerDefaultCredentialsCredentials)

	if err != nil {
		return err
	}

	*o = ServerDefaultCredentialsCredentials(varServerDefaultCredentialsCredentials)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "defaultUsername")
		delete(additionalProperties, "defaultPassword")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServerDefaultCredentialsCredentials struct {
	value *ServerDefaultCredentialsCredentials
	isSet bool
}

func (v NullableServerDefaultCredentialsCredentials) Get() *ServerDefaultCredentialsCredentials {
	return v.value
}

func (v *NullableServerDefaultCredentialsCredentials) Set(val *ServerDefaultCredentialsCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableServerDefaultCredentialsCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableServerDefaultCredentialsCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerDefaultCredentialsCredentials(val *ServerDefaultCredentialsCredentials) *NullableServerDefaultCredentialsCredentials {
	return &NullableServerDefaultCredentialsCredentials{value: val, isSet: true}
}

func (v NullableServerDefaultCredentialsCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerDefaultCredentialsCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


