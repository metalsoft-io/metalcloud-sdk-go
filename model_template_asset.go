/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the TemplateAsset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateAsset{}

// TemplateAsset struct for TemplateAsset
type TemplateAsset struct {
	// The template asset ID
	Id int32 `json:"id"`
	// The ID of the OS template that this template asset belongs to
	TemplateId int32 `json:"templateId"`
	// The template asset usage:         - build_source_image: The template asset represents the source image, used as the base image for constructing the install image.         - build_component: The template asset represents the file that will be part of the install image.         - switch_ztp_config: The template asset represents the switch ZTP configuration.         - metadata_source_image: The template asset contains data about the install image.         - generic: The template asset is used for generic purposes.
	Usage string `json:"usage"`
	File TemplateAssetFile `json:"file"`
	// The tags associated with the template asset
	Tags []string `json:"tags,omitempty"`
	// The revision number of the template asset
	Revision int32 `json:"revision"`
	// The user ID of the user who created the template asset
	CreatedBy int32 `json:"createdBy"`
	// The user ID of the user who last modified the template asset
	ModifiedBy *int32 `json:"modifiedBy,omitempty"`
	// The date and time the template asset was created
	CreatedAt time.Time `json:"createdAt"`
	// The date and time the template asset was last modified
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
	// Reference links
	Links []Link `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TemplateAsset TemplateAsset

// NewTemplateAsset instantiates a new TemplateAsset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateAsset(id int32, templateId int32, usage string, file TemplateAssetFile, revision int32, createdBy int32, createdAt time.Time) *TemplateAsset {
	this := TemplateAsset{}
	this.Id = id
	this.TemplateId = templateId
	this.Usage = usage
	this.File = file
	this.Revision = revision
	this.CreatedBy = createdBy
	this.CreatedAt = createdAt
	return &this
}

// NewTemplateAssetWithDefaults instantiates a new TemplateAsset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateAssetWithDefaults() *TemplateAsset {
	this := TemplateAsset{}
	return &this
}

// GetId returns the Id field value
func (o *TemplateAsset) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TemplateAsset) SetId(v int32) {
	o.Id = v
}

// GetTemplateId returns the TemplateId field value
func (o *TemplateAsset) GetTemplateId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetTemplateIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemplateId, true
}

// SetTemplateId sets field value
func (o *TemplateAsset) SetTemplateId(v int32) {
	o.TemplateId = v
}

// GetUsage returns the Usage field value
func (o *TemplateAsset) GetUsage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetUsageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *TemplateAsset) SetUsage(v string) {
	o.Usage = v
}

// GetFile returns the File field value
func (o *TemplateAsset) GetFile() TemplateAssetFile {
	if o == nil {
		var ret TemplateAssetFile
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetFileOk() (*TemplateAssetFile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *TemplateAsset) SetFile(v TemplateAssetFile) {
	o.File = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TemplateAsset) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TemplateAsset) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *TemplateAsset) SetTags(v []string) {
	o.Tags = v
}

// GetRevision returns the Revision field value
func (o *TemplateAsset) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *TemplateAsset) SetRevision(v int32) {
	o.Revision = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *TemplateAsset) GetCreatedBy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetCreatedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *TemplateAsset) SetCreatedBy(v int32) {
	o.CreatedBy = v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise.
func (o *TemplateAsset) GetModifiedBy() int32 {
	if o == nil || IsNil(o.ModifiedBy) {
		var ret int32
		return ret
	}
	return *o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetModifiedByOk() (*int32, bool) {
	if o == nil || IsNil(o.ModifiedBy) {
		return nil, false
	}
	return o.ModifiedBy, true
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *TemplateAsset) HasModifiedBy() bool {
	if o != nil && !IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given int32 and assigns it to the ModifiedBy field.
func (o *TemplateAsset) SetModifiedBy(v int32) {
	o.ModifiedBy = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TemplateAsset) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TemplateAsset) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *TemplateAsset) GetModifiedAt() time.Time {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *TemplateAsset) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *TemplateAsset) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TemplateAsset) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAsset) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TemplateAsset) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *TemplateAsset) SetLinks(v []Link) {
	o.Links = v
}

func (o TemplateAsset) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateAsset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["templateId"] = o.TemplateId
	toSerialize["usage"] = o.Usage
	toSerialize["file"] = o.File
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["revision"] = o.Revision
	toSerialize["createdBy"] = o.CreatedBy
	if !IsNil(o.ModifiedBy) {
		toSerialize["modifiedBy"] = o.ModifiedBy
	}
	toSerialize["createdAt"] = o.CreatedAt
	if !IsNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TemplateAsset) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"templateId",
		"usage",
		"file",
		"revision",
		"createdBy",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTemplateAsset := _TemplateAsset{}

	err = json.Unmarshal(data, &varTemplateAsset)

	if err != nil {
		return err
	}

	*o = TemplateAsset(varTemplateAsset)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "templateId")
		delete(additionalProperties, "usage")
		delete(additionalProperties, "file")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "revision")
		delete(additionalProperties, "createdBy")
		delete(additionalProperties, "modifiedBy")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "modifiedAt")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTemplateAsset struct {
	value *TemplateAsset
	isSet bool
}

func (v NullableTemplateAsset) Get() *TemplateAsset {
	return v.value
}

func (v *NullableTemplateAsset) Set(val *TemplateAsset) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateAsset(val *TemplateAsset) *NullableTemplateAsset {
	return &NullableTemplateAsset{value: val, isSet: true}
}

func (v NullableTemplateAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


