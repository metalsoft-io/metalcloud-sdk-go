/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ExtensionDnsRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionDnsRecord{}

// ExtensionDnsRecord struct for ExtensionDnsRecord
type ExtensionDnsRecord struct {
	// DNS name, allows the use of placeholder variables
	Name string `json:"name"`
	// The type of DNS record (e.g., A, AAAA, CNAME, NS, PTR, TXT, SOA) to create
	RecordType DNSRecordType `json:"recordType"`
	// Whether to generate a PTR record for this DNS record
	GeneratePtrRecord *bool `json:"generatePtrRecord,omitempty"`
	// CNAME aliases for the DNS record
	Aliases []string `json:"aliases,omitempty"`
	// TTL (Time to Live) for the DNS Record Set.
	Ttl *int32 `json:"ttl,omitempty"`
	// The tags associated with the DNS Record Set
	Tags *map[string]string `json:"tags,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExtensionDnsRecord ExtensionDnsRecord

// NewExtensionDnsRecord instantiates a new ExtensionDnsRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionDnsRecord(name string, recordType DNSRecordType) *ExtensionDnsRecord {
	this := ExtensionDnsRecord{}
	this.Name = name
	this.RecordType = recordType
	var generatePtrRecord bool = false
	this.GeneratePtrRecord = &generatePtrRecord
	var ttl int32 = 3600
	this.Ttl = &ttl
	return &this
}

// NewExtensionDnsRecordWithDefaults instantiates a new ExtensionDnsRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionDnsRecordWithDefaults() *ExtensionDnsRecord {
	this := ExtensionDnsRecord{}
	var generatePtrRecord bool = false
	this.GeneratePtrRecord = &generatePtrRecord
	var ttl int32 = 3600
	this.Ttl = &ttl
	return &this
}

// GetName returns the Name field value
func (o *ExtensionDnsRecord) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExtensionDnsRecord) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExtensionDnsRecord) SetName(v string) {
	o.Name = v
}

// GetRecordType returns the RecordType field value
func (o *ExtensionDnsRecord) GetRecordType() DNSRecordType {
	if o == nil {
		var ret DNSRecordType
		return ret
	}

	return o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value
// and a boolean to check if the value has been set.
func (o *ExtensionDnsRecord) GetRecordTypeOk() (*DNSRecordType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordType, true
}

// SetRecordType sets field value
func (o *ExtensionDnsRecord) SetRecordType(v DNSRecordType) {
	o.RecordType = v
}

// GetGeneratePtrRecord returns the GeneratePtrRecord field value if set, zero value otherwise.
func (o *ExtensionDnsRecord) GetGeneratePtrRecord() bool {
	if o == nil || IsNil(o.GeneratePtrRecord) {
		var ret bool
		return ret
	}
	return *o.GeneratePtrRecord
}

// GetGeneratePtrRecordOk returns a tuple with the GeneratePtrRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDnsRecord) GetGeneratePtrRecordOk() (*bool, bool) {
	if o == nil || IsNil(o.GeneratePtrRecord) {
		return nil, false
	}
	return o.GeneratePtrRecord, true
}

// HasGeneratePtrRecord returns a boolean if a field has been set.
func (o *ExtensionDnsRecord) HasGeneratePtrRecord() bool {
	if o != nil && !IsNil(o.GeneratePtrRecord) {
		return true
	}

	return false
}

// SetGeneratePtrRecord gets a reference to the given bool and assigns it to the GeneratePtrRecord field.
func (o *ExtensionDnsRecord) SetGeneratePtrRecord(v bool) {
	o.GeneratePtrRecord = &v
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *ExtensionDnsRecord) GetAliases() []string {
	if o == nil || IsNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDnsRecord) GetAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *ExtensionDnsRecord) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *ExtensionDnsRecord) SetAliases(v []string) {
	o.Aliases = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *ExtensionDnsRecord) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDnsRecord) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *ExtensionDnsRecord) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *ExtensionDnsRecord) SetTtl(v int32) {
	o.Ttl = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ExtensionDnsRecord) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionDnsRecord) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ExtensionDnsRecord) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *ExtensionDnsRecord) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o ExtensionDnsRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionDnsRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["recordType"] = o.RecordType
	if !IsNil(o.GeneratePtrRecord) {
		toSerialize["generatePtrRecord"] = o.GeneratePtrRecord
	}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExtensionDnsRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"recordType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtensionDnsRecord := _ExtensionDnsRecord{}

	err = json.Unmarshal(data, &varExtensionDnsRecord)

	if err != nil {
		return err
	}

	*o = ExtensionDnsRecord(varExtensionDnsRecord)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "recordType")
		delete(additionalProperties, "generatePtrRecord")
		delete(additionalProperties, "aliases")
		delete(additionalProperties, "ttl")
		delete(additionalProperties, "tags")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExtensionDnsRecord struct {
	value *ExtensionDnsRecord
	isSet bool
}

func (v NullableExtensionDnsRecord) Get() *ExtensionDnsRecord {
	return v.value
}

func (v *NullableExtensionDnsRecord) Set(val *ExtensionDnsRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionDnsRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionDnsRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionDnsRecord(val *ExtensionDnsRecord) *NullableExtensionDnsRecord {
	return &NullableExtensionDnsRecord{value: val, isSet: true}
}

func (v NullableExtensionDnsRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionDnsRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


