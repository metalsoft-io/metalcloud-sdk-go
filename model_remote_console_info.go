/*
MetalSoft REST API

MetalSoft REST API documentation

API version: 2.0
Contact: support@metalsoft.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the RemoteConsoleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteConsoleInfo{}

// RemoteConsoleInfo struct for RemoteConsoleInfo
type RemoteConsoleInfo struct {
	// Active Remote Console connections
	ActiveConnections float32 `json:"activeConnections"`
	AdditionalProperties map[string]interface{}
}

type _RemoteConsoleInfo RemoteConsoleInfo

// NewRemoteConsoleInfo instantiates a new RemoteConsoleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteConsoleInfo(activeConnections float32) *RemoteConsoleInfo {
	this := RemoteConsoleInfo{}
	this.ActiveConnections = activeConnections
	return &this
}

// NewRemoteConsoleInfoWithDefaults instantiates a new RemoteConsoleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteConsoleInfoWithDefaults() *RemoteConsoleInfo {
	this := RemoteConsoleInfo{}
	return &this
}

// GetActiveConnections returns the ActiveConnections field value
func (o *RemoteConsoleInfo) GetActiveConnections() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ActiveConnections
}

// GetActiveConnectionsOk returns a tuple with the ActiveConnections field value
// and a boolean to check if the value has been set.
func (o *RemoteConsoleInfo) GetActiveConnectionsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveConnections, true
}

// SetActiveConnections sets field value
func (o *RemoteConsoleInfo) SetActiveConnections(v float32) {
	o.ActiveConnections = v
}

func (o RemoteConsoleInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteConsoleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["activeConnections"] = o.ActiveConnections

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RemoteConsoleInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"activeConnections",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoteConsoleInfo := _RemoteConsoleInfo{}

	err = json.Unmarshal(data, &varRemoteConsoleInfo)

	if err != nil {
		return err
	}

	*o = RemoteConsoleInfo(varRemoteConsoleInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "activeConnections")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRemoteConsoleInfo struct {
	value *RemoteConsoleInfo
	isSet bool
}

func (v NullableRemoteConsoleInfo) Get() *RemoteConsoleInfo {
	return v.value
}

func (v *NullableRemoteConsoleInfo) Set(val *RemoteConsoleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteConsoleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteConsoleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteConsoleInfo(val *RemoteConsoleInfo) *NullableRemoteConsoleInfo {
	return &NullableRemoteConsoleInfo{value: val, isSet: true}
}

func (v NullableRemoteConsoleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteConsoleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


